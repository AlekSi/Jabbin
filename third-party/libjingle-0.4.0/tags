!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ACK_DELAY	talk/p2p/base/pseudotcp.cc	/^const uint32 ACK_DELAY =   100; \/\/ 100 milliseconds$/;"	v
ACLOCAL	talk/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/base/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/examples/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/examples/call/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/examples/login/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/examples/pcp/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/p2p/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/p2p/base/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/p2p/client/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/session/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/session/fileshare/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/session/phone/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/session/tunnel/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/third_party/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/third_party/gips/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/third_party/mediastreamer/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/xmllite/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL	talk/xmpp/Makefile	/^ACLOCAL = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run aclocal-1.9$/;"	m
ACLOCAL_M4	talk/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/base/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/examples/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/examples/call/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/examples/login/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/examples/pcp/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/p2p/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/p2p/base/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/p2p/client/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/session/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/session/fileshare/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/session/phone/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/session/tunnel/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/third_party/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/third_party/gips/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/third_party/mediastreamer/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/xmllite/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	talk/xmpp/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ALAW_DECODER_RMAXGRAN	talk/third_party/mediastreamer/msAlawdec.h	61;"	d
ALAW_DECODER_WMAXGRAN	talk/third_party/mediastreamer/msAlawdec.h	60;"	d
ALAW_ENCODER_RMAXGRAN	talk/third_party/mediastreamer/msAlawenc.h	61;"	d
ALAW_ENCODER_WMAXGRAN	talk/third_party/mediastreamer/msAlawenc.h	60;"	d
ALAWinfo	talk/third_party/mediastreamer/msAlawdec.c	/^MSCodecInfo ALAWinfo={$/;"	v
ALLOCATE_DELAY	talk/p2p/client/basicportallocator.cc	/^const uint32 ALLOCATE_DELAY = 250;$/;"	v
ALLOCATION_STEP_DELAY	talk/p2p/client/basicportallocator.cc	/^const uint32 ALLOCATION_STEP_DELAY = 1 * 1000;$/;"	v
ALSA_LIBS	talk/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/base/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/examples/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/examples/call/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/examples/login/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/examples/pcp/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/p2p/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/p2p/base/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/p2p/client/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/session/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/session/fileshare/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/session/phone/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/session/tunnel/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/third_party/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/third_party/gips/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/third_party/mediastreamer/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/xmllite/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_LIBS	talk/xmpp/Makefile	/^ALSA_LIBS = -lasound$/;"	m
ALSA_PCM_NEW_HW_PARAMS_API	talk/third_party/mediastreamer/alsacard.h	25;"	d
AMDEP_FALSE	talk/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/base/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/examples/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/examples/call/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/examples/login/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/examples/pcp/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/p2p/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/p2p/base/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/p2p/client/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/session/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/session/fileshare/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/session/phone/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/session/tunnel/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/third_party/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/third_party/gips/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/third_party/mediastreamer/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/xmllite/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_FALSE	talk/xmpp/Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_TRUE	talk/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/base/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/examples/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/examples/call/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/examples/login/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/examples/pcp/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/p2p/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/p2p/base/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/p2p/client/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/session/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/session/fileshare/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/session/phone/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/session/tunnel/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/third_party/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/third_party/gips/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/third_party/mediastreamer/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/xmllite/Makefile	/^AMDEP_TRUE = $/;"	m
AMDEP_TRUE	talk/xmpp/Makefile	/^AMDEP_TRUE = $/;"	m
AMTAR	talk/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/base/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/examples/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/examples/call/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/examples/login/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/examples/pcp/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/p2p/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/p2p/base/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/p2p/client/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/session/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/session/fileshare/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/session/phone/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/session/tunnel/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/third_party/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/third_party/gips/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/third_party/mediastreamer/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/xmllite/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AMTAR	talk/xmpp/Makefile	/^AMTAR = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run tar$/;"	m
AM_CFLAGS	talk/third_party/mediastreamer/Makefile	/^AM_CFLAGS = $(GLIB_CFLAGS) -D__ALSA_ENABLED__ -DHAVE_ALSA_ASOUNDLIB_H -DG_LOG_DOMAIN=\\"MediaStreamer\\" $(ORTP_CFLAGS) $(IPV6_CFLAGS) $(ILBC_CFLAGS) $(SPEEX_CFLAGS)$/;"	m
AM_CPPFLAGS	talk/examples/call/Makefile	/^AM_CPPFLAGS = -DPOSIX$/;"	m
AM_CPPFLAGS	talk/examples/login/Makefile	/^AM_CPPFLAGS = -DPOSIX$/;"	m
AM_CPPFLAGS	talk/examples/pcp/Makefile	/^AM_CPPFLAGS = -DPOSIX$/;"	m
AM_CPPFLAGS	talk/p2p/base/Makefile	/^AM_CPPFLAGS = -DPOSIX -DENABLE_DEBUG -D_DEBUG -g$/;"	m
AM_CPPFLAGS	talk/p2p/client/Makefile	/^AM_CPPFLAGS = -I..\/..\/.. -DLINUX -DPOSIX -DINTERNAL_BUILD$/;"	m
AM_CPPFLAGS	talk/session/fileshare/Makefile	/^AM_CPPFLAGS := -DPOSIX $/;"	m
AM_CPPFLAGS	talk/session/phone/Makefile	/^AM_CPPFLAGS := -DPOSIX $(ORTP_CFLAGS) $(ILBC_CFLAGS) -I$(top_srcdir)\/talk\/third_party\/mediastreamer $(GLIB_CFLAGS)$/;"	m
AM_CPPFLAGS	talk/xmllite/Makefile	/^AM_CPPFLAGS = -DPOSIX$/;"	m
AM_CPPFLAGS	talk/xmpp/Makefile	/^AM_CPPFLAGS = -DPOSIX$/;"	m
AM_CXXFLAGS	talk/base/Makefile	/^AM_CXXFLAGS = -DPOSIX$/;"	m
AM_CXXFLAGS	talk/session/tunnel/Makefile	/^AM_CXXFLAGS = -DPOSIX$/;"	m
AR	Makefile	/^AR       = ar cqs$/;"	m
AR	talk/Makefile	/^AR = ar$/;"	m
AR	talk/base/Makefile	/^AR = ar$/;"	m
AR	talk/examples/Makefile	/^AR = ar$/;"	m
AR	talk/examples/call/Makefile	/^AR = ar$/;"	m
AR	talk/examples/login/Makefile	/^AR = ar$/;"	m
AR	talk/examples/pcp/Makefile	/^AR = ar$/;"	m
AR	talk/p2p/Makefile	/^AR = ar$/;"	m
AR	talk/p2p/base/Makefile	/^AR = ar$/;"	m
AR	talk/p2p/client/Makefile	/^AR = ar$/;"	m
AR	talk/session/Makefile	/^AR = ar$/;"	m
AR	talk/session/fileshare/Makefile	/^AR = ar$/;"	m
AR	talk/session/phone/Makefile	/^AR = ar$/;"	m
AR	talk/session/tunnel/Makefile	/^AR = ar$/;"	m
AR	talk/third_party/Makefile	/^AR = ar$/;"	m
AR	talk/third_party/gips/Makefile	/^AR = ar$/;"	m
AR	talk/third_party/mediastreamer/Makefile	/^AR = ar$/;"	m
AR	talk/xmllite/Makefile	/^AR = ar$/;"	m
AR	talk/xmpp/Makefile	/^AR = ar$/;"	m
ARRAY_SIZE	talk/base/basicdefs.h	35;"	d
ARRAY_SIZE	talk/base/common.h	58;"	d
ASCII_CLASS	talk/base/stringencode.cc	/^const unsigned char ASCII_CLASS[128] = {$/;"	v
ASSERT	talk/base/common.h	88;"	d
ASSERT	talk/base/common.h	98;"	d
AUTOCONF	talk/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/base/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/examples/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/examples/call/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/examples/login/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/examples/pcp/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/p2p/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/p2p/base/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/p2p/client/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/session/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/session/fileshare/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/session/phone/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/session/tunnel/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/third_party/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/third_party/gips/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/third_party/mediastreamer/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/xmllite/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOCONF	talk/xmpp/Makefile	/^AUTOCONF = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoconf$/;"	m
AUTOHEADER	talk/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/base/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/examples/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/examples/call/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/examples/login/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/examples/pcp/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/p2p/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/p2p/base/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/p2p/client/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/session/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/session/fileshare/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/session/phone/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/session/tunnel/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/third_party/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/third_party/gips/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/third_party/mediastreamer/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/xmllite/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOHEADER	talk/xmpp/Makefile	/^AUTOHEADER = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run autoheader$/;"	m
AUTOMAKE	talk/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/base/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/examples/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/examples/call/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/examples/login/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/examples/pcp/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/p2p/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/p2p/base/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/p2p/client/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/session/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/session/fileshare/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/session/phone/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/session/tunnel/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/third_party/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/third_party/gips/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/third_party/mediastreamer/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/xmllite/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTOMAKE	talk/xmpp/Makefile	/^AUTOMAKE = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run automake-1.9$/;"	m
AUTO_GAIN_CONTROL	talk/session/phone/mediaengine.h	/^     AUTO_GAIN_CONTROL = 1 << 1,$/;"	e	enum:cricket::MediaEngine::MediaEngineOptions
AWK	talk/Makefile	/^AWK = gawk$/;"	m
AWK	talk/base/Makefile	/^AWK = gawk$/;"	m
AWK	talk/examples/Makefile	/^AWK = gawk$/;"	m
AWK	talk/examples/call/Makefile	/^AWK = gawk$/;"	m
AWK	talk/examples/login/Makefile	/^AWK = gawk$/;"	m
AWK	talk/examples/pcp/Makefile	/^AWK = gawk$/;"	m
AWK	talk/p2p/Makefile	/^AWK = gawk$/;"	m
AWK	talk/p2p/base/Makefile	/^AWK = gawk$/;"	m
AWK	talk/p2p/client/Makefile	/^AWK = gawk$/;"	m
AWK	talk/session/Makefile	/^AWK = gawk$/;"	m
AWK	talk/session/fileshare/Makefile	/^AWK = gawk$/;"	m
AWK	talk/session/phone/Makefile	/^AWK = gawk$/;"	m
AWK	talk/session/tunnel/Makefile	/^AWK = gawk$/;"	m
AWK	talk/third_party/Makefile	/^AWK = gawk$/;"	m
AWK	talk/third_party/gips/Makefile	/^AWK = gawk$/;"	m
AWK	talk/third_party/mediastreamer/Makefile	/^AWK = gawk$/;"	m
AWK	talk/xmllite/Makefile	/^AWK = gawk$/;"	m
AWK	talk/xmpp/Makefile	/^AWK = gawk$/;"	m
Abort	talk/base/task.cc	/^void Task::Abort(bool nowake) {$/;"	f	class:talk_base::Task
AbortAllChildren	talk/base/task.cc	/^void Task::AbortAllChildren() {$/;"	f	class:talk_base::Task
Accept	talk/base/asyncsocket.h	/^  virtual Socket *Accept(SocketAddress *paddr) { return socket_->Accept(paddr); }$/;"	f	class:talk_base::AsyncSocketAdapter
Accept	talk/base/firewallsocketserver.cc	/^  virtual Socket * Accept(SocketAddress *paddr) {$/;"	f	class:talk_base::FirewallSocket
Accept	talk/base/natsocketfactory.cc	/^  Socket* Accept(SocketAddress *paddr) {$/;"	f	class:talk_base::NATSocket
Accept	talk/base/physicalsocketserver.cc	/^  Socket* Accept(SocketAddress *paddr) {$/;"	f	class:talk_base::PhysicalSocket
Accept	talk/base/virtualsocketserver.cc	/^  Socket* Accept(SocketAddress *paddr) {$/;"	f	class:talk_base::VirtualSocket
Accept	talk/base/win32socketserver.cc	/^Win32Socket::Accept(talk_base::SocketAddress *paddr) {$/;"	f	class:talk_base::Win32Socket
Accept	talk/p2p/base/session.cc	/^bool Session::Accept(const SessionDescription *description) {$/;"	f	class:cricket::Session
Accept	talk/session/fileshare/fileshare.cc	/^FileShareSession::Accept() {$/;"	f	class:cricket::FileShareSession
AcceptSession	talk/session/phone/call.cc	/^void Call::AcceptSession(Session *session) {$/;"	f	class:cricket::Call
AcceptTunnel	talk/session/tunnel/tunnelsessionclient.cc	/^talk_base::StreamInterface* TunnelSessionClient::AcceptTunnel($/;"	f	class:cricket::TunnelSessionClient
Accumulate	talk/base/virtualsocketserver.cc	/^VirtualSocketServer::Function* VirtualSocketServer::Accumulate(Function* f) {$/;"	f	class:talk_base::VirtualSocketServer
Add	talk/base/messagequeue.cc	/^void MessageQueueManager::Add(MessageQueue *message_queue) {$/;"	f	class:talk_base::MessageQueueManager
Add	talk/base/physicalsocketserver.cc	/^void PhysicalSocketServer::Add(Dispatcher *pdispatcher) {$/;"	f	class:talk_base::PhysicalSocketServer
Add	talk/base/proxydetect.cc	/^  void Add(const char * name, const char * value) { map_[name] = value; }$/;"	f	struct:StringMap
Add	talk/base/thread.cc	/^void ThreadManager::Add(Thread *thread) {$/;"	f	class:talk_base::ThreadManager
Add	talk/xmllite/qname.cc	/^Add(const std::string & ns, const char * local) {$/;"	f	namespace:buzz	file:
AddAddress	talk/p2p/base/port.cc	/^void Port::AddAddress(const talk_base::SocketAddress& address,$/;"	f	class:cricket::Port
AddAllocatedPort	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::AddAllocatedPort(Port* port,$/;"	f	class:cricket::BasicPortAllocatorSession
AddAllocatorSession	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::AddAllocatorSession(PortAllocatorSession* session) {$/;"	f	class:cricket::P2PTransportChannel
AddApplication	talk/base/winfirewall.cc	/^WinFirewall::AddApplication(const char * filename, const char * friendly_name,$/;"	f	class:talk_base::WinFirewall
AddAttr	talk/xmllite/xmlelement.cc	/^XmlElement::AddAttr(const QName & name, const std::string & value) {$/;"	f	class:buzz::XmlElement
AddAttr	talk/xmllite/xmlelement.cc	/^XmlElement::AddAttr(const QName & name, const std::string & value,$/;"	f	class:buzz::XmlElement
AddAttribute	talk/p2p/base/stun.cc	/^void StunMessage::AddAttribute(StunAttribute* attr) {$/;"	f	class:cricket::StunMessage
AddChild	talk/base/task.cc	/^void Task::AddChild(Task *child) {$/;"	f	class:talk_base::Task
AddClient	talk/p2p/base/sessionmanager.cc	/^void SessionManager::AddClient(const std::string& session_type,$/;"	f	class:cricket::SessionManager
AddCodec	talk/session/phone/phonesessionclient.h	/^  void AddCodec(const Codec& codec) { codecs_.push_back(codec); }$/;"	f	class:cricket::PhoneSessionDescription
AddConnection	talk/p2p/base/port.cc	/^void Port::AddConnection(Connection* conn) {$/;"	f	class:cricket::Port
AddConnection	talk/p2p/base/relayserver.cc	/^void RelayServer::AddConnection(RelayServerConnection* conn) {$/;"	f	class:cricket::RelayServer
AddDataPoint	talk/base/network.cc	/^void Network::AddDataPoint(uint32 time, double quality) {$/;"	f	class:talk_base::Network
AddElement	talk/xmllite/xmlelement.cc	/^XmlElement::AddElement(XmlElement *pelChild) {$/;"	f	class:buzz::XmlElement
AddElement	talk/xmllite/xmlelement.cc	/^XmlElement::AddElement(XmlElement *pelChild, int depth) {$/;"	f	class:buzz::XmlElement
AddErrorCode	talk/xmpp/xmppengineimpl_iq.cc	/^AddErrorCode(XmlElement * error_element, XmppStanzaError code) {$/;"	f	namespace:buzz	file:
AddExternalAddress	talk/p2p/base/relayport.cc	/^void RelayPort::AddExternalAddress(const ProtocolAddress& addr) {$/;"	f	class:cricket::RelayPort
AddExternalConnection	talk/p2p/base/relayserver.cc	/^void RelayServerBinding::AddExternalConnection(RelayServerConnection* conn) {$/;"	f	class:cricket::RelayServerBinding
AddExternalSocket	talk/p2p/base/relayserver.cc	/^void RelayServer::AddExternalSocket(talk_base::AsyncPacketSocket* socket) {$/;"	f	class:cricket::RelayServer
AddFile	talk/session/fileshare/fileshare.cc	/^FileShareManifest::AddFile(const std::string& name, size_t size) {$/;"	f	class:cricket::FileShareManifest
AddFilter	talk/base/tarstream.cc	/^bool TarStream::AddFilter(const std::string& pathname) {$/;"	f	class:TarStream
AddFolder	talk/session/fileshare/fileshare.cc	/^FileShareManifest::AddFolder(const std::string& name, size_t size) {$/;"	f	class:cricket::FileShareManifest
AddImage	talk/session/fileshare/fileshare.cc	/^FileShareManifest::AddImage(const std::string& name, size_t size,$/;"	f	class:cricket::FileShareManifest
AddInternalConnection	talk/p2p/base/relayserver.cc	/^void RelayServerBinding::AddInternalConnection(RelayServerConnection* conn) {$/;"	f	class:cricket::RelayServerBinding
AddInternalSocket	talk/p2p/base/relayserver.cc	/^void RelayServer::AddInternalSocket(talk_base::AsyncPacketSocket* socket) {$/;"	f	class:cricket::RelayServer
AddManager	talk/p2p/base/session_unittest.cc	/^  void AddManager(SessionManager* manager) {$/;"	f	struct:MySessionClient
AddNewPrefix	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::AddNewPrefix(const std::string & ns, bool isAttr) {$/;"	f	class:buzz::XmlnsStack
AddParsedText	talk/xmllite/xmlelement.cc	/^XmlElement::AddParsedText(const char * cstr, int len) {$/;"	f	class:buzz::XmlElement
AddParsedText	talk/xmllite/xmlelement.cc	/^XmlText::AddParsedText(const char * buf, int len) {$/;"	f	class:buzz::XmlText
AddPort	talk/p2p/base/session_unittest.cc	/^  void AddPort(Port* port) {$/;"	f	class:TestPortAllocatorSession
AddRef	talk/xmllite/qname.h	/^    void AddRef() { refcount_++; }$/;"	f	class:buzz::QName::Data
AddRef	talk/xmpp/jid.h	/^    void AddRef() { refcount_++; }$/;"	f	class:buzz::Jid::Data
AddRelay	talk/p2p/client/basicportallocator.cc	/^void PortConfiguration::AddRelay(const PortList& ports, float pref_modifier) {$/;"	f	class:cricket::PortConfiguration
AddRule	talk/base/firewallsocketserver.cc	/^void FirewallManager::AddRule(bool allow, FirewallProtocol p, FirewallDirection d, const SocketAddress& addr) {$/;"	f	class:talk_base::FirewallManager
AddRule	talk/base/firewallsocketserver.cc	/^void FirewallSocketServer::AddRule(bool allow, FirewallProtocol p, FirewallDirection d, const SocketAddress& addr) {$/;"	f	class:talk_base::FirewallSocketServer
AddServer	talk/base/firewallsocketserver.cc	/^void FirewallManager::AddServer(FirewallSocketServer * server) {$/;"	f	class:talk_base::FirewallManager
AddServerAddress	talk/p2p/base/relayport.cc	/^void RelayPort::AddServerAddress(const ProtocolAddress& addr) {$/;"	f	class:cricket::RelayPort
AddSession	talk/session/phone/call.cc	/^void Call::AddSession(Session *session) {$/;"	f	class:cricket::Call
AddStanzaHandler	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::AddStanzaHandler(XmppStanzaHandler * stanza_handler,$/;"	f	class:buzz::XmppEngineImpl
AddText	talk/xmllite/xmlelement.cc	/^XmlElement::AddText(const std::string & text) {$/;"	f	class:buzz::XmlElement
AddText	talk/xmllite/xmlelement.cc	/^XmlElement::AddText(const std::string & text, int depth) {$/;"	f	class:buzz::XmlElement
AddText	talk/xmllite/xmlelement.cc	/^XmlText::AddText(const std::string & text) {$/;"	f	class:buzz::XmlText
AddType	talk/p2p/base/stun.cc	/^void StunUInt16ListAttribute::AddType(uint16 value) {$/;"	f	class:cricket::StunUInt16ListAttribute
AddWritablePhase	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocator::AddWritablePhase(int phase) {$/;"	f	class:cricket::BasicPortAllocator
AddXmlns	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::AddXmlns(const std::string & prefix, const std::string & ns) {$/;"	f	class:buzz::XmlnsStack
AddXmppTask	talk/xmpp/xmppclient.cc	/^XmppClient::AddXmppTask(XmppTask * task, XmppEngine::HandlerLevel level) {$/;"	f	class:buzz::XmppClient
AddrCmp	talk/base/natserver.cc	/^AddrCmp::AddrCmp(NAT* nat)$/;"	f	class:talk_base::AddrCmp
AddrCmp	talk/base/natserver.h	/^struct AddrCmp {$/;"	s	namespace:talk_base
Address	talk/base/winping.cc	/^    ULONG   Address;            \/\/ Replying address$/;"	m	struct:talk_base::icmp_echo_reply	file:
AddressMap	talk/base/virtualsocketserver.h	/^  typedef std::map<SocketAddress, VirtualSocket*> AddressMap;$/;"	t	class:talk_base::VirtualSocketServer
AddressMap	talk/p2p/base/port.h	/^  typedef std::map<talk_base::SocketAddress, Connection*> AddressMap;$/;"	t	class:cricket::Port
AddressRestrictedNAT	talk/base/nattypes.cc	/^class AddressRestrictedNAT : public NAT {$/;"	c	namespace:talk_base	file:
AddressSet	talk/base/natserver.h	/^  typedef std::set<SocketAddress,AddrCmp> AddressSet;$/;"	t	class:talk_base::NATServer
AdjustClock	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::AdjustClock(bool clear) {$/;"	f	class:cricket::PseudoTcpChannel
Advance	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::Advance() {$/;"	f	class:buzz::XmppLoginTask
AecImpl	talk/xmpp/xmppengineimpl_iq.cc	/^AecImpl(XmlElement * error_element, const QName & name,$/;"	f	namespace:buzz	file:
AllChildrenDone	talk/base/task.cc	/^bool Task::AllChildrenDone() {$/;"	f	class:talk_base::Task
AllocateOrFind	talk/xmllite/qname.cc	/^AllocateOrFind(const std::string & ns, const char * local) {$/;"	f	namespace:buzz	file:
AllocatePorts	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::AllocatePorts() {$/;"	f	class:cricket::BasicPortAllocatorSession
AllocateRequest	talk/p2p/base/relayport.cc	/^AllocateRequest::AllocateRequest(RelayEntry* entry) : entry_(entry) {$/;"	f	class:cricket::AllocateRequest
AllocateRequest	talk/p2p/base/relayport.cc	/^class AllocateRequest : public StunRequest {$/;"	c	namespace:cricket	file:
AllocationSequence	talk/p2p/client/basicportallocator.cc	/^AllocationSequence::AllocationSequence(BasicPortAllocatorSession* session,$/;"	f	class:cricket::AllocationSequence
AllocationSequence	talk/p2p/client/basicportallocator.cc	/^class AllocationSequence : public talk_base::MessageHandler {$/;"	c	namespace:cricket	file:
AllowedImageDimensions	talk/session/fileshare/fileshare.cc	/^bool AllowedImageDimensions(size_t width, size_t height) {$/;"	f	namespace:__anon29
AlsaCard	talk/third_party/mediastreamer/alsacard.h	/^typedef struct _AlsaCard AlsaCard;$/;"	t	typeref:struct:_AlsaCard
AnyChildError	talk/base/task.cc	/^bool Task::AnyChildError() {$/;"	f	class:talk_base::Task
Append	talk/base/cryptstring.h	/^  void Append(const CryptString * password) {$/;"	f	class:talk_base::FormatCryptString
Append	talk/base/cryptstring.h	/^  void Append(const char * data, size_t length) {$/;"	f	class:talk_base::FormatCryptString
Append	talk/base/cryptstring.h	/^  void Append(const std::string & text) {$/;"	f	class:talk_base::FormatCryptString
AppendFolder	talk/base/pathutils.cc	/^void Pathname::AppendFolder(const std::string& folder) {$/;"	f	class:talk_base::Pathname
AppendPathname	talk/base/pathutils.cc	/^void Pathname::AppendPathname(const Pathname& pathname) {$/;"	f	class:talk_base::Pathname
AsCString	talk/base/convert.h	/^  inline const CString & AsCString() const {$/;"	f	class:Utf16
AsElement	talk/xmllite/xmlelement.h	/^  XmlElement * AsElement() { return AsElementImpl(); }$/;"	f	class:buzz::XmlChild
AsElement	talk/xmllite/xmlelement.h	/^  const XmlElement * AsElement() const { return AsElementImpl(); }$/;"	f	class:buzz::XmlChild
AsElementImpl	talk/xmllite/xmlelement.cc	/^XmlElement::AsElementImpl() const {$/;"	f	class:buzz::XmlElement
AsElementImpl	talk/xmllite/xmlelement.cc	/^XmlText::AsElementImpl() const {$/;"	f	class:buzz::XmlText
AsString	talk/base/convert.h	/^  inline const std::string & AsString() const {$/;"	f	class:Utf8
AsSz	talk/base/convert.h	/^  inline const char * AsSz() const {$/;"	f	class:Utf8
AsText	talk/xmllite/xmlelement.h	/^  XmlText * AsText() { return AsTextImpl(); }$/;"	f	class:buzz::XmlChild
AsText	talk/xmllite/xmlelement.h	/^  const XmlText * AsText() const { return AsTextImpl(); }$/;"	f	class:buzz::XmlChild
AsTextImpl	talk/xmllite/xmlelement.cc	/^XmlElement::AsTextImpl() const {$/;"	f	class:buzz::XmlElement
AsTextImpl	talk/xmllite/xmlelement.cc	/^XmlText::AsTextImpl() const {$/;"	f	class:buzz::XmlText
AsWz	talk/base/convert.h	/^  inline const wchar_t * AsWz() const {$/;"	f	class:Utf16
AsciiLower	talk/xmllite/xmlnsstack.cc	/^static std::string AsciiLower(const std::string & s) {$/;"	f	namespace:buzz	file:
AsciiToLower	talk/xmpp/jid.cc	/^static int AsciiToLower(int x) {$/;"	f	namespace:buzz	file:
Assert	talk/base/common.h	/^inline void Assert(bool result, const char * function, const char * file, int line, const char * expression) {$/;"	f	namespace:talk_base
AsyncFile	talk/base/asyncfile.h	/^class AsyncFile {$/;"	c	namespace:talk_base
AsyncHttpRequest	talk/base/asynchttprequest.cc	/^AsyncHttpRequest::AsyncHttpRequest(const std::string &user_agent)$/;"	f	class:AsyncHttpRequest
AsyncHttpRequest	talk/base/asynchttprequest.h	/^class AsyncHttpRequest:$/;"	c	namespace:talk_base
AsyncHttpsProxySocket	talk/base/socketadapters.cc	/^AsyncHttpsProxySocket::AsyncHttpsProxySocket(AsyncSocket* socket,$/;"	f	class:talk_base::AsyncHttpsProxySocket
AsyncHttpsProxySocket	talk/base/socketadapters.h	/^class AsyncHttpsProxySocket : public BufferedReadAdapter {$/;"	c	namespace:talk_base
AsyncPacketSocket	talk/base/asyncpacketsocket.cc	/^AsyncPacketSocket::AsyncPacketSocket(AsyncSocket* socket) : socket_(socket) {$/;"	f	class:talk_base::AsyncPacketSocket
AsyncPacketSocket	talk/base/asyncpacketsocket.h	/^class AsyncPacketSocket : public sigslot::has_slots<> {$/;"	c	namespace:talk_base
AsyncSSLSocket	talk/base/socketadapters.cc	/^AsyncSSLSocket::AsyncSSLSocket(AsyncSocket* socket) : BufferedReadAdapter(socket, 1024) {$/;"	f	class:talk_base::AsyncSSLSocket
AsyncSSLSocket	talk/base/socketadapters.h	/^class AsyncSSLSocket : public BufferedReadAdapter {$/;"	c	namespace:talk_base
AsyncSocket	talk/base/asyncsocket.h	/^class AsyncSocket : public Socket, public sigslot::has_slots<>  {$/;"	c	namespace:talk_base
AsyncSocket	talk/xmpp/asyncsocket.h	/^class AsyncSocket {$/;"	c	namespace:buzz
AsyncSocketAdapter	talk/base/asyncsocket.h	/^  AsyncSocketAdapter(AsyncSocket * socket) : socket_(socket) {$/;"	f	class:talk_base::AsyncSocketAdapter
AsyncSocketAdapter	talk/base/asyncsocket.h	/^  AsyncSocketAdapter(Socket * socket) : socket_(socket) {$/;"	f	class:talk_base::AsyncSocketAdapter
AsyncSocketAdapter	talk/base/asyncsocket.h	/^class AsyncSocketAdapter : public AsyncSocket {$/;"	c	namespace:talk_base
AsyncSocksProxySocket	talk/base/socketadapters.cc	/^AsyncSocksProxySocket::AsyncSocksProxySocket(AsyncSocket* socket, const SocketAddress& proxy,$/;"	f	class:talk_base::AsyncSocksProxySocket
AsyncSocksProxySocket	talk/base/socketadapters.h	/^class AsyncSocksProxySocket : public BufferedReadAdapter {$/;"	c	namespace:talk_base
AsyncTCPSocket	talk/base/asynctcpsocket.cc	/^AsyncTCPSocket::AsyncTCPSocket(AsyncSocket* socket) : AsyncPacketSocket(socket), insize_(BUF_SIZE), inpos_(0), outsize_(BUF_SIZE), outpos_(0) {$/;"	f	class:talk_base::AsyncTCPSocket
AsyncTCPSocket	talk/base/asynctcpsocket.h	/^class AsyncTCPSocket : public AsyncPacketSocket {$/;"	c	namespace:talk_base
AsyncUDPSocket	talk/base/asyncudpsocket.cc	/^AsyncUDPSocket::AsyncUDPSocket(AsyncSocket* socket) : AsyncPacketSocket(socket) {$/;"	f	class:talk_base::AsyncUDPSocket
AsyncUDPSocket	talk/base/asyncudpsocket.h	/^class AsyncUDPSocket : public AsyncPacketSocket {$/;"	c	namespace:talk_base
Attach	talk/base/socketstream.h	/^  void Attach(AsyncSocket* socket) {$/;"	f	class:talk_base::SocketStream
Attach	talk/base/stream.h	/^  void Attach(StreamInterface* stream) {$/;"	f	class:talk_base::StreamAdapterInterface
Attach	talk/base/win32socketserver.cc	/^Win32Socket::Attach(SOCKET s) {$/;"	f	class:talk_base::Win32Socket
AttachTap	talk/base/stream.cc	/^void StreamTap::AttachTap(StreamInterface* tap) {$/;"	f	class:talk_base::StreamTap
Attr	talk/xmllite/xmlelement.cc	/^XmlElement::Attr(const QName & name) const {$/;"	f	class:buzz::XmlElement
AudioInfo	talk/session/phone/audiomonitor.h	/^struct AudioInfo {$/;"	s	namespace:cricket
AudioMonitor	talk/session/phone/audiomonitor.cc	/^AudioMonitor::AudioMonitor(VoiceChannel *voice_channel, $/;"	f	class:cricket::AudioMonitor
AudioMonitor	talk/session/phone/audiomonitor.h	/^class AudioMonitor : public talk_base::MessageHandler, $/;"	c	namespace:cricket
AudioOptions	talk/session/phone/channelmanager.h	/^  struct AudioOptions {$/;"	s	class:cricket::ChannelManager
AudioStream	talk/third_party/mediastreamer/mediastream.h	/^typedef struct _AudioStream AudioStream;$/;"	t	typeref:struct:_AudioStream
Authorized	talk/base/winfirewall.cc	/^WinFirewall::Authorized(const char * filename, bool * known) {$/;"	f	class:talk_base::WinFirewall
AutoDetectProxy	talk/base/autodetectproxy.cc	/^AutoDetectProxy::AutoDetectProxy(const std::string& user_agent)$/;"	f	class:AutoDetectProxy
AutoDetectProxy	talk/base/autodetectproxy.h	/^class AutoDetectProxy : public SignalThread, public sigslot::has_slots<> {$/;"	c	namespace:talk_base
AutoThread	talk/base/thread.cc	/^AutoThread::AutoThread(SocketServer* ss) : Thread(ss) {$/;"	f	class:talk_base::AutoThread
AutoThread	talk/base/thread.h	/^class AutoThread : public Thread {$/;"	c	namespace:talk_base
BASE64	talk/base/helpers.cc	/^const char BASE64[64] = {$/;"	v
BIO_new_socket	talk/base/openssladapter.cc	/^BIO* BIO_new_socket(talk_base::AsyncSocket* socket) {$/;"	f
BIO_s_socket2	talk/base/openssladapter.cc	/^BIO_METHOD* BIO_s_socket2() { return(&methods_socket); }$/;"	f
BLOCK_SIZE	talk/base/tarstream.h	/^  enum { BLOCK_SIZE = 512 };$/;"	e	enum:talk_base::TarStream::__anon20
BSIZE	talk/third_party/mediastreamer/jackcard.c	35;"	d	file:
BUF_SIZE	talk/base/asynctcpsocket.cc	/^const size_t BUF_SIZE = MAX_PACKET_SIZE + PKT_LEN_SIZE;$/;"	v
BUF_SIZE	talk/base/asyncudpsocket.cc	/^const int BUF_SIZE = 64 * 1024;$/;"	v
BadRequest	talk/p2p/base/transport.cc	/^bool Transport::BadRequest(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Transport
BareEquals	talk/xmpp/jid.cc	/^Jid::BareEquals(const Jid & other) const {$/;"	f	class:buzz::Jid
BareJid	talk/xmpp/jid.cc	/^Jid::BareJid() const {$/;"	f	class:buzz::Jid
Base64	talk/base/base64.h	/^class Base64$/;"	c	namespace:talk_base
Base64Decode	talk/xmpp/saslmechanism.cc	/^SaslMechanism::Base64Decode(const std::string & encoded) {$/;"	f	class:buzz::SaslMechanism
Base64Encode	talk/xmpp/saslmechanism.cc	/^SaslMechanism::Base64Encode(const std::string & plain) {$/;"	f	class:buzz::SaslMechanism
Base64EncodeFromArray	talk/xmpp/saslmechanism.cc	/^SaslMechanism::Base64EncodeFromArray(const char * plain, size_t length) {$/;"	f	class:buzz::SaslMechanism
Base64Table	talk/base/base64.h	/^  static const std::string Base64Table;$/;"	m	class:talk_base::Base64
BasicPortAllocator	talk/p2p/client/basicportallocator.cc	/^BasicPortAllocator::BasicPortAllocator($/;"	f	class:cricket::BasicPortAllocator
BasicPortAllocator	talk/p2p/client/basicportallocator.h	/^class BasicPortAllocator : public PortAllocator {$/;"	c	namespace:cricket
BasicPortAllocatorSession	talk/p2p/client/basicportallocator.cc	/^BasicPortAllocatorSession::BasicPortAllocatorSession($/;"	f	class:cricket::BasicPortAllocatorSession
BasicPortAllocatorSession	talk/p2p/client/basicportallocator.h	/^class BasicPortAllocatorSession: public PortAllocatorSession, $/;"	c	namespace:cricket
BeginCacheFile	talk/base/httpclient.cc	/^bool HttpClient::BeginCacheFile() {$/;"	f	class:talk_base::HttpClient
BeginProcess	talk/base/httpserver.cc	/^HttpServer::Connection::BeginProcess(StreamInterface* stream) {$/;"	f	class:talk_base::HttpServer::Connection
BeginSSL	talk/base/openssladapter.cc	/^OpenSSLAdapter::BeginSSL() {$/;"	f	class:talk_base::OpenSSLAdapter
BeginSSL	talk/base/schanneladapter.cc	/^SChannelAdapter::BeginSSL() {$/;"	f	class:talk_base::SChannelAdapter
Better	talk/base/proxydetect.cc	/^bool Better(ProxyType lhs, const ProxyType rhs) {$/;"	f
Bind	talk/base/asyncpacketsocket.cc	/^int AsyncPacketSocket::Bind(const SocketAddress& addr) {$/;"	f	class:talk_base::AsyncPacketSocket
Bind	talk/base/asyncsocket.h	/^  virtual int Bind(const SocketAddress& addr) { return socket_->Bind(addr); }$/;"	f	class:talk_base::AsyncSocketAdapter
Bind	talk/base/natsocketfactory.cc	/^  int Bind(const SocketAddress& addr) {$/;"	f	class:talk_base::NATSocket
Bind	talk/base/physicalsocketserver.cc	/^  int Bind(const SocketAddress& addr) {$/;"	f	class:talk_base::PhysicalSocket
Bind	talk/base/virtualsocketserver.cc	/^  int Bind(const SocketAddress& addr) {$/;"	f	class:talk_base::VirtualSocket
Bind	talk/base/virtualsocketserver.cc	/^int VirtualSocketServer::Bind($/;"	f	class:talk_base::VirtualSocketServer
Bind	talk/base/virtualsocketserver.cc	/^int VirtualSocketServer::Bind(VirtualSocket* socket, SocketAddress* addr) {$/;"	f	class:talk_base::VirtualSocketServer
Bind	talk/base/win32socketserver.cc	/^Win32Socket::Bind(const talk_base::SocketAddress& addr) {$/;"	f	class:talk_base::Win32Socket
BindingMap	talk/p2p/base/relayserver.h	/^  typedef std::map<std::string,RelayServerBinding*> BindingMap;$/;"	t	class:cricket::RelayServer
Blocked	talk/base/task.h	/^  bool Blocked() const { return blocked_; }$/;"	f	class:talk_base::Task
BodyText	talk/xmllite/xmlelement.cc	/^XmlElement::BodyText() const {$/;"	f	class:buzz::XmlElement
Break	talk/base/common.cc	/^void Break() {$/;"	f	namespace:talk_base
BufferInput	talk/base/socketadapters.cc	/^void BufferedReadAdapter::BufferInput(bool on) {$/;"	f	class:talk_base::BufferedReadAdapter
BufferedReadAdapter	talk/base/socketadapters.cc	/^BufferedReadAdapter::BufferedReadAdapter(AsyncSocket* socket, size_t buffer_size)$/;"	f	class:talk_base::BufferedReadAdapter
BufferedReadAdapter	talk/base/socketadapters.h	/^class BufferedReadAdapter : public AsyncSocketAdapter {$/;"	c	namespace:talk_base
BuildElement	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::BuildElement(XmlParseContext * pctx,$/;"	f	class:buzz::XmlBuilder
BuildMap	talk/base/network.cc	/^void BuildMap(const StrMap& map, std::string& str) {$/;"	f	namespace:__anon24
BuiltElement	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::BuiltElement() {$/;"	f	class:buzz::XmlBuilder
ByteBuffer	talk/base/bytebuffer.cc	/^ByteBuffer::ByteBuffer() {$/;"	f	class:talk_base::ByteBuffer
ByteBuffer	talk/base/bytebuffer.cc	/^ByteBuffer::ByteBuffer(const char* bytes) {$/;"	f	class:talk_base::ByteBuffer
ByteBuffer	talk/base/bytebuffer.cc	/^ByteBuffer::ByteBuffer(const char* bytes, size_t len) {$/;"	f	class:talk_base::ByteBuffer
ByteBuffer	talk/base/bytebuffer.h	/^class ByteBuffer {$/;"	c	namespace:talk_base
CALL_COMMANDS	talk/examples/call/callclient.cc	/^const char* CALL_COMMANDS =$/;"	v
CAPTURE	talk/third_party/mediastreamer/alsacard.c	/^typedef enum {CAPTURE, PLAYBACK, CAPTURE_SWITCH, PLAYBACK_SWITCH} MixerAction;$/;"	e	enum:__anon43	file:
CAPTURE_SWITCH	talk/third_party/mediastreamer/alsacard.c	/^typedef enum {CAPTURE, PLAYBACK, CAPTURE_SWITCH, PLAYBACK_SWITCH} MixerAction;$/;"	e	enum:__anon43	file:
CC	Makefile	/^CC       = gcc$/;"	m
CC	talk/Makefile	/^CC = gcc$/;"	m
CC	talk/base/Makefile	/^CC = gcc$/;"	m
CC	talk/examples/Makefile	/^CC = gcc$/;"	m
CC	talk/examples/call/Makefile	/^CC = gcc$/;"	m
CC	talk/examples/login/Makefile	/^CC = gcc$/;"	m
CC	talk/examples/pcp/Makefile	/^CC = gcc$/;"	m
CC	talk/p2p/Makefile	/^CC = gcc$/;"	m
CC	talk/p2p/base/Makefile	/^CC = gcc$/;"	m
CC	talk/p2p/client/Makefile	/^CC = gcc$/;"	m
CC	talk/session/Makefile	/^CC = gcc$/;"	m
CC	talk/session/fileshare/Makefile	/^CC = gcc$/;"	m
CC	talk/session/phone/Makefile	/^CC = gcc$/;"	m
CC	talk/session/tunnel/Makefile	/^CC = gcc$/;"	m
CC	talk/third_party/Makefile	/^CC = gcc$/;"	m
CC	talk/third_party/gips/Makefile	/^CC = gcc$/;"	m
CC	talk/third_party/mediastreamer/Makefile	/^CC = gcc$/;"	m
CC	talk/xmllite/Makefile	/^CC = gcc$/;"	m
CC	talk/xmpp/Makefile	/^CC = gcc$/;"	m
CCDEPMODE	talk/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/base/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/examples/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/examples/call/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/examples/login/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/examples/pcp/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/p2p/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/p2p/base/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/p2p/client/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/session/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/session/fileshare/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/session/phone/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/session/tunnel/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/third_party/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/third_party/gips/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/third_party/mediastreamer/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/xmllite/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	talk/xmpp/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	talk/base/Makefile	/^CCLD = $(CC)$/;"	m
CCLD	talk/third_party/mediastreamer/Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS   = -pipe -O2 -march=i586 -mtune=i686 -fmessage-length=0 -Wall -D_FORTIFY_SOURCE=2 -g -fno-strict-aliasing -w -g  -DHAVE_XSS -DPOSIX -DQT_SHARED -DQT_NO_DEBUG -DQT_THREAD_SUPPORT$/;"	m
CFLAGS	talk/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/base/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/examples/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/examples/call/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/examples/login/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/examples/pcp/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/p2p/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/p2p/base/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/p2p/client/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/session/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/session/fileshare/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/session/phone/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/session/tunnel/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/third_party/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/third_party/gips/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/third_party/mediastreamer/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/xmllite/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	talk/xmpp/Makefile	/^CFLAGS = -g -O2$/;"	m
CHECK	talk/base/nat_unittest.cc	21;"	d	file:
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
CLOSED_TIMEOUT	talk/p2p/base/pseudotcp.cc	/^const long CLOSED_TIMEOUT = 60 * 1000; \/\/ If the connection is closed, once per minute$/;"	v
COMPILE	talk/base/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	talk/third_party/mediastreamer/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE_TIME_ASSERT	talk/base/common.h	107;"	d
CONFIG_CLEAN_FILES	talk/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/base/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/examples/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/examples/call/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/examples/login/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/examples/pcp/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/p2p/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/p2p/base/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/p2p/client/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/session/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/session/fileshare/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/session/phone/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/session/tunnel/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/third_party/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/third_party/gips/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/third_party/mediastreamer/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/xmllite/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	talk/xmpp/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_HEADER	talk/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/base/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/examples/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/examples/call/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/examples/login/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/examples/pcp/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/p2p/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/p2p/base/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/p2p/client/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/session/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/session/fileshare/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/session/phone/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/session/tunnel/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/third_party/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/third_party/gips/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/third_party/mediastreamer/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/xmllite/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	talk/xmpp/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONNECTION_READ_TIMEOUT	talk/p2p/base/port.cc	/^const uint32 CONNECTION_READ_TIMEOUT = 30 * 1000; \/\/ 30 seconds$/;"	v
CONNECTION_RESPONSE_TIMEOUT	talk/p2p/base/port.cc	/^const int CONNECTION_RESPONSE_TIMEOUT = 5 * 1000; \/\/ 5 seconds$/;"	v
CONNECTION_WRITE_CONNECT_FAILURES	talk/p2p/base/port.cc	/^const uint32 CONNECTION_WRITE_CONNECT_FAILURES = 5;$/;"	v
CONNECTION_WRITE_CONNECT_TIMEOUT	talk/p2p/base/port.cc	/^const uint32 CONNECTION_WRITE_CONNECT_TIMEOUT = 5 * 1000; \/\/ 5 seconds$/;"	v
CONNECTION_WRITE_TIMEOUT	talk/p2p/base/port.cc	/^const uint32 CONNECTION_WRITE_TIMEOUT = 15 * 1000; \/\/ 15 seconds$/;"	v
CONSOLE_COMMANDS	talk/examples/call/callclient.cc	/^const char* CONSOLE_COMMANDS =$/;"	v
COPY	Makefile	/^COPY     = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR = $(COPY) -r$/;"	m
COPY_FILE	Makefile	/^COPY_FILE= $(COPY)$/;"	m
CPP	talk/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/base/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/examples/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/examples/call/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/examples/login/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/examples/pcp/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/p2p/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/p2p/base/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/p2p/client/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/session/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/session/fileshare/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/session/phone/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/session/tunnel/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/third_party/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/third_party/gips/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/third_party/mediastreamer/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/xmllite/Makefile	/^CPP = gcc -E$/;"	m
CPP	talk/xmpp/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	talk/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/base/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/examples/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/examples/call/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/examples/login/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/examples/pcp/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/p2p/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/p2p/base/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/p2p/client/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/session/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/session/fileshare/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/session/phone/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/session/tunnel/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/third_party/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/third_party/gips/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/third_party/mediastreamer/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/xmllite/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	talk/xmpp/Makefile	/^CPPFLAGS = $/;"	m
CRICKET_EXAMPLES_CALL_CALLCLIENT_H__	talk/examples/call/callclient.h	21;"	d
CRICKET_EXAMPLES_CALL_CONSOLE_H__	talk/examples/call/console.h	21;"	d
CRICKET_P2P_BASE_COMMON_H__	talk/p2p/base/common.h	29;"	d
CRYPTO_dynlock_value	talk/base/ssladapter.cc	/^struct CRYPTO_dynlock_value {$/;"	s	file:
CS_CLOSED	talk/base/socket.h	/^    CS_CLOSED,$/;"	e	enum:talk_base::Socket::ConnState
CS_CONNECTED	talk/base/socket.h	/^    CS_CONNECTED$/;"	e	enum:talk_base::Socket::ConnState
CS_CONNECTING	talk/base/socket.h	/^    CS_CONNECTING,$/;"	e	enum:talk_base::Socket::ConnState
CS_READING	talk/base/httpclient.h	/^  enum CacheState { CS_READY, CS_WRITING, CS_READING, CS_VALIDATING };$/;"	e	enum:talk_base::HttpClient::CacheState
CS_READY	talk/base/httpclient.h	/^  enum CacheState { CS_READY, CS_WRITING, CS_READING, CS_VALIDATING };$/;"	e	enum:talk_base::HttpClient::CacheState
CS_TRACK_OWNER	talk/base/criticalsection.h	40;"	d
CS_VALIDATING	talk/base/httpclient.h	/^  enum CacheState { CS_READY, CS_WRITING, CS_READING, CS_VALIDATING };$/;"	e	enum:talk_base::HttpClient::CacheState
CS_WRITING	talk/base/httpclient.h	/^  enum CacheState { CS_READY, CS_WRITING, CS_READING, CS_VALIDATING };$/;"	e	enum:talk_base::HttpClient::CacheState
CSecBuffer	talk/base/sec_buffer.h	/^  CSecBuffer() {$/;"	f	class:talk_base::CSecBuffer
CSecBuffer	talk/base/sec_buffer.h	/^class CSecBuffer: public CSecBufferBase {$/;"	c	namespace:talk_base
CSecBufferBase	talk/base/sec_buffer.h	/^  CSecBufferBase() {$/;"	f	class:talk_base::CSecBufferBase
CSecBufferBase	talk/base/sec_buffer.h	/^class CSecBufferBase : public SecBuffer {$/;"	c	namespace:talk_base
CSecBufferBundle	talk/base/sec_buffer.h	/^  CSecBufferBundle() {$/;"	f	class:talk_base::CSecBufferBundle
CSecBufferBundle	talk/base/sec_buffer.h	/^class CSecBufferBundle : public SecBufferBundleBase {$/;"	c	namespace:talk_base
CTAGS	talk/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/base/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/examples/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/examples/call/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/examples/login/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/examples/pcp/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/p2p/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/p2p/base/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/p2p/client/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/session/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/session/fileshare/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/session/phone/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/session/tunnel/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/third_party/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/third_party/mediastreamer/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/xmllite/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	talk/xmpp/Makefile	/^CTAGS = ctags$/;"	m
CTA_MAKE_NAME	talk/base/common.h	109;"	d
CTA_MAKE_NAME2	talk/base/common.h	110;"	d
CTA_UNIQUE_NAME	talk/base/common.h	108;"	d
CTL_CONNECT	talk/p2p/base/pseudotcp.cc	/^const uint8 CTL_CONNECT = 0;$/;"	v
CTL_EXTRA	talk/p2p/base/pseudotcp.cc	/^const uint8 CTL_EXTRA = 255;$/;"	v
CTRL_BOUND	talk/p2p/base/pseudotcp.cc	/^const uint32 CTRL_BOUND = 0x80000000;$/;"	v
CXX	Makefile	/^CXX      = g++$/;"	m
CXX	talk/Makefile	/^CXX = g++$/;"	m
CXX	talk/base/Makefile	/^CXX = g++$/;"	m
CXX	talk/examples/Makefile	/^CXX = g++$/;"	m
CXX	talk/examples/call/Makefile	/^CXX = g++$/;"	m
CXX	talk/examples/login/Makefile	/^CXX = g++$/;"	m
CXX	talk/examples/pcp/Makefile	/^CXX = g++$/;"	m
CXX	talk/p2p/Makefile	/^CXX = g++$/;"	m
CXX	talk/p2p/base/Makefile	/^CXX = g++$/;"	m
CXX	talk/p2p/client/Makefile	/^CXX = g++$/;"	m
CXX	talk/session/Makefile	/^CXX = g++$/;"	m
CXX	talk/session/fileshare/Makefile	/^CXX = g++$/;"	m
CXX	talk/session/phone/Makefile	/^CXX = g++$/;"	m
CXX	talk/session/tunnel/Makefile	/^CXX = g++$/;"	m
CXX	talk/third_party/Makefile	/^CXX = g++$/;"	m
CXX	talk/third_party/gips/Makefile	/^CXX = g++$/;"	m
CXX	talk/third_party/mediastreamer/Makefile	/^CXX = g++$/;"	m
CXX	talk/xmllite/Makefile	/^CXX = g++$/;"	m
CXX	talk/xmpp/Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	talk/base/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/examples/call/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/examples/login/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/examples/pcp/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/p2p/base/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/p2p/client/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/session/fileshare/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/session/phone/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/session/tunnel/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/xmllite/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	talk/xmpp/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	talk/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/base/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/examples/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/examples/call/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/examples/login/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/examples/pcp/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/p2p/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/p2p/base/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/p2p/client/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/session/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/session/fileshare/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/session/phone/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/session/tunnel/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/third_party/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/third_party/gips/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/third_party/mediastreamer/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/xmllite/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXCPP	talk/xmpp/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	talk/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/base/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/examples/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/examples/call/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/examples/login/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/examples/pcp/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/p2p/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/p2p/base/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/p2p/client/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/session/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/session/fileshare/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/session/phone/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/session/tunnel/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/third_party/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/third_party/gips/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/third_party/mediastreamer/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/xmllite/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	talk/xmpp/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -pipe -O2 -march=i586 -mtune=i686 -fmessage-length=0 -Wall -D_FORTIFY_SOURCE=2 -g -fno-strict-aliasing -O0 -g3 -w -g  -DHAVE_XSS -DPOSIX -DQT_SHARED -DQT_NO_DEBUG -DQT_THREAD_SUPPORT$/;"	m
CXXFLAGS	talk/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/base/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/examples/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/examples/call/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/examples/login/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/examples/pcp/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/p2p/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/p2p/base/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/p2p/client/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/session/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/session/fileshare/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/session/phone/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/session/tunnel/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/third_party/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/third_party/gips/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/third_party/mediastreamer/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/xmllite/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXFLAGS	talk/xmpp/Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	talk/base/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/examples/call/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/examples/login/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/examples/pcp/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/p2p/base/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/p2p/client/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/session/fileshare/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/session/phone/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/session/tunnel/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/xmllite/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	talk/xmpp/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	talk/base/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/examples/call/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/examples/login/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/examples/pcp/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/p2p/base/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/p2p/client/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/session/fileshare/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/session/phone/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/session/tunnel/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/xmllite/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CXXLINK	talk/xmpp/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \\$/;"	m
CYGPATH_W	talk/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/base/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/examples/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/examples/call/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/examples/login/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/examples/pcp/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/p2p/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/p2p/base/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/p2p/client/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/session/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/session/fileshare/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/session/phone/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/session/tunnel/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/third_party/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/third_party/gips/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/third_party/mediastreamer/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/xmllite/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	talk/xmpp/Makefile	/^CYGPATH_W = echo$/;"	m
CacheLock	talk/base/diskcache.h	/^  CacheLock(DiskCache* cache, const std::string& id, bool rollback = false)$/;"	f	class:talk_base::CacheLock
CacheLock	talk/base/diskcache.h	/^class CacheLock {$/;"	c	namespace:talk_base
CacheState	talk/base/httpclient.h	/^  enum CacheState { CS_READY, CS_WRITING, CS_READING, CS_VALIDATING };$/;"	g	class:talk_base::HttpClient
Call	talk/session/phone/call.cc	/^Call::Call(PhoneSessionClient *session_client) $/;"	f	class:cricket::Call
Call	talk/session/phone/call.h	/^class Call : public talk_base::MessageHandler, public sigslot::has_slots<> {$/;"	c	namespace:cricket
CallChannels_w	talk/p2p/base/transport.cc	/^void Transport::CallChannels_w(TransportChannelFunc func) {$/;"	f	class:cricket::Transport
CallClient	talk/examples/call/callclient.cc	/^CallClient::CallClient(buzz::XmppClient* xmpp_client)$/;"	f	class:CallClient
CallClient	talk/examples/call/callclient.h	/^class CallClient: public sigslot::has_slots<> {$/;"	c
Cancel	talk/session/fileshare/fileshare.cc	/^FileShareSession::Cancel() {$/;"	f	class:cricket::FileShareSession
Candidate	talk/p2p/base/candidate.h	/^class Candidate {$/;"	c	namespace:cricket
CandidateOrigin	talk/p2p/base/port.h	/^  enum CandidateOrigin { ORIGIN_THIS_PORT, ORIGIN_OTHER_PORT, ORIGIN_MESSAGE };$/;"	g	class:cricket::Port
Capacity	talk/base/bytebuffer.h	/^  size_t Capacity() { return size_ - start_; }$/;"	f	class:talk_base::ByteBuffer
CaptchaChallenge	talk/xmpp/prexmppauth.h	/^  CaptchaChallenge() : captcha_needed_(false) {}$/;"	f	class:buzz::CaptchaChallenge
CaptchaChallenge	talk/xmpp/prexmppauth.h	/^  CaptchaChallenge(const std::string& token, const std::string& url) $/;"	f	class:buzz::CaptchaChallenge
CaptchaChallenge	talk/xmpp/prexmppauth.h	/^class CaptchaChallenge {$/;"	c	namespace:buzz
ChangeState	talk/session/phone/voicechannel.cc	/^void VoiceChannel::ChangeState() {$/;"	f	class:cricket::VoiceChannel
ChannelHandler	talk/p2p/base/session_unittest.cc	/^  ChannelHandler(TransportChannel* p)$/;"	f	struct:ChannelHandler
ChannelHandler	talk/p2p/base/session_unittest.cc	/^struct ChannelHandler : sigslot::has_slots<> {$/;"	s	file:
ChannelManager	talk/session/phone/channelmanager.cc	/^ChannelManager::ChannelManager(talk_base::Thread *worker_thread) {$/;"	f	class:cricket::ChannelManager
ChannelManager	talk/session/phone/channelmanager.h	/^class ChannelManager : public talk_base::MessageHandler {$/;"	c	namespace:cricket
ChannelMap	talk/p2p/base/session.h	/^  typedef std::map<std::string, TransportChannelProxy*> ChannelMap;$/;"	t	class:cricket::Session
ChannelMap	talk/p2p/base/transport.h	/^  typedef std::map<std::string, TransportChannelImpl*> ChannelMap;$/;"	t	class:cricket::Transport
ChannelMessage	talk/p2p/base/transport.cc	/^typedef talk_base::TypedMessageData<ChannelParams*> ChannelMessage;$/;"	t	namespace:__anon3	file:
ChannelNotWritable_w	talk/session/phone/voicechannel.cc	/^void VoiceChannel::ChannelNotWritable_w() {$/;"	f	class:cricket::VoiceChannel
ChannelParams	talk/p2p/base/transport.cc	/^  ChannelParams() : channel(NULL), elem(NULL) {}$/;"	f	struct:__anon3::ChannelParams
ChannelParams	talk/p2p/base/transport.cc	/^struct ChannelParams {$/;"	s	namespace:__anon3	file:
ChannelWritable_w	talk/session/phone/voicechannel.cc	/^void VoiceChannel::ChannelWritable_w() {$/;"	f	class:cricket::VoiceChannel
CharacterData	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::CharacterData(XmlParseContext * pctx,$/;"	f	class:buzz::XmlBuilder
CharacterData	talk/xmpp/xmppstanzaparser.h	/^    virtual void CharacterData(XmlParseContext * pctx,$/;"	f	class:buzz::XmppStanzaParser::ParseHandler
CharacterDataCallback	talk/xmllite/xmlparser.cc	/^CharacterDataCallback(void * userData, const char *text, int len) {$/;"	f	namespace:buzz	file:
CharacterTransformation	talk/base/stringutils.h	/^typedef wchar_t(*CharacterTransformation)(wchar_t);$/;"	t	namespace:talk_base
Check	talk/base/firewallsocketserver.cc	/^bool FirewallSocketServer::Check(FirewallProtocol p, FirewallDirection d, const SocketAddress& addr) {$/;"	f	class:talk_base::FirewallSocketServer
Check	talk/base/nat_unittest.cc	/^void Check(int result, const char* desc) {$/;"	f
CheckCache	talk/base/httpclient.cc	/^bool HttpClient::CheckCache() {$/;"	f	class:talk_base::HttpClient
CheckDestroy	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::CheckDestroy() {$/;"	f	class:cricket::PseudoTcpChannel
CheckFilter	talk/base/tarstream.cc	/^bool TarStream::CheckFilter(const std::string& pathname) {$/;"	f	class:TarStream
CheckLimit	talk/base/diskcache.cc	/^bool DiskCache::CheckLimit() {$/;"	f	class:talk_base::DiskCache
CheckNextPacket	talk/base/testclient.cc	/^void TestClient::CheckNextPacket($/;"	f	class:talk_base::TestClient
CheckNextStanza	talk/p2p/base/session_unittest.cc	/^  XmlElement* CheckNextStanza(const std::string& expected) {$/;"	f	struct:SessionManagerHandler
CheckNoPacket	talk/base/testclient.cc	/^void TestClient::CheckNoPacket() {$/;"	f	class:talk_base::TestClient
CheckNoStanza	talk/p2p/base/session_unittest.cc	/^  void CheckNoStanza() {$/;"	f	struct:SessionManagerHandler
CheckReceive	talk/base/nat_unittest.cc	/^void CheckReceive($/;"	f
CheckResponse	talk/p2p/base/stunrequest.cc	/^bool StunRequestManager::CheckResponse(StunMessage* msg) {$/;"	f	class:cricket::StunRequestManager
CheckResponse	talk/p2p/base/stunrequest.cc	/^bool StunRequestManager::CheckResponse(const char* data, size_t size) {$/;"	f	class:cricket::StunRequestManager
CheckSignalClose	talk/base/physicalsocketserver.cc	/^  virtual bool CheckSignalClose() { return false; }$/;"	f	class:talk_base::EventDispatcher
CheckSignalClose	talk/base/physicalsocketserver.cc	/^  virtual bool CheckSignalClose() {$/;"	f	class:talk_base::SocketDispatcher
CheckState	talk/p2p/base/session.cc	/^bool Session::CheckState(const buzz::XmlElement* stanza, State state) {$/;"	f	class:cricket::Session
CheckTest	talk/base/nat_unittest.cc	/^void CheckTest(bool act_val, bool exp_val, std::string desc) {$/;"	f
CheckTimeout	talk/p2p/base/port.cc	/^void Connection::CheckTimeout() {$/;"	f	class:cricket::Connection
CheckTimeout	talk/p2p/base/port.cc	/^void Port::CheckTimeout() {$/;"	f	class:cricket::Port
ChildSet	talk/base/task.h	/^  typedef std::set<Task *> ChildSet;$/;"	t	class:talk_base::Task
ChooseBestSaslMechanism	talk/examples/login/xmppauth.cc	/^std::string XmppAuth::ChooseBestSaslMechanism($/;"	f	class:XmppAuth
ChooseBestSaslMechanism	talk/xmpp/plainsaslhandler.h	/^  virtual std::string ChooseBestSaslMechanism(const std::vector<std::string> & mechanisms, bool encrypted) {$/;"	f	class:buzz::PlainSaslHandler
ChooseBestSaslMechanism	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::ChooseBestSaslMechanism(const std::vector<std::string> & mechanisms, bool encrypted) {$/;"	f	class:buzz::XmppEngineImpl
ChooseTransport	talk/p2p/base/session.cc	/^bool Session::ChooseTransport(const buzz::XmlElement* stanza) {$/;"	f	class:cricket::Session
Circulate	talk/base/streamutils.cc	/^StreamRelay::Circulate() {$/;"	f	class:StreamRelay
Cleanup	talk/base/openssladapter.cc	/^OpenSSLAdapter::Cleanup() {$/;"	f	class:talk_base::OpenSSLAdapter
Cleanup	talk/base/schanneladapter.cc	/^SChannelAdapter::Cleanup() {$/;"	f	class:talk_base::SChannelAdapter
CleanupSSL	talk/base/ssladapter.cc	/^bool CleanupSSL() {$/;"	f	namespace:talk_base
CleanupTemporaryFolder	talk/base/pathutils.cc	/^bool CleanupTemporaryFolder() {$/;"	f	namespace:talk_base
Clear	talk/base/cryptstring.h	/^  void Clear() { impl_.reset(new EmptyCryptStringImpl()); }$/;"	f	class:talk_base::CryptString
Clear	talk/base/messagequeue.cc	/^void MessageQueue::Clear(MessageHandler *phandler, uint32 id) {$/;"	f	class:talk_base::MessageQueue
Clear	talk/base/messagequeue.cc	/^void MessageQueueManager::Clear(MessageHandler *handler) {$/;"	f	class:talk_base::MessageQueueManager
Clear	talk/base/sec_buffer.h	/^  void Clear() {$/;"	f	class:talk_base::CSecBufferBase
Clear	talk/base/socketaddress.cc	/^void SocketAddress::Clear() {$/;"	f	class:talk_base::SocketAddress
Clear	talk/base/thread.cc	/^void Thread::Clear(MessageHandler *phandler, uint32 id) {$/;"	f	class:talk_base::Thread
Clear	talk/p2p/base/stunrequest.cc	/^void StunRequestManager::Clear() {$/;"	f	class:cricket::StunRequestManager
ClearAttr	talk/xmllite/xmlelement.cc	/^XmlElement::ClearAttr(const QName & name) {$/;"	f	class:buzz::XmlElement
ClearChildren	talk/xmllite/xmlelement.cc	/^XmlElement::ClearChildren() {$/;"	f	class:buzz::XmlElement
ClearNamedChildren	talk/xmllite/xmlelement.cc	/^XmlElement::ClearNamedChildren(const QName & name) {$/;"	f	class:buzz::XmlElement
ClearRules	talk/base/firewallsocketserver.cc	/^void FirewallManager::ClearRules() {$/;"	f	class:talk_base::FirewallManager
ClearRules	talk/base/firewallsocketserver.cc	/^void FirewallSocketServer::ClearRules() {$/;"	f	class:talk_base::FirewallSocketServer
ClearTimeout	talk/base/task.cc	/^void Task::ClearTimeout() {$/;"	f	class:talk_base::Task
ClientMap	talk/p2p/base/sessionmanager.h	/^  typedef std::map<std::string, SessionClient*> ClientMap;$/;"	t	class:cricket::SessionManager
Close	talk/base/asyncpacketsocket.cc	/^int AsyncPacketSocket::Close() {$/;"	f	class:talk_base::AsyncPacketSocket
Close	talk/base/asyncsocket.h	/^  virtual int Close() { return socket_->Close(); }$/;"	f	class:talk_base::AsyncSocketAdapter
Close	talk/base/httpserver.cc	/^HttpServer::Close(int connection_id, bool force) {$/;"	f	class:talk_base::HttpServer
Close	talk/base/natsocketfactory.cc	/^  int Close() {$/;"	f	class:talk_base::NATSocket
Close	talk/base/openssladapter.cc	/^OpenSSLAdapter::Close() {$/;"	f	class:talk_base::OpenSSLAdapter
Close	talk/base/physicalsocketserver.cc	/^  int Close() {$/;"	f	class:talk_base::PhysicalSocket
Close	talk/base/physicalsocketserver.cc	/^  virtual int Close() {$/;"	f	class:talk_base::SocketDispatcher
Close	talk/base/schanneladapter.cc	/^SChannelAdapter::Close() {$/;"	f	class:talk_base::SChannelAdapter
Close	talk/base/socketadapters.cc	/^int AsyncHttpsProxySocket::Close() {$/;"	f	class:talk_base::AsyncHttpsProxySocket
Close	talk/base/socketstream.h	/^  virtual void Close() { ASSERT(socket_ != NULL); socket_->Close(); }$/;"	f	class:talk_base::SocketStream
Close	talk/base/stream.cc	/^void FileStream::Close() {$/;"	f	class:talk_base::FileStream
Close	talk/base/stream.cc	/^void LoggingAdapter::Close() {$/;"	f	class:talk_base::LoggingAdapter
Close	talk/base/stream.cc	/^void MemoryStream::Close() {$/;"	f	class:talk_base::MemoryStream
Close	talk/base/stream.cc	/^void NullStream::Close() {$/;"	f	class:talk_base::NullStream
Close	talk/base/stream.cc	/^void StringStream::Close() {$/;"	f	class:talk_base::StringStream
Close	talk/base/stream.h	/^  virtual void Close() {$/;"	f	class:talk_base::StreamAdapterInterface
Close	talk/base/streamutils.cc	/^StreamRelay::Close() {$/;"	f	class:StreamRelay
Close	talk/base/tarstream.cc	/^void TarStream::Close() {$/;"	f	class:TarStream
Close	talk/base/virtualsocketserver.cc	/^  int Close() {$/;"	f	class:talk_base::VirtualSocket
Close	talk/base/win32socketserver.cc	/^Win32Socket::Close() {$/;"	f	class:talk_base::Win32Socket
Close	talk/examples/login/xmppsocket.cc	/^bool XmppSocket::Close() {$/;"	f	class:XmppSocket
Close	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::Close(bool force) {$/;"	f	class:cricket::PseudoTcp
Close	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::Close() {$/;"	f	class:cricket::PseudoTcpChannel
Close	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::InternalStream::Close() {$/;"	f	class:cricket::PseudoTcpChannel::InternalStream
CloseAll	talk/base/httpserver.cc	/^HttpServer::CloseAll(bool force) {$/;"	f	class:talk_base::HttpServer
CloseConnection	talk/xmpp/xmppclient.cc	/^XmppClient::Private::CloseConnection() {$/;"	f	class:buzz::XmppClient::Private
Codec	talk/session/phone/codec.h	/^  Codec(int pt, const std::string& nm, int cr, int br, int cs, int pr) : $/;"	f	struct:Codec
Codec	talk/session/phone/codec.h	/^struct Codec {$/;"	s
CodecPref	talk/session/phone/gipslitemediaengine.cc	/^struct CodecPref { const char* name; int clockrate; int pref; };$/;"	s	namespace:__anon31	file:
Commit	talk/base/diskcache.h	/^  void Commit() { rollback_ = false; }$/;"	f	class:talk_base::CacheLock
Compare	talk/xmllite/qname.cc	/^QName::Compare(const QName & other) const {$/;"	f	class:buzz::QName
Compare	talk/xmpp/jid.cc	/^Jid::Compare(const Jid & other) const {$/;"	f	class:buzz::Jid
CompareConnectionCandidates	talk/p2p/base/p2ptransportchannel.cc	/^int CompareConnectionCandidates(cricket::Connection* a,$/;"	f	namespace:__anon1
CompareConnections	talk/p2p/base/p2ptransportchannel.cc	/^int CompareConnections(cricket::Connection *a, cricket::Connection *b) {$/;"	f	namespace:__anon1
CompileAsserts	talk/base/sec_buffer.h	/^  void CompileAsserts() {$/;"	f	class:talk_base::CSecBuffer
Complement	talk/base/streamutils.h	/^  inline int Complement(int index) const { return (1-index); }$/;"	f	class:StreamRelay
Complete	talk/base/autodetectproxy.cc	/^void AutoDetectProxy::Complete(talk_base::ProxyType type) {$/;"	f	class:AutoDetectProxy
CompleteCacheFile	talk/base/httpclient.cc	/^void HttpClient::CompleteCacheFile() {$/;"	f	class:talk_base::HttpClient
CompleteValidate	talk/base/httpclient.cc	/^HttpError HttpClient::CompleteValidate() {$/;"	f	class:talk_base::HttpClient
ComputeLameHash	talk/xmpp/jid.cc	/^uint32 Jid::ComputeLameHash() const {$/;"	f	class:buzz::Jid
ConfigReady	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::ConfigReady(PortConfiguration* config) {$/;"	f	class:cricket::BasicPortAllocatorSession
ConnState	talk/base/socket.h	/^  enum ConnState {$/;"	g	class:talk_base::Socket
Connect	talk/base/asynchttprequest.cc	/^void HttpMonitor::Connect(talk_base::HttpClient *http) {$/;"	f	class:HttpMonitor
Connect	talk/base/asyncpacketsocket.cc	/^int AsyncPacketSocket::Connect(const SocketAddress& addr) {$/;"	f	class:talk_base::AsyncPacketSocket
Connect	talk/base/asyncsocket.h	/^  virtual int Connect(const SocketAddress& addr) {return socket_->Connect(addr); }$/;"	f	class:talk_base::AsyncSocketAdapter
Connect	talk/base/firewallsocketserver.cc	/^  virtual int Connect(const SocketAddress& addr) {$/;"	f	class:talk_base::FirewallSocket
Connect	talk/base/natsocketfactory.cc	/^  int Connect(const SocketAddress& addr) {$/;"	f	class:talk_base::NATSocket
Connect	talk/base/physicalsocketserver.cc	/^  int Connect(const SocketAddress& addr) {$/;"	f	class:talk_base::PhysicalSocket
Connect	talk/base/socketadapters.cc	/^int AsyncHttpsProxySocket::Connect(const SocketAddress& addr) {$/;"	f	class:talk_base::AsyncHttpsProxySocket
Connect	talk/base/socketadapters.cc	/^int AsyncSSLSocket::Connect(const SocketAddress& addr) {$/;"	f	class:talk_base::AsyncSSLSocket
Connect	talk/base/socketadapters.cc	/^int AsyncSocksProxySocket::Connect(const SocketAddress& addr) {$/;"	f	class:talk_base::AsyncSocksProxySocket
Connect	talk/base/virtualsocketserver.cc	/^  int Connect(const SocketAddress& addr) {$/;"	f	class:talk_base::VirtualSocket
Connect	talk/base/win32socketserver.cc	/^Win32Socket::Connect(const talk_base::SocketAddress& addr) {$/;"	f	class:talk_base::Win32Socket
Connect	talk/examples/login/xmppsocket.cc	/^bool XmppSocket::Connect(const talk_base::SocketAddress& addr) {$/;"	f	class:XmppSocket
Connect	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::Connect() {$/;"	f	class:cricket::P2PTransportChannel
Connect	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::Connect() {$/;"	f	class:cricket::PseudoTcp
Connect	talk/p2p/base/rawtransportchannel.cc	/^void RawTransportChannel::Connect() {$/;"	f	class:cricket::RawTransportChannel
Connect	talk/p2p/base/relayport.cc	/^void RelayEntry::Connect() {$/;"	f	class:cricket::RelayEntry
Connect	talk/session/tunnel/pseudotcpchannel.cc	/^bool PseudoTcpChannel::Connect(const std::string& channel_name) {$/;"	f	class:cricket::PseudoTcpChannel
Connect	talk/xmpp/xmppclient.cc	/^XmppClient::Connect(const XmppClientSettings & settings, const std::string & lang, AsyncSocket * socket, PreXmppAuth * pre_auth) {$/;"	f	class:buzz::XmppClient
Connect	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::Connect() {$/;"	f	class:buzz::XmppEngineImpl
ConnectChannels	talk/p2p/base/transport.cc	/^void Transport::ConnectChannels() {$/;"	f	class:cricket::Transport
ConnectChannels_w	talk/p2p/base/transport.cc	/^void Transport::ConnectChannels_w() {$/;"	f	class:cricket::Transport
ConnectDefaultTransportChannels	talk/p2p/base/session.cc	/^void Session::ConnectDefaultTransportChannels(bool create) {$/;"	f	class:cricket::Session
ConnectedList	talk/base/socketpool.h	/^  typedef std::list<ConnectedStream> ConnectedList;$/;"	t	class:talk_base::StreamCache
ConnectedStream	talk/base/socketpool.h	/^  typedef std::pair<SocketAddress, StreamInterface*> ConnectedStream;$/;"	t	class:talk_base::StreamCache
Connection	talk/base/httpserver.cc	/^HttpServer::Connection::Connection(int connection_id, HttpServer* server) $/;"	f	class:talk_base::HttpServer::Connection
Connection	talk/base/httpserver.h	/^  class Connection : private IHttpNotify {$/;"	c	class:talk_base::HttpServer
Connection	talk/p2p/base/port.cc	/^Connection::Connection(Port* port, size_t index, const Candidate& remote_candidate)$/;"	f	class:cricket::Connection
Connection	talk/p2p/base/port.h	/^class Connection : public talk_base::MessageHandler, $/;"	c	namespace:cricket
ConnectionClosed	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::ConnectionClosed(int subcode) {$/;"	f	class:buzz::XmppEngineImpl
ConnectionCompare	talk/p2p/base/p2ptransportchannel.cc	/^class ConnectionCompare {$/;"	c	namespace:__anon1	file:
ConnectionInfo	talk/p2p/client/socketmonitor.h	/^struct ConnectionInfo {$/;"	s	namespace:cricket
ConnectionMap	talk/base/httpserver.h	/^  typedef std::map<int,Connection*> ConnectionMap;$/;"	t	class:talk_base::HttpServer
ConnectionMap	talk/p2p/base/relayserver.h	/^  typedef std::map<talk_base::SocketAddressPair,RelayServerConnection*> ConnectionMap;$/;"	t	class:cricket::RelayServer
ConnectionRequest	talk/p2p/base/port.cc	/^  ConnectionRequest(Connection* connection) : connection_(connection) {$/;"	f	class:cricket::ConnectionRequest
ConnectionRequest	talk/p2p/base/port.cc	/^class ConnectionRequest : public StunRequest {$/;"	c	namespace:cricket	file:
ConservativeRTTEstimate	talk/p2p/base/port.cc	/^inline uint32 ConservativeRTTEstimate(uint32 rtt, uint32 rtt_data_points) {$/;"	f	namespace:__anon11
Console	talk/examples/call/console.cc	/^Console::Console(talk_base::Thread *thread, CallClient *client) : $/;"	f	class:Console
Console	talk/examples/call/console.h	/^class Console : public talk_base::MessageHandler {$/;"	c
ConstantLabel	talk/base/logging.h	/^struct ConstantLabel { int value; const char * label; };$/;"	s	namespace:talk_base
Constants	talk/xmpp/constants.h	/^class Constants {$/;"	c	namespace:buzz
Consume	talk/base/virtualsocketserver.cc	/^  void Consume(size_t size) {$/;"	f	class:talk_base::Packet
ContinueSSL	talk/base/openssladapter.cc	/^OpenSSLAdapter::ContinueSSL() {$/;"	f	class:talk_base::OpenSSLAdapter
ContinueSSL	talk/base/schanneladapter.cc	/^SChannelAdapter::ContinueSSL() {$/;"	f	class:talk_base::SChannelAdapter
ContinueWork	talk/base/signalthread.cc	/^bool SignalThread::ContinueWork() {$/;"	f	class:SignalThread
Copy	talk/base/cryptstring.h	/^  virtual CryptStringImpl * Copy() const { return new EmptyCryptStringImpl(); }$/;"	f	class:talk_base::EmptyCryptStringImpl
Copy	talk/base/cryptstring.h	/^  virtual CryptStringImpl * Copy() const {$/;"	f	class:talk_base::InsecureCryptStringImpl
CopyBytes	talk/p2p/base/stun.cc	/^void StunByteStringAttribute::CopyBytes(const char* bytes) {$/;"	f	class:cricket::StunByteStringAttribute
CopyBytes	talk/p2p/base/stun.cc	/^void StunByteStringAttribute::CopyBytes(const void* bytes, uint16 length) {$/;"	f	class:cricket::StunByteStringAttribute
CopyFile	talk/base/fileutils.cc	/^bool Filesystem::CopyFile(const Pathname &old_path, const Pathname &new_path)$/;"	f	class:talk_base::Filesystem
CopyFileI	talk/base/unixfilesystem.cc	/^bool UnixFilesystem::CopyFileI(const Pathname &old_path, const Pathname &new_path) $/;"	f	class:talk_base::UnixFilesystem
CopyFileI	talk/base/win32filesystem.cc	/^bool Win32Filesystem::CopyFileI(const Pathname &old_path, const Pathname &new_path) $/;"	f	class:talk_base::Win32Filesystem
CopyTo	talk/base/cryptstring.h	/^  virtual void CopyTo(char * dest, bool nullterminate) const {$/;"	f	class:talk_base::EmptyCryptStringImpl
CopyTo	talk/base/cryptstring.h	/^  virtual void CopyTo(char * dest, bool nullterminate) const {$/;"	f	class:talk_base::InsecureCryptStringImpl
CopyTo	talk/base/cryptstring.h	/^  void CopyTo(char * dest, bool nullterminate) const { impl_->CopyTo(dest, nullterminate); }$/;"	f	class:talk_base::CryptString
Create	talk/base/nattypes.cc	/^NAT* NAT::Create(NATType type) {$/;"	f	class:talk_base::NAT
Create	talk/base/physicalsocketserver.cc	/^  virtual bool Create(int type) {$/;"	f	class:talk_base::PhysicalSocket
Create	talk/base/physicalsocketserver.cc	/^  virtual bool Create(int type) {$/;"	f	class:talk_base::SocketDispatcher
Create	talk/base/ssladapter.cc	/^SSLAdapter::Create(AsyncSocket* socket) {$/;"	f	class:talk_base::SSLAdapter
Create	talk/base/win32socketserver.cc	/^Win32Socket::Create(long events) {$/;"	f	class:talk_base::Win32Socket
Create	talk/p2p/base/stun.cc	/^StunAttribute* StunAttribute::Create(uint16 type, uint16 length) {$/;"	f	class:cricket::StunAttribute
Create	talk/xmpp/xmppengineimpl.cc	/^XmppEngine * XmppEngine::Create() {$/;"	f	class:buzz::XmppEngine
CreateAcceptSessionDescription	talk/session/phone/phonesessionclient.cc	/^PhoneSessionDescription* PhoneSessionClient::CreateAcceptSessionDescription(const SessionDescription* offer) {$/;"	f	class:cricket::PhoneSessionClient
CreateAddress	talk/p2p/base/stun.cc	/^StunAddressAttribute* StunAttribute::CreateAddress(uint16 type) {$/;"	f	class:cricket::StunAttribute
CreateAsyncSocket	talk/base/asynchttprequest.cc	/^talk_base::AsyncSocket * SslSocketFactory::CreateAsyncSocket(int type) {$/;"	f	class:SslSocketFactory
CreateAsyncSocket	talk/base/firewallsocketserver.cc	/^AsyncSocket* FirewallSocketServer::CreateAsyncSocket(int type) {$/;"	f	class:talk_base::FirewallSocketServer
CreateAsyncSocket	talk/base/natsocketfactory.cc	/^AsyncSocket* NATSocketFactory::CreateAsyncSocket(int type) {$/;"	f	class:talk_base::NATSocketFactory
CreateAsyncSocket	talk/base/physicalsocketserver.cc	/^AsyncSocket* PhysicalSocketServer::CreateAsyncSocket(int type) {$/;"	f	class:talk_base::PhysicalSocketServer
CreateAsyncSocket	talk/base/virtualsocketserver.cc	/^AsyncSocket* VirtualSocketServer::CreateAsyncSocket(int type) {$/;"	f	class:talk_base::VirtualSocketServer
CreateAsyncSocket	talk/base/win32socketserver.cc	/^AsyncSocket* Win32SocketServer::CreateAsyncSocket(int type) {$/;"	f	class:talk_base::Win32SocketServer
CreateAsyncUDPSocket	talk/base/asyncudpsocket.h	/^inline AsyncUDPSocket* CreateAsyncUDPSocket(SocketFactory* factory) {$/;"	f	namespace:talk_base
CreateByteString	talk/p2p/base/stun.cc	/^StunByteStringAttribute* StunAttribute::CreateByteString(uint16 type) {$/;"	f	class:cricket::StunAttribute
CreateCall	talk/session/phone/phonesessionclient.cc	/^Call *PhoneSessionClient::CreateCall() {$/;"	f	class:cricket::PhoneSessionClient
CreateChannel	talk/p2p/base/session.cc	/^TransportChannel* Session::CreateChannel(const std::string& name) {$/;"	f	class:cricket::Session
CreateChannel	talk/p2p/base/transport.cc	/^TransportChannelImpl* Transport::CreateChannel(const std::string& name, const std::string &session_type) {$/;"	f	class:cricket::Transport
CreateChannel	talk/session/fileshare/fileshare.cc	/^talk_base::StreamInterface* FileShareSession::CreateChannel($/;"	f	class:cricket::FileShareSession
CreateChannel	talk/session/phone/gipslitemediaengine.cc	/^MediaChannel * GipsLiteMediaEngine::CreateChannel() {$/;"	f	class:GipsLiteMediaEngine
CreateChannel	talk/session/phone/linphonemediaengine.cc	/^MediaChannel *LinphoneMediaEngine::CreateChannel() {$/;"	f	class:LinphoneMediaEngine
CreateChannel_w	talk/p2p/base/transport.cc	/^TransportChannelImpl* Transport::CreateChannel_w(const std::string& name, const std::string &session_type) {$/;"	f	class:cricket::Transport
CreateConnection	talk/p2p/base/p2ptransportchannel.cc	/^bool P2PTransportChannel::CreateConnection(Port* port,$/;"	f	class:cricket::P2PTransportChannel
CreateConnection	talk/p2p/base/relayport.cc	/^Connection* RelayPort::CreateConnection(const Candidate& address, CandidateOrigin origin) {$/;"	f	class:cricket::RelayPort
CreateConnection	talk/p2p/base/tcpport.cc	/^Connection* TCPPort::CreateConnection(const Candidate& address,$/;"	f	class:cricket::TCPPort
CreateConnection	talk/p2p/base/udpport.cc	/^Connection* UDPPort::CreateConnection(const Candidate& address, $/;"	f	class:cricket::UDPPort
CreateConnections	talk/p2p/base/p2ptransportchannel.cc	/^bool P2PTransportChannel::CreateConnections(const Candidate &remote_candidate,$/;"	f	class:cricket::P2PTransportChannel
CreateDefaultTransportChannel	talk/p2p/base/session.cc	/^void Session::CreateDefaultTransportChannel(const std::string& name) {$/;"	f	class:cricket::Session
CreateDummyWindow	talk/base/win32socketserver.cc	/^void Win32SocketServer::CreateDummyWindow()$/;"	f	class:talk_base::Win32SocketServer
CreateElement	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::CreateElement() {$/;"	f	class:buzz::XmlBuilder
CreateErrorCode	talk/p2p/base/stun.cc	/^StunErrorCodeAttribute* StunAttribute::CreateErrorCode() {$/;"	f	class:cricket::StunAttribute
CreateErrorMessage	talk/p2p/base/sessionmanager.cc	/^buzz::XmlElement* SessionManager::CreateErrorMessage($/;"	f	class:cricket::SessionManager
CreateFile	talk/base/physicalsocketserver.cc	/^AsyncFile* PhysicalSocketServer::CreateFile(int fd) {$/;"	f	class:talk_base::PhysicalSocketServer
CreateFileShareSession	talk/session/fileshare/fileshare.cc	/^FileShareSession *FileShareSessionClient::CreateFileShareSession() {$/;"	f	class:cricket::FileShareSessionClient
CreateFolder	talk/base/fileutils.cc	/^bool Filesystem::CreateFolder(const Pathname &pathname)$/;"	f	class:talk_base::Filesystem
CreateFolder	talk/base/pathutils.cc	/^bool CreateFolder(const talk_base::Pathname& path) {$/;"	f	namespace:talk_base
CreateFolderI	talk/base/unixfilesystem.cc	/^bool UnixFilesystem::CreateFolderI(const Pathname &path) {$/;"	f	class:talk_base::UnixFilesystem
CreateFolderI	talk/base/win32filesystem.cc	/^bool Win32Filesystem::CreateFolderI(const Pathname &pathname) {$/;"	f	class:talk_base::Win32Filesystem
CreateNetworks	talk/base/network.cc	/^void NetworkManager::CreateNetworks(std::vector<Network*>& networks) {$/;"	f	class:talk_base::NetworkManager
CreateOfferSessionDescription	talk/session/phone/phonesessionclient.cc	/^PhoneSessionDescription* PhoneSessionClient::CreateOfferSessionDescription() {$/;"	f	class:cricket::PhoneSessionClient
CreatePacketSocket	talk/p2p/base/port.cc	/^talk_base::AsyncPacketSocket* Port::CreatePacketSocket(ProtocolType proto) {$/;"	f	class:cricket::Port
CreateParams	talk/session/phone/channelmanager.cc	/^struct CreateParams {$/;"	s	namespace:cricket	file:
CreateRandomId	talk/base/helpers.cc	/^uint32 CreateRandomId() {$/;"	f	namespace:cricket
CreateRandomString	talk/base/helpers.cc	/^std::string CreateRandomString(int len) {$/;"	f	namespace:cricket
CreateRelayPorts	talk/p2p/client/basicportallocator.cc	/^void AllocationSequence::CreateRelayPorts() {$/;"	f	class:cricket::AllocationSequence
CreateSaslMechanism	talk/examples/login/xmppauth.cc	/^buzz::SaslMechanism* XmppAuth::CreateSaslMechanism($/;"	f	class:XmppAuth
CreateSaslMechanism	talk/xmpp/plainsaslhandler.h	/^  virtual SaslMechanism * CreateSaslMechanism(const std::string & mechanism) {$/;"	f	class:buzz::PlainSaslHandler
CreateSession	talk/p2p/base/session_unittest.cc	/^  virtual PortAllocatorSession *CreateSession(const std::string &name, const std::string &session_type) {$/;"	f	class:TestPortAllocator
CreateSession	talk/p2p/base/sessionmanager.cc	/^Session *SessionManager::CreateSession($/;"	f	class:cricket::SessionManager
CreateSession	talk/p2p/base/sessionmanager.cc	/^Session *SessionManager::CreateSession(const std::string& name,$/;"	f	class:cricket::SessionManager
CreateSession	talk/p2p/client/basicportallocator.cc	/^PortAllocatorSession *BasicPortAllocator::CreateSession($/;"	f	class:cricket::BasicPortAllocator
CreateSession	talk/p2p/client/httpportallocator.cc	/^PortAllocatorSession *HttpPortAllocator::CreateSession(const std::string &name, const std::string &session_type) {$/;"	f	class:cricket::HttpPortAllocator
CreateSession	talk/session/phone/phonesessionclient.cc	/^Session *PhoneSessionClient::CreateSession(Call *call) {$/;"	f	class:cricket::PhoneSessionClient
CreateSessionDescription	talk/p2p/base/session_unittest.cc	/^  const SessionDescription* CreateSessionDescription($/;"	f	struct:MySessionClient
CreateSessionDescription	talk/session/fileshare/fileshare.cc	/^const cricket::SessionDescription* FileShareSessionClient::CreateSessionDescription($/;"	f	class:cricket::FileShareSessionClient
CreateSessionDescription	talk/session/phone/phonesessionclient.cc	/^const SessionDescription *PhoneSessionClient::CreateSessionDescription(const buzz::XmlElement *element) {$/;"	f	class:cricket::PhoneSessionClient
CreateSessionDescription	talk/session/tunnel/tunnelsessionclient.cc	/^const SessionDescription* TunnelSessionClient::CreateSessionDescription($/;"	f	class:cricket::TunnelSessionClient
CreateSocket	talk/base/asynchttprequest.cc	/^talk_base::Socket * SslSocketFactory::CreateSocket(int type) {$/;"	f	class:SslSocketFactory
CreateSocket	talk/base/firewallsocketserver.cc	/^Socket* FirewallSocketServer::CreateSocket(int type) {$/;"	f	class:talk_base::FirewallSocketServer
CreateSocket	talk/base/natsocketfactory.cc	/^Socket* NATSocketFactory::CreateSocket(int type) {$/;"	f	class:talk_base::NATSocketFactory
CreateSocket	talk/base/physicalsocketserver.cc	/^Socket* PhysicalSocketServer::CreateSocket(int type) {$/;"	f	class:talk_base::PhysicalSocketServer
CreateSocket	talk/base/virtualsocketserver.cc	/^Socket* VirtualSocketServer::CreateSocket(int type) {$/;"	f	class:talk_base::VirtualSocketServer
CreateSocket	talk/base/win32socketserver.cc	/^Socket* Win32SocketServer::CreateSocket(int type) {$/;"	f	class:talk_base::Win32SocketServer
CreateSocketInternal	talk/base/virtualsocketserver.cc	/^VirtualSocket* VirtualSocketServer::CreateSocketInternal(int type) {$/;"	f	class:talk_base::VirtualSocketServer
CreateStunPorts	talk/p2p/client/basicportallocator.cc	/^void AllocationSequence::CreateStunPorts() {$/;"	f	class:cricket::AllocationSequence
CreateTCPPorts	talk/p2p/client/basicportallocator.cc	/^void AllocationSequence::CreateTCPPorts() {$/;"	f	class:cricket::AllocationSequence
CreateTestClient	talk/base/nat_unittest.cc	/^TestClient* CreateTestClient($/;"	f
CreateTransportAnswer	talk/p2p/base/p2ptransport.cc	/^buzz::XmlElement* P2PTransport::CreateTransportAnswer() {$/;"	f	class:cricket::P2PTransport
CreateTransportAnswer	talk/p2p/base/rawtransport.cc	/^buzz::XmlElement* RawTransport::CreateTransportAnswer() {$/;"	f	class:cricket::RawTransport
CreateTransportChannel	talk/p2p/base/p2ptransport.cc	/^TransportChannelImpl* P2PTransport::CreateTransportChannel($/;"	f	class:cricket::P2PTransport
CreateTransportChannel	talk/p2p/base/rawtransport.cc	/^TransportChannelImpl* RawTransport::CreateTransportChannel($/;"	f	class:cricket::RawTransport
CreateTransportOffer	talk/p2p/base/p2ptransport.cc	/^buzz::XmlElement* P2PTransport::CreateTransportOffer() {$/;"	f	class:cricket::P2PTransport
CreateTransportOffer	talk/p2p/base/rawtransport.cc	/^buzz::XmlElement* RawTransport::CreateTransportOffer() {$/;"	f	class:cricket::RawTransport
CreateTransportPrefs	talk/p2p/base/stun.cc	/^StunTransportPrefsAttribute* StunAttribute::CreateTransportPrefs() {$/;"	f	class:cricket::StunAttribute
CreateTransports	talk/p2p/base/session.cc	/^void Session::CreateTransports() {$/;"	f	class:cricket::Session
CreateTunnel	talk/session/tunnel/tunnelsessionclient.cc	/^talk_base::StreamInterface* TunnelSessionClient::CreateTunnel($/;"	f	class:cricket::TunnelSessionClient
CreateTunnelData	talk/session/tunnel/tunnelsessionclient.cc	/^struct CreateTunnelData : public talk_base::MessageData {$/;"	s	namespace:cricket	file:
CreateUDPPorts	talk/p2p/client/basicportallocator.cc	/^void AllocationSequence::CreateUDPPorts() {$/;"	f	class:cricket::AllocationSequence
CreateUInt32	talk/p2p/base/stun.cc	/^StunUInt32Attribute* StunAttribute::CreateUInt32(uint16 type) {$/;"	f	class:cricket::StunAttribute
CreateUniqueFile	talk/base/fileutils.cc	/^bool CreateUniqueFile(Pathname& path, bool create_empty) {$/;"	f	namespace:talk_base
CreateUnknownAttributes	talk/p2p/base/stun.cc	/^StunUInt16ListAttribute* StunAttribute::CreateUnknownAttributes() {$/;"	f	class:cricket::StunAttribute
CreateVoiceChannel	talk/session/phone/channelmanager.cc	/^VoiceChannel *ChannelManager::CreateVoiceChannel(Session *session) {$/;"	f	class:cricket::ChannelManager
CreateVoiceChannel_w	talk/session/phone/channelmanager.cc	/^VoiceChannel *ChannelManager::CreateVoiceChannel_w(Session *session) {$/;"	f	class:cricket::ChannelManager
CritScope	talk/base/criticalsection.h	/^  CritScope(CriticalSection *pcrit) {$/;"	f	class:talk_base::CritScope
CritScope	talk/base/criticalsection.h	/^class CritScope {$/;"	c	namespace:talk_base
CriticalSection	talk/base/criticalsection.h	/^  CriticalSection() {$/;"	f	class:talk_base::CriticalSection
CriticalSection	talk/base/criticalsection.h	/^class CriticalSection {$/;"	c	namespace:talk_base
CryptString	talk/base/cryptstring.h	/^  CryptString() : impl_(new EmptyCryptStringImpl()) {}$/;"	f	class:talk_base::CryptString
CryptString	talk/base/cryptstring.h	/^  CryptString(const CryptString & other) : impl_(other.impl_->Copy()) {}$/;"	f	class:talk_base::CryptString
CryptString	talk/base/cryptstring.h	/^  explicit CryptString(const CryptStringImpl & impl) : impl_(impl.Copy()) {}$/;"	f	class:talk_base::CryptString
CryptString	talk/base/cryptstring.h	/^class CryptString {$/;"	c	namespace:talk_base
CryptStringImpl	talk/base/cryptstring.h	/^class CryptStringImpl {$/;"	c	namespace:talk_base
Current	talk/base/thread.h	/^  static inline Thread* Current() {$/;"	f	class:talk_base::Thread
CurrentThread	talk/base/thread.cc	/^Thread *ThreadManager::CurrentThread() {$/;"	f	class:talk_base::ThreadManager
CurrentThreadIsOwner	talk/base/criticalsection.h	/^  bool CurrentThreadIsOwner() const { return thread_ == GetCurrentThreadId(); }$/;"	f	class:talk_base::CriticalSection
CurrentTime	talk/base/task.cc	/^int64 Task::CurrentTime() {$/;"	f	class:talk_base::Task
CurrentTime	talk/examples/login/xmpppump.cc	/^int64 XmppPump::CurrentTime() {$/;"	f	class:XmppPump
DEFAULT_FOLDER_DELIM	talk/base/pathutils.cc	/^const char DEFAULT_FOLDER_DELIM = '\/';$/;"	v
DEFAULT_FOLDER_DELIM	talk/base/pathutils.cc	/^const char DEFAULT_FOLDER_DELIM = '\\\\';$/;"	v
DEFAULT_INCLUDES	talk/base/Makefile	/^DEFAULT_INCLUDES = -I$(top_srcdir) `pkg-config --cflags gtk+-2.0`$/;"	m
DEFAULT_INCLUDES	talk/examples/call/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/examples/login/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/examples/pcp/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/p2p/base/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/p2p/client/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/session/fileshare/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/session/phone/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/session/tunnel/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/third_party/mediastreamer/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/xmllite/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	talk/xmpp/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_RTT	talk/p2p/base/port.cc	/^const uint32 DEFAULT_RTT = MAXIMUM_RTT;$/;"	v
DEFAULT_SIZE	talk/base/bytebuffer.cc	/^static const int DEFAULT_SIZE = 4096;$/;"	v	file:
DEFAULT_TIMEOUT	talk/p2p/base/pseudotcp.cc	/^const long DEFAULT_TIMEOUT = 4000; \/\/ If there are no pending clocks, wake up every 4 seconds$/;"	v
DEFS	talk/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/base/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/examples/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/examples/call/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/examples/login/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/examples/pcp/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/p2p/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/p2p/base/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/p2p/client/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/session/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/session/fileshare/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/session/phone/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/session/tunnel/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/third_party/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/third_party/gips/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/third_party/mediastreamer/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/xmllite/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	talk/xmpp/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEF_RTO	talk/p2p/base/pseudotcp.cc	/^const uint32 DEF_RTO   =  3000; \/\/ 3 seconds (RFC1122, Sec 4.2.3.1)$/;"	v
DELAY_MAX_FACTOR	talk/p2p/base/stunrequest.cc	/^const int DELAY_MAX_FACTOR = 16;$/;"	v
DELAY_UNIT	talk/p2p/base/stunrequest.cc	/^const int DELAY_UNIT = 100; \/\/ 100 milliseconds$/;"	v
DEL_DIR	Makefile	/^DEL_DIR  = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE = rm -f$/;"	m
DEPDIR	talk/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/base/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/examples/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/examples/call/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/examples/login/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/examples/pcp/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/p2p/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/p2p/base/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/p2p/client/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/session/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/session/fileshare/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/session/phone/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/session/tunnel/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/third_party/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/third_party/gips/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/third_party/mediastreamer/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/xmllite/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	talk/xmpp/Makefile	/^DEPDIR = .deps$/;"	m
DESTDIR	Makefile	/^DESTDIR  = $/;"	m
DIGEST_CHALLENGE	talk/base/httpcommon.cc	/^const char * const DIGEST_CHALLENGE =$/;"	v
DIGEST_CNONCE	talk/base/httpcommon.cc	/^const char * const DIGEST_CNONCE =$/;"	v
DIGEST_RESPONSE	talk/base/httpcommon.cc	/^const char * const DIGEST_RESPONSE =$/;"	v
DIGEST_URI	talk/base/httpcommon.cc	/^const char * const DIGEST_URI =$/;"	v
DISABLE_DNS	talk/base/socketaddress.cc	53;"	d	file:
DISABLE_DNS	talk/base/socketaddress.cc	55;"	d	file:
DISALLOW_EVIL_CONSTRUCTORS	talk/base/basictypes.h	62;"	d
DISALLOW_EVIL_CONSTRUCTORS	talk/base/common.h	116;"	d
DISALLOW_IMPLICIT_CONSTRUCTORS	talk/base/basictypes.h	72;"	d
DIST	Makefile	/^DIST	   = ..\/..\/conf.pri \\$/;"	m
DISTFILES	talk/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/base/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/examples/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/examples/call/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/examples/login/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/examples/pcp/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/p2p/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/p2p/base/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/p2p/client/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/session/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/session/fileshare/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/session/phone/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/session/tunnel/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/third_party/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/third_party/gips/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/third_party/mediastreamer/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/xmllite/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	talk/xmpp/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	talk/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	talk/base/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/examples/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	talk/examples/call/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/examples/login/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/examples/pcp/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	talk/p2p/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	talk/p2p/base/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/p2p/client/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/session/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	talk/session/fileshare/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/session/phone/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/session/tunnel/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/third_party/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	talk/third_party/gips/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	talk/third_party/mediastreamer/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/xmllite/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_COMMON	talk/xmpp/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	talk/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	talk/base/Makefile	/^DIST_SOURCES = $(libcricketbase_la_SOURCES) \\$/;"	m
DIST_SOURCES	talk/examples/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	talk/examples/call/Makefile	/^DIST_SOURCES = $(call_SOURCES)$/;"	m
DIST_SOURCES	talk/examples/login/Makefile	/^DIST_SOURCES = $(libcricketexampleslogin_la_SOURCES) $(login_SOURCES)$/;"	m
DIST_SOURCES	talk/examples/pcp/Makefile	/^DIST_SOURCES = $(pcp_SOURCES)$/;"	m
DIST_SOURCES	talk/p2p/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	talk/p2p/base/Makefile	/^DIST_SOURCES = $(libcricketp2pbase_la_SOURCES) \\$/;"	m
DIST_SOURCES	talk/p2p/client/Makefile	/^DIST_SOURCES = $(libcricketp2pclient_la_SOURCES)$/;"	m
DIST_SOURCES	talk/session/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	talk/session/fileshare/Makefile	/^DIST_SOURCES = $(libcricketsessionfileshare_la_SOURCES)$/;"	m
DIST_SOURCES	talk/session/phone/Makefile	/^DIST_SOURCES = $(libcricketsessionphone_la_SOURCES) \\$/;"	m
DIST_SOURCES	talk/session/tunnel/Makefile	/^DIST_SOURCES = $(libcricketsessiontunnel_la_SOURCES)$/;"	m
DIST_SOURCES	talk/third_party/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	talk/third_party/gips/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	talk/third_party/mediastreamer/Makefile	/^DIST_SOURCES = $(libmediastreamer_la_SOURCES)$/;"	m
DIST_SOURCES	talk/xmllite/Makefile	/^DIST_SOURCES = $(libcricketxmllite_la_SOURCES)$/;"	m
DIST_SOURCES	talk/xmpp/Makefile	/^DIST_SOURCES = $(libcricketxmpp_la_SOURCES)$/;"	m
DIST_SUBDIRS	talk/Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DIST_SUBDIRS	talk/examples/Makefile	/^DIST_SUBDIRS = login pcp call$/;"	m
DIST_SUBDIRS	talk/p2p/Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DIST_SUBDIRS	talk/session/Makefile	/^DIST_SUBDIRS = tunnel fileshare phone$/;"	m
DIST_SUBDIRS	talk/third_party/Makefile	/^DIST_SUBDIRS = mediastreamer gips$/;"	m
DSP_NAME	talk/third_party/mediastreamer/osscard.c	433;"	d	file:
Data	talk/base/bytebuffer.h	/^  const char* Data() const { return bytes_ + start_; }$/;"	f	class:talk_base::ByteBuffer
Data	talk/base/winping.cc	/^    PVOID   Data;               \/\/ Pointer to the reply data$/;"	m	struct:talk_base::icmp_echo_reply	file:
Data	talk/xmllite/qname.h	/^    Data() : refcount_(0) {}$/;"	f	class:buzz::QName::Data
Data	talk/xmllite/qname.h	/^    Data(const std::string & ns, const std::string & local) :$/;"	f	class:buzz::QName::Data
Data	talk/xmllite/qname.h	/^  class Data {$/;"	c	class:buzz::QName
Data	talk/xmpp/jid.h	/^    Data() : refcount_(1) {}$/;"	f	class:buzz::Jid::Data
Data	talk/xmpp/jid.h	/^    Data(const std::string & node, const std::string &domain, const std::string & resource) :$/;"	f	class:buzz::Jid::Data
Data	talk/xmpp/jid.h	/^  class Data {$/;"	c	class:buzz::Jid
DataSize	talk/base/winping.cc	/^    USHORT  DataSize;           \/\/ Reply data size in bytes$/;"	m	struct:talk_base::icmp_echo_reply	file:
DebugLog	talk/examples/call/call_main.cc	/^  DebugLog() :$/;"	f	class:DebugLog
DebugLog	talk/examples/call/call_main.cc	/^class DebugLog : public sigslot::has_slots<> {$/;"	c	file:
DebugLog	talk/examples/pcp/pcp_main.cc	/^  DebugLog() :$/;"	f	class:DebugLog
DebugLog	talk/examples/pcp/pcp_main.cc	/^class DebugLog : public sigslot::has_slots<> {$/;"	c	file:
DebugPrint	talk/examples/call/call_main.cc	/^  DebugPrint(char * buf, int * plen, bool output) {$/;"	f	class:DebugLog
DebugPrint	talk/examples/pcp/pcp_main.cc	/^  DebugPrint(char * buf, int * plen, bool output) {$/;"	f	class:DebugLog
Decline	talk/session/fileshare/fileshare.cc	/^FileShareSession::Decline() {$/;"	f	class:cricket::FileShareSession
DeclineTunnel	talk/session/tunnel/tunnelsessionclient.cc	/^void TunnelSessionClient::DeclineTunnel(Session* session) {$/;"	f	class:cricket::TunnelSessionClient
Decode	talk/base/natsocketfactory.cc	/^  void Decode(const char* data, size_t data_size, void* buf, size_t* buf_size,$/;"	f	class:talk_base::NATSocket	file:
DecodeTable	talk/base/base64.cc	/^const string::size_type Base64::DecodeTable[] = {$/;"	m	class:talk_base::Base64	file:
DecodeTable	talk/base/base64.h	/^  static const std::string::size_type DecodeTable[];$/;"	m	class:talk_base::Base64
DecryptData	talk/base/schanneladapter.cc	/^SChannelAdapter::DecryptData() {$/;"	f	class:talk_base::SChannelAdapter
DefaultSSLAdapter	talk/base/ssladapter.cc	/^  typedef OpenSSLAdapter DefaultSSLAdapter;$/;"	t	namespace:talk_base	file:
DefaultSSLAdapter	talk/base/ssladapter.cc	/^  typedef SChannelAdapter DefaultSSLAdapter;$/;"	t	namespace:talk_base	file:
DelayedMessage	talk/base/messagequeue.h	/^  DelayedMessage(int cmsDelay, Message *pmsg) {$/;"	f	class:talk_base::DelayedMessage
DelayedMessage	talk/base/messagequeue.h	/^class DelayedMessage {$/;"	c	namespace:talk_base
DeleteFile	talk/base/diskcache_win32.cc	/^bool DiskCacheWin32::DeleteFile(const std::string& filename) const {$/;"	f	class:talk_base::DiskCacheWin32
DeleteFile	talk/base/diskcachestd.cc	/^bool DiskCacheStd::DeleteFile(const std::string& filename) const {$/;"	f	class:talk_base::DiskCacheStd
DeleteFile	talk/base/fileutils.cc	/^bool Filesystem::DeleteFile(const Pathname &filename)$/;"	f	class:talk_base::Filesystem
DeleteFileI	talk/base/unixfilesystem.cc	/^bool UnixFilesystem::DeleteFileI(const Pathname &filename) {$/;"	f	class:talk_base::UnixFilesystem
DeleteFileI	talk/base/win32filesystem.cc	/^bool Win32Filesystem::DeleteFileI(const Pathname &filename) {$/;"	f	class:talk_base::Win32Filesystem
DeleteIqCookies	talk/xmpp/xmppengineimpl_iq.cc	/^XmppEngineImpl::DeleteIqCookies() {$/;"	f	class:buzz::XmppEngineImpl
DeleteResource	talk/base/diskcache.cc	/^bool DiskCache::DeleteResource(const std::string& id) {$/;"	f	class:talk_base::DiskCache
Describe	talk/base/logging.cc	/^const char* LogMessage::Describe(LoggingSeverity sev) {$/;"	f	class:talk_base::LogMessage
DescribeBuffer	talk/base/schanneladapter.cc	/^void DescribeBuffer(LoggingSeverity severity, const char* prefix,$/;"	f	namespace:talk_base
DescribeBuffers	talk/base/schanneladapter.cc	/^void DescribeBuffers(LoggingSeverity severity, const char* prefix,$/;"	f	namespace:talk_base
DescribeFile	talk/base/logging.cc	/^const char* LogMessage::DescribeFile(const char* file) {$/;"	f	class:talk_base::LogMessage
DescribeStatus	talk/examples/call/callclient.cc	/^const char* DescribeStatus(buzz::Status::Show show, const std::string& desc) {$/;"	f	namespace:__anon38
Destroy	talk/base/signalthread.cc	/^void SignalThread::Destroy() {$/;"	f	class:SignalThread
Destroy	talk/p2p/base/port.cc	/^void Connection::Destroy() {$/;"	f	class:cricket::Connection
Destroy	talk/p2p/base/port.cc	/^void Port::Destroy() {$/;"	f	class:cricket::Port
DestroyAllChannels	talk/p2p/base/transport.cc	/^void Transport::DestroyAllChannels() {$/;"	f	class:cricket::Transport
DestroyAllChannels_w	talk/p2p/base/transport.cc	/^void Transport::DestroyAllChannels_w() {$/;"	f	class:cricket::Transport
DestroyCall	talk/session/phone/phonesessionclient.cc	/^void PhoneSessionClient::DestroyCall(Call *call) {$/;"	f	class:cricket::PhoneSessionClient
DestroyChannel	talk/p2p/base/session.cc	/^void Session::DestroyChannel(TransportChannel* channel) {$/;"	f	class:cricket::Session
DestroyChannel	talk/p2p/base/transport.cc	/^void Transport::DestroyChannel(const std::string& name) {$/;"	f	class:cricket::Transport
DestroyChannel_w	talk/p2p/base/transport.cc	/^void Transport::DestroyChannel_w(const std::string& name) {$/;"	f	class:cricket::Transport
DestroySession	talk/p2p/base/sessionmanager.cc	/^void SessionManager::DestroySession(Session *session) {$/;"	f	class:cricket::SessionManager
DestroyTransportChannel	talk/p2p/base/p2ptransport.cc	/^void P2PTransport::DestroyTransportChannel(TransportChannelImpl* channel) {$/;"	f	class:cricket::P2PTransport
DestroyTransportChannel	talk/p2p/base/rawtransport.cc	/^void RawTransport::DestroyTransportChannel(TransportChannelImpl* channel) {$/;"	f	class:cricket::RawTransport
DestroyVoiceChannel	talk/session/phone/channelmanager.cc	/^void ChannelManager::DestroyVoiceChannel(VoiceChannel *voice_channel) {$/;"	f	class:cricket::ChannelManager
DestroyVoiceChannel_w	talk/session/phone/channelmanager.cc	/^void ChannelManager::DestroyVoiceChannel_w(VoiceChannel *voice_channel) {$/;"	f	class:cricket::ChannelManager
Detach	talk/base/socketstream.h	/^  AsyncSocket* Detach() {$/;"	f	class:talk_base::SocketStream
Detach	talk/base/stream.h	/^  StreamInterface* Detach() { $/;"	f	class:talk_base::StreamAdapterInterface
DetachTap	talk/base/stream.cc	/^StreamInterface* StreamTap::DetachTap() { $/;"	f	class:talk_base::StreamTap
DirectSend	talk/base/socketadapters.h	/^  int DirectSend(const void *pv, size_t cb) { return AsyncSocketAdapter::Send(pv, cb); }$/;"	f	class:talk_base::BufferedReadAdapter
Direction	talk/base/streamutils.h	/^  struct Direction {$/;"	s	class:StreamRelay
DirectoryIterator	talk/base/fileutils.cc	/^DirectoryIterator::DirectoryIterator() : $/;"	f	class:talk_base::DirectoryIterator
DirectoryIterator	talk/base/fileutils.h	/^class DirectoryIterator {$/;"	c	namespace:talk_base
DirectoryList	talk/base/tarstream.h	/^  typedef std::list<DirectoryIterator*> DirectoryList;$/;"	t	class:talk_base::TarStream
DisableBuffering	talk/base/stream.cc	/^bool FileStream::DisableBuffering() {$/;"	f	class:talk_base::FileStream
DisableMedia_w	talk/session/phone/voicechannel.cc	/^void VoiceChannel::DisableMedia_w() {$/;"	f	class:cricket::VoiceChannel
DisableSSL	talk/base/asynchttprequest.h	/^  void DisableSSL() { hostname_.clear(); }$/;"	f	class:talk_base::SslSocketFactory
Disconnect	talk/examples/login/xmppthread.cc	/^void XmppThread::Disconnect() {$/;"	f	class:XmppThread
Disconnect	talk/xmpp/xmppclient.cc	/^XmppClient::Disconnect() {$/;"	f	class:buzz::XmppClient
Disconnect	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::Disconnect() {$/;"	f	class:buzz::XmppEngineImpl
DiskCache	talk/base/diskcache.cc	/^DiskCache::DiskCache() : max_cache_(0), total_size_(0), total_accessors_(0) {$/;"	f	class:talk_base::DiskCache
DiskCache	talk/base/diskcache.h	/^class DiskCache {$/;"	c	namespace:talk_base
DiskCacheAdapter	talk/base/diskcache.cc	/^  DiskCacheAdapter(const DiskCache* cache, const std::string& id, size_t index,$/;"	f	class:talk_base::DiskCacheAdapter
DiskCacheAdapter	talk/base/diskcache.cc	/^class DiskCacheAdapter : public StreamAdapterInterface {$/;"	c	namespace:talk_base	file:
DiskCacheStd	talk/base/diskcachestd.h	/^class DiskCacheStd : public DiskCache {$/;"	c	namespace:talk_base
DiskCacheWin32	talk/base/diskcache_win32.h	/^class DiskCacheWin32 : public DiskCache {$/;"	c	namespace:talk_base
Dispatch	talk/base/messagequeue.cc	/^void MessageQueue::Dispatch(Message *pmsg) {$/;"	f	class:talk_base::MessageQueue
Dispatcher	talk/base/physicalsocketserver.cc	/^class Dispatcher {$/;"	c	namespace:talk_base	file:
Dispose	talk/base/messagequeue.h	/^  template<class T> void Dispose(T* doomed) {$/;"	f	class:talk_base::MessageQueue
Dispose	talk/base/win32socketserver.cc	/^Win32Socket::EventSink::Dispose() {$/;"	f	class:talk_base::Win32Socket::EventSink
DisposeData	talk/base/messagequeue.h	/^  DisposeData(T* data) : data_(data) { }$/;"	f	class:talk_base::DisposeData
DisposeData	talk/base/messagequeue.h	/^class DisposeData : public MessageData {$/;"	c	namespace:talk_base
DisposeSocket	talk/p2p/base/relayport.cc	/^void RelayPort::DisposeSocket(talk_base::AsyncPacketSocket * socket) {$/;"	f	class:cricket::RelayPort
DnsLookup	talk/base/win32socketserver.cc	/^struct Win32Socket::DnsLookup {$/;"	s	class:talk_base::Win32Socket	file:
DoClose	talk/session/fileshare/fileshare.cc	/^void FileShareSession::DoClose(bool terminate) {$/;"	f	class:cricket::FileShareSession
DoConnect	talk/base/win32socketserver.cc	/^Win32Socket::DoConnect(const sockaddr_in& addr) {$/;"	f	class:talk_base::Win32Socket
DoDisconnect	talk/examples/login/xmpppump.cc	/^void XmppPump::DoDisconnect() {$/;"	f	class:XmppPump
DoLogin	talk/examples/login/xmpppump.cc	/^void XmppPump::DoLogin(const buzz::XmppClientSettings & xcs,$/;"	f	class:XmppPump
DoWork	talk/base/asynchttprequest.cc	/^void AsyncHttpRequest::DoWork() {$/;"	f	class:AsyncHttpRequest
DoWork	talk/base/autodetectproxy.cc	/^void AutoDetectProxy::DoWork() {$/;"	f	class:AutoDetectProxy
DummyWndProc	talk/base/win32socketserver.cc	/^LRESULT CALLBACK DummyWndProc(HWND hwnd, UINT wm, WPARAM wp, LPARAM lp)$/;"	f	namespace:talk_base
EACCES	talk/base/socket.h	92;"	d
EADDRINUSE	talk/base/socket.h	66;"	d
EADDRNOTAVAIL	talk/base/socket.h	67;"	d
EAFNOSUPPORT	talk/base/socket.h	65;"	d
EALREADY	talk/base/socket.h	55;"	d
ECHO	talk/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/base/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/examples/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/examples/call/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/examples/login/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/examples/pcp/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/p2p/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/p2p/base/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/p2p/client/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/session/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/session/fileshare/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/session/phone/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/session/tunnel/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/third_party/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/third_party/gips/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/third_party/mediastreamer/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/xmllite/Makefile	/^ECHO = echo$/;"	m
ECHO	talk/xmpp/Makefile	/^ECHO = echo$/;"	m
ECHO_C	talk/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/base/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/examples/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/examples/call/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/examples/login/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/examples/pcp/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/p2p/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/p2p/base/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/p2p/client/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/session/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/session/fileshare/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/session/phone/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/session/tunnel/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/third_party/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/third_party/gips/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/third_party/mediastreamer/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/xmllite/Makefile	/^ECHO_C = $/;"	m
ECHO_C	talk/xmpp/Makefile	/^ECHO_C = $/;"	m
ECHO_N	talk/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/base/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/examples/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/examples/call/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/examples/login/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/examples/pcp/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/p2p/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/p2p/base/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/p2p/client/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/session/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/session/fileshare/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/session/phone/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/session/tunnel/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/third_party/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/third_party/gips/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/third_party/mediastreamer/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/xmllite/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	talk/xmpp/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	talk/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/base/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/examples/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/examples/call/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/examples/login/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/examples/pcp/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/p2p/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/p2p/base/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/p2p/client/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/session/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/session/fileshare/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/session/phone/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/session/tunnel/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/third_party/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/third_party/gips/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/third_party/mediastreamer/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/xmllite/Makefile	/^ECHO_T = $/;"	m
ECHO_T	talk/xmpp/Makefile	/^ECHO_T = $/;"	m
ECONNABORTED	talk/base/socket.h	71;"	d
ECONNREFUSED	talk/base/socket.h	79;"	d
ECONNRESET	talk/base/socket.h	72;"	d
EDESTADDRREQ	talk/base/socket.h	57;"	d
EDQUOT	talk/base/socket.h	89;"	d
EGREP	talk/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/base/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/examples/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/examples/call/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/examples/login/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/examples/pcp/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/p2p/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/p2p/base/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/p2p/client/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/session/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/session/fileshare/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/session/phone/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/session/tunnel/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/third_party/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/third_party/gips/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/third_party/mediastreamer/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/xmllite/Makefile	/^EGREP = grep -E$/;"	m
EGREP	talk/xmpp/Makefile	/^EGREP = grep -E$/;"	m
EHOSTDOWN	talk/base/socket.h	83;"	d
EHOSTUNREACH	talk/base/socket.h	84;"	d
EINPROGRESS	talk/base/socket.h	54;"	d
EISCONN	talk/base/socket.h	74;"	d
ELOOP	talk/base/socket.h	80;"	d
EMPTY_STR	talk/base/pathutils.cc	/^std::string const EMPTY_STR = "";$/;"	m	class:talk_base::std	file:
EMSGSIZE	talk/base/socket.h	58;"	d
ENAMETOOLONG	talk/base/socket.h	81;"	d
ENAMETOOLONG	talk/base/socket.h	82;"	d
ENETDOWN	talk/base/socket.h	68;"	d
ENETRESET	talk/base/socket.h	70;"	d
ENETUNREACH	talk/base/socket.h	69;"	d
ENOBUFS	talk/base/socket.h	73;"	d
ENODATA	talk/third_party/mediastreamer/msutils.h	36;"	d
ENOPROTOOPT	talk/base/socket.h	60;"	d
ENOTCONN	talk/base/socket.h	75;"	d
ENOTEMPTY	talk/base/socket.h	85;"	d
ENOTEMPTY	talk/base/socket.h	86;"	d
ENOTSOCK	talk/base/socket.h	56;"	d
ENUM	talk/base/httpcommon.cc	91;"	d	file:
EOPNOTSUPP	talk/base/socket.h	63;"	d
EPFNOSUPPORT	talk/base/socket.h	64;"	d
EPROCLIM	talk/base/socket.h	87;"	d
EPROTONOSUPPORT	talk/base/socket.h	61;"	d
EPROTOTYPE	talk/base/socket.h	59;"	d
EREMOTE	talk/base/socket.h	91;"	d
ERRCTX_ERRNO	talk/base/logging.h	/^enum LogErrorContext { ERRCTX_NONE, ERRCTX_ERRNO, ERRCTX_HRESULT };$/;"	e	enum:talk_base::LogErrorContext
ERRCTX_HRESULT	talk/base/logging.h	/^enum LogErrorContext { ERRCTX_NONE, ERRCTX_ERRNO, ERRCTX_HRESULT };$/;"	e	enum:talk_base::LogErrorContext
ERRCTX_NONE	talk/base/logging.h	/^enum LogErrorContext { ERRCTX_NONE, ERRCTX_ERRNO, ERRCTX_HRESULT };$/;"	e	enum:talk_base::LogErrorContext
ERROR	talk/base/logging.cc	31;"	d	file:
ERROR_AUTH	talk/xmpp/xmppengine.h	/^    ERROR_AUTH,             \/\/!< Authentication could not be negotiated$/;"	e	enum:buzz::XmppEngine::Error
ERROR_BIND	talk/xmpp/xmppengine.h	/^    ERROR_BIND,             \/\/!< Resource or session binding could not be negotiated$/;"	e	enum:buzz::XmppEngine::Error
ERROR_CONNECTION_CLOSED	talk/xmpp/xmppengine.h	/^    ERROR_CONNECTION_CLOSED,\/\/!< Connection closed by output handler.$/;"	e	enum:buzz::XmppEngine::Error
ERROR_DNS	talk/xmpp/asyncsocket.h	/^    ERROR_DNS,              \/\/!< Couldn't resolve host name$/;"	e	enum:buzz::AsyncSocket::Error
ERROR_DOCUMENT_CLOSED	talk/xmpp/xmppengine.h	/^    ERROR_DOCUMENT_CLOSED,  \/\/!< Closed by <\/stream:stream>$/;"	e	enum:buzz::XmppEngine::Error
ERROR_MISSING_USERNAME	talk/xmpp/xmppengine.h	/^    ERROR_MISSING_USERNAME  \/\/!< User has a Google Account but no nickname$/;"	e	enum:buzz::XmppEngine::Error
ERROR_NETWORK	talk/p2p/base/session.h	/^    ERROR_NETWORK,  \/\/ network error, could not allocate network resources$/;"	e	enum:cricket::Session::Error
ERROR_NETWORK_TIMEOUT	talk/xmpp/xmppengine.h	/^    ERROR_NETWORK_TIMEOUT,  \/\/!< Some sort of timeout (eg., we never got the roster)$/;"	e	enum:buzz::XmppEngine::Error
ERROR_NONE	talk/p2p/base/session.h	/^    ERROR_NONE = 0, \/\/ no error$/;"	e	enum:cricket::Session::Error
ERROR_NONE	talk/xmpp/asyncsocket.h	/^    ERROR_NONE = 0,         \/\/!< No error$/;"	e	enum:buzz::AsyncSocket::Error
ERROR_NONE	talk/xmpp/xmppengine.h	/^    ERROR_NONE = 0,         \/\/!< No error$/;"	e	enum:buzz::XmppEngine::Error
ERROR_RESPONSE	talk/p2p/base/session.h	/^    ERROR_RESPONSE, \/\/ error during signaling$/;"	e	enum:cricket::Session::Error
ERROR_SOCKET	talk/xmpp/xmppengine.h	/^    ERROR_SOCKET,           \/\/!< Socket error$/;"	e	enum:buzz::XmppEngine::Error
ERROR_SSL	talk/xmpp/asyncsocket.h	/^    ERROR_SSL,              \/\/!< Something went wrong with OpenSSL$/;"	e	enum:buzz::AsyncSocket::Error
ERROR_STREAM	talk/xmpp/xmppengine.h	/^    ERROR_STREAM,           \/\/!< XMPP stream error - see GetStreamError()$/;"	e	enum:buzz::XmppEngine::Error
ERROR_TIME	talk/p2p/base/session.h	/^    ERROR_TIME,     \/\/ no response to signaling$/;"	e	enum:cricket::Session::Error
ERROR_TLS	talk/xmpp/xmppengine.h	/^    ERROR_TLS,              \/\/!< TLS could not be negotiated$/;"	e	enum:buzz::XmppEngine::Error
ERROR_UNAUTHORIZED	talk/xmpp/xmppengine.h	/^    ERROR_UNAUTHORIZED,     \/\/!< User is not authorized (rejected credentials)$/;"	e	enum:buzz::XmppEngine::Error
ERROR_VERSION	talk/xmpp/xmppengine.h	/^    ERROR_VERSION,          \/\/!< XMPP version error$/;"	e	enum:buzz::XmppEngine::Error
ERROR_WINSOCK	talk/xmpp/asyncsocket.h	/^    ERROR_WINSOCK,          \/\/!< Winsock error$/;"	e	enum:buzz::AsyncSocket::Error
ERROR_WRONGSTATE	talk/xmpp/asyncsocket.h	/^    ERROR_WRONGSTATE,       \/\/!< Call made while socket is in the wrong state$/;"	e	enum:buzz::AsyncSocket::Error
ERROR_XML	talk/xmpp/xmppengine.h	/^    ERROR_XML,              \/\/!< Malformed XML or encoding error$/;"	e	enum:buzz::XmppEngine::Error
ESHUTDOWN	talk/base/socket.h	76;"	d
ESOCKTNOSUPPORT	talk/base/socket.h	62;"	d
ESTALE	talk/base/socket.h	90;"	d
ETAGS	talk/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/base/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/examples/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/examples/call/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/examples/login/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/examples/pcp/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/p2p/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/p2p/base/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/p2p/client/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/session/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/session/fileshare/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/session/phone/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/session/tunnel/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/third_party/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/third_party/mediastreamer/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/xmllite/Makefile	/^ETAGS = etags$/;"	m
ETAGS	talk/xmpp/Makefile	/^ETAGS = etags$/;"	m
ETIMEDOUT	talk/base/socket.h	78;"	d
ETOOMANYREFS	talk/base/socket.h	77;"	d
EUSERS	talk/base/socket.h	88;"	d
EWOULDBLOCK	talk/base/socket.h	53;"	d
EXEEXT	talk/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/base/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/examples/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/examples/call/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/examples/login/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/examples/pcp/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/p2p/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/p2p/base/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/p2p/client/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/session/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/session/fileshare/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/session/phone/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/session/tunnel/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/third_party/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/third_party/gips/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/third_party/mediastreamer/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/xmllite/Makefile	/^EXEEXT = $/;"	m
EXEEXT	talk/xmpp/Makefile	/^EXEEXT = $/;"	m
EXPAT_LIBS	talk/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/base/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/examples/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/examples/call/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/examples/login/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/examples/pcp/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/p2p/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/p2p/base/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/p2p/client/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/session/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/session/fileshare/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/session/phone/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/session/tunnel/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/third_party/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/third_party/gips/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/third_party/mediastreamer/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/xmllite/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXPAT_LIBS	talk/xmpp/Makefile	/^EXPAT_LIBS = -lexpat$/;"	m
EXTRA_DIST	talk/Makefile	/^EXTRA_DIST = libjingle.sln libjingle.vcproj$/;"	m
EXTRA_DIST	talk/base/Makefile	/^EXTRA_DIST = diskcache_win32.h \\$/;"	m
EXTRA_DIST	talk/examples/call/Makefile	/^EXTRA_DIST = call.vcproj$/;"	m
EXTRA_DIST	talk/examples/pcp/Makefile	/^EXTRA_DIST = pcp.vcproj$/;"	m
EXTRA_DIST	talk/session/phone/Makefile	/^EXTRA_DIST = gipslitemediaengine.cc gipslitemediaengine.h$/;"	m
EXTRA_DIST	talk/third_party/gips/Makefile	/^EXTRA_DIST = expiration.h$/;"	m
EXT_DELIM	talk/base/pathutils.cc	/^const char EXT_DELIM = '.';$/;"	v
Elapsed	talk/p2p/base/stunrequest.cc	/^uint32 StunRequest::Elapsed() const {$/;"	f	class:cricket::StunRequest
ElapsedTime	talk/base/task.cc	/^int64 Task::ElapsedTime() {$/;"	f	class:talk_base::Task
ElapsedTime	talk/base/time.cc	/^uint32 ElapsedTime() {$/;"	f	namespace:talk_base
EmptyCryptStringImpl	talk/base/cryptstring.h	/^class EmptyCryptStringImpl : public CryptStringImpl {$/;"	c	namespace:talk_base
Enable	talk/session/phone/voicechannel.cc	/^void VoiceChannel::Enable(bool enable) {$/;"	f	class:cricket::VoiceChannel
EnableChannels	talk/session/phone/call.cc	/^void Call::EnableChannels(bool enable) {$/;"	f	class:cricket::Call
EnableMedia_w	talk/session/phone/voicechannel.cc	/^void VoiceChannel::EnableMedia_w() {$/;"	f	class:cricket::VoiceChannel
EnableOutgoingMessages	talk/p2p/client/sessionmanagertask.h	/^  void EnableOutgoingMessages() {$/;"	f	class:cricket::SessionManagerTask
EnablePortPackets	talk/p2p/base/port.cc	/^void Port::EnablePortPackets() {$/;"	f	class:cricket::Port
EnableProtocol	talk/p2p/client/basicportallocator.cc	/^void AllocationSequence::EnableProtocol(ProtocolType proto) {$/;"	f	class:cricket::AllocationSequence
Enabled	talk/base/winfirewall.cc	/^WinFirewall::Enabled() {$/;"	f	class:talk_base::WinFirewall
Encode	talk/base/natsocketfactory.cc	/^  void Encode(const char* data, size_t data_size, char* buf, size_t buf_size,$/;"	f	class:talk_base::NATSocket	file:
EndElement	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::EndElement(XmlParseContext * pctx, const char * name) {$/;"	f	class:buzz::XmlBuilder
EndElement	talk/xmllite/xmlparser.cc	/^XmlParser::ParseContext::EndElement() {$/;"	f	class:buzz::XmlParser::ParseContext
EndElement	talk/xmpp/xmppstanzaparser.h	/^    virtual void EndElement(XmlParseContext * pctx,$/;"	f	class:buzz::XmppStanzaParser::ParseHandler
EndElementCallback	talk/xmllite/xmlparser.cc	/^EndElementCallback(void * userData, const char *name) {$/;"	f	namespace:buzz	file:
EndProcess	talk/base/httpserver.cc	/^HttpServer::Connection::EndProcess() {$/;"	f	class:talk_base::HttpServer::Connection
EndResponse	talk/base/socketadapters.cc	/^void AsyncHttpsProxySocket::EndResponse() {$/;"	f	class:talk_base::AsyncHttpsProxySocket
EndStream	talk/xmpp/xmppengineimpl.h	/^    virtual void EndStream()$/;"	f	class:buzz::XmppEngineImpl::StanzaParseHandler
EnsureActive	talk/base/messagequeue.cc	/^void MessageQueue::EnsureActive() {$/;"	f	class:talk_base::MessageQueue
EnsureClosed	talk/xmpp/xmppclient.cc	/^XmppClient::EnsureClosed() {$/;"	f	class:buzz::XmppClient
EnsureDefaultFilesystem	talk/base/fileutils.cc	/^Filesystem *Filesystem::EnsureDefaultFilesystem()$/;"	f	class:talk_base::Filesystem
EnsureStorage	talk/base/cryptstring.h	/^  void EnsureStorage(size_t n) {$/;"	f	class:talk_base::FormatCryptString
Enter	talk/base/criticalsection.h	/^  void Enter() {$/;"	f	class:talk_base::CriticalSection
EnterExit	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::EnterExit::EnterExit(XmppEngineImpl* engine)$/;"	f	class:buzz::XmppEngineImpl::EnterExit
EnterExit	talk/xmpp/xmppengineimpl.h	/^  class EnterExit {$/;"	c	class:buzz::XmppEngineImpl
Entry	talk/base/diskcache.h	/^  struct Entry {$/;"	s	class:talk_base::DiskCache
EntryMap	talk/base/diskcache.h	/^  typedef std::map<std::string, Entry> EntryMap;$/;"	t	class:talk_base::DiskCache
Enum	talk/base/httpcommon.cc	/^struct Enum {$/;"	s	namespace:talk_base	file:
EqualIPs	talk/base/socketaddress.cc	/^bool SocketAddress::EqualIPs(const SocketAddress& addr) const {$/;"	f	class:talk_base::SocketAddress
EqualPorts	talk/base/socketaddress.cc	/^bool SocketAddress::EqualPorts(const SocketAddress& addr) const {$/;"	f	class:talk_base::SocketAddress
EquifaxSecureGlobalEBusinessCA1_certificate	talk/base/Equifax_Secure_Global_eBusiness_CA-1.h	/^unsigned char EquifaxSecureGlobalEBusinessCA1_certificate[660]={$/;"	v
Error	talk/base/openssladapter.cc	/^OpenSSLAdapter::Error(const char* context, int err, bool signal) {$/;"	f	class:talk_base::OpenSSLAdapter
Error	talk/base/schanneladapter.cc	/^SChannelAdapter::Error(const char* context, int err, bool signal) {$/;"	f	class:talk_base::SChannelAdapter
Error	talk/base/socketadapters.cc	/^void AsyncHttpsProxySocket::Error(int error) {$/;"	f	class:talk_base::AsyncHttpsProxySocket
Error	talk/base/socketadapters.cc	/^void AsyncSocksProxySocket::Error(int error) {$/;"	f	class:talk_base::AsyncSocksProxySocket
Error	talk/base/task.cc	/^void Task::Error() {$/;"	f	class:talk_base::Task
Error	talk/p2p/base/session.h	/^  enum Error {$/;"	g	class:cricket::Session
Error	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::Error(XmlParseContext * pctx, XML_Error err) {$/;"	f	class:buzz::XmlBuilder
Error	talk/xmpp/asyncsocket.h	/^  enum Error {$/;"	g	class:buzz::AsyncSocket
Error	talk/xmpp/xmppengine.h	/^  enum Error {$/;"	g	class:buzz::XmppEngine
Error	talk/xmpp/xmppstanzaparser.h	/^    virtual void Error(XmlParseContext * pctx,$/;"	f	class:buzz::XmppStanzaParser::ParseHandler
ErrorName	talk/base/logging.cc	/^std::string ErrorName(int err, const talk_base::ConstantLabel * err_table) {$/;"	f	namespace:talk_base
EstimateMTU	talk/base/asyncsocket.h	/^  virtual int EstimateMTU(uint16* mtu) { return socket_->EstimateMTU(mtu); }$/;"	f	class:talk_base::AsyncSocketAdapter
EstimateMTU	talk/base/natsocketfactory.cc	/^  virtual int EstimateMTU(uint16* mtu) { return socket_->EstimateMTU(mtu); }$/;"	f	class:talk_base::NATSocket
EstimateMTU	talk/base/physicalsocketserver.cc	/^  int EstimateMTU(uint16* mtu) {$/;"	f	class:talk_base::PhysicalSocket
EstimateMTU	talk/base/virtualsocketserver.cc	/^  int EstimateMTU(uint16* mtu) {$/;"	f	class:talk_base::VirtualSocket
EstimateMTU	talk/base/win32socketserver.cc	/^Win32Socket::EstimateMTU(uint16* mtu) {$/;"	f	class:talk_base::Win32Socket
EstimateQuality	talk/base/network.cc	/^void Network::EstimateQuality() {$/;"	f	class:talk_base::Network
Evaluate	talk/base/virtualsocketserver.cc	/^double VirtualSocketServer::Evaluate(Function* f, double x) {$/;"	f	class:talk_base::VirtualSocketServer
Event	talk/base/event.h	/^  Event() {$/;"	f	class:talk_base::Event
Event	talk/base/event.h	/^class Event {$/;"	c	namespace:talk_base
EventData	talk/session/tunnel/pseudotcpchannel.cc	/^  EventData(int ev, int err = 0) : event(ev), error(err) { }$/;"	f	struct:cricket::EventData
EventData	talk/session/tunnel/pseudotcpchannel.cc	/^struct EventData : public MessageData {$/;"	s	namespace:cricket	file:
EventData	talk/session/tunnel/tunnelsessionclient.cc	/^  EventData(int ev, int err = 0) : event(ev), error(err) { }$/;"	f	struct:cricket::EventData
EventData	talk/session/tunnel/tunnelsessionclient.cc	/^struct EventData : public talk_base::MessageData {$/;"	s	namespace:cricket	file:
EventDispatcher	talk/base/physicalsocketserver.cc	/^  EventDispatcher(PhysicalSocketServer *ss) : ss_(ss) {$/;"	f	class:talk_base::EventDispatcher
EventDispatcher	talk/base/physicalsocketserver.cc	/^  EventDispatcher(PhysicalSocketServer* ss) : ss_(ss), fSignaled_(false) {$/;"	f	class:talk_base::EventDispatcher
EventDispatcher	talk/base/physicalsocketserver.cc	/^class EventDispatcher : public Dispatcher {$/;"	c	namespace:talk_base	file:
EventSink	talk/base/win32socketserver.cc	/^  EventSink(Win32Socket * parent) : parent_(parent) { }$/;"	f	class:talk_base::Win32Socket::EventSink
EventSink	talk/base/win32socketserver.cc	/^class Win32Socket::EventSink : public Win32Window {$/;"	c	class:talk_base::Win32Socket	file:
Exit	talk/session/phone/channelmanager.cc	/^void ChannelManager::Exit() {$/;"	f	class:cricket::ChannelManager
ExpatCharacterData	talk/xmllite/xmlparser.cc	/^XmlParser::ExpatCharacterData(const char *text, int len) {$/;"	f	class:buzz::XmlParser
ExpatEndElement	talk/xmllite/xmlparser.cc	/^XmlParser::ExpatEndElement(const char *name) {$/;"	f	class:buzz::XmlParser
ExpatStartElement	talk/xmllite/xmlparser.cc	/^XmlParser::ExpatStartElement(const char *name, const char **atts) {$/;"	f	class:buzz::XmlParser
ExpatXmlDecl	talk/xmllite/xmlparser.cc	/^XmlParser::ExpatXmlDecl(const char * ver, const char * enc, int standalone) {$/;"	f	class:buzz::XmlParser
ExplicitStatus	talk/examples/login/status.h	/^  std::string ExplicitStatus() const {$/;"	f	class:buzz::Status
ExternalMap	talk/base/natserver.h	/^  typedef std::map<SocketAddress,TransEntry*> ExternalMap;$/;"	t	class:talk_base::NATServer
F1	talk/base/md5c.c	159;"	d	file:
F2	talk/base/md5c.c	160;"	d	file:
F3	talk/base/md5c.c	161;"	d	file:
F4	talk/base/md5c.c	162;"	d	file:
F77	talk/Makefile	/^F77 = $/;"	m
F77	talk/base/Makefile	/^F77 = $/;"	m
F77	talk/examples/Makefile	/^F77 = $/;"	m
F77	talk/examples/call/Makefile	/^F77 = $/;"	m
F77	talk/examples/login/Makefile	/^F77 = $/;"	m
F77	talk/examples/pcp/Makefile	/^F77 = $/;"	m
F77	talk/p2p/Makefile	/^F77 = $/;"	m
F77	talk/p2p/base/Makefile	/^F77 = $/;"	m
F77	talk/p2p/client/Makefile	/^F77 = $/;"	m
F77	talk/session/Makefile	/^F77 = $/;"	m
F77	talk/session/fileshare/Makefile	/^F77 = $/;"	m
F77	talk/session/phone/Makefile	/^F77 = $/;"	m
F77	talk/session/tunnel/Makefile	/^F77 = $/;"	m
F77	talk/third_party/Makefile	/^F77 = $/;"	m
F77	talk/third_party/gips/Makefile	/^F77 = $/;"	m
F77	talk/third_party/mediastreamer/Makefile	/^F77 = $/;"	m
F77	talk/xmllite/Makefile	/^F77 = $/;"	m
F77	talk/xmpp/Makefile	/^F77 = $/;"	m
FD_ANY	talk/base/firewallsocketserver.h	/^enum FirewallDirection { FD_IN, FD_OUT, FD_ANY };$/;"	e	enum:talk_base::FirewallDirection
FD_IN	talk/base/firewallsocketserver.h	/^enum FirewallDirection { FD_IN, FD_OUT, FD_ANY };$/;"	e	enum:talk_base::FirewallDirection
FD_OUT	talk/base/firewallsocketserver.h	/^enum FirewallDirection { FD_IN, FD_OUT, FD_ANY };$/;"	e	enum:talk_base::FirewallDirection
FEATURE_ENABLE_CHAT_ARCHIVING	config.h	5;"	d
FEATURE_ENABLE_SSL	config.h	8;"	d
FEATURE_ENABLE_VOICEMAIL	config.h	11;"	d
FFLAGS	talk/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/base/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/examples/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/examples/call/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/examples/login/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/examples/pcp/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/p2p/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/p2p/base/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/p2p/client/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/session/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/session/fileshare/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/session/phone/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/session/tunnel/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/third_party/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/third_party/gips/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/third_party/mediastreamer/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/xmllite/Makefile	/^FFLAGS = $/;"	m
FFLAGS	talk/xmpp/Makefile	/^FFLAGS = $/;"	m
FILTER_CAN_SYNC	talk/third_party/mediastreamer/msfilter.h	104;"	d
FILTER_HAS_FIFOS	talk/third_party/mediastreamer/msfilter.h	100;"	d
FILTER_HAS_QUEUES	talk/third_party/mediastreamer/msfilter.h	101;"	d
FILTER_IS_SINK	talk/third_party/mediastreamer/msfilter.h	103;"	d
FILTER_IS_SOURCE	talk/third_party/mediastreamer/msfilter.h	102;"	d
FLAG_CTL	talk/p2p/base/pseudotcp.cc	/^const uint8 FLAG_CTL = 0x02;$/;"	v
FLAG_RST	talk/p2p/base/pseudotcp.cc	/^const uint8 FLAG_RST = 0x04;$/;"	v
FOLDER_DELIMS	talk/base/pathutils.cc	/^const char* const FOLDER_DELIMS = "\/\\\\";$/;"	v
FORMS	Makefile	/^FORMS = $/;"	m
FP_ANY	talk/base/firewallsocketserver.h	/^enum FirewallProtocol { FP_UDP, FP_TCP, FP_ANY };$/;"	e	enum:talk_base::FirewallProtocol
FP_TCP	talk/base/firewallsocketserver.h	/^enum FirewallProtocol { FP_UDP, FP_TCP, FP_ANY };$/;"	e	enum:talk_base::FirewallProtocol
FP_UDP	talk/base/firewallsocketserver.h	/^enum FirewallProtocol { FP_UDP, FP_TCP, FP_ANY };$/;"	e	enum:talk_base::FirewallProtocol
FS_COMPLETE	talk/session/fileshare/fileshare.h	/^  FS_COMPLETE,      \/\/ Completed successfully$/;"	e	enum:cricket::FileShareState
FS_FAILURE	talk/session/fileshare/fileshare.h	/^  FS_FAILURE        \/\/ An error occurred during transfer$/;"	e	enum:cricket::FileShareState
FS_LOCAL_CANCEL	talk/session/fileshare/fileshare.h	/^  FS_LOCAL_CANCEL,  \/\/ Local side cancelled$/;"	e	enum:cricket::FileShareState
FS_NONE	talk/session/fileshare/fileshare.h	/^  FS_NONE,          \/\/ Initialization$/;"	e	enum:cricket::FileShareState
FS_OFFER	talk/session/fileshare/fileshare.h	/^  FS_OFFER,         \/\/ Offer extended$/;"	e	enum:cricket::FileShareState
FS_REMOTE_CANCEL	talk/session/fileshare/fileshare.h	/^  FS_REMOTE_CANCEL, \/\/ Remote side cancelled$/;"	e	enum:cricket::FileShareState
FS_TRANSFER	talk/session/fileshare/fileshare.h	/^  FS_TRANSFER,      \/\/ In progress$/;"	e	enum:cricket::FileShareState
Failure	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::Failure(XmppEngine::Error reason) {$/;"	f	class:buzz::XmppLoginTask
FatalError	talk/base/host.cc	/^void FatalError(const std::string& name, int err) {$/;"	f	namespace:talk_base::__anon25
FileDispatcher	talk/base/physicalsocketserver.cc	/^  FileDispatcher(int fd, PhysicalSocketServer *ss) : ss_(ss), fd_(fd) {$/;"	f	class:talk_base::FileDispatcher
FileDispatcher	talk/base/physicalsocketserver.cc	/^class FileDispatcher: public Dispatcher, public AsyncFile {$/;"	c	namespace:talk_base	file:
FileExists	talk/base/diskcache_win32.cc	/^bool DiskCacheWin32::FileExists(const std::string& filename) const {$/;"	f	class:talk_base::DiskCacheWin32
FileExists	talk/base/diskcachestd.cc	/^bool DiskCacheStd::FileExists(const std::string& filename) const {$/;"	f	class:talk_base::DiskCacheStd
FileExists	talk/base/fileutils.cc	/^bool Filesystem::FileExists(const Pathname& pathname)$/;"	f	class:talk_base::Filesystem
FileExistsI	talk/base/unixfilesystem.cc	/^bool UnixFilesystem::FileExistsI(const Pathname& pathname)$/;"	f	class:talk_base::UnixFilesystem
FileExistsI	talk/base/win32filesystem.cc	/^bool Win32Filesystem::FileExistsI(const Pathname &path)$/;"	f	class:talk_base::Win32Filesystem
FileModifyTime	talk/base/fileutils.cc	/^time_t DirectoryIterator::FileModifyTime() const {$/;"	f	class:talk_base::DirectoryIterator
FileShareClient	talk/examples/pcp/pcp_main.cc	/^  FileShareClient(buzz::XmppClient *xmppclient, const buzz::Jid &send_to, const cricket::FileShareManifest *manifest, std::string root_dir) :$/;"	f	class:FileShareClient
FileShareClient	talk/examples/pcp/pcp_main.cc	/^class FileShareClient : public sigslot::has_slots<>, public talk_base::MessageHandler {$/;"	c	file:
FileShareDescription	talk/session/fileshare/fileshare.h	/^    FileShareDescription() : supports_http(false) { }$/;"	f	struct:cricket::FileShareSession::FileShareDescription
FileShareDescription	talk/session/fileshare/fileshare.h	/^  struct FileShareDescription : public cricket::SessionDescription {$/;"	s	class:cricket::FileShareSession
FileShareManifest	talk/session/fileshare/fileshare.h	/^class FileShareManifest {$/;"	c	namespace:cricket
FileShareSession	talk/session/fileshare/fileshare.cc	/^FileShareSession::FileShareSession(cricket::Session* session, const std::string &user_agent)$/;"	f	class:cricket::FileShareSession
FileShareSession	talk/session/fileshare/fileshare.h	/^class FileShareSession$/;"	c	namespace:cricket
FileShareSessionClient	talk/session/fileshare/fileshare.h	/^  FileShareSessionClient(SessionManager *sm, buzz::Jid jid, const std::string &user_agent) : sm_(sm), jid_(jid),$/;"	f	class:cricket::FileShareSessionClient
FileShareSessionClient	talk/session/fileshare/fileshare.h	/^class FileShareSessionClient :  public SessionClient$/;"	c	namespace:cricket
FileShareState	talk/session/fileshare/fileshare.h	/^enum FileShareState {$/;"	g	namespace:cricket
FileSize	talk/base/fileutils.cc	/^size_t DirectoryIterator::FileSize() const {$/;"	f	class:talk_base::DirectoryIterator
FileStream	talk/base/stream.cc	/^FileStream::FileStream() : file_(NULL) {$/;"	f	class:talk_base::FileStream
FileStream	talk/base/stream.h	/^class FileStream : public StreamInterface {$/;"	c	namespace:talk_base
FilenameToId	talk/base/diskcache.cc	/^bool DiskCache::FilenameToId(const std::string& filename, std::string* id,$/;"	f	class:talk_base::DiskCache
Filesystem	talk/base/fileutils.h	/^class Filesystem {$/;"	c	namespace:talk_base
Filter	talk/base/natserver.cc	/^bool NATServer::Filter(TransEntry* entry, const SocketAddress& ext_addr) {$/;"	f	class:talk_base::NATServer
FiltersIP	talk/base/nattypes.cc	/^  bool FiltersIP() { return false; }$/;"	f	class:talk_base::OpenConeNAT
FiltersIP	talk/base/nattypes.cc	/^  bool FiltersIP() { return true; }$/;"	f	class:talk_base::AddressRestrictedNAT
FiltersIP	talk/base/nattypes.cc	/^  bool FiltersIP() { return true; }$/;"	f	class:talk_base::PortRestrictedNAT
FiltersIP	talk/base/nattypes.cc	/^  bool FiltersIP() { return true; }$/;"	f	class:talk_base::SymmetricNAT
FiltersPort	talk/base/nattypes.cc	/^  bool FiltersPort() { return false; }$/;"	f	class:talk_base::AddressRestrictedNAT
FiltersPort	talk/base/nattypes.cc	/^  bool FiltersPort() { return false; }$/;"	f	class:talk_base::OpenConeNAT
FiltersPort	talk/base/nattypes.cc	/^  bool FiltersPort() { return true; }$/;"	f	class:talk_base::PortRestrictedNAT
FiltersPort	talk/base/nattypes.cc	/^  bool FiltersPort() { return true; }$/;"	f	class:talk_base::SymmetricNAT
Find	talk/base/httpserver.cc	/^HttpServer::Find(int connection_id) {$/;"	f	class:talk_base::HttpServer
FindClient	talk/p2p/base/sessionmanager.cc	/^std::string SessionManager::FindClient(const buzz::XmlElement* session) {$/;"	f	class:cricket::SessionManager
FindCodec	talk/session/phone/gipslitemediaengine.cc	/^bool GipsLiteMediaEngine::FindCodec(const Codec &codec)$/;"	f	class:GipsLiteMediaEngine
FindCodec	talk/session/phone/linphonemediaengine.cc	/^bool LinphoneMediaEngine::FindCodec(const Codec &c) {$/;"	f	class:LinphoneMediaEngine
FindGIPSCodec	talk/session/phone/gipslitemediaengine.cc	/^bool GipsLiteMediaEngine::FindGIPSCodec(Codec codec, GIPS_CodecInst* gips_codec) {$/;"	f	class:GipsLiteMediaEngine
FindLabel	talk/base/logging.cc	/^const char * FindLabel(int value, const talk_base::ConstantLabel entries[]) {$/;"	f	namespace:talk_base
FindNextPingableConnection	talk/p2p/base/p2ptransportchannel.cc	/^Connection* P2PTransportChannel::FindNextPingableConnection() {$/;"	f	class:cricket::P2PTransportChannel
FindOrAddNamedChild	talk/xmllite/xmlelement.cc	/^XmlElement* XmlElement::FindOrAddNamedChild(const QName& name) {$/;"	f	class:buzz::XmlElement
FindRemoteSessionDescription	talk/p2p/base/session.cc	/^bool Session::FindRemoteSessionDescription(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
FindRequiredAttribute	talk/p2p/base/session.cc	/^bool Session::FindRequiredAttribute(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
FindRequiredElement	talk/p2p/base/session.cc	/^bool Session::FindRequiredElement(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
FindSessionForStanza	talk/p2p/base/sessionmanager.cc	/^Session* SessionManager::FindSessionForStanza(const buzz::XmlElement* stanza, $/;"	f	class:cricket::SessionManager
FinishPath	talk/base/pathutils.cc	/^bool FinishPath(talk_base::Pathname& path, bool create,$/;"	f	namespace:talk_base
FirewallDirection	talk/base/firewallsocketserver.h	/^enum FirewallDirection { FD_IN, FD_OUT, FD_ANY };$/;"	g	namespace:talk_base
FirewallManager	talk/base/firewallsocketserver.cc	/^FirewallManager::FirewallManager() {$/;"	f	class:talk_base::FirewallManager
FirewallManager	talk/base/firewallsocketserver.h	/^class FirewallManager {$/;"	c	namespace:talk_base
FirewallProtocol	talk/base/firewallsocketserver.h	/^enum FirewallProtocol { FP_UDP, FP_TCP, FP_ANY };$/;"	g	namespace:talk_base
FirewallSocket	talk/base/firewallsocketserver.cc	/^  FirewallSocket(FirewallSocketServer * server, AsyncSocket * socket, int type)$/;"	f	class:talk_base::FirewallSocket
FirewallSocket	talk/base/firewallsocketserver.cc	/^  FirewallSocket(FirewallSocketServer * server, Socket * socket, int type)$/;"	f	class:talk_base::FirewallSocket
FirewallSocket	talk/base/firewallsocketserver.cc	/^class FirewallSocket : public AsyncSocketAdapter {$/;"	c	namespace:talk_base	file:
FirewallSocketServer	talk/base/firewallsocketserver.cc	/^FirewallSocketServer::FirewallSocketServer(SocketServer * server, FirewallManager * manager) : server_(server), manager_(manager) {$/;"	f	class:talk_base::FirewallSocketServer
FirewallSocketServer	talk/base/firewallsocketserver.h	/^class FirewallSocketServer : public SocketServer {$/;"	c	namespace:talk_base
FirstAttr	talk/xmllite/xmlelement.cc	/^XmlElement::FirstAttr() {$/;"	f	class:buzz::XmlElement
FirstAttr	talk/xmllite/xmlelement.h	/^  const XmlAttr * FirstAttr() const$/;"	f	class:buzz::XmlElement
FirstChild	talk/xmllite/xmlelement.cc	/^XmlElement::FirstChild() {$/;"	f	class:buzz::XmlElement
FirstChild	talk/xmllite/xmlelement.h	/^  const XmlChild * FirstChild() const$/;"	f	class:buzz::XmlElement
FirstElement	talk/xmllite/xmlelement.cc	/^XmlElement::FirstElement() {$/;"	f	class:buzz::XmlElement
FirstElement	talk/xmllite/xmlelement.h	/^  const XmlElement * FirstElement() const$/;"	f	class:buzz::XmlElement
FirstElementName	talk/xmllite/xmlelement.cc	/^XmlElement::FirstElementName() const {$/;"	f	class:buzz::XmlElement
FirstNamed	talk/xmllite/xmlelement.cc	/^XmlElement::FirstNamed(const QName & name) {$/;"	f	class:buzz::XmlElement
FirstNamed	talk/xmllite/xmlelement.h	/^  const XmlElement * FirstNamed(const QName & name) const$/;"	f	class:buzz::XmlElement
FirstWithNamespace	talk/xmllite/xmlelement.cc	/^XmlElement::FirstWithNamespace(const std::string & ns) {$/;"	f	class:buzz::XmlElement
FirstWithNamespace	talk/xmllite/xmlelement.h	/^  const XmlElement * FirstWithNamespace(const std::string & ns) const$/;"	f	class:buzz::XmlElement
Flags	talk/base/winping.h	/^    UCHAR   Flags;              \/\/ IP header flags$/;"	m	struct:talk_base::ip_option_information
FlagsToEvents	talk/base/physicalsocketserver.cc	/^uint32 FlagsToEvents(uint32 events) {$/;"	f	namespace:talk_base
Flow	talk/base/stream.cc	/^StreamResult Flow(StreamInterface* source,$/;"	f	namespace:talk_base
Flow	talk/base/streamutils.cc	/^StreamRelay::Flow(int read_index, int* error) {$/;"	f	class:StreamRelay
Flush	talk/base/asynctcpsocket.cc	/^int AsyncTCPSocket::Flush() {$/;"	f	class:talk_base::AsyncTCPSocket
Flush	talk/base/schanneladapter.cc	/^SChannelAdapter::Flush() {$/;"	f	class:talk_base::SChannelAdapter
Flush	talk/base/stream.cc	/^int FileStream::Flush() {$/;"	f	class:talk_base::FileStream
FlushQueuedStanzas	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::FlushQueuedStanzas() {$/;"	f	class:buzz::XmppLoginTask
Foo	talk/p2p/base/port_unittest.cc	/^  Foo(talk_base::Thread* th, Port* p1, Port* p2)$/;"	f	struct:Foo
Foo	talk/p2p/base/port_unittest.cc	/^struct Foo : public talk_base::MessageHandler, public sigslot::has_slots<> {$/;"	s	file:
ForStr	talk/xmllite/xmlelement.cc	/^XmlElement::ForStr(const std::string & str) {$/;"	f	class:buzz::XmlElement
ForgetPassword	talk/xmpp/xmppclient.cc	/^ForgetPassword(std::string & to_erase) {$/;"	f	namespace:buzz	file:
FormatCryptString	talk/base/cryptstring.h	/^  FormatCryptString() {$/;"	f	class:talk_base::FormatCryptString
FormatCryptString	talk/base/cryptstring.h	/^class FormatCryptString {$/;"	c	namespace:talk_base
FormatQName	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::FormatQName(const QName & name, bool isAttr) {$/;"	f	class:buzz::XmlnsStack
ForwardChannelMessage	talk/p2p/base/transport.cc	/^void Transport::ForwardChannelMessage(const std::string& name,$/;"	f	class:cricket::Transport
ForwardChannelMessage_w	talk/p2p/base/transport.cc	/^void Transport::ForwardChannelMessage_w(const std::string& name,$/;"	f	class:cricket::Transport
FreeDelete	talk/base/sec_buffer.h	/^  static void FreeDelete(void *ptr) {$/;"	f	class:talk_base::CSecBufferBase
FreeNone	talk/base/sec_buffer.h	/^  static void FreeNone(void *ptr) {$/;"	f	class:talk_base::CSecBufferBase
FreeSSPI	talk/base/sec_buffer.h	/^  static void FreeSSPI(void *ptr) {$/;"	f	class:talk_base::CSecBufferBase
FromSockAddr	talk/base/socketaddress.cc	/^void SocketAddress::FromSockAddr(const sockaddr_in& saddr) {$/;"	f	class:talk_base::SocketAddress
FromString	talk/base/httpcommon.cc	/^bool FromString(HttpHeader& header, const std::string& str) {$/;"	f	namespace:talk_base
FromString	talk/base/httpcommon.cc	/^bool FromString(HttpVerb& verb, const std::string& str) {$/;"	f	namespace:talk_base
FromString	talk/base/httpcommon.cc	/^bool FromString(HttpVersion& version, const std::string& str) {$/;"	f	namespace:talk_base
FromString	talk/base/stringencode.h	/^static bool FromString(const std::string& s, T* t) {$/;"	f	namespace:talk_base
FromString	talk/base/stringencode.h	/^static inline T FromString(const std::string& str) {$/;"	f	namespace:talk_base
FullJid	talk/xmpp/xmppengineimpl.h	/^  virtual const Jid & FullJid() { return bound_jid_; }$/;"	f	class:buzz::XmppEngineImpl
Function	talk/base/virtualsocketserver.h	/^  typedef std::vector<Point> Function;$/;"	t	class:talk_base::VirtualSocketServer
FunctionDomainCmp	talk/base/virtualsocketserver.cc	/^struct FunctionDomainCmp {$/;"	s	namespace:talk_base	file:
GIPS_EXPIRATION_DAY	talk/third_party/gips/expiration.h	2;"	d
GIPS_EXPIRATION_MONTH	talk/third_party/gips/expiration.h	1;"	d
GIPS_EXPIRATION_YEAR	talk/third_party/gips/expiration.h	3;"	d
GIPS_FALSE	talk/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/base/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/examples/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/examples/call/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/examples/login/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/examples/pcp/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/p2p/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/p2p/base/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/p2p/client/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/session/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/session/fileshare/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/session/phone/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/session/tunnel/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/third_party/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/third_party/gips/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/third_party/mediastreamer/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/xmllite/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_FALSE	talk/xmpp/Makefile	/^GIPS_FALSE = $/;"	m
GIPS_TRUE	talk/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/base/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/examples/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/examples/call/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/examples/login/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/examples/pcp/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/p2p/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/p2p/base/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/p2p/client/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/session/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/session/fileshare/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/session/phone/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/session/tunnel/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/third_party/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/third_party/gips/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/third_party/mediastreamer/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/xmllite/Makefile	/^GIPS_TRUE = #$/;"	m
GIPS_TRUE	talk/xmpp/Makefile	/^GIPS_TRUE = #$/;"	m
GLIB_CFLAGS	talk/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/base/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/examples/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/examples/call/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/examples/login/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/examples/pcp/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/p2p/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/p2p/base/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/p2p/client/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/session/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/session/fileshare/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/session/phone/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/session/tunnel/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/third_party/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/third_party/gips/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/third_party/mediastreamer/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/xmllite/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_CFLAGS	talk/xmpp/Makefile	/^GLIB_CFLAGS = -pthread -I\/opt\/gnome\/include\/glib-2.0 -I\/opt\/gnome\/lib\/glib-2.0\/include  $/;"	m
GLIB_LIBS	talk/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/base/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/examples/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/examples/call/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/examples/login/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/examples/pcp/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/p2p/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/p2p/base/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/p2p/client/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/session/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/session/fileshare/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/session/phone/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/session/tunnel/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/third_party/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/third_party/gips/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/third_party/mediastreamer/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/xmllite/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GLIB_LIBS	talk/xmpp/Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -pthread -L\/opt\/gnome\/lib -lgmodule-2.0 -ldl -lgthread-2.0 -lglib-2.0  $/;"	m
GOOGLE_CLIENT_NODE	talk/examples/login/status.h	25;"	d
GZIP	Makefile	/^GZIP     = gzip -9f$/;"	m
GenerateTemporaryPrefix	talk/session/fileshare/fileshare.cc	/^void FileShareSession::GenerateTemporaryPrefix(std::string* prefix) {$/;"	f	class:cricket::FileShareSession
Get	talk/base/messagequeue.cc	/^bool MessageQueue::Get(Message *pmsg, int cmsWait) {$/;"	f	class:talk_base::MessageQueue
Get	talk/base/proxydetect.cc	/^  const std::string& Get(const char * name, const char * def = "") const {$/;"	f	struct:StringMap
GetAddress	talk/base/httpserver.cc	/^HttpListenServer::GetAddress(SocketAddress& address) {$/;"	f	class:talk_base::HttpListenServer
GetAddress	talk/p2p/base/port_unittest.cc	/^talk_base::SocketAddress GetAddress(Port* port) {$/;"	f
GetAddress	talk/p2p/base/session_unittest.cc	/^  talk_base::SocketAddress GetAddress() const {$/;"	f	class:TestPortAllocatorSession
GetAddress	talk/p2p/base/stun.cc	/^StunMessage::GetAddress(StunAttributeType type) const {$/;"	f	class:cricket::StunMessage
GetAppDataFolder	talk/base/pathutils.cc	/^bool GetAppDataFolder(talk_base::Pathname& path, bool create,$/;"	f	namespace:talk_base
GetAttribute	talk/p2p/base/stun.cc	/^const StunAttribute* StunMessage::GetAttribute(StunAttributeType type) const {$/;"	f	class:cricket::StunMessage
GetAuthCookie	talk/examples/login/xmppauth.h	/^  virtual std::string GetAuthCookie() { return auth_cookie_; }$/;"	f	class:XmppAuth
GetAuthCookie	talk/xmpp/xmppclient.cc	/^XmppClient::GetAuthCookie() {$/;"	f	class:buzz::XmppClient
GetBestConnectionOnNetwork	talk/p2p/base/p2ptransportchannel.cc	/^Connection* P2PTransportChannel::GetBestConnectionOnNetwork($/;"	f	class:cricket::P2PTransportChannel
GetBit	talk/p2p/base/stun.cc	/^bool StunUInt32Attribute::GetBit(int index) const {$/;"	f	class:cricket::StunUInt32Attribute
GetBuffer	talk/base/stream.h	/^  char* GetBuffer() { return buffer_; }$/;"	f	class:talk_base::MemoryStream
GetBuffer	talk/base/stream.h	/^  const char* GetBuffer() const { return buffer_; }$/;"	f	class:talk_base::MemoryStream
GetByte	talk/p2p/base/stun.cc	/^uint8 StunByteStringAttribute::GetByte(int index) const {$/;"	f	class:cricket::StunByteStringAttribute
GetByteCount	talk/base/streamutils.h	/^  inline size_t GetByteCount() const { return count_; }$/;"	f	class:StreamCounter
GetByteString	talk/p2p/base/stun.cc	/^StunMessage::GetByteString(StunAttributeType type) const {$/;"	f	class:cricket::StunMessage
GetCacheID	talk/base/httpclient.cc	/^std::string GetCacheID(const SocketAddress& server,$/;"	f	namespace:talk_base::__anon14
GetCandidate	talk/p2p/base/port_unittest.cc	/^Candidate GetCandidate(Port* port) {$/;"	f
GetCaptchaChallenge	talk/examples/login/xmppauth.h	/^  virtual buzz::CaptchaChallenge GetCaptchaChallenge() {$/;"	f	class:XmppAuth
GetCaptchaChallenge	talk/xmpp/xmppclient.cc	/^CaptchaChallenge XmppClient::GetCaptchaChallenge() {$/;"	f	class:buzz::XmppClient
GetChannel	talk/p2p/base/session.cc	/^TransportChannel* Session::GetChannel(const std::string& name) {$/;"	f	class:cricket::Session
GetChannel	talk/p2p/base/transport.cc	/^TransportChannelImpl* Transport::GetChannel(const std::string& name) {$/;"	f	class:cricket::Transport
GetChannel	talk/session/phone/call.cc	/^VoiceChannel* Call::GetChannel(Session* session) {$/;"	f	class:cricket::Call
GetClient	talk/p2p/base/sessionmanager.cc	/^SessionClient* SessionManager::GetClient(const std::string& session_type) {$/;"	f	class:cricket::SessionManager
GetClient	talk/xmpp/xmpptask.h	/^  virtual XmppClient* GetClient() const { return client_; }$/;"	f	class:buzz::XmppTask
GetConnection	talk/p2p/base/port.cc	/^Connection* Port::GetConnection(const talk_base::SocketAddress& remote_addr) {$/;"	f	class:cricket::Port
GetCurrentItemName	talk/session/fileshare/fileshare.cc	/^bool FileShareSession::GetCurrentItemName(std::string* name) {$/;"	f	class:cricket::FileShareSession
GetCurrentQuality	talk/session/phone/linphonemediaengine.cc	/^float LinphoneMediaEngine::GetCurrentQuality() {}$/;"	f	class:LinphoneMediaEngine
GetData	talk/base/cryptstring.h	/^  const char * GetData() {$/;"	f	class:talk_base::FormatCryptString
GetDefaultFirefoxProfile	talk/base/proxydetect.cc	/^bool GetDefaultFirefoxProfile(std::wstring* profile) {$/;"	f
GetDelay	talk/base/messagequeue.cc	/^int MessageQueue::GetDelay() {$/;"	f	class:talk_base::MessageQueue
GetDelayDistribution	talk/base/virtualsocketserver.cc	/^VirtualSocketServer::Function* VirtualSocketServer::GetDelayDistribution() {$/;"	f	class:talk_base::VirtualSocketServer
GetDescriptor	talk/base/physicalsocketserver.cc	/^  virtual int GetDescriptor() {$/;"	f	class:talk_base::EventDispatcher
GetDescriptor	talk/base/physicalsocketserver.cc	/^  virtual int GetDescriptor() {$/;"	f	class:talk_base::FileDispatcher
GetDescriptor	talk/base/physicalsocketserver.cc	/^  virtual int GetDescriptor() {$/;"	f	class:talk_base::SocketDispatcher
GetEntry	talk/base/diskcache.h	/^  const Entry* GetEntry(const std::string& id) const {$/;"	f	class:talk_base::DiskCache
GetError	talk/base/asyncpacketsocket.cc	/^int AsyncPacketSocket::GetError() const {$/;"	f	class:talk_base::AsyncPacketSocket
GetError	talk/base/asyncsocket.h	/^  virtual int GetError() const { return socket_->GetError(); }$/;"	f	class:talk_base::AsyncSocketAdapter
GetError	talk/base/natsocketfactory.cc	/^  int GetError() const { return socket_->GetError(); }$/;"	f	class:talk_base::NATSocket
GetError	talk/base/physicalsocketserver.cc	/^  int GetError() const {$/;"	f	class:talk_base::PhysicalSocket
GetError	talk/base/virtualsocketserver.cc	/^  int GetError() const {$/;"	f	class:talk_base::VirtualSocket
GetError	talk/base/win32socketserver.cc	/^Win32Socket::GetError() const {$/;"	f	class:talk_base::Win32Socket
GetError	talk/examples/login/xmppauth.h	/^  virtual int  GetError() { return 0; }$/;"	f	class:XmppAuth
GetError	talk/examples/login/xmppsocket.cc	/^int XmppSocket::GetError() {$/;"	f	class:XmppSocket
GetError	talk/p2p/base/p2ptransportchannel.h	/^  virtual int GetError() { return error_; }$/;"	f	class:cricket::P2PTransportChannel
GetError	talk/p2p/base/port.h	/^  virtual int GetError() { return error_; }$/;"	f	class:cricket::ProxyConnection
GetError	talk/p2p/base/pseudotcp.cc	/^int PseudoTcp::GetError() {$/;"	f	class:cricket::PseudoTcp
GetError	talk/p2p/base/rawtransportchannel.cc	/^int RawTransportChannel::GetError() {$/;"	f	class:cricket::RawTransportChannel
GetError	talk/p2p/base/relayport.cc	/^  int GetError() const { return socket_->GetError(); }$/;"	f	class:cricket::RelayEntry
GetError	talk/p2p/base/relayport.cc	/^int RelayPort::GetError() {$/;"	f	class:cricket::RelayPort
GetError	talk/p2p/base/stunport.cc	/^int StunPort::GetError() {$/;"	f	class:cricket::StunPort
GetError	talk/p2p/base/tcpport.cc	/^int TCPConnection::GetError() {$/;"	f	class:cricket::TCPConnection
GetError	talk/p2p/base/tcpport.cc	/^int TCPPort::GetError() {$/;"	f	class:cricket::TCPPort
GetError	talk/p2p/base/transportchannelproxy.cc	/^int TransportChannelProxy::GetError() {$/;"	f	class:cricket::TransportChannelProxy
GetError	talk/p2p/base/udpport.cc	/^int UDPPort::GetError() {$/;"	f	class:cricket::UDPPort
GetError	talk/xmpp/xmppclient.cc	/^XmppClient::GetError(int *subcode) {$/;"	f	class:buzz::XmppClient
GetError	talk/xmpp/xmppengineimpl.h	/^  virtual Error GetError(int *subcode) {$/;"	f	class:buzz::XmppEngineImpl
GetErrorCode	talk/p2p/base/stun.cc	/^const StunErrorCodeAttribute* StunMessage::GetErrorCode() const {$/;"	f	class:cricket::StunMessage
GetExternalConnection	talk/p2p/base/relayserver.cc	/^RelayServerConnection* RelayServerBinding::GetExternalConnection($/;"	f	class:cricket::RelayServerBinding
GetFeature	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::GetFeature(const QName & name) {$/;"	f	class:buzz::XmppLoginTask
GetFileCount	talk/session/fileshare/fileshare.h	/^  inline size_t GetFileCount() const { return GetItemCount(T_FILE); }$/;"	f	class:cricket::FileShareManifest
GetFileSize	talk/base/fileutils.cc	/^bool Filesystem::GetFileSize(const Pathname &dir, size_t *size)$/;"	f	class:talk_base::Filesystem
GetFileSizeI	talk/base/unixfilesystem.cc	/^bool UnixFilesystem::GetFileSizeI(const Pathname& pathname, size_t *size)$/;"	f	class:talk_base::UnixFilesystem
GetFileSizeI	talk/base/win32filesystem.cc	/^bool Win32Filesystem::GetFileSizeI(const Pathname &pathname, size_t *size)$/;"	f	class:talk_base::Win32Filesystem
GetFocus	talk/session/phone/phonesessionclient.cc	/^Call *PhoneSessionClient::GetFocus() {$/;"	f	class:cricket::PhoneSessionClient
GetFolderCount	talk/session/fileshare/fileshare.h	/^  inline size_t GetFolderCount() const { return GetItemCount(T_FOLDER); }$/;"	f	class:cricket::FileShareManifest
GetGIPSCodecPreference	talk/session/phone/gipslitemediaengine.cc	/^int GipsLiteMediaEngine::GetGIPSCodecPreference(const char *name, int clockrate) {$/;"	f	class:GipsLiteMediaEngine
GetHandle	talk/base/thread.h	/^  HANDLE GetHandle() {$/;"	f	class:talk_base::Thread
GetHostName	talk/base/host.cc	/^std::string GetHostName() {$/;"	f	namespace:talk_base
GetHostname	talk/base/socketaddress.cc	/^std::string SocketAddress::GetHostname() {$/;"	f	class:talk_base::SocketAddress
GetImageCount	talk/session/fileshare/fileshare.h	/^  inline size_t GetImageCount() const { return GetItemCount(T_IMAGE); }$/;"	f	class:cricket::FileShareManifest
GetImagePreviewUrl	talk/session/fileshare/fileshare.cc	/^bool FileShareSession::GetImagePreviewUrl(size_t index, size_t width,$/;"	f	class:cricket::FileShareSession
GetImplementation	talk/p2p/base/session.cc	/^TransportChannelImpl* Session::GetImplementation(TransportChannel* channel) {$/;"	f	class:cricket::Session
GetIncoming	talk/p2p/base/tcpport.cc	/^talk_base::AsyncTCPSocket * TCPPort::GetIncoming($/;"	f	class:cricket::TCPPort
GetInitialPorts	talk/p2p/base/session_unittest.cc	/^  virtual void GetInitialPorts() {$/;"	f	class:TestPortAllocatorSession
GetInitialPorts	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::GetInitialPorts() {$/;"	f	class:cricket::BasicPortAllocatorSession
GetInputLevel	talk/session/phone/gipslitemediaengine.h	/^  virtual int GetInputLevel() {return gips_.GIPSVE_GetInputLevel();}$/;"	f	class:cricket::GipsLiteMediaEngine
GetInputLevel	talk/session/phone/linphonemediaengine.cc	/^int LinphoneMediaEngine::GetInputLevel() {}$/;"	f	class:LinphoneMediaEngine
GetInputLevel_w	talk/session/phone/voicechannel.cc	/^int VoiceChannel::GetInputLevel_w() {$/;"	f	class:cricket::VoiceChannel
GetInternalConnection	talk/p2p/base/relayserver.cc	/^RelayServerConnection* RelayServerBinding::GetInternalConnection($/;"	f	class:cricket::RelayServerBinding
GetItemBaseUrl	talk/session/fileshare/fileshare.cc	/^bool FileShareSession::GetItemBaseUrl(size_t index, bool preview,$/;"	f	class:cricket::FileShareSession
GetItemCount	talk/session/fileshare/fileshare.cc	/^FileShareManifest::GetItemCount(Type t) const {$/;"	f	class:cricket::FileShareManifest
GetItemNetworkPath	talk/session/fileshare/fileshare.cc	/^void FileShareSession::GetItemNetworkPath(size_t index, bool preview,$/;"	f	class:cricket::FileShareSession
GetItemUrl	talk/session/fileshare/fileshare.cc	/^FileShareSession::GetItemUrl(size_t index, std::string* url) {$/;"	f	class:cricket::FileShareSession
GetLength	talk/base/cryptstring.h	/^  size_t GetLength() const { return impl_->GetLength(); }$/;"	f	class:talk_base::CryptString
GetLength	talk/base/cryptstring.h	/^  size_t GetLength() {$/;"	f	class:talk_base::FormatCryptString
GetLength	talk/base/cryptstring.h	/^  virtual size_t GetLength() const { return 0; }$/;"	f	class:talk_base::EmptyCryptStringImpl
GetLength	talk/base/cryptstring.h	/^  virtual size_t GetLength() const { return password_.size(); }$/;"	f	class:talk_base::InsecureCryptStringImpl
GetLocalAddress	talk/base/asyncpacketsocket.cc	/^SocketAddress AsyncPacketSocket::GetLocalAddress() const {$/;"	f	class:talk_base::AsyncPacketSocket
GetLocalAddress	talk/base/asyncsocket.h	/^  virtual SocketAddress GetLocalAddress() const { return socket_->GetLocalAddress(); }$/;"	f	class:talk_base::AsyncSocketAdapter
GetLocalAddress	talk/base/natsocketfactory.cc	/^  SocketAddress GetLocalAddress() const {$/;"	f	class:talk_base::NATSocket
GetLocalAddress	talk/base/physicalsocketserver.cc	/^  SocketAddress GetLocalAddress() const {$/;"	f	class:talk_base::PhysicalSocket
GetLocalAddress	talk/base/virtualsocketserver.cc	/^  SocketAddress GetLocalAddress() const {$/;"	f	class:talk_base::VirtualSocket
GetLocalAddress	talk/base/win32socketserver.cc	/^Win32Socket::GetLocalAddress() const {$/;"	f	class:talk_base::Win32Socket
GetLocalAddress	talk/p2p/base/stunport.h	/^  talk_base::SocketAddress GetLocalAddress() const {$/;"	f	class:cricket::StunPort
GetLocalIPs	talk/base/socketaddress.cc	/^bool SocketAddress::GetLocalIPs(std::vector<uint32>& ips) {$/;"	f	class:talk_base::SocketAddress
GetLogToDebug	talk/base/logging.h	/^  static int GetLogToDebug() { return dbg_sev_; }$/;"	f	class:talk_base::LogMessage
GetLogToStream	talk/base/logging.h	/^  static int GetLogToStream() { return stream_sev_; }$/;"	f	class:talk_base::LogMessage
GetMechanismName	talk/xmpp/saslcookiemechanism.h	/^  virtual std::string GetMechanismName() { return mechanism_; }$/;"	f	class:buzz::SaslCookieMechanism
GetMechanismName	talk/xmpp/saslplainmechanism.h	/^  virtual std::string GetMechanismName() { return "PLAIN"; }$/;"	f	class:buzz::SaslPlainMechanism
GetMillisecondCount	talk/base/time.h	45;"	d
GetMinLogSeverity	talk/base/logging.h	/^  static int GetMinLogSeverity() { return min_sev_; }$/;"	f	class:talk_base::LogMessage
GetNetworks	talk/base/network.cc	/^void NetworkManager::GetNetworks(std::vector<Network*>& result) {$/;"	f	class:talk_base::NetworkManager
GetNextClock	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::GetNextClock(uint32 now, long& timeout) {$/;"	f	class:cricket::PseudoTcp
GetNextDelay	talk/p2p/base/port.cc	/^  virtual int GetNextDelay() {$/;"	f	class:cricket::ConnectionRequest
GetNextDelay	talk/p2p/base/relayport.cc	/^int AllocateRequest::GetNextDelay() {$/;"	f	class:cricket::AllocateRequest
GetNextDelay	talk/p2p/base/stunrequest.cc	/^int StunRequest::GetNextDelay() {$/;"	f	class:cricket::StunRequest
GetNextID	talk/p2p/base/session_unittest.cc	/^std::string GetNextID() {$/;"	f
GetNextIP	talk/base/virtualsocketserver.cc	/^uint32 VirtualSocketServer::GetNextIP() {$/;"	f	class:talk_base::VirtualSocketServer
GetNextPort	talk/p2p/base/session_unittest.cc	/^int GetNextPort() {$/;"	f
GetOrCreateEntry	talk/base/diskcache.cc	/^DiskCache::Entry* DiskCache::GetOrCreateEntry(const std::string& id,$/;"	f	class:talk_base::DiskCache
GetOrigin	talk/p2p/base/p2ptransportchannel.cc	/^cricket::Port::CandidateOrigin GetOrigin(cricket::Port* port,$/;"	f	namespace:__anon1
GetOutputLevel	talk/session/phone/gipslitemediaengine.h	/^  virtual int GetOutputLevel() {return engine_->gips().GIPSVE_GetOutputLevel(gips_channel_);}$/;"	f	class:cricket::GipsLiteMediaChannel
GetOutputLevel	talk/session/phone/linphonemediaengine.cc	/^int LinphoneMediaChannel::GetOutputLevel() {}$/;"	f	class:LinphoneMediaChannel
GetOutputLevel_w	talk/session/phone/voicechannel.cc	/^int VoiceChannel::GetOutputLevel_w() {$/;"	f	class:cricket::VoiceChannel
GetP2PChannel	talk/p2p/client/socketmonitor.cc	/^P2PTransportChannel* SocketMonitor::GetP2PChannel() {$/;"	f	class:cricket::SocketMonitor
GetParent	talk/base/task.h	/^  Task *GetParent() { return parent_; }$/;"	f	class:talk_base::Task
GetParent	talk/base/task.h	/^  virtual Task *GetParent(int code) { return parent_->GetParent(code); }$/;"	f	class:talk_base::Task
GetParent	talk/xmpp/xmppclient.cc	/^talk_base::Task* XmppClient::GetParent(int code) {$/;"	f	class:buzz::XmppClient
GetPortConfigurations	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::GetPortConfigurations() {$/;"	f	class:cricket::BasicPortAllocatorSession
GetPortConfigurations	talk/p2p/client/httpportallocator.cc	/^void HttpPortAllocatorSession::GetPortConfigurations() {$/;"	f	class:cricket::HttpPortAllocatorSession
GetPosition	talk/base/stream.cc	/^bool FileStream::GetPosition(size_t * position) const {$/;"	f	class:talk_base::FileStream
GetPosition	talk/base/stream.cc	/^bool MemoryStream::GetPosition(size_t *position) const {$/;"	f	class:talk_base::MemoryStream
GetProgress	talk/session/fileshare/fileshare.cc	/^bool FileShareSession::GetProgress(size_t& bytes) const {$/;"	f	class:cricket::FileShareSession
GetProxyAddress	talk/session/fileshare/fileshare.cc	/^bool FileShareSession::GetProxyAddress(talk_base::SocketAddress& address,$/;"	f	class:cricket::FileShareSession
GetProxySettingsForUrl	talk/base/proxydetect.cc	/^bool GetProxySettingsForUrl(const char* agent, const char* url,$/;"	f
GetRandom	talk/base/helpers.cc	/^int GetRandom() {$/;"	f	namespace:cricket
GetRandomSeed	talk/base/helpers.cc	/^long GetRandomSeed() {$/;"	f	namespace:cricket
GetRandomTransitDelay	talk/base/virtualsocketserver.cc	/^uint32 VirtualSocketServer::GetRandomTransitDelay() {$/;"	f	class:talk_base::VirtualSocketServer
GetRateLimit	talk/xmpp/ratelimitmanager.cc	/^RateLimitManager::RateLimit* RateLimitManager::GetRateLimit($/;"	f	class:buzz::RateLimitManager
GetRemoteAddress	talk/base/asyncpacketsocket.cc	/^SocketAddress AsyncPacketSocket::GetRemoteAddress() const {$/;"	f	class:talk_base::AsyncPacketSocket
GetRemoteAddress	talk/base/asyncsocket.h	/^  virtual SocketAddress GetRemoteAddress() const { return socket_->GetRemoteAddress(); }$/;"	f	class:talk_base::AsyncSocketAdapter
GetRemoteAddress	talk/base/natsocketfactory.cc	/^  SocketAddress GetRemoteAddress() const {$/;"	f	class:talk_base::NATSocket
GetRemoteAddress	talk/base/physicalsocketserver.cc	/^  SocketAddress GetRemoteAddress() const {$/;"	f	class:talk_base::PhysicalSocket
GetRemoteAddress	talk/base/socketadapters.cc	/^SocketAddress AsyncHttpsProxySocket::GetRemoteAddress() const {$/;"	f	class:talk_base::AsyncHttpsProxySocket
GetRemoteAddress	talk/base/socketadapters.cc	/^SocketAddress AsyncSocksProxySocket::GetRemoteAddress() const {$/;"	f	class:talk_base::AsyncSocksProxySocket
GetRemoteAddress	talk/base/virtualsocketserver.cc	/^  SocketAddress GetRemoteAddress() const {$/;"	f	class:talk_base::VirtualSocket
GetRemoteAddress	talk/base/win32socketserver.cc	/^Win32Socket::GetRemoteAddress() const {$/;"	f	class:talk_base::Win32Socket
GetRequestedEvents	talk/base/physicalsocketserver.cc	/^  virtual uint32 GetRequestedEvents() {$/;"	f	class:talk_base::EventDispatcher
GetRequestedEvents	talk/base/physicalsocketserver.cc	/^  virtual uint32 GetRequestedEvents() {$/;"	f	class:talk_base::FileDispatcher
GetRequestedEvents	talk/base/physicalsocketserver.cc	/^  virtual uint32 GetRequestedEvents() {$/;"	f	class:talk_base::SocketDispatcher
GetRequestedResource	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::GetRequestedResource() {$/;"	f	class:buzz::XmppEngineImpl
GetResponse	talk/p2p/base/stunserver_unittest.cc	/^StunMessage* GetResponse(talk_base::TestClient* client) {$/;"	f
GetRunner	talk/base/task.h	/^  TaskRunner *GetRunner() { return runner_; }$/;"	f	class:talk_base::Task
GetSaslMechanism	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::GetSaslMechanism(const std::string & name) {$/;"	f	class:buzz::XmppEngineImpl
GetSession	talk/p2p/base/sessionmanager.cc	/^Session *SessionManager::GetSession(const SessionID& id) {$/;"	f	class:cricket::SessionManager
GetSize	talk/base/socketstream.h	/^  virtual bool GetSize(size_t* size) const { return false; }$/;"	f	class:talk_base::SocketStream
GetSize	talk/base/stream.cc	/^bool FileStream::GetSize(const std::string& filename, size_t* size) {$/;"	f	class:talk_base::FileStream
GetSize	talk/base/stream.cc	/^bool FileStream::GetSize(size_t * size) const {$/;"	f	class:talk_base::FileStream
GetSize	talk/base/stream.cc	/^bool MemoryStream::GetSize(size_t *size) const {$/;"	f	class:talk_base::MemoryStream
GetSize	talk/base/stream.cc	/^bool NullStream::GetSize(size_t* size) const {$/;"	f	class:talk_base::NullStream
GetSize	talk/base/stream.cc	/^bool StringStream::GetSize(size_t* size) const {$/;"	f	class:talk_base::StringStream
GetSize	talk/base/stream.h	/^  virtual bool GetSize(size_t* size) const {$/;"	f	class:talk_base::StreamAdapterInterface
GetSize	talk/base/tarstream.h	/^  virtual bool GetSize(size_t* size) const { return false; }$/;"	f	class:talk_base::TarStream
GetSize	talk/session/tunnel/pseudotcpchannel.cc	/^  virtual bool GetSize(size_t* size) const { return false; }$/;"	f	class:cricket::PseudoTcpChannel::InternalStream
GetSocket	talk/base/physicalsocketserver.cc	/^  virtual SOCKET GetSocket() {$/;"	f	class:talk_base::EventDispatcher
GetSocket	talk/base/physicalsocketserver.cc	/^  virtual SOCKET GetSocket() {$/;"	f	class:talk_base::SocketDispatcher
GetSocket	talk/base/socketstream.h	/^  AsyncSocket* GetSocket() { return socket_; }$/;"	f	class:talk_base::SocketStream
GetState	talk/base/asyncsocket.h	/^  virtual ConnState GetState() const { return socket_->GetState(); }$/;"	f	class:talk_base::AsyncSocketAdapter
GetState	talk/base/natsocketfactory.cc	/^  ConnState GetState() const { return connected_ ? CS_CONNECTED : CS_CLOSED; }$/;"	f	class:talk_base::NATSocket
GetState	talk/base/network.cc	/^std::string Network::GetState() {$/;"	f	class:talk_base::Network
GetState	talk/base/network.cc	/^std::string NetworkManager::GetState() {$/;"	f	class:talk_base::NetworkManager
GetState	talk/base/openssladapter.cc	/^OpenSSLAdapter::GetState() const {$/;"	f	class:talk_base::OpenSSLAdapter
GetState	talk/base/physicalsocketserver.cc	/^  ConnState GetState() const {$/;"	f	class:talk_base::PhysicalSocket
GetState	talk/base/schanneladapter.cc	/^SChannelAdapter::GetState() const {$/;"	f	class:talk_base::SChannelAdapter
GetState	talk/base/socketstream.h	/^  virtual StreamState GetState() const {$/;"	f	class:talk_base::SocketStream
GetState	talk/base/stream.cc	/^StreamState FileStream::GetState() const {$/;"	f	class:talk_base::FileStream
GetState	talk/base/stream.cc	/^StreamState MemoryStream::GetState() const {$/;"	f	class:talk_base::MemoryStream
GetState	talk/base/stream.cc	/^StreamState NullStream::GetState() const {$/;"	f	class:talk_base::NullStream
GetState	talk/base/stream.cc	/^StreamState StringStream::GetState() const {$/;"	f	class:talk_base::StringStream
GetState	talk/base/stream.h	/^  virtual StreamState GetState() const {$/;"	f	class:talk_base::StreamAdapterInterface
GetState	talk/base/tarstream.cc	/^StreamState TarStream::GetState() const {$/;"	f	class:TarStream
GetState	talk/base/task.h	/^  int GetState() const { return state_; }$/;"	f	class:talk_base::Task
GetState	talk/base/virtualsocketserver.cc	/^  ConnState GetState() const {$/;"	f	class:talk_base::VirtualSocket
GetState	talk/base/win32socketserver.cc	/^Win32Socket::GetState() const {$/;"	f	class:talk_base::Win32Socket
GetState	talk/session/tunnel/pseudotcpchannel.cc	/^StreamState PseudoTcpChannel::GetState() const {$/;"	f	class:cricket::PseudoTcpChannel
GetState	talk/session/tunnel/pseudotcpchannel.cc	/^StreamState PseudoTcpChannel::InternalStream::GetState() const {$/;"	f	class:cricket::PseudoTcpChannel::InternalStream
GetState	talk/xmpp/xmppclient.cc	/^XmppClient::GetState() {$/;"	f	class:buzz::XmppClient
GetState	talk/xmpp/xmppengineimpl.h	/^  virtual State GetState() { return state_; }$/;"	f	class:buzz::XmppEngineImpl
GetStateName	talk/base/task.cc	/^std::string Task::GetStateName(int state) const {$/;"	f	class:talk_base::Task
GetStateName	talk/xmpp/xmppclient.h	/^  std::string GetStateName(int state) const {$/;"	f	class:buzz::XmppClient
GetStream	talk/session/tunnel/pseudotcpchannel.cc	/^StreamInterface* PseudoTcpChannel::GetStream() {$/;"	f	class:cricket::PseudoTcpChannel
GetStream	talk/session/tunnel/tunnelsessionclient.cc	/^talk_base::StreamInterface* TunnelSession::GetStream() {$/;"	f	class:cricket::TunnelSession
GetStreamError	talk/xmpp/xmppclient.cc	/^XmppClient::GetStreamError() {$/;"	f	class:buzz::XmppClient
GetStreamError	talk/xmpp/xmppengineimpl.h	/^  virtual const XmlElement * GetStreamError() { return stream_error_.get(); }$/;"	f	class:buzz::XmppEngineImpl
GetStunErrorResponseType	talk/p2p/base/stun.cc	/^StunMessageType GetStunErrorResponseType(StunMessageType request_type) {$/;"	f	namespace:cricket
GetStunMessage	talk/p2p/base/port.cc	/^bool Port::GetStunMessage(const char* data, size_t size,$/;"	f	class:cricket::Port
GetStunResponseType	talk/p2p/base/stun.cc	/^StunMessageType GetStunResponseType(StunMessageType request_type) {$/;"	f	namespace:cricket
GetTapResult	talk/base/stream.cc	/^StreamResult StreamTap::GetTapResult(int* error) {$/;"	f	class:talk_base::StreamTap
GetTemporaryFolder	talk/base/fileutils.cc	/^bool Filesystem::GetTemporaryFolder(Pathname &path, bool create,$/;"	f	class:talk_base::Filesystem
GetTemporaryFolder	talk/base/pathutils.cc	/^bool GetTemporaryFolder(talk_base::Pathname& path, bool create,$/;"	f	namespace:talk_base
GetTemporaryFolderI	talk/base/unixfilesystem.cc	/^bool UnixFilesystem::GetTemporaryFolderI(Pathname &pathname, bool create,$/;"	f	class:talk_base::UnixFilesystem
GetTemporaryFolderI	talk/base/win32filesystem.cc	/^bool Win32Filesystem::GetTemporaryFolderI(Pathname &pathname, bool create,$/;"	f	class:talk_base::Win32Filesystem
GetTotalSize	talk/session/fileshare/fileshare.cc	/^bool FileShareSession::GetTotalSize(size_t& bytes) const {$/;"	f	class:cricket::FileShareSession
GetTransport	talk/p2p/base/p2ptransportchannel.h	/^  virtual Transport* GetTransport() { return transport_; }$/;"	f	class:cricket::P2PTransportChannel
GetTransport	talk/p2p/base/rawtransportchannel.h	/^  virtual Transport* GetTransport() { return raw_transport_; }$/;"	f	class:cricket::RawTransportChannel
GetTransport	talk/p2p/base/session.cc	/^Transport* Session::GetTransport(const std::string& name) {$/;"	f	class:cricket::Session
GetTransportPrefs	talk/p2p/base/stun.cc	/^const StunTransportPrefsAttribute* StunMessage::GetTransportPrefs() const {$/;"	f	class:cricket::StunMessage
GetTransportState_s	talk/p2p/base/transport.cc	/^bool Transport::GetTransportState_s(bool read) {$/;"	f	class:cricket::Transport
GetType	talk/p2p/base/stun.cc	/^uint16 StunUInt16ListAttribute::GetType(int index) const {$/;"	f	class:cricket::StunUInt16ListAttribute
GetUInt32	talk/p2p/base/stun.cc	/^StunMessage::GetUInt32(StunAttributeType type) const {$/;"	f	class:cricket::StunMessage
GetUnknownAttributes	talk/p2p/base/stun.cc	/^const StunUInt16ListAttribute* StunMessage::GetUnknownAttributes() const {$/;"	f	class:cricket::StunMessage
GetUseTls	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::GetUseTls() {$/;"	f	class:buzz::XmppEngineImpl
GetUser	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::GetUser() {$/;"	f	class:buzz::XmppEngineImpl
GetWSAEvent	talk/base/physicalsocketserver.cc	/^  virtual WSAEVENT GetWSAEvent() {$/;"	f	class:talk_base::EventDispatcher
GetWSAEvent	talk/base/physicalsocketserver.cc	/^  virtual WSAEVENT GetWSAEvent() {$/;"	f	class:talk_base::SocketDispatcher
GipsLiteMediaChannel	talk/session/phone/gipslitemediaengine.cc	/^GipsLiteMediaChannel::GipsLiteMediaChannel(GipsLiteMediaEngine *engine) {$/;"	f	class:GipsLiteMediaChannel
GipsLiteMediaChannel	talk/session/phone/gipslitemediaengine.h	/^class GipsLiteMediaChannel : public MediaChannel, public GIPS_transport {$/;"	c	namespace:cricket
GipsLiteMediaEngine	talk/session/phone/gipslitemediaengine.cc	/^GipsLiteMediaEngine::GipsLiteMediaEngine() :$/;"	f	class:GipsLiteMediaEngine
GipsLiteMediaEngine	talk/session/phone/gipslitemediaengine.h	/^class GipsLiteMediaEngine : public MediaEngine {$/;"	c	namespace:cricket
Grow	talk/base/natsocketfactory.cc	/^  void Grow(size_t new_size) {$/;"	f	class:talk_base::NATSocket	file:
HAR_CREDENTIALS	talk/base/httpcommon.h	/^enum HttpAuthResult { HAR_RESPONSE, HAR_IGNORE, HAR_CREDENTIALS, HAR_ERROR };$/;"	e	enum:talk_base::HttpAuthResult
HAR_ERROR	talk/base/httpcommon.h	/^enum HttpAuthResult { HAR_RESPONSE, HAR_IGNORE, HAR_CREDENTIALS, HAR_ERROR };$/;"	e	enum:talk_base::HttpAuthResult
HAR_IGNORE	talk/base/httpcommon.h	/^enum HttpAuthResult { HAR_RESPONSE, HAR_IGNORE, HAR_CREDENTIALS, HAR_ERROR };$/;"	e	enum:talk_base::HttpAuthResult
HAR_RESPONSE	talk/base/httpcommon.h	/^enum HttpAuthResult { HAR_RESPONSE, HAR_IGNORE, HAR_CREDENTIALS, HAR_ERROR };$/;"	e	enum:talk_base::HttpAuthResult
HAVE_ALSA_ASOUNDLIB_H	config.h	14;"	d
HAVE_DLFCN_H	config.h	17;"	d
HAVE_GLIB	config.h	23;"	d
HAVE_INTTYPES_H	config.h	32;"	d
HAVE_MEMORY_H	config.h	35;"	d
HAVE_STDINT_H	config.h	50;"	d
HAVE_STDLIB_H	config.h	53;"	d
HAVE_STRINGS_H	config.h	56;"	d
HAVE_STRING_H	config.h	59;"	d
HAVE_SYS_STAT_H	config.h	62;"	d
HAVE_SYS_TYPES_H	config.h	65;"	d
HAVE_UNISTD_H	config.h	68;"	d
HCS_FRESH	talk/base/httpclient.cc	/^  HCS_FRESH,  \/\/ In cache, may use$/;"	e	enum:talk_base::__anon14::HttpCacheState	file:
HCS_NONE	talk/base/httpclient.cc	/^  HCS_NONE    \/\/ Not in cache$/;"	e	enum:talk_base::__anon14::HttpCacheState	file:
HCS_STALE	talk/base/httpclient.cc	/^  HCS_STALE,  \/\/ In cache, must revalidate$/;"	e	enum:talk_base::__anon14::HttpCacheState	file:
HC_AUTO	talk/base/httpcommon.h	/^  enum HeaderCombine { HC_YES, HC_NO, HC_AUTO, HC_REPLACE, HC_NEW };$/;"	e	enum:talk_base::HttpData::HeaderCombine
HC_BAD_REQUEST	talk/base/httpcommon.h	/^  HC_BAD_REQUEST = 400,$/;"	e	enum:talk_base::HttpCode
HC_FORBIDDEN	talk/base/httpcommon.h	/^  HC_FORBIDDEN = 403,$/;"	e	enum:talk_base::HttpCode
HC_FOUND	talk/base/httpcommon.h	/^  HC_FOUND = 302,$/;"	e	enum:talk_base::HttpCode
HC_GONE	talk/base/httpcommon.h	/^  HC_GONE = 410,$/;"	e	enum:talk_base::HttpCode
HC_INTERNAL_SERVER_ERROR	talk/base/httpcommon.h	/^  HC_INTERNAL_SERVER_ERROR = 500 $/;"	e	enum:talk_base::HttpCode
HC_MOVED_PERMANENTLY	talk/base/httpcommon.h	/^  HC_MOVED_PERMANENTLY = 301,$/;"	e	enum:talk_base::HttpCode
HC_MOVED_TEMPORARILY	talk/base/httpcommon.h	/^  HC_MOVED_TEMPORARILY = 307,$/;"	e	enum:talk_base::HttpCode
HC_MULTIPLE_CHOICES	talk/base/httpcommon.h	/^  HC_MULTIPLE_CHOICES = 300,$/;"	e	enum:talk_base::HttpCode
HC_NEW	talk/base/httpcommon.h	/^  enum HeaderCombine { HC_YES, HC_NO, HC_AUTO, HC_REPLACE, HC_NEW };$/;"	e	enum:talk_base::HttpData::HeaderCombine
HC_NO	talk/base/httpcommon.h	/^  enum HeaderCombine { HC_YES, HC_NO, HC_AUTO, HC_REPLACE, HC_NEW };$/;"	e	enum:talk_base::HttpData::HeaderCombine
HC_NON_AUTHORITATIVE	talk/base/httpcommon.h	/^  HC_NON_AUTHORITATIVE = 203,$/;"	e	enum:talk_base::HttpCode
HC_NOT_FOUND	talk/base/httpcommon.h	/^  HC_NOT_FOUND = 404,$/;"	e	enum:talk_base::HttpCode
HC_NOT_MODIFIED	talk/base/httpcommon.h	/^  HC_NOT_MODIFIED = 304,$/;"	e	enum:talk_base::HttpCode
HC_NO_CONTENT	talk/base/httpcommon.h	/^  HC_NO_CONTENT = 204,$/;"	e	enum:talk_base::HttpCode
HC_OK	talk/base/httpcommon.h	/^  HC_OK = 200,$/;"	e	enum:talk_base::HttpCode
HC_PARTIAL_CONTENT	talk/base/httpcommon.h	/^  HC_PARTIAL_CONTENT = 206,$/;"	e	enum:talk_base::HttpCode
HC_PROXY_AUTHENTICATION_REQUIRED	talk/base/httpcommon.h	/^  HC_PROXY_AUTHENTICATION_REQUIRED = 407,$/;"	e	enum:talk_base::HttpCode
HC_REPLACE	talk/base/httpcommon.h	/^  enum HeaderCombine { HC_YES, HC_NO, HC_AUTO, HC_REPLACE, HC_NEW };$/;"	e	enum:talk_base::HttpData::HeaderCombine
HC_SEE_OTHER	talk/base/httpcommon.h	/^  HC_SEE_OTHER = 303,$/;"	e	enum:talk_base::HttpCode
HC_UNAUTHORIZED	talk/base/httpcommon.h	/^  HC_UNAUTHORIZED = 401,$/;"	e	enum:talk_base::HttpCode
HC_YES	talk/base/httpcommon.h	/^  enum HeaderCombine { HC_YES, HC_NO, HC_AUTO, HC_REPLACE, HC_NEW };$/;"	e	enum:talk_base::HttpData::HeaderCombine
HEADERS	Makefile	/^HEADERS = $/;"	m
HEADERS	talk/base/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/examples/call/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/examples/login/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/p2p/base/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/p2p/client/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/session/fileshare/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/session/phone/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/session/tunnel/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/third_party/mediastreamer/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/xmllite/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADERS	talk/xmpp/Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
HEADER_SIZE	talk/base/virtualsocketserver.cc	/^const uint32 HEADER_SIZE = 28; \/\/ IP + UDP headers$/;"	v
HEADER_SIZE	talk/p2p/base/pseudotcp.cc	/^const uint32 HEADER_SIZE = 24;$/;"	v
HEX	talk/base/stringencode.cc	/^static const char HEX[] = "0123456789abcdef";$/;"	v	file:
HE_AUTH	talk/base/httpcommon.h	/^  HE_AUTH,                \/\/ Proxy Authentication Required$/;"	e	enum:talk_base::HttpError
HE_CACHE	talk/base/httpcommon.h	/^  HE_CACHE,               \/\/ Problem reading from cache$/;"	e	enum:talk_base::HttpError
HE_CERTIFICATE_EXPIRED	talk/base/httpcommon.h	/^  HE_CERTIFICATE_EXPIRED, \/\/ During SSL negotiation$/;"	e	enum:talk_base::HttpError
HE_DEFAULT	talk/base/httpcommon.h	/^  HE_DEFAULT$/;"	e	enum:talk_base::HttpError
HE_DISCONNECTED	talk/base/httpcommon.h	/^  HE_PROTOCOL, HE_DISCONNECTED, HE_OVERFLOW,$/;"	e	enum:talk_base::HttpError
HE_NONE	talk/base/httpcommon.h	/^  HE_NONE,$/;"	e	enum:talk_base::HttpError
HE_OPERATION_CANCELLED	talk/base/httpcommon.h	/^  HE_SOCKET, HE_SHUTDOWN, HE_OPERATION_CANCELLED,$/;"	e	enum:talk_base::HttpError
HE_OVERFLOW	talk/base/httpcommon.h	/^  HE_PROTOCOL, HE_DISCONNECTED, HE_OVERFLOW,$/;"	e	enum:talk_base::HttpError
HE_PROTOCOL	talk/base/httpcommon.h	/^  HE_PROTOCOL, HE_DISCONNECTED, HE_OVERFLOW,$/;"	e	enum:talk_base::HttpError
HE_SHUTDOWN	talk/base/httpcommon.h	/^  HE_SOCKET, HE_SHUTDOWN, HE_OPERATION_CANCELLED,$/;"	e	enum:talk_base::HttpError
HE_SOCKET	talk/base/httpcommon.h	/^  HE_SOCKET, HE_SHUTDOWN, HE_OPERATION_CANCELLED,$/;"	e	enum:talk_base::HttpError
HE_STREAM	talk/base/httpcommon.h	/^  HE_STREAM,              \/\/ Problem reading or writing to the document$/;"	e	enum:talk_base::HttpError
HH_AGE	talk/base/httpcommon.h	/^  HH_AGE,$/;"	e	enum:talk_base::HttpHeader
HH_CACHE_CONTROL	talk/base/httpcommon.h	/^  HH_CACHE_CONTROL,$/;"	e	enum:talk_base::HttpHeader
HH_CONNECTION	talk/base/httpcommon.h	/^  HH_CONNECTION,$/;"	e	enum:talk_base::HttpHeader
HH_CONTENT_LENGTH	talk/base/httpcommon.h	/^  HH_CONTENT_LENGTH,$/;"	e	enum:talk_base::HttpHeader
HH_CONTENT_RANGE	talk/base/httpcommon.h	/^  HH_CONTENT_RANGE,$/;"	e	enum:talk_base::HttpHeader
HH_CONTENT_TYPE	talk/base/httpcommon.h	/^  HH_CONTENT_TYPE,$/;"	e	enum:talk_base::HttpHeader
HH_COOKIE	talk/base/httpcommon.h	/^  HH_COOKIE,$/;"	e	enum:talk_base::HttpHeader
HH_DATE	talk/base/httpcommon.h	/^  HH_DATE,$/;"	e	enum:talk_base::HttpHeader
HH_ETAG	talk/base/httpcommon.h	/^  HH_ETAG,$/;"	e	enum:talk_base::HttpHeader
HH_EXPIRES	talk/base/httpcommon.h	/^  HH_EXPIRES,$/;"	e	enum:talk_base::HttpHeader
HH_HOST	talk/base/httpcommon.h	/^  HH_HOST,$/;"	e	enum:talk_base::HttpHeader
HH_IF_MODIFIED_SINCE	talk/base/httpcommon.h	/^  HH_IF_MODIFIED_SINCE,$/;"	e	enum:talk_base::HttpHeader
HH_IF_NONE_MATCH	talk/base/httpcommon.h	/^  HH_IF_NONE_MATCH,$/;"	e	enum:talk_base::HttpHeader
HH_KEEP_ALIVE	talk/base/httpcommon.h	/^  HH_KEEP_ALIVE,$/;"	e	enum:talk_base::HttpHeader
HH_LAST	talk/base/httpcommon.h	/^  HH_LAST = HH_WWW_AUTHENTICATE$/;"	e	enum:talk_base::HttpHeader
HH_LAST_MODIFIED	talk/base/httpcommon.h	/^  HH_LAST_MODIFIED,$/;"	e	enum:talk_base::HttpHeader
HH_LOCATION	talk/base/httpcommon.h	/^  HH_LOCATION,$/;"	e	enum:talk_base::HttpHeader
HH_PROXY_AUTHENTICATE	talk/base/httpcommon.h	/^  HH_PROXY_AUTHENTICATE,$/;"	e	enum:talk_base::HttpHeader
HH_PROXY_AUTHORIZATION	talk/base/httpcommon.h	/^  HH_PROXY_AUTHORIZATION,$/;"	e	enum:talk_base::HttpHeader
HH_PROXY_CONNECTION	talk/base/httpcommon.h	/^  HH_PROXY_CONNECTION,$/;"	e	enum:talk_base::HttpHeader
HH_RANGE	talk/base/httpcommon.h	/^  HH_RANGE,$/;"	e	enum:talk_base::HttpHeader
HH_SET_COOKIE	talk/base/httpcommon.h	/^  HH_SET_COOKIE,$/;"	e	enum:talk_base::HttpHeader
HH_TE	talk/base/httpcommon.h	/^  HH_TE,$/;"	e	enum:talk_base::HttpHeader
HH_TRAILERS	talk/base/httpcommon.h	/^  HH_TRAILERS,$/;"	e	enum:talk_base::HttpHeader
HH_TRANSFER_ENCODING	talk/base/httpcommon.h	/^  HH_TRANSFER_ENCODING,$/;"	e	enum:talk_base::HttpHeader
HH_UPGRADE	talk/base/httpcommon.h	/^  HH_UPGRADE,$/;"	e	enum:talk_base::HttpHeader
HH_USER_AGENT	talk/base/httpcommon.h	/^  HH_USER_AGENT,$/;"	e	enum:talk_base::HttpHeader
HH_WWW_AUTHENTICATE	talk/base/httpcommon.h	/^  HH_WWW_AUTHENTICATE,$/;"	e	enum:talk_base::HttpHeader
HINTERNET	talk/base/proxydetect.cc	/^typedef LPVOID HINTERNET;$/;"	t	file:
HL_ALL	talk/xmpp/xmppengine.h	/^    HL_ALL,    \/\/!< Watches all messages - gets last shot$/;"	e	enum:buzz::XmppEngine::HandlerLevel
HL_COUNT	talk/xmpp/xmppengine.h	/^    HL_COUNT,  \/\/!< Count of handler levels$/;"	e	enum:buzz::XmppEngine::HandlerLevel
HL_NONE	talk/xmpp/xmppengine.h	/^    HL_NONE = 0,$/;"	e	enum:buzz::XmppEngine::HandlerLevel
HL_PEEK	talk/xmpp/xmppengine.h	/^    HL_PEEK,   \/\/!< Sees messages before all other processing; cannot abort$/;"	e	enum:buzz::XmppEngine::HandlerLevel
HL_SENDER	talk/xmpp/xmppengine.h	/^    HL_SENDER, \/\/!< Watches for a type of message from a specific sender$/;"	e	enum:buzz::XmppEngine::HandlerLevel
HL_SINGLE	talk/xmpp/xmppengine.h	/^    HL_SINGLE, \/\/!< Watches for a single message, e.g., by id and sender$/;"	e	enum:buzz::XmppEngine::HandlerLevel
HL_TYPE	talk/xmpp/xmppengine.h	/^    HL_TYPE,   \/\/!< Watches a type of message, e.g., all groupchat msgs$/;"	e	enum:buzz::XmppEngine::HandlerLevel
HM_CONNECT	talk/base/httpbase.h	/^enum HttpMode { HM_NONE, HM_CONNECT, HM_RECV, HM_SEND };$/;"	e	enum:talk_base::HttpMode
HM_NONE	talk/base/httpbase.h	/^enum HttpMode { HM_NONE, HM_CONNECT, HM_RECV, HM_SEND };$/;"	e	enum:talk_base::HttpMode
HM_RECV	talk/base/httpbase.h	/^enum HttpMode { HM_NONE, HM_CONNECT, HM_RECV, HM_SEND };$/;"	e	enum:talk_base::HttpMode
HM_SEND	talk/base/httpbase.h	/^enum HttpMode { HM_NONE, HM_CONNECT, HM_RECV, HM_SEND };$/;"	e	enum:talk_base::HttpMode
HPUX_LEVEL_TO_SND_CARD_LEVEL	talk/third_party/mediastreamer/hpuxsndcard.c	172;"	d	file:
HTML_UNSAFE	talk/base/stringencode.cc	/^const unsigned char HTML_UNSAFE = 0x2; \/\/ "&'<>$/;"	v
HTTP_DEFAULT_PORT	talk/base/httpcommon.h	/^const uint16 HTTP_DEFAULT_PORT = 80;$/;"	v
HTTP_INVALID_CONNECTION_ID	talk/base/httpserver.h	/^const int HTTP_INVALID_CONNECTION_ID = 0;$/;"	v
HTTP_SECURE_PORT	talk/base/httpcommon.h	/^const uint16 HTTP_SECURE_PORT = 443;$/;"	v
HVER_1_0	talk/base/httpcommon.h	/^  HVER_1_0, HVER_1_1,$/;"	e	enum:talk_base::HttpVersion
HVER_1_1	talk/base/httpcommon.h	/^  HVER_1_0, HVER_1_1,$/;"	e	enum:talk_base::HttpVersion
HVER_LAST	talk/base/httpcommon.h	/^  HVER_LAST = HVER_1_1$/;"	e	enum:talk_base::HttpVersion
HVS_NONE	talk/base/httpclient.cc	/^  HVS_NONE,$/;"	e	enum:talk_base::__anon14::HttpValidatorStrength	file:
HVS_STRONG	talk/base/httpclient.cc	/^  HVS_STRONG$/;"	e	enum:talk_base::__anon14::HttpValidatorStrength	file:
HVS_WEAK	talk/base/httpclient.cc	/^  HVS_WEAK,$/;"	e	enum:talk_base::__anon14::HttpValidatorStrength	file:
HV_CONNECT	talk/base/httpcommon.h	/^  HV_GET, HV_POST, HV_PUT, HV_DELETE, HV_CONNECT, HV_HEAD,$/;"	e	enum:talk_base::HttpVerb
HV_DELETE	talk/base/httpcommon.h	/^  HV_GET, HV_POST, HV_PUT, HV_DELETE, HV_CONNECT, HV_HEAD,$/;"	e	enum:talk_base::HttpVerb
HV_GET	talk/base/httpcommon.h	/^  HV_GET, HV_POST, HV_PUT, HV_DELETE, HV_CONNECT, HV_HEAD,$/;"	e	enum:talk_base::HttpVerb
HV_HEAD	talk/base/httpcommon.h	/^  HV_GET, HV_POST, HV_PUT, HV_DELETE, HV_CONNECT, HV_HEAD,$/;"	e	enum:talk_base::HttpVerb
HV_LAST	talk/base/httpcommon.h	/^  HV_LAST = HV_HEAD$/;"	e	enum:talk_base::HttpVerb
HV_POST	talk/base/httpcommon.h	/^  HV_GET, HV_POST, HV_PUT, HV_DELETE, HV_CONNECT, HV_HEAD,$/;"	e	enum:talk_base::HttpVerb
HV_PUT	talk/base/httpcommon.h	/^  HV_GET, HV_POST, HV_PUT, HV_DELETE, HV_CONNECT, HV_HEAD,$/;"	e	enum:talk_base::HttpVerb
HadError	talk/examples/login/xmppauth.h	/^  virtual bool HadError() { return error_; }$/;"	f	class:XmppAuth
HandleAllTimedOut	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::HandleAllTimedOut() {$/;"	f	class:cricket::P2PTransportChannel
HandleConnectFailure	talk/p2p/base/relayport.cc	/^void RelayEntry::HandleConnectFailure() {$/;"	f	class:cricket::RelayEntry
HandleConnection	talk/base/httpserver.cc	/^HttpServer::HandleConnection(StreamInterface* stream) {$/;"	f	class:talk_base::HttpServer
HandleFeatures	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::HandleFeatures(const XmlElement *element) {$/;"	f	class:buzz::XmppLoginTask
HandleInput	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::HandleInput(const char * bytes, size_t len) {$/;"	f	class:buzz::XmppEngineImpl
HandleIqResponse	talk/xmpp/xmppengineimpl_iq.cc	/^XmppEngineImpl::HandleIqResponse(const XmlElement * element) {$/;"	f	class:buzz::XmppEngineImpl
HandleNotWritable	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::HandleNotWritable() {$/;"	f	class:cricket::P2PTransportChannel
HandleSaslChallenge	talk/xmpp/saslmechanism.cc	/^SaslMechanism::HandleSaslChallenge(const XmlElement * challenge) {$/;"	f	class:buzz::SaslMechanism
HandleSaslFailure	talk/xmpp/saslmechanism.cc	/^SaslMechanism::HandleSaslFailure(const XmlElement * failure) {$/;"	f	class:buzz::SaslMechanism
HandleSaslSuccess	talk/xmpp/saslmechanism.cc	/^SaslMechanism::HandleSaslSuccess(const XmlElement * success) {$/;"	f	class:buzz::SaslMechanism
HandleStanza	talk/examples/login/jingleinfotask.cc	/^  virtual bool HandleStanza(const XmlElement * stanza) {$/;"	f	class:buzz::JingleInfoTask::JingleInfoGetTask
HandleStanza	talk/examples/login/jingleinfotask.cc	/^JingleInfoTask::HandleStanza(const XmlElement * stanza) {$/;"	f	class:buzz::JingleInfoTask
HandleStanza	talk/examples/login/presencepushtask.cc	/^PresencePushTask::HandleStanza(const XmlElement * stanza) {$/;"	f	class:buzz::PresencePushTask
HandleStanza	talk/p2p/client/sessionmanagertask.h	/^  virtual bool HandleStanza(const buzz::XmlElement *stanza) {$/;"	f	class:cricket::SessionManagerTask
HandleStanza	talk/p2p/client/sessionsendtask.h	/^  virtual bool HandleStanza(const buzz::XmlElement *stanza) {$/;"	f	class:cricket::SessionSendTask
HandleStanza	talk/xmpp/xmpptask.h	/^  virtual bool HandleStanza(const XmlElement* stanza) { return false; }$/;"	f	class:buzz::XmppTask
HandleStartStream	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::HandleStartStream(const XmlElement *element) {$/;"	f	class:buzz::XmppLoginTask
HandleStun	talk/p2p/base/relayserver.cc	/^bool RelayServer::HandleStun($/;"	f	class:cricket::RelayServer
HandleStun	talk/p2p/base/relayserver.cc	/^void RelayServer::HandleStun($/;"	f	class:cricket::RelayServer
HandleStunAllocate	talk/p2p/base/relayserver.cc	/^void RelayServer::HandleStunAllocate($/;"	f	class:cricket::RelayServer
HandleStunSend	talk/p2p/base/relayserver.cc	/^void RelayServer::HandleStunSend($/;"	f	class:cricket::RelayServer
HandleWritable	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::HandleWritable() {$/;"	f	class:cricket::P2PTransportChannel
HandlerLevel	talk/xmpp/xmppengine.h	/^  enum HandlerLevel {$/;"	g	class:buzz::XmppEngine
HasAttr	talk/xmllite/xmlelement.cc	/^XmlElement::HasAttr(const QName & name) const {$/;"	f	class:buzz::XmlElement
HasChannel	talk/p2p/base/transport.h	/^  bool HasChannel(const std::string& name) { return (NULL != GetChannel(name)); }$/;"	f	class:cricket::Transport
HasChannels	talk/p2p/base/transport.cc	/^bool Transport::HasChannels() {$/;"	f	class:cricket::Transport
HasEquivalentSequence	talk/p2p/client/basicportallocator.cc	/^bool BasicPortAllocatorSession::HasEquivalentSequence($/;"	f	class:cricket::BasicPortAllocatorSession
HasError	talk/base/task.h	/^  bool HasError() const { return (GetState() == STATE_ERROR); }$/;"	f	class:talk_base::Task
HasError	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::HasError() {$/;"	f	class:buzz::XmppEngineImpl
HasMagicCookie	talk/p2p/base/relayport.cc	/^bool RelayPort::HasMagicCookie(const char* data, size_t size) {$/;"	f	class:cricket::RelayPort
HasMagicCookie	talk/p2p/base/relayserver.cc	/^bool RelayServerBinding::HasMagicCookie(const char* bytes, size_t size) const {$/;"	f	class:cricket::RelayServerBinding
HasQuietStatus	talk/examples/login/status.h	/^  bool HasQuietStatus() const {$/;"	f	class:buzz::Status
HasResource	talk/base/diskcache.cc	/^bool DiskCache::HasResource(const std::string& id) const {$/;"	f	class:talk_base::DiskCache
HasResourceStream	talk/base/diskcache.cc	/^bool DiskCache::HasResourceStream(const std::string& id, size_t index) const {$/;"	f	class:talk_base::DiskCache
HasSession	talk/session/tunnel/tunnelsessionclient.cc	/^bool TunnelSession::HasSession(Session* session) {$/;"	f	class:cricket::TunnelSession
Hash	talk/base/socketaddress.cc	/^size_t SocketAddress::Hash() const {$/;"	f	class:talk_base::SocketAddress
Hash	talk/base/socketaddresspair.cc	/^size_t SocketAddressPair::Hash() const {$/;"	f	class:talk_base::SocketAddressPair
HeaderCombine	talk/base/httpcommon.h	/^  enum HeaderCombine { HC_YES, HC_NO, HC_AUTO, HC_REPLACE, HC_NEW };$/;"	g	struct:talk_base::HttpData
HeaderMap	talk/base/httpcommon.h	/^  typedef std::multimap<std::string, std::string, iless> HeaderMap;$/;"	t	struct:talk_base::HttpData
HexPairValue	talk/base/urlencode.cc	/^static int HexPairValue(const char * code) {$/;"	f	file:
Host	talk/base/host.h	/^  Host(const std::string& name, std::vector<Network*>* networks)$/;"	f	class:talk_base::Host
Host	talk/base/host.h	/^class Host {$/;"	c	namespace:talk_base
HostToNetwork16	talk/base/byteorder.h	/^inline uint16 HostToNetwork16(uint16 n) {$/;"	f	namespace:talk_base
HostToNetwork32	talk/base/byteorder.h	/^inline uint32 HostToNetwork32(uint32 n) {$/;"	f	namespace:talk_base
HpuxSndCard	talk/third_party/mediastreamer/osscard.h	/^typedef OssCard HpuxSndCard;$/;"	t
HttpAddress	talk/base/httpclient.cc	/^std::string HttpAddress(const SocketAddress& address) {$/;"	f	namespace:talk_base::__anon14
HttpAttribute	talk/base/httpcommon.h	/^typedef std::pair<std::string, std::string> HttpAttribute;$/;"	t	namespace:talk_base
HttpAttributeList	talk/base/httpcommon.h	/^typedef std::vector<HttpAttribute> HttpAttributeList;$/;"	t	namespace:talk_base
HttpAuthContext	talk/base/httpcommon.h	/^  HttpAuthContext(const std::string& auth) : auth_method(auth) { }$/;"	f	struct:talk_base::HttpAuthContext
HttpAuthContext	talk/base/httpcommon.h	/^struct HttpAuthContext {$/;"	s	namespace:talk_base
HttpAuthResult	talk/base/httpcommon.h	/^enum HttpAuthResult { HAR_RESPONSE, HAR_IGNORE, HAR_CREDENTIALS, HAR_ERROR };$/;"	g	namespace:talk_base
HttpAuthenticate	talk/base/httpcommon.cc	/^HttpAuthResult HttpAuthenticate($/;"	f	namespace:talk_base
HttpBase	talk/base/httpbase.cc	/^HttpBase::HttpBase() : mode_(HM_NONE), data_(NULL), notify_(NULL),$/;"	f	class:talk_base::HttpBase
HttpBase	talk/base/httpbase.h	/^class HttpBase : private HttpParser, public sigslot::has_slots<> {$/;"	c	namespace:talk_base
HttpCacheState	talk/base/httpclient.cc	/^enum HttpCacheState {$/;"	g	namespace:talk_base::__anon14	file:
HttpClient	talk/base/httpclient.cc	/^HttpClient::HttpClient(const std::string& agent, StreamPool* pool)$/;"	f	class:talk_base::HttpClient
HttpClient	talk/base/httpclient.h	/^class HttpClient : private IHttpNotify {$/;"	c	namespace:talk_base
HttpClientDefault	talk/base/httpclient.h	/^  HttpClientDefault(SocketFactory* factory, const std::string& agent) $/;"	f	class:talk_base::HttpClientDefault
HttpClientDefault	talk/base/httpclient.h	/^class HttpClientDefault : public ReuseSocketPool, public HttpClient {$/;"	c	namespace:talk_base
HttpCode	talk/base/httpcommon.h	/^enum HttpCode { $/;"	g	namespace:talk_base
HttpCodeHasBody	talk/base/httpcommon.cc	/^bool HttpCodeHasBody(uint32 code) {$/;"	f	namespace:talk_base
HttpCodeIsCacheable	talk/base/httpcommon.cc	/^bool HttpCodeIsCacheable(uint32 code) {$/;"	f	namespace:talk_base
HttpCodeIsClientError	talk/base/httpcommon.h	/^inline bool HttpCodeIsClientError(uint32 code)   { return ((code \/ 100) == 4); }$/;"	f	namespace:talk_base
HttpCodeIsInformational	talk/base/httpcommon.h	/^inline bool HttpCodeIsInformational(uint32 code) { return ((code \/ 100) == 1); }$/;"	f	namespace:talk_base
HttpCodeIsRedirection	talk/base/httpcommon.h	/^inline bool HttpCodeIsRedirection(uint32 code)   { return ((code \/ 100) == 3); }$/;"	f	namespace:talk_base
HttpCodeIsServerError	talk/base/httpcommon.h	/^inline bool HttpCodeIsServerError(uint32 code)   { return ((code \/ 100) == 5); }$/;"	f	namespace:talk_base
HttpCodeIsSuccessful	talk/base/httpcommon.h	/^inline bool HttpCodeIsSuccessful(uint32 code)    { return ((code \/ 100) == 2); }$/;"	f	namespace:talk_base
HttpData	talk/base/httpcommon.h	/^  HttpData() : version(HVER_1_1) { }$/;"	f	struct:talk_base::HttpData
HttpData	talk/base/httpcommon.h	/^struct HttpData {$/;"	s	namespace:talk_base
HttpDateToSeconds	talk/base/httpcommon.cc	/^bool HttpDateToSeconds(const std::string& date, unsigned long* seconds) {$/;"	f	namespace:talk_base
HttpError	talk/base/httpcommon.h	/^enum HttpError {$/;"	g	namespace:talk_base
HttpGetCacheState	talk/base/httpclient.cc	/^HttpCacheState HttpGetCacheState(const HttpRequestData& request, $/;"	f	namespace:talk_base::__anon14
HttpHasAttribute	talk/base/httpcommon.cc	/^bool HttpHasAttribute(const HttpAttributeList& attributes,$/;"	f	namespace:talk_base
HttpHasNthAttribute	talk/base/httpcommon.cc	/^bool HttpHasNthAttribute(HttpAttributeList& attributes,$/;"	f	namespace:talk_base
HttpHeader	talk/base/httpcommon.h	/^enum HttpHeader {$/;"	g	namespace:talk_base
HttpHeaderIsCollapsible	talk/base/httpcommon.cc	/^bool HttpHeaderIsCollapsible(HttpHeader header) {$/;"	f	namespace:talk_base
HttpHeaderIsEndToEnd	talk/base/httpcommon.cc	/^bool HttpHeaderIsEndToEnd(HttpHeader header) {$/;"	f	namespace:talk_base
HttpListenServer	talk/base/httpserver.cc	/^HttpListenServer::HttpListenServer(AsyncSocket* listener)$/;"	f	class:talk_base::HttpListenServer
HttpListenServer	talk/base/httpserver.h	/^class HttpListenServer : public HttpServer, public sigslot::has_slots<> {$/;"	c	namespace:talk_base
HttpMode	talk/base/httpbase.h	/^enum HttpMode { HM_NONE, HM_CONNECT, HM_RECV, HM_SEND };$/;"	g	namespace:talk_base
HttpMonitor	talk/base/asynchttprequest.cc	/^HttpMonitor::HttpMonitor(SocketServer *ss) {$/;"	f	class:HttpMonitor
HttpMonitor	talk/base/asynchttprequest.h	/^class HttpMonitor : public sigslot::has_slots<> {$/;"	c	namespace:talk_base
HttpParseAttributes	talk/base/httpcommon.cc	/^void HttpParseAttributes(const char * data, size_t len, $/;"	f	namespace:talk_base
HttpParser	talk/base/httpbase.cc	/^HttpParser::HttpParser() {$/;"	f	class:talk_base::HttpParser
HttpParser	talk/base/httpbase.h	/^class HttpParser {$/;"	c	namespace:talk_base
HttpPortAllocator	talk/p2p/client/httpportallocator.cc	/^HttpPortAllocator::HttpPortAllocator(talk_base::NetworkManager* network_manager, const std::string &user_agent)$/;"	f	class:cricket::HttpPortAllocator
HttpPortAllocator	talk/p2p/client/httpportallocator.h	/^class HttpPortAllocator : public BasicPortAllocator {$/;"	c	namespace:cricket
HttpPortAllocatorSession	talk/p2p/client/httpportallocator.cc	/^HttpPortAllocatorSession::HttpPortAllocatorSession(HttpPortAllocator* allocator, const std::string &name, $/;"	f	class:cricket::HttpPortAllocatorSession
HttpPortAllocatorSession	talk/p2p/client/httpportallocator.h	/^class HttpPortAllocatorSession : public BasicPortAllocatorSession {$/;"	c	namespace:cricket
HttpRequestData	talk/base/httpcommon.h	/^  HttpRequestData() : verb(HV_GET) { }$/;"	f	struct:talk_base::HttpRequestData
HttpRequestData	talk/base/httpcommon.h	/^struct HttpRequestData : public HttpData {$/;"	s	namespace:talk_base
HttpRequestValidatorLevel	talk/base/httpclient.cc	/^HttpRequestValidatorLevel(const HttpRequestData& request) {$/;"	f	namespace:talk_base::__anon14
HttpResponseData	talk/base/httpcommon.h	/^  HttpResponseData() : scode(HC_INTERNAL_SERVER_ERROR) { }$/;"	f	struct:talk_base::HttpResponseData
HttpResponseData	talk/base/httpcommon.h	/^struct HttpResponseData : public HttpData {$/;"	s	namespace:talk_base
HttpResponseValidatorLevel	talk/base/httpclient.cc	/^HttpResponseValidatorLevel(const HttpResponseData& response) {$/;"	f	namespace:talk_base::__anon14
HttpServer	talk/base/httpserver.cc	/^HttpServer::HttpServer() : next_connection_id_(1) {$/;"	f	class:talk_base::HttpServer
HttpServer	talk/base/httpserver.h	/^class HttpServer {$/;"	c	namespace:talk_base
HttpShouldCache	talk/base/httpclient.cc	/^bool HttpShouldCache(const HttpRequestData& request, $/;"	f	namespace:talk_base::__anon14
HttpShouldKeepAlive	talk/base/httpcommon.cc	/^bool HttpShouldKeepAlive(const HttpData& data) {$/;"	f	namespace:talk_base
HttpStringToInt	talk/base/httpclient.cc	/^bool HttpStringToInt(const std::string& str, unsigned long* val) {$/;"	f	namespace:talk_base::__anon14
HttpTransaction	talk/base/httpserver.h	/^  HttpTransaction(int connection_id) : connection_id_(connection_id) { }$/;"	f	class:talk_base::HttpTransaction
HttpTransaction	talk/base/httpserver.h	/^class HttpTransaction {$/;"	c	namespace:talk_base
HttpValidatorStrength	talk/base/httpclient.cc	/^enum HttpValidatorStrength {$/;"	g	namespace:talk_base::__anon14	file:
HttpVerb	talk/base/httpcommon.h	/^enum HttpVerb {$/;"	g	namespace:talk_base
HttpVersion	talk/base/httpcommon.h	/^enum HttpVersion {$/;"	g	namespace:talk_base
ICMP_CLOSE_FUNC	talk/base/winping.cc	/^const char * const ICMP_CLOSE_FUNC = "IcmpCloseHandle";$/;"	v
ICMP_CREATE_FUNC	talk/base/winping.cc	/^const char * const ICMP_CREATE_FUNC = "IcmpCreateFile";$/;"	v
ICMP_DLL_NAME	talk/base/winping.cc	/^const char * const ICMP_DLL_NAME = "icmp.dll";$/;"	v
ICMP_ECHO_REPLY	talk/base/winping.cc	/^} ICMP_ECHO_REPLY, * PICMP_ECHO_REPLY;$/;"	t	namespace:talk_base	typeref:struct:talk_base::icmp_echo_reply	file:
ICMP_HEADER_SIZE	talk/base/physicalsocketserver.cc	/^const uint32 ICMP_HEADER_SIZE = 8;$/;"	v
ICMP_HEADER_SIZE	talk/base/win32socketserver.cc	/^static const uint32 ICMP_HEADER_SIZE = 8;$/;"	v	file:
ICMP_HEADER_SIZE	talk/p2p/base/pseudotcp.cc	/^const uint32 ICMP_HEADER_SIZE = 8;$/;"	v
ICMP_SEND_FUNC	talk/base/winping.cc	/^const char * const ICMP_SEND_FUNC = "IcmpSendEcho";$/;"	v
IDLE_PING	talk/p2p/base/pseudotcp.cc	/^const uint32 IDLE_PING = 20 * 1000; \/\/ 20 seconds (note: WinXP SP2 firewall udp timeout is 90 seconds)$/;"	v
IDLE_TIMEOUT	talk/p2p/base/pseudotcp.cc	/^const uint32 IDLE_TIMEOUT = 90 * 1000; \/\/ 90 seconds;$/;"	v
IFC	talk/xmpp/xmppengine.h	329;"	d
IFR	talk/xmpp/xmppengine.h	320;"	d
IHttpNotify	talk/base/httpbase.h	/^class IHttpNotify {$/;"	c	namespace:talk_base
ILBC_BITS_IN_COMPRESSED_FRAME	talk/third_party/mediastreamer/msilbcenc.h	28;"	d
ILBC_CFLAGS	talk/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/base/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/examples/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/examples/call/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/examples/login/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/examples/pcp/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/p2p/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/p2p/base/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/p2p/client/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/session/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/session/fileshare/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/session/phone/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/session/tunnel/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/third_party/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/third_party/gips/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/third_party/mediastreamer/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/xmllite/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_CFLAGS	talk/xmpp/Makefile	/^ILBC_CFLAGS = $/;"	m
ILBC_LIBS	talk/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/base/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/examples/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/examples/call/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/examples/login/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/examples/pcp/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/p2p/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/p2p/base/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/p2p/client/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/session/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/session/fileshare/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/session/phone/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/session/tunnel/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/third_party/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/third_party/gips/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/third_party/mediastreamer/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/xmllite/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_LIBS	talk/xmpp/Makefile	/^ILBC_LIBS = $/;"	m
ILBC_MAX_BYTES_PER_COMPRESSED_FRAME	talk/third_party/mediastreamer/msilbcenc.h	81;"	d
ILBC_MAX_SAMPLES_PER_FRAME	talk/third_party/mediastreamer/msilbcenc.h	82;"	d
INCLUDES	talk/third_party/mediastreamer/Makefile	/^INCLUDES = -I$(top_srcdir) $(ORTP_CFLAGS) $/;"	m
INCPATH	Makefile	/^INCPATH  = -I\/usr\/lib\/qt3\/mkspecs\/default -I. -I. -I..\/..\/voip -I\/usr\/include -I$(QTDIR)\/include$/;"	m
INFO	talk/base/logging.h	/^                       INFO = LS_INFO,$/;"	e	enum:talk_base::LoggingSeverity
INSTALL	talk/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/base/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/examples/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/examples/call/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/examples/login/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/examples/pcp/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/p2p/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/p2p/base/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/p2p/client/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/session/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/session/fileshare/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/session/phone/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/session/tunnel/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/third_party/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/third_party/gips/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/third_party/mediastreamer/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/xmllite/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	talk/xmpp/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	talk/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/base/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/examples/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/examples/call/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/examples/login/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/examples/pcp/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/p2p/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/p2p/base/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/p2p/client/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/session/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/session/fileshare/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/session/phone/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/session/tunnel/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/third_party/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/third_party/gips/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/third_party/mediastreamer/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/xmllite/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	talk/xmpp/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE= $(COPY_FILE)$/;"	m
INSTALL_HEADER	talk/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/base/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/examples/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/examples/call/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/examples/login/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/examples/pcp/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/p2p/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/p2p/base/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/p2p/client/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/session/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/session/fileshare/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/session/phone/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/session/tunnel/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/third_party/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/third_party/gips/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/third_party/mediastreamer/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/xmllite/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	talk/xmpp/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	talk/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/base/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/examples/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/examples/call/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/examples/login/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/examples/pcp/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/p2p/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/p2p/base/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/p2p/client/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/session/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/session/fileshare/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/session/phone/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/session/tunnel/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/third_party/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/third_party/gips/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/third_party/mediastreamer/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/xmllite/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	talk/xmpp/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/base/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/examples/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/examples/call/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/examples/login/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/examples/pcp/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/p2p/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/p2p/base/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/p2p/client/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/session/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/session/fileshare/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/session/phone/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/session/tunnel/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/third_party/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/third_party/gips/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/third_party/mediastreamer/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/xmllite/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	talk/xmpp/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	talk/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/base/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/examples/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/examples/call/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/examples/login/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/examples/pcp/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/p2p/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/p2p/base/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/p2p/client/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/session/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/session/fileshare/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/session/phone/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/session/tunnel/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/third_party/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/third_party/gips/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/third_party/mediastreamer/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/xmllite/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	talk/xmpp/Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INVALID_SOCKET	talk/base/socket.h	97;"	d
IP4_HDR_SZ	talk/third_party/mediastreamer/mscodec.c	35;"	d	file:
IPAsString	talk/base/socketaddress.cc	/^std::string SocketAddress::IPAsString() const {$/;"	f	class:talk_base::SocketAddress
IPToString	talk/base/socketaddress.cc	/^std::string SocketAddress::IPToString(uint32 ip) {$/;"	f	class:talk_base::SocketAddress
IP_ADDR_ADDED	talk/base/winping.cc	80;"	d	file:
IP_ADDR_DELETED	talk/base/winping.cc	76;"	d	file:
IP_BAD_DESTINATION	talk/base/winping.cc	74;"	d	file:
IP_BAD_OPTION	talk/base/winping.cc	63;"	d	file:
IP_BAD_REQ	talk/base/winping.cc	67;"	d	file:
IP_BAD_ROUTE	talk/base/winping.cc	68;"	d	file:
IP_BIND_ADAPTER	talk/base/winping.cc	83;"	d	file:
IP_BUF_TOO_SMALL	talk/base/winping.cc	57;"	d	file:
IP_DEST_HOST_UNREACHABLE	talk/base/winping.cc	59;"	d	file:
IP_DEST_NET_UNREACHABLE	talk/base/winping.cc	58;"	d	file:
IP_DEST_PORT_UNREACHABLE	talk/base/winping.cc	61;"	d	file:
IP_DEST_PROT_UNREACHABLE	talk/base/winping.cc	60;"	d	file:
IP_DEVICE_DOES_NOT_EXIST	talk/base/winping.cc	85;"	d	file:
IP_DUPLICATE_ADDRESS	talk/base/winping.cc	86;"	d	file:
IP_DUPLICATE_IPADD	talk/base/winping.cc	91;"	d	file:
IP_FLAG_DF	talk/base/winping.cc	100;"	d	file:
IP_GENERAL_FAILURE	talk/base/winping.cc	93;"	d	file:
IP_HEADER_SIZE	talk/base/physicalsocketserver.cc	/^const uint32 IP_HEADER_SIZE = 20;$/;"	v
IP_HEADER_SIZE	talk/base/win32socketserver.cc	/^static const uint32 IP_HEADER_SIZE = 20;$/;"	v	file:
IP_HEADER_SIZE	talk/p2p/base/pseudotcp.cc	/^const uint32 IP_HEADER_SIZE = 20; \/\/ (+ up to 40 bytes of options?)$/;"	v
IP_HW_ERROR	talk/base/winping.cc	64;"	d	file:
IP_INTERFACE_METRIC_CHANGE	talk/base/winping.cc	87;"	d	file:
IP_INTERFACE_WOL_CAPABILITY_CHANGE	talk/base/winping.cc	90;"	d	file:
IP_MEDIA_CONNECT	talk/base/winping.cc	81;"	d	file:
IP_MEDIA_DISCONNECT	talk/base/winping.cc	82;"	d	file:
IP_MTU	talk/base/physicalsocketserver.cc	64;"	d	file:
IP_MTU_CHANGE	talk/base/winping.cc	78;"	d	file:
IP_NEGOTIATING_IPSEC	talk/base/winping.cc	89;"	d	file:
IP_NO_RESOURCES	talk/base/winping.cc	62;"	d	file:
IP_OPTION_INFORMATION	talk/base/winping.h	/^} IP_OPTION_INFORMATION, * PIP_OPTION_INFORMATION;$/;"	t	namespace:talk_base	typeref:struct:talk_base::ip_option_information
IP_OPTION_TOO_BIG	talk/base/winping.cc	73;"	d	file:
IP_OPT_EOL	talk/base/winping.cc	109;"	d	file:
IP_OPT_LSRR	talk/base/winping.cc	112;"	d	file:
IP_OPT_NOP	talk/base/winping.cc	110;"	d	file:
IP_OPT_ROUTER_ALERT	talk/base/winping.cc	117;"	d	file:
IP_OPT_RR	talk/base/winping.cc	114;"	d	file:
IP_OPT_SECURITY	talk/base/winping.cc	111;"	d	file:
IP_OPT_SID	talk/base/winping.cc	116;"	d	file:
IP_OPT_SSRR	talk/base/winping.cc	113;"	d	file:
IP_OPT_TS	talk/base/winping.cc	115;"	d	file:
IP_PACKET_TOO_BIG	talk/base/winping.cc	65;"	d	file:
IP_PARAM_PROBLEM	talk/base/winping.cc	71;"	d	file:
IP_PENDING	talk/base/winping.cc	95;"	d	file:
IP_RECONFIG_SECFLTR	talk/base/winping.cc	88;"	d	file:
IP_REQ_TIMED_OUT	talk/base/winping.cc	66;"	d	file:
IP_SOURCE_QUENCH	talk/base/winping.cc	72;"	d	file:
IP_SPEC_MTU_CHANGE	talk/base/winping.cc	77;"	d	file:
IP_STATUS_BASE	talk/base/winping.cc	54;"	d	file:
IP_SUCCESS	talk/base/winping.cc	56;"	d	file:
IP_TTL_EXPIRED_REASSEM	talk/base/winping.cc	70;"	d	file:
IP_TTL_EXPIRED_TRANSIT	talk/base/winping.cc	69;"	d	file:
IP_UNBIND_ADAPTER	talk/base/winping.cc	84;"	d	file:
IP_UNLOAD	talk/base/winping.cc	79;"	d	file:
IPseudoTcpNotify	talk/p2p/base/pseudotcp.h	/^class IPseudoTcpNotify {$/;"	c	namespace:cricket
IdToFilename	talk/base/diskcache.cc	/^std::string DiskCache::IdToFilename(const std::string& id, size_t index) const {$/;"	f	class:talk_base::DiskCache
Incoming	talk/p2p/base/tcpport.h	/^  struct Incoming {$/;"	s	class:cricket::TCPPort
IncomingCharacterData	talk/xmpp/xmppstanzaparser.cc	/^XmppStanzaParser::IncomingCharacterData($/;"	f	class:buzz::XmppStanzaParser
IncomingEnd	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::IncomingEnd(bool isError) {$/;"	f	class:buzz::XmppEngineImpl
IncomingEndElement	talk/xmpp/xmppstanzaparser.cc	/^XmppStanzaParser::IncomingEndElement($/;"	f	class:buzz::XmppStanzaParser
IncomingError	talk/xmpp/xmppstanzaparser.cc	/^XmppStanzaParser::IncomingError($/;"	f	class:buzz::XmppStanzaParser
IncomingStanza	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::IncomingStanza(const XmlElement * stanza) {$/;"	f	class:buzz::XmppEngineImpl
IncomingStanza	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::IncomingStanza(const XmlElement *element, bool isStart) {$/;"	f	class:buzz::XmppLoginTask
IncomingStart	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::IncomingStart(const XmlElement * pelStart) {$/;"	f	class:buzz::XmppEngineImpl
IncomingStartElement	talk/xmpp/xmppstanzaparser.cc	/^XmppStanzaParser::IncomingStartElement($/;"	f	class:buzz::XmppStanzaParser
Index	talk/base/streamutils.h	/^  inline int Index(talk_base::StreamInterface* s) const $/;"	f	class:StreamRelay
Init	talk/session/phone/channelmanager.cc	/^bool ChannelManager::Init() {$/;"	f	class:cricket::ChannelManager
Init	talk/session/phone/gipslitemediaengine.cc	/^bool GipsLiteMediaEngine::Init() {$/;"	f	class:GipsLiteMediaEngine
Init	talk/session/phone/linphonemediaengine.cc	/^bool LinphoneMediaEngine::Init() {$/;"	f	class:LinphoneMediaEngine
InitPhone	talk/examples/call/callclient.cc	/^void CallClient::InitPhone() {$/;"	f	class:CallClient
InitPresence	talk/examples/call/callclient.cc	/^void CallClient::InitPresence() {$/;"	f	class:CallClient
InitRandom	talk/base/helpers.cc	/^void InitRandom(const char *client_unique, size_t len) {$/;"	f	namespace:cricket
InitTest	talk/p2p/base/session_unittest.cc	/^void InitTest() {$/;"	f
Initialize	talk/base/diskcache.cc	/^bool DiskCache::Initialize(const std::string& folder, size_t size) {$/;"	f	class:talk_base::DiskCache
Initialize	talk/base/physicalsocketserver.cc	/^  bool Initialize() {$/;"	f	class:talk_base::SocketDispatcher
Initialize	talk/base/winfirewall.cc	/^WinFirewall::Initialize() {$/;"	f	class:talk_base::WinFirewall
InitializeEntries	talk/base/diskcache_win32.cc	/^bool DiskCacheWin32::InitializeEntries() {$/;"	f	class:talk_base::DiskCacheWin32
InitializeEntries	talk/base/diskcachestd.cc	/^bool DiskCacheStd::InitializeEntries() {$/;"	f	class:talk_base::DiskCacheStd
InitializeSSL	talk/base/ssladapter.cc	/^bool InitializeSSL() {$/;"	f	namespace:talk_base
InitializeSSLThread	talk/base/ssladapter.cc	/^bool InitializeSSLThread() {$/;"	f	namespace:talk_base
Initiate	talk/p2p/base/session.cc	/^bool Session::Initiate(const std::string &to,$/;"	f	class:cricket::Session
InitiateClose	talk/base/httpserver.cc	/^HttpServer::Connection::InitiateClose(bool force) {$/;"	f	class:talk_base::HttpServer::Connection
InitiateSession	talk/session/phone/call.cc	/^Session *Call::InitiateSession(const buzz::Jid &jid, $/;"	f	class:cricket::Call
Input	talk/examples/call/call_main.cc	/^  void Input(const char * data, int len) {$/;"	f	class:DebugLog
Input	talk/examples/pcp/pcp_main.cc	/^  void Input(const char * data, int len) {$/;"	f	class:DebugLog
InsecureCryptStringImpl	talk/base/cryptstring.h	/^class InsecureCryptStringImpl : public CryptStringImpl {$/;"	c	namespace:talk_base
InsertChildAfter	talk/xmllite/xmlelement.cc	/^XmlElement::InsertChildAfter(XmlChild * pPredecessor, XmlChild * pNext) {$/;"	f	class:buzz::XmlElement
Instance	talk/base/messagequeue.cc	/^MessageQueueManager* MessageQueueManager::Instance() {$/;"	f	class:talk_base::MessageQueueManager
InternalMap	talk/base/natserver.h	/^  typedef std::map<SocketAddressPair,TransEntry*,RouteCmp> InternalMap;$/;"	t	class:talk_base::NATServer
InternalSendStanza	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::InternalSendStanza(const XmlElement * element) {$/;"	f	class:buzz::XmppEngineImpl
InternalSendStart	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::InternalSendStart(const std::string & to) {$/;"	f	class:buzz::XmppEngineImpl
InternalStream	talk/session/tunnel/pseudotcpchannel.cc	/^PseudoTcpChannel::InternalStream::InternalStream(PseudoTcpChannel* parent)$/;"	f	class:cricket::PseudoTcpChannel::InternalStream
InternalStream	talk/session/tunnel/pseudotcpchannel.cc	/^class PseudoTcpChannel::InternalStream : public StreamInterface {$/;"	c	class:cricket::PseudoTcpChannel	file:
Invert	talk/base/virtualsocketserver.cc	/^VirtualSocketServer::Function* VirtualSocketServer::Invert(Function* f) {$/;"	f	class:talk_base::VirtualSocketServer
IqEntryVector	talk/xmpp/xmppengineimpl.h	/^  typedef STD_VECTOR(XmppIqEntry*) IqEntryVector;$/;"	t	class:buzz::XmppEngineImpl
IsAny	talk/base/socketaddress.cc	/^bool SocketAddress::IsAny() const {$/;"	f	class:talk_base::SocketAddress
IsAsciiLetter	talk/xmllite/xmlnsstack.cc	/^static bool IsAsciiLetter(char ch) {$/;"	f	namespace:buzz	file:
IsAuthDone	talk/examples/login/xmppauth.h	/^  virtual bool IsAuthDone() { return done_; }$/;"	f	class:XmppAuth
IsAuthTag	talk/examples/call/call_main.cc	/^  IsAuthTag(const char * str, size_t len) {$/;"	f	class:DebugLog
IsAuthTag	talk/examples/pcp/pcp_main.cc	/^  IsAuthTag(const char * str, size_t len) {$/;"	f	class:DebugLog
IsAuthorized	talk/examples/login/xmppauth.h	/^  virtual bool IsAuthorized() { return !error_; }$/;"	f	class:XmppAuth
IsBare	talk/xmpp/jid.cc	/^Jid::IsBare() const {$/;"	f	class:buzz::Jid
IsBase64Char	talk/base/helpers.cc	/^bool IsBase64Char(char ch) {$/;"	f	namespace:cricket
IsBase64Encoded	talk/base/helpers.cc	/^bool IsBase64Encoded(const std::string& str) {$/;"	f	namespace:cricket
IsBlocking	talk/base/socket.h	/^  inline bool IsBlocking() const { return IsBlockingError(GetError()); }$/;"	f	class:talk_base::Socket
IsBlockingError	talk/base/socket.h	/^inline bool IsBlockingError(int e) {$/;"	f	namespace:talk_base
IsCacheActive	talk/base/httpclient.h	/^  bool IsCacheActive() const { return (cache_state_ > CS_READY); }$/;"	f	class:talk_base::HttpClient
IsClosed	talk/session/fileshare/fileshare.cc	/^FileShareSession::IsClosed() const {$/;"	f	class:cricket::FileShareSession
IsComplete	talk/session/fileshare/fileshare.cc	/^FileShareSession::IsComplete() const {$/;"	f	class:cricket::FileShareSession
IsCurrent	talk/base/thread.h	/^  inline bool IsCurrent() const {$/;"	f	class:talk_base::Thread
IsDefaultBrowserFirefox	talk/base/proxydetect.cc	/^bool IsDefaultBrowserFirefox() {$/;"	f
IsDiagnosticMode	talk/base/logging.h	/^  static bool IsDiagnosticMode() { return is_diagnostic_mode_; }$/;"	f	class:talk_base::LogMessage
IsDirectory	talk/base/fileutils.cc	/^bool DirectoryIterator::IsDirectory() const {$/;"	f	class:talk_base::DirectoryIterator
IsDone	talk/base/task.h	/^  bool IsDone() const { return done_; }$/;"	f	class:talk_base::Task
IsDone	talk/xmpp/xmpplogintask.h	/^  bool IsDone()$/;"	f	class:buzz::XmppLoginTask
IsEncrypted	talk/xmpp/xmppengineimpl.h	/^  virtual bool IsEncrypted() { return encrypted_; }$/;"	f	class:buzz::XmppEngineImpl
IsEndOfAttributeName	talk/base/httpcommon.cc	/^inline bool IsEndOfAttributeName(size_t pos, size_t len, const char * data) {$/;"	f	namespace:talk_base::__anon23
IsEquivalent	talk/p2p/base/candidate.h	/^  bool IsEquivalent(const Candidate& c) const {$/;"	f	class:cricket::Candidate
IsEquivalent	talk/p2p/client/basicportallocator.cc	/^bool AllocationSequence::IsEquivalent(talk_base::Network* network) {$/;"	f	class:cricket::AllocationSequence
IsFolder	talk/base/fileutils.cc	/^bool Filesystem::IsFolder(const Pathname& pathname)$/;"	f	class:talk_base::Filesystem
IsFolderDelimiter	talk/base/pathutils.cc	/^bool Pathname::IsFolderDelimiter(char ch) {$/;"	f	class:talk_base::Pathname
IsFolderI	talk/base/unixfilesystem.cc	/^bool UnixFilesystem::IsFolderI(const Pathname &path)$/;"	f	class:talk_base::UnixFilesystem
IsFolderI	talk/base/win32filesystem.cc	/^bool Win32Filesystem::IsFolderI(const Pathname &path)$/;"	f	class:talk_base::Win32Filesystem
IsFull	talk/xmpp/jid.cc	/^Jid::IsFull() const {$/;"	f	class:buzz::Jid
IsGettingAllPorts	talk/p2p/base/session_unittest.cc	/^  virtual bool IsGettingAllPorts() { return running_; }$/;"	f	class:TestPortAllocatorSession
IsGettingAllPorts	talk/p2p/client/basicportallocator.h	/^  virtual bool IsGettingAllPorts() { return running_; }$/;"	f	class:cricket::BasicPortAllocatorSession
IsLocalIP	talk/base/socketaddress.cc	/^bool SocketAddress::IsLocalIP() const {$/;"	f	class:talk_base::SocketAddress
IsLocked	talk/base/diskcache.h	/^  bool IsLocked() const { return locked_; }$/;"	f	class:talk_base::CacheLock
IsNil	talk/base/socketaddress.h	/^  bool IsNil() const { return IsAny(); }$/;"	f	class:talk_base::SocketAddress
IsPingable	talk/p2p/base/p2ptransportchannel.cc	/^bool P2PTransportChannel::IsPingable(Connection* conn) {$/;"	f	class:cricket::P2PTransportChannel
IsPrivateIP	talk/base/socketaddress.cc	/^bool SocketAddress::IsPrivateIP() const {$/;"	f	class:talk_base::SocketAddress
IsSessionMessage	talk/p2p/base/sessionmanager.cc	/^bool SessionManager::IsSessionMessage(const buzz::XmlElement* stanza) {$/;"	f	class:cricket::SessionManager
IsSet	talk/base/proxydetect.cc	/^  bool IsSet(const char * name) const { $/;"	f	struct:StringMap
IsStopping	talk/base/messagequeue.cc	/^bool MessageQueue::IsStopping() {$/;"	f	class:talk_base::MessageQueue
IsSymmetric	talk/base/nattypes.cc	/^  bool IsSymmetric() { return false; }$/;"	f	class:talk_base::AddressRestrictedNAT
IsSymmetric	talk/base/nattypes.cc	/^  bool IsSymmetric() { return false; }$/;"	f	class:talk_base::OpenConeNAT
IsSymmetric	talk/base/nattypes.cc	/^  bool IsSymmetric() { return false; }$/;"	f	class:talk_base::PortRestrictedNAT
IsSymmetric	talk/base/nattypes.cc	/^  bool IsSymmetric() { return true; }$/;"	f	class:talk_base::SymmetricNAT
IsTemporaryPath	talk/base/fileutils.cc	/^bool Filesystem::IsTemporaryPath(const Pathname& pathname)$/;"	f	class:talk_base::Filesystem
IsTemporaryPathI	talk/base/unixfilesystem.cc	/^bool UnixFilesystem::IsTemporaryPathI(const Pathname& pathname)$/;"	f	class:talk_base::UnixFilesystem
IsTemporaryPathI	talk/base/win32filesystem.cc	/^bool Win32Filesystem::IsTemporaryPathI(const Pathname& pathname)$/;"	f	class:talk_base::Win32Filesystem
IsText	talk/xmllite/xmlelement.h	/^  bool IsText() const { return IsTextImpl(); }$/;"	f	class:buzz::XmlChild
IsTextImpl	talk/xmllite/xmlelement.cc	/^XmlElement::IsTextImpl() const {$/;"	f	class:buzz::XmlElement
IsTextImpl	talk/xmllite/xmlelement.cc	/^XmlText::IsTextImpl() const {$/;"	f	class:buzz::XmlText
IsUnresolved	talk/base/socketaddress.cc	/^bool SocketAddress::IsUnresolved() const {$/;"	f	class:talk_base::SocketAddress
IsUtf8FirstByte	talk/examples/login/presencepushtask.cc	/^static bool IsUtf8FirstByte(int c) {$/;"	f	namespace:buzz	file:
IsValid	talk/base/winping.h	/^    bool IsValid() { return valid_; }$/;"	f	class:talk_base::WinPing
IsValid	talk/xmpp/jid.cc	/^Jid::IsValid() const {$/;"	f	class:buzz::Jid
IsWithinRateLimit	talk/xmpp/ratelimitmanager.cc	/^bool RateLimitManager::IsWithinRateLimit(const std::string event_name) {$/;"	f	class:buzz::RateLimitManager
IsWithinRateLimit	talk/xmpp/ratelimitmanager.h	/^    bool IsWithinRateLimit() {$/;"	f	class:buzz::RateLimitManager::RateLimit
IsXmlSpace	talk/examples/login/presencepushtask.cc	/^IsXmlSpace(int ch) {$/;"	f	namespace:buzz	file:
Item	talk/session/fileshare/fileshare.h	/^  struct Item {$/;"	s	class:cricket::FileShareManifest
ItemList	talk/session/fileshare/fileshare.h	/^  typedef std::vector<Item> ItemList;$/;"	t	class:cricket::FileShareManifest
Iterate	talk/base/fileutils.cc	/^bool DirectoryIterator::Iterate(const Pathname &dir) {$/;"	f	class:talk_base::DirectoryIterator
JACK_CARD_H	talk/third_party/mediastreamer/jackcard.h	25;"	d
JINGLE_HEADER_SIZE	talk/p2p/base/pseudotcp.cc	/^const uint32 JINGLE_HEADER_SIZE = 64; \/\/ when relay framing is in use$/;"	v
JackCard	talk/third_party/mediastreamer/jackcard.h	/^typedef struct _JackCard JackCard;$/;"	t	typeref:struct:_JackCard
Jid	talk/xmpp/jid.cc	/^Jid::Jid() : data_(NULL) {$/;"	f	class:buzz::Jid
Jid	talk/xmpp/jid.cc	/^Jid::Jid(bool is_special, const std::string & special) {$/;"	f	class:buzz::Jid
Jid	talk/xmpp/jid.cc	/^Jid::Jid(const std::string & jid_string) {$/;"	f	class:buzz::Jid
Jid	talk/xmpp/jid.cc	/^Jid::Jid(const std::string & node_name,$/;"	f	class:buzz::Jid
Jid	talk/xmpp/jid.h	/^  Jid(const Jid & jid) : data_(jid.data_) {$/;"	f	class:buzz::Jid
Jid	talk/xmpp/jid.h	/^class Jid {$/;"	c	namespace:buzz
JingleInfoGetTask	talk/examples/login/jingleinfotask.cc	/^  JingleInfoGetTask(Task * parent) : XmppTask(parent, XmppEngine::HL_SINGLE),$/;"	f	class:buzz::JingleInfoTask::JingleInfoGetTask
JingleInfoGetTask	talk/examples/login/jingleinfotask.cc	/^class JingleInfoTask::JingleInfoGetTask : public XmppTask {$/;"	c	class:buzz::JingleInfoTask	file:
JingleInfoTask	talk/examples/login/jingleinfotask.h	/^  JingleInfoTask(Task * parent) : $/;"	f	class:buzz::JingleInfoTask
JingleInfoTask	talk/examples/login/jingleinfotask.h	/^class JingleInfoTask : public XmppTask {$/;"	c	namespace:buzz
Join	talk/base/thread.cc	/^void Thread::Join() {$/;"	f	class:talk_base::Thread
Join	talk/session/phone/call.cc	/^void Call::Join(Call *call, bool enable) {$/;"	f	class:cricket::Call
JoinCalls	talk/session/phone/phonesessionclient.cc	/^void PhoneSessionClient::JoinCalls(Call *call_to_join, Call *call) {$/;"	f	class:cricket::PhoneSessionClient
KEEPALIVE_DELAY	talk/p2p/base/relayport.cc	/^const int KEEPALIVE_DELAY = 10 * 60 * 1000;$/;"	v
KEEPALIVE_DELAY	talk/p2p/base/stunport.cc	/^const int KEEPALIVE_DELAY = 10 * 1000; \/\/ 10 seconds - sort timeouts$/;"	v
KLABEL	talk/base/logging.h	68;"	d
LASTLABEL	talk/base/logging.h	70;"	d
LDFLAGS	talk/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/base/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/examples/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/examples/call/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/examples/login/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/examples/pcp/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/p2p/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/p2p/base/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/p2p/client/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/session/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/session/fileshare/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/session/phone/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/session/tunnel/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/third_party/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/third_party/gips/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/third_party/mediastreamer/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/xmllite/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	talk/xmpp/Makefile	/^LDFLAGS = $/;"	m
LERROR	talk/base/logging.h	/^                       LERROR = LS_ERROR };$/;"	e	enum:talk_base::LoggingSeverity
LEX	Makefile	/^LEX      = flex$/;"	m
LEXFLAGS	Makefile	/^LEXFLAGS = $/;"	m
LIBOBJS	talk/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/base/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/examples/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/examples/call/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/examples/login/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/examples/pcp/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/p2p/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/p2p/base/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/p2p/client/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/session/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/session/fileshare/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/session/phone/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/session/tunnel/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/third_party/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/third_party/gips/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/third_party/mediastreamer/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/xmllite/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	talk/xmpp/Makefile	/^LIBOBJS = $/;"	m
LIBS	talk/Makefile	/^LIBS = $/;"	m
LIBS	talk/base/Makefile	/^LIBS = $/;"	m
LIBS	talk/examples/Makefile	/^LIBS = $/;"	m
LIBS	talk/examples/call/Makefile	/^LIBS = $/;"	m
LIBS	talk/examples/login/Makefile	/^LIBS = $/;"	m
LIBS	talk/examples/pcp/Makefile	/^LIBS = $/;"	m
LIBS	talk/p2p/Makefile	/^LIBS = $/;"	m
LIBS	talk/p2p/base/Makefile	/^LIBS = $/;"	m
LIBS	talk/p2p/client/Makefile	/^LIBS = $/;"	m
LIBS	talk/session/Makefile	/^LIBS = $/;"	m
LIBS	talk/session/fileshare/Makefile	/^LIBS = $/;"	m
LIBS	talk/session/phone/Makefile	/^LIBS = $/;"	m
LIBS	talk/session/tunnel/Makefile	/^LIBS = $/;"	m
LIBS	talk/third_party/Makefile	/^LIBS = $/;"	m
LIBS	talk/third_party/gips/Makefile	/^LIBS = $/;"	m
LIBS	talk/third_party/mediastreamer/Makefile	/^LIBS = $/;"	m
LIBS	talk/xmllite/Makefile	/^LIBS = $/;"	m
LIBS	talk/xmpp/Makefile	/^LIBS = $/;"	m
LIBTOOL	talk/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/base/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/examples/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/examples/call/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/examples/login/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/examples/pcp/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/p2p/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/p2p/base/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/p2p/client/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/session/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/session/fileshare/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/session/phone/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/session/tunnel/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/third_party/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/third_party/gips/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/third_party/mediastreamer/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/xmllite/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LIBTOOL	talk/xmpp/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool --silent$/;"	m
LINK	talk/base/Makefile	/^LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
LINK	talk/third_party/mediastreamer/Makefile	/^LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
LINK_DEFAULT	talk/third_party/mediastreamer/msfilter.h	152;"	d
LINK_FIFO	talk/third_party/mediastreamer/msfilter.h	153;"	d
LINK_QUEUE	talk/third_party/mediastreamer/msfilter.h	154;"	d
LINUX	config.h	71;"	d
LN_S	talk/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/base/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/examples/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/examples/call/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/examples/login/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/examples/pcp/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/p2p/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/p2p/base/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/p2p/client/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/session/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/session/fileshare/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/session/phone/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/session/tunnel/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/third_party/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/third_party/gips/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/third_party/mediastreamer/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/xmllite/Makefile	/^LN_S = ln -s$/;"	m
LN_S	talk/xmpp/Makefile	/^LN_S = ln -s$/;"	m
LOG	talk/base/logging.h	207;"	d
LOG	talk/base/logging.h	265;"	d
LOGGING	config.h	74;"	d
LOGGING	talk/base/logging.h	198;"	d
LOGGING	talk/base/logging.h	200;"	d
LOGINSTATE_AUTH_INIT	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_AUTH_INIT,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_BIND_INIT	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_BIND_INIT,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_BIND_REQUESTED	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_BIND_REQUESTED,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_DONE	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_DONE,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_INIT	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_INIT = 0,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_SASL_RUNNING	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_SASL_RUNNING,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_SESSION_REQUESTED	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_SESSION_REQUESTED,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_STARTED_XMPP	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_STARTED_XMPP,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_STREAMSTART_SENT	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_STREAMSTART_SENT,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_TLS_INIT	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_TLS_INIT,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINSTATE_TLS_REQUESTED	talk/xmpp/xmpplogintask.h	/^    LOGINSTATE_TLS_REQUESTED,$/;"	e	enum:buzz::XmppLoginTask::LoginTaskState
LOGINTASK_STATES	talk/xmpp/xmpplogintask.cc	/^const ConstantLabel XmppLoginTask::LOGINTASK_STATES[] = {$/;"	m	class:buzz::XmppLoginTask	file:
LOGINTASK_STATES	talk/xmpp/xmpplogintask.h	/^  static const talk_base::ConstantLabel LOGINTASK_STATES[];$/;"	m	class:buzz::XmppLoginTask
LOG_CHECK_LEVEL	talk/base/logging.h	223;"	d
LOG_CHECK_LEVEL	talk/base/logging.h	270;"	d
LOG_CHECK_LEVEL_V	talk/base/logging.h	225;"	d
LOG_CHECK_LEVEL_V	talk/base/logging.h	272;"	d
LOG_DEFAULT	talk/base/logging.cc	/^static const int LOG_DEFAULT = LS_INFO;$/;"	v	file:
LOG_DEFAULT	talk/base/logging.cc	/^static const int LOG_DEFAULT = LogMessage::NO_LOGGING;$/;"	v	file:
LOG_ERR	talk/base/logging.h	238;"	d
LOG_ERR	talk/base/logging.h	277;"	d
LOG_F	talk/base/logging.h	218;"	d
LOG_F	talk/base/logging.h	269;"	d
LOG_GLE	talk/base/logging.h	247;"	d
LOG_GLE	talk/base/logging.h	281;"	d
LOG_GLEM	talk/base/logging.h	251;"	d
LOG_GLEM	talk/base/logging.h	284;"	d
LOG_J	talk/p2p/base/common.h	34;"	d
LOG_V	talk/base/logging.h	213;"	d
LOG_V	talk/base/logging.h	267;"	d
LPWINHTTP_PROXY_INFO	talk/base/proxydetect.cc	/^} WINHTTP_PROXY_INFO, * LPWINHTTP_PROXY_INFO;$/;"	t	typeref:struct:__anon17	file:
LS_ERROR	talk/base/logging.h	/^enum LoggingSeverity { LS_SENSITIVE, LS_VERBOSE, LS_INFO, LS_WARNING, LS_ERROR,$/;"	e	enum:talk_base::LoggingSeverity
LS_INFO	talk/base/logging.h	/^enum LoggingSeverity { LS_SENSITIVE, LS_VERBOSE, LS_INFO, LS_WARNING, LS_ERROR,$/;"	e	enum:talk_base::LoggingSeverity
LS_LOCKED	talk/base/diskcache.h	/^  enum LockState { LS_UNLOCKED, LS_LOCKED, LS_UNLOCKING };$/;"	e	enum:talk_base::DiskCache::LockState
LS_SENSITIVE	talk/base/logging.h	/^enum LoggingSeverity { LS_SENSITIVE, LS_VERBOSE, LS_INFO, LS_WARNING, LS_ERROR,$/;"	e	enum:talk_base::LoggingSeverity
LS_UNLOCKED	talk/base/diskcache.h	/^  enum LockState { LS_UNLOCKED, LS_LOCKED, LS_UNLOCKING };$/;"	e	enum:talk_base::DiskCache::LockState
LS_UNLOCKING	talk/base/diskcache.h	/^  enum LockState { LS_UNLOCKED, LS_LOCKED, LS_UNLOCKING };$/;"	e	enum:talk_base::DiskCache::LockState
LS_VERBOSE	talk/base/logging.h	/^enum LoggingSeverity { LS_SENSITIVE, LS_VERBOSE, LS_INFO, LS_WARNING, LS_ERROR,$/;"	e	enum:talk_base::LoggingSeverity
LS_WARNING	talk/base/logging.h	/^enum LoggingSeverity { LS_SENSITIVE, LS_VERBOSE, LS_INFO, LS_WARNING, LS_ERROR,$/;"	e	enum:talk_base::LoggingSeverity
LTCOMPILE	talk/base/Makefile	/^LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \\$/;"	m
LTCOMPILE	talk/third_party/mediastreamer/Makefile	/^LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/base/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/examples/call/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/examples/login/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/examples/pcp/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/p2p/base/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/p2p/client/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/session/fileshare/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/session/phone/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/session/tunnel/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/xmllite/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTCXXCOMPILE	talk/xmpp/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTLIBOBJS	talk/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/base/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/examples/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/examples/call/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/examples/login/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/examples/pcp/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/p2p/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/p2p/base/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/p2p/client/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/session/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/session/fileshare/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/session/phone/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/session/tunnel/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/third_party/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/third_party/gips/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/third_party/mediastreamer/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/xmllite/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	talk/xmpp/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	talk/base/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	talk/examples/login/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	talk/p2p/base/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	talk/p2p/client/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	talk/session/fileshare/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	talk/session/phone/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	talk/session/tunnel/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	talk/third_party/mediastreamer/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	talk/xmllite/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LTLIBRARIES	talk/xmpp/Makefile	/^LTLIBRARIES = $(noinst_LTLIBRARIES)$/;"	m
LT_POSTTIMEOUT	talk/p2p/base/port.h	/^  enum Lifetime { LT_PRESTART, LT_PRETIMEOUT, LT_POSTTIMEOUT } lifetime_;$/;"	e	enum:cricket::Port::Lifetime
LT_PRESTART	talk/p2p/base/port.h	/^  enum Lifetime { LT_PRESTART, LT_PRETIMEOUT, LT_POSTTIMEOUT } lifetime_;$/;"	e	enum:cricket::Port::Lifetime
LT_PRETIMEOUT	talk/p2p/base/port.h	/^  enum Lifetime { LT_PRESTART, LT_PRETIMEOUT, LT_POSTTIMEOUT } lifetime_;$/;"	e	enum:cricket::Port::Lifetime
Leave	talk/base/criticalsection.h	/^  void Leave() {$/;"	f	class:talk_base::CriticalSection
Len16	talk/base/convert.h	/^  inline int Len16() const {$/;"	f	class:Utf16
Len8	talk/base/convert.h	/^  inline int Len8() const {$/;"	f	class:Utf8
Length	talk/base/bytebuffer.h	/^  size_t Length() { return end_ - start_; }$/;"	f	class:talk_base::ByteBuffer
Lifetime	talk/p2p/base/port.h	/^  enum Lifetime { LT_PRESTART, LT_PRETIMEOUT, LT_POSTTIMEOUT } lifetime_;$/;"	g	class:cricket::Port
LinphoneMediaChannel	talk/session/phone/linphonemediaengine.cc	/^LinphoneMediaChannel::LinphoneMediaChannel(LinphoneMediaEngine*eng) :$/;"	f	class:LinphoneMediaChannel
LinphoneMediaChannel	talk/session/phone/linphonemediaengine.h	/^class LinphoneMediaChannel : public MediaChannel {$/;"	c	namespace:cricket
LinphoneMediaEngine	talk/session/phone/linphonemediaengine.cc	/^LinphoneMediaEngine::LinphoneMediaEngine() {}$/;"	f	class:LinphoneMediaEngine
LinphoneMediaEngine	talk/session/phone/linphonemediaengine.h	/^class LinphoneMediaEngine : public MediaEngine {$/;"	c	namespace:cricket
ListContainsToken	talk/examples/login/presencepushtask.cc	/^ListContainsToken(const std::string & list, const std::string & token) {$/;"	f	namespace:buzz	file:
Listen	talk/base/asyncsocket.h	/^  virtual int Listen(int backlog) { return socket_->Listen(backlog); }$/;"	f	class:talk_base::AsyncSocketAdapter
Listen	talk/base/httpserver.cc	/^HttpListenServer::Listen(const SocketAddress& address) {$/;"	f	class:talk_base::HttpListenServer
Listen	talk/base/natsocketfactory.cc	/^  int Listen(int backlog) {$/;"	f	class:talk_base::NATSocket
Listen	talk/base/physicalsocketserver.cc	/^  int Listen(int backlog) {$/;"	f	class:talk_base::PhysicalSocket
Listen	talk/base/virtualsocketserver.cc	/^  int Listen(int backlog) {$/;"	f	class:talk_base::VirtualSocket
Listen	talk/base/win32socketserver.cc	/^Win32Socket::Listen(int backlog) {$/;"	f	class:talk_base::Win32Socket
LocalCandidateToPhase	talk/p2p/client/basicportallocator.cc	/^int LocalCandidateToPhase(const cricket::Candidate& candidate) {$/;"	f	namespace:__anon12
LocalHost	talk/base/host.cc	/^const Host& LocalHost() {$/;"	f	namespace:talk_base
LocalPart	talk/xmllite/qname.h	/^  const std::string & LocalPart() const { return data_->localPart_; }$/;"	f	class:buzz::QName
Lock	talk/p2p/base/relayserver.cc	/^void RelayServerConnection::Lock() {$/;"	f	class:cricket::RelayServerConnection
LockResource	talk/base/diskcache.cc	/^bool DiskCache::LockResource(const std::string& id) {$/;"	f	class:talk_base::DiskCache
LockState	talk/base/diskcache.h	/^  enum LockState { LS_UNLOCKED, LS_LOCKED, LS_UNLOCKING };$/;"	g	class:talk_base::DiskCache
LogAssert	talk/base/common.cc	/^void LogAssert(const char * function, const char * file, int line, const char * expression) {$/;"	f	namespace:talk_base
LogCheckLevel	talk/base/logging.h	/^inline bool LogCheckLevel(LoggingSeverity sev) {$/;"	f	namespace:talk_base
LogContext	talk/base/logging.cc	/^void LogMessage::LogContext(int min_sev) {$/;"	f	class:talk_base::LogMessage
LogErrorContext	talk/base/logging.h	/^enum LogErrorContext { ERRCTX_NONE, ERRCTX_ERRNO, ERRCTX_HRESULT };$/;"	g	namespace:talk_base
LogMessage	talk/base/logging.cc	/^LogMessage::LogMessage(const char* file, int line, LoggingSeverity sev,$/;"	f	class:talk_base::LogMessage
LogMessage	talk/base/logging.h	/^class LogMessage {$/;"	c	namespace:talk_base
LogMultiline	talk/base/logging.cc	/^void LogMultiline(LoggingSeverity level, const char* label, bool input,$/;"	f	namespace:talk_base
LogMultilineState	talk/base/logging.h	/^  LogMultilineState() : unprintable_count_(0) { }$/;"	f	class:talk_base::LogMultilineState
LogMultilineState	talk/base/logging.h	/^class LogMultilineState {$/;"	c	namespace:talk_base
LogThreads	talk/base/logging.cc	/^void LogMessage::LogThreads(bool on) {$/;"	f	class:talk_base::LogMessage
LogTimestamps	talk/base/logging.cc	/^void LogMessage::LogTimestamps(bool on) {$/;"	f	class:talk_base::LogMessage
LogToDebug	talk/base/logging.cc	/^void LogMessage::LogToDebug(int min_sev) {$/;"	f	class:talk_base::LogMessage
LogToStream	talk/base/logging.cc	/^void LogMessage::LogToStream(StreamInterface* stream, int min_sev) {$/;"	f	class:talk_base::LogMessage
Loggable	talk/base/logging.h	/^  static inline bool Loggable(LoggingSeverity sev) { return (sev >= min_sev_); }$/;"	f	class:talk_base::LogMessage
LoggingAdapter	talk/base/stream.cc	/^LoggingAdapter::LoggingAdapter(StreamInterface* stream, LoggingSeverity level,$/;"	f	class:talk_base::LoggingAdapter
LoggingAdapter	talk/base/stream.h	/^class LoggingAdapter : public StreamAdapterInterface {$/;"	c	namespace:talk_base
LoggingPoolAdapter	talk/base/socketpool.cc	/^LoggingPoolAdapter::LoggingPoolAdapter($/;"	f	class:talk_base::LoggingPoolAdapter
LoggingPoolAdapter	talk/base/socketpool.h	/^class LoggingPoolAdapter : public StreamPool {$/;"	c	namespace:talk_base
LoggingSeverity	talk/base/logging.h	/^enum LoggingSeverity { LS_SENSITIVE, LS_VERBOSE, LS_INFO, LS_WARNING, LS_ERROR,$/;"	g	namespace:talk_base
LoggingSocketAdapter	talk/base/socketadapters.cc	/^LoggingSocketAdapter::LoggingSocketAdapter(AsyncSocket* socket,$/;"	f	class:talk_base::LoggingSocketAdapter
LoggingSocketAdapter	talk/base/socketadapters.h	/^class LoggingSocketAdapter : public AsyncSocketAdapter {$/;"	c	namespace:talk_base
Login	talk/examples/login/xmppthread.cc	/^void XmppThread::Login(const buzz::XmppClientSettings& xcs) {$/;"	f	class:XmppThread
LoginData	talk/examples/login/xmppthread.cc	/^  LoginData(const buzz::XmppClientSettings& s) : xcs(s) {}$/;"	f	struct:__anon39::LoginData
LoginData	talk/examples/login/xmppthread.cc	/^struct LoginData: public talk_base::MessageData {$/;"	s	namespace:__anon39	file:
LoginTaskState	talk/xmpp/xmpplogintask.h	/^  enum LoginTaskState {$/;"	g	class:buzz::XmppLoginTask
MAKEINFO	talk/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/base/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/examples/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/examples/call/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/examples/login/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/examples/pcp/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/p2p/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/p2p/base/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/p2p/client/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/session/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/session/fileshare/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/session/phone/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/session/tunnel/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/third_party/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/third_party/gips/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/third_party/mediastreamer/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/xmllite/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAKEINFO	talk/xmpp/Makefile	/^MAKEINFO = ${SHELL} \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/missing --run makeinfo$/;"	m
MAXIMUM_RTT	talk/p2p/base/port.cc	/^const uint32 MAXIMUM_RTT = 3000; \/\/ 3 seconds$/;"	v
MAX_CURRENT_WRITABLE_DELAY	talk/p2p/base/p2ptransportchannel.cc	/^static const uint32 MAX_CURRENT_WRITABLE_DELAY = 900; \/\/ 2*WRITABLE_DELAY - bit$/;"	v	file:
MAX_IP_STATUS	talk/base/winping.cc	94;"	d	file:
MAX_LIFETIME	talk/p2p/base/relayserver.cc	/^const int MAX_LIFETIME = 15 * 60 * 1000;$/;"	v
MAX_OPT_SIZE	talk/base/winping.cc	119;"	d	file:
MAX_PACKET	talk/p2p/base/pseudotcp.cc	/^const uint32 MAX_PACKET = 65535;$/;"	v
MAX_PACKET_SIZE	talk/base/asynctcpsocket.cc	/^const size_t MAX_PACKET_SIZE = 64 * 1024;$/;"	v
MAX_PATH	talk/base/fileutils.cc	44;"	d	file:
MAX_RTO	talk/p2p/base/pseudotcp.cc	/^const uint32 MAX_RTO   = 60000; \/\/ 60 seconds$/;"	v
MAX_RTP_SIZE	talk/third_party/mediastreamer/audiostream.c	30;"	d	file:
MAX_SENDS	talk/p2p/base/stunrequest.cc	/^const int MAX_SENDS = 9;$/;"	v
MAX_SEQ	talk/p2p/base/pseudotcp.cc	/^const uint32 MAX_SEQ = 0xFFFFFFFF;$/;"	v
MAX_SND_CARDS	talk/third_party/mediastreamer/sndcard.h	123;"	d
MD5	talk/base/stringdigest.cc	/^std::string MD5(const std::string& data) {$/;"	f	namespace:talk_base
MD5Context	talk/base/md5.h	/^struct MD5Context {$/;"	s
MD5Final	talk/base/md5c.c	/^MD5Final(unsigned char digest[16], struct MD5Context *ctx)$/;"	f
MD5Init	talk/base/md5c.c	/^MD5Init(struct MD5Context *ctx)$/;"	f
MD5STEP	talk/base/md5c.c	165;"	d	file:
MD5Transform	talk/base/md5c.c	/^MD5Transform(uint32 buf[4], uint32 const in[16])$/;"	f
MD5Update	talk/base/md5c.c	/^MD5Update(struct MD5Context *ctx, unsigned char const *buf, unsigned len)$/;"	f
MD5_CTX	talk/base/md5.h	/^typedef struct MD5Context MD5_CTX;$/;"	t	typeref:struct:MD5Context
MEDIASTREAM_H	talk/third_party/mediastreamer/mediastream.h	23;"	d
MEDIA_LIBS	talk/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/base/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/examples/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/examples/call/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/examples/login/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/examples/pcp/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/p2p/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/p2p/base/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/p2p/client/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/session/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/session/fileshare/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/session/phone/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/session/tunnel/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/third_party/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/third_party/gips/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/third_party/mediastreamer/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/xmllite/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MEDIA_LIBS	talk/xmpp/Makefile	/^MEDIA_LIBS = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/talk\/third_party\/mediastreamer\/libmediastreamer.la -lasound$/;"	m
MINIMUM_RTT	talk/p2p/base/port.cc	/^const uint32 MINIMUM_RTT = 100;  \/\/ 0.1 seconds$/;"	v
MIN_PACKET	talk/p2p/base/pseudotcp.cc	/^const uint32 MIN_PACKET = 296;$/;"	v
MIN_RTO	talk/p2p/base/pseudotcp.cc	/^const uint32 MIN_RTO   =   250; \/\/ 250 ms (RFC1122, Sec 4.2.3.1 "fractions of a second")$/;"	v
MIN_SIZE	talk/p2p/base/stun.h	/^  enum { MIN_SIZE = 4 };$/;"	e	enum:cricket::StunErrorCodeAttribute::__anon8
MIN_SIZE	talk/p2p/base/stun.h	/^  static const uint16 MIN_SIZE = 4;$/;"	m	class:cricket::StunErrorCodeAttribute
MIXER_NAME	talk/third_party/mediastreamer/osscard.c	434;"	d	file:
MKDIR	Makefile	/^MKDIR    = mkdir -p$/;"	m
MOC	Makefile	/^MOC      = $(QTDIR)\/bin\/moc$/;"	m
MOVE	Makefile	/^MOVE     = mv -f$/;"	m
MQID_ANY	talk/base/messagequeue.h	/^const uint32 MQID_ANY = static_cast<uint32>(-1);$/;"	v
MQID_DISPOSE	talk/base/messagequeue.h	/^const uint32 MQID_DISPOSE = static_cast<uint32>(-2);$/;"	v
MSALAWDECODER_H	talk/third_party/mediastreamer/msAlawdec.h	22;"	d
MSALAWDECODER_MAX_INPUTS	talk/third_party/mediastreamer/msAlawdec.h	29;"	d
MSALAWDecoder	talk/third_party/mediastreamer/msAlawdec.h	/^} MSALAWDecoder;$/;"	t	typeref:struct:_MSALAWDecoder
MSALAWDecoderClass	talk/third_party/mediastreamer/msAlawdec.h	/^} MSALAWDecoderClass;$/;"	t	typeref:struct:_MSALAWDecoderClass
MSALAWENCODER_H	talk/third_party/mediastreamer/msAlawenc.h	22;"	d
MSALAWENCODER_MAX_INPUTS	talk/third_party/mediastreamer/msAlawenc.h	29;"	d
MSALAWEncoder	talk/third_party/mediastreamer/msAlawenc.h	/^} MSALAWEncoder;$/;"	t	typeref:struct:_MSALAWEncoder
MSALAWEncoderClass	talk/third_party/mediastreamer/msAlawenc.h	/^} MSALAWEncoderClass;$/;"	t	typeref:struct:_MSALAWEncoderClass
MSAVDECODER_H	talk/third_party/mediastreamer/msavdecoder.h	23;"	d
MSAVDECODER_MAX_INPUTS	talk/third_party/mediastreamer/msavdecoder.h	32;"	d
MSAVDecoder	talk/third_party/mediastreamer/msavdecoder.h	/^typedef struct _MSAVDecoder MSAVDecoder;$/;"	t	typeref:struct:_MSAVDecoder
MSAVDecoderClass	talk/third_party/mediastreamer/msavdecoder.h	/^typedef struct _MSAVDecoderClass MSAVDecoderClass;$/;"	t	typeref:struct:_MSAVDecoderClass
MSAVENCODER_H	talk/third_party/mediastreamer/msavencoder.h	23;"	d
MSAVENCODER_MAX_INPUTS	talk/third_party/mediastreamer/msavencoder.h	31;"	d
MSAVENCODER_MAX_OUTPUTS	talk/third_party/mediastreamer/msavencoder.h	32;"	d
MSAVEncoder	talk/third_party/mediastreamer/msavencoder.h	/^typedef struct _MSAVEncoder MSAVEncoder;$/;"	t	typeref:struct:_MSAVEncoder
MSAVEncoderClass	talk/third_party/mediastreamer/msavencoder.h	/^typedef struct _MSAVEncoderClass MSAVEncoderClass;$/;"	t	typeref:struct:_MSAVEncoderClass
MSBUFFER_H	talk/third_party/mediastreamer/msbuffer.h	23;"	d
MSBuffer	talk/third_party/mediastreamer/msbuffer.h	/^}MSBuffer;$/;"	t	typeref:struct:_MSBuffer
MSCODEC_H	talk/third_party/mediastreamer/mscodec.h	22;"	d
MSCOPY_DEF_GRAN	talk/third_party/mediastreamer/mscopy.h	32;"	d
MSCOPY_H	talk/third_party/mediastreamer/mscopy.h	23;"	d
MSCOPY_MAX_INPUTS	talk/third_party/mediastreamer/mscopy.h	30;"	d
MSCodecInfo	talk/third_party/mediastreamer/mscodec.h	/^typedef struct _MSCodecInfo MSCodecInfo;$/;"	t	typeref:struct:_MSCodecInfo
MSCopy	talk/third_party/mediastreamer/mscopy.h	/^} MSCopy;$/;"	t	typeref:struct:_MSCopy
MSCopyClass	talk/third_party/mediastreamer/mscopy.h	/^} MSCopyClass;$/;"	t	typeref:struct:_MSCopyClass
MSDEV_SET_THREAD_NAME	talk/base/thread.cc	39;"	d	file:
MSFDISPATCHER_H	talk/third_party/mediastreamer/msfdispatcher.h	23;"	d
MSFILTER_H	talk/third_party/mediastreamer/msfilter.h	23;"	d
MSFILTER_VERSION	talk/third_party/mediastreamer/msfilter.h	157;"	d
MSFdispatcher	talk/third_party/mediastreamer/msfdispatcher.h	/^} MSFdispatcher;$/;"	t	typeref:struct:_MSFdispatcher
MSFdispatcherClass	talk/third_party/mediastreamer/msfdispatcher.h	/^} MSFdispatcherClass;$/;"	t	typeref:struct:_MSFdispatcherClass
MSFifo	talk/third_party/mediastreamer/msfifo.h	/^} MSFifo;$/;"	t	typeref:struct:_MSFifo
MSFilter	talk/third_party/mediastreamer/msfilter.h	/^typedef struct _MSFilter MSFilter;$/;"	t	typeref:struct:_MSFilter
MSFilterClass	talk/third_party/mediastreamer/msfilter.h	/^} MSFilterClass;$/;"	t	typeref:struct:_MSFilterClass
MSFilterDestroyFunc	talk/third_party/mediastreamer/msfilter.h	/^typedef  void (*MSFilterDestroyFunc)(MSFilter *);$/;"	t
MSFilterInfo	talk/third_party/mediastreamer/msfilter.h	/^typedef struct _MSFilterInfo MSFilterInfo;$/;"	t	typeref:struct:_MSFilterInfo
MSFilterNewFunc	talk/third_party/mediastreamer/msfilter.h	/^typedef MSFilter * (*MSFilterNewFunc)(void);$/;"	t
MSFilterNotifyFunc	talk/third_party/mediastreamer/msfilter.h	/^typedef gint (*MSFilterNotifyFunc)(struct _MSFilter*, gint event, gpointer arg, gpointer userdata);$/;"	t
MSFilterProcessFunc	talk/third_party/mediastreamer/msfilter.h	/^typedef  void (*MSFilterProcessFunc)(MSFilter *);$/;"	t
MSFilterProperty	talk/third_party/mediastreamer/msfilter.h	/^}MSFilterProperty;$/;"	t	typeref:enum:__anon46
MSFilterPropertyFunc	talk/third_party/mediastreamer/msfilter.h	/^typedef  int (*MSFilterPropertyFunc)(MSFilter *,int ,void*);$/;"	t
MSFilterSetupFunc	talk/third_party/mediastreamer/msfilter.h	/^typedef  void (*MSFilterSetupFunc)(MSFilter *, void *);  \/*2nd arg is the sync *\/$/;"	t
MSFilterType	talk/third_party/mediastreamer/msfilter.h	/^typedef enum _MSFilterType MSFilterType;$/;"	t	typeref:enum:_MSFilterType
MSGSMDECODER_H	talk/third_party/mediastreamer/msGSMdecoder.h	23;"	d
MSGSMDECODER_MAX_INPUTS	talk/third_party/mediastreamer/msGSMdecoder.h	31;"	d
MSGSMDecoder	talk/third_party/mediastreamer/msGSMdecoder.h	/^} MSGSMDecoder;$/;"	t	typeref:struct:_MSGSMDecoder
MSGSMDecoderClass	talk/third_party/mediastreamer/msGSMdecoder.h	/^} MSGSMDecoderClass;$/;"	t	typeref:struct:_MSGSMDecoderClass
MSGSMENCODER_H	talk/third_party/mediastreamer/msGSMencoder.h	23;"	d
MSGSMENCODER_MAX_INPUTS	talk/third_party/mediastreamer/msGSMencoder.h	30;"	d
MSGSMEncoder	talk/third_party/mediastreamer/msGSMencoder.h	/^} MSGSMEncoder;$/;"	t	typeref:struct:_MSGSMEncoder
MSGSMEncoderClass	talk/third_party/mediastreamer/msGSMencoder.h	/^} MSGSMEncoderClass;$/;"	t	typeref:struct:_MSGSMEncoderClass
MSG_ACCEPT_CONN	talk/p2p/base/port_unittest.cc	/^const uint32 MSG_ACCEPT_CONN = 4;$/;"	v
MSG_ALLOCATE	talk/p2p/base/p2ptransportchannel.cc	/^const uint32 MSG_ALLOCATE = 3;$/;"	v
MSG_ALLOCATE	talk/p2p/client/basicportallocator.cc	/^const uint32 MSG_ALLOCATE = 3;$/;"	v
MSG_ALLOCATION_PHASE	talk/p2p/client/basicportallocator.cc	/^const uint32 MSG_ALLOCATION_PHASE = 4;$/;"	v
MSG_CHECKAUTODESTROY	talk/session/phone/call.cc	/^const uint32 MSG_CHECKAUTODESTROY = 1;$/;"	v
MSG_CHECKTIMEOUT	talk/p2p/base/port.cc	/^const uint32 MSG_CHECKTIMEOUT = 1;$/;"	v
MSG_CLOCK	talk/session/tunnel/tunnelsessionclient.cc	/^  MSG_CLOCK = 1,$/;"	e	enum:cricket::__anon35	file:
MSG_CONFIG_READY	talk/p2p/client/basicportallocator.cc	/^const uint32 MSG_CONFIG_READY = 2;$/;"	v
MSG_CONFIG_START	talk/p2p/client/basicportallocator.cc	/^const uint32 MSG_CONFIG_START = 1;$/;"	v
MSG_CONNECT	talk/p2p/base/port_unittest.cc	/^const uint32 MSG_CONNECT = 1;$/;"	v
MSG_CONNECTCHANNELS	talk/p2p/base/transport.cc	/^const int MSG_CONNECTCHANNELS = 4;$/;"	v
MSG_CONNECTING	talk/p2p/base/transport.cc	/^const int MSG_CONNECTING = 12;$/;"	v
MSG_CREATECHANNEL	talk/p2p/base/transport.cc	/^const int MSG_CREATECHANNEL = 1;$/;"	v
MSG_CREATEVOICECHANNEL	talk/session/phone/channelmanager.cc	/^const uint32 MSG_CREATEVOICECHANNEL = 1;$/;"	v
MSG_CREATE_CONN	talk/p2p/base/port_unittest.cc	/^const uint32 MSG_CREATE_CONN = 3;$/;"	v
MSG_CREATE_TUNNEL	talk/session/tunnel/tunnelsessionclient.cc	/^  MSG_CREATE_TUNNEL,$/;"	e	enum:cricket::__anon35	file:
MSG_DELETE	talk/p2p/base/port.cc	/^const uint32 MSG_DELETE = 1;$/;"	v
MSG_DESTROY	talk/session/tunnel/tunnelsessionclient.cc	/^  MSG_DESTROY,$/;"	e	enum:cricket::__anon35	file:
MSG_DESTROYALLCHANNELS	talk/p2p/base/transport.cc	/^const int MSG_DESTROYALLCHANNELS = 3;$/;"	v
MSG_DESTROYCHANNEL	talk/p2p/base/transport.cc	/^const int MSG_DESTROYCHANNEL = 2;$/;"	v
MSG_DESTROYVOICECHANNEL	talk/session/phone/channelmanager.cc	/^const uint32 MSG_DESTROYVOICECHANNEL = 2;$/;"	v
MSG_DESTROY_UNUSED_PORTS	talk/p2p/base/rawtransportchannel.cc	/^const int MSG_DESTROY_UNUSED_PORTS = 1;$/;"	v
MSG_DISABLE	talk/session/phone/voicechannel.h	/^const uint32 MSG_DISABLE = 2;$/;"	v
MSG_DISCONNECT	talk/examples/login/xmppthread.cc	/^const uint32 MSG_DISCONNECT = 2;$/;"	v
MSG_ENABLE	talk/session/phone/voicechannel.h	/^const uint32 MSG_ENABLE = 1;$/;"	v
MSG_ERROR	talk/p2p/base/session.cc	/^const uint32 MSG_ERROR = 2;$/;"	v
MSG_EVENT	talk/session/tunnel/tunnelsessionclient.cc	/^  MSG_EVENT,$/;"	e	enum:cricket::__anon35	file:
MSG_FORWARDCHANNELMESSAGE	talk/p2p/base/transport.cc	/^const int MSG_FORWARDCHANNELMESSAGE = 7;$/;"	v
MSG_ID_PACKET	talk/base/virtualsocketserver.cc	/^const uint32 MSG_ID_PACKET = 1;$/;"	v
MSG_INPUT	talk/examples/call/console.h	/^	MSG_INPUT,$/;"	e	enum:__anon37
MSG_LIFETIME_TIMER	talk/p2p/base/relayserver.cc	/^const uint32 MSG_LIFETIME_TIMER = 1;$/;"	v
MSG_LOGIN	talk/examples/login/xmppthread.cc	/^const uint32 MSG_LOGIN = 1;$/;"	v
MSG_MONITOR_POLL	talk/p2p/client/socketmonitor.cc	/^const uint32 MSG_MONITOR_POLL = 1;$/;"	v
MSG_MONITOR_POLL	talk/session/phone/audiomonitor.cc	/^const uint32 MSG_MONITOR_POLL = 1;$/;"	v
MSG_MONITOR_SIGNAL	talk/p2p/client/socketmonitor.cc	/^const uint32 MSG_MONITOR_SIGNAL = 4;$/;"	v
MSG_MONITOR_SIGNAL	talk/session/phone/audiomonitor.cc	/^const uint32 MSG_MONITOR_SIGNAL = 4;$/;"	v
MSG_MONITOR_START	talk/p2p/client/socketmonitor.cc	/^const uint32 MSG_MONITOR_START = 2;$/;"	v
MSG_MONITOR_START	talk/session/phone/audiomonitor.cc	/^const uint32 MSG_MONITOR_START = 2;$/;"	v
MSG_MONITOR_STOP	talk/p2p/client/socketmonitor.cc	/^const uint32 MSG_MONITOR_STOP = 3;$/;"	v
MSG_MONITOR_STOP	talk/session/phone/audiomonitor.cc	/^const uint32 MSG_MONITOR_STOP = 3;$/;"	v
MSG_MUTE	talk/session/phone/voicechannel.h	/^const uint32 MSG_MUTE = 3;$/;"	v
MSG_ONCHANNELMESSAGE	talk/p2p/base/transport.cc	/^const int MSG_ONCHANNELMESSAGE = 11;$/;"	v
MSG_ONSIGNALINGREADY	talk/p2p/base/transport.cc	/^const int MSG_ONSIGNALINGREADY = 6;$/;"	v
MSG_PING	talk/p2p/base/p2ptransportchannel.cc	/^const uint32 MSG_PING = 2;$/;"	v
MSG_PING	talk/p2p/base/port_unittest.cc	/^const uint32 MSG_PING = 5;$/;"	v
MSG_PREP_ADDRESS	talk/p2p/base/port_unittest.cc	/^const uint32 MSG_PREP_ADDRESS = 2;$/;"	v
MSG_PROXY_WAIT	talk/session/fileshare/fileshare.cc	/^  MSG_PROXY_WAIT,$/;"	e	enum:__anon29::__anon30	file:
MSG_READSTATE	talk/p2p/base/transport.cc	/^const int MSG_READSTATE = 8;$/;"	v
MSG_REQUESTSIGNALING	talk/p2p/base/transport.cc	/^const int MSG_REQUESTSIGNALING = 10;$/;"	v
MSG_RESETCHANNELS	talk/p2p/base/transport.cc	/^const int MSG_RESETCHANNELS = 5;$/;"	v
MSG_RETRY	talk/session/fileshare/fileshare.cc	/^const int MSG_RETRY = 1;$/;"	v
MSG_SETAUDIOOPTIONS	talk/session/phone/channelmanager.cc	/^const uint32 MSG_SETAUDIOOPTIONS = 3;$/;"	v
MSG_SETSENDCODEC	talk/session/phone/voicechannel.h	/^const uint32 MSG_SETSENDCODEC = 5;$/;"	v
MSG_SHAKE	talk/p2p/client/basicportallocator.cc	/^const uint32 MSG_SHAKE = 5;$/;"	v
MSG_SI_DESTROY	talk/session/tunnel/pseudotcpchannel.cc	/^  MSG_SI_DESTROY,$/;"	e	enum:cricket::__anon34	file:
MSG_SI_DESTROYCHANNEL	talk/session/tunnel/pseudotcpchannel.cc	/^  MSG_SI_DESTROYCHANNEL,$/;"	e	enum:cricket::__anon34	file:
MSG_SORT	talk/p2p/base/p2ptransportchannel.cc	/^const uint32 MSG_SORT = 1;$/;"	v
MSG_START	talk/examples/call/console.h	/^	MSG_START,$/;"	e	enum:__anon37
MSG_STATE	talk/p2p/base/session.cc	/^const uint32 MSG_STATE = 3;$/;"	v
MSG_STOP	talk/examples/pcp/pcp_main.cc	/^    MSG_STOP,$/;"	e	enum:FileShareClient::__anon36	file:
MSG_STUN_SEND	talk/p2p/base/stunrequest.cc	/^const uint32 MSG_STUN_SEND = 1;$/;"	v
MSG_ST_EVENT	talk/session/tunnel/pseudotcpchannel.cc	/^  MSG_ST_EVENT,$/;"	e	enum:cricket::__anon34	file:
MSG_TERMINATE	talk/session/tunnel/tunnelsessionclient.cc	/^  MSG_TERMINATE,$/;"	e	enum:cricket::__anon35	file:
MSG_TERMINATECALL	talk/session/phone/call.cc	/^const uint32 MSG_TERMINATECALL = 2;$/;"	v
MSG_TIMEOUT	talk/base/autodetectproxy.cc	/^enum { MSG_TIMEOUT = SignalThread::ST_MSG_FIRST_AVAILABLE };$/;"	e	enum:__anon26	file:
MSG_TIMEOUT	talk/p2p/base/session.cc	/^const uint32 MSG_TIMEOUT = 1;$/;"	v
MSG_TIMEOUT	talk/p2p/client/httpportallocator.cc	/^const uint32 MSG_TIMEOUT = 100;  \/\/ must not conflict with BasicPortAllocator.cpp$/;"	v
MSG_UNMUTE	talk/session/phone/voicechannel.h	/^const uint32 MSG_UNMUTE = 4;$/;"	v
MSG_WAKE_UP	talk/base/virtualsocketserver.cc	/^const uint32 MSG_WAKE_UP = 1;$/;"	v
MSG_WK_CLOCK	talk/session/tunnel/pseudotcpchannel.cc	/^  MSG_WK_CLOCK = 1,$/;"	e	enum:cricket::__anon34	file:
MSG_WK_PURGE	talk/session/tunnel/pseudotcpchannel.cc	/^  MSG_WK_PURGE,$/;"	e	enum:cricket::__anon34	file:
MSG_WRITESTATE	talk/p2p/base/transport.cc	/^const int MSG_WRITESTATE = 9;$/;"	v
MSILBCDECODER_H	talk/third_party/mediastreamer/msilbcdec.h	23;"	d
MSILBCDECODER_MAX_INPUTS	talk/third_party/mediastreamer/msilbcdec.h	31;"	d
MSILBCDecoder	talk/third_party/mediastreamer/msilbcdec.h	/^} MSILBCDecoder;$/;"	t	typeref:struct:_MSILBCDecoder
MSILBCDecoderClass	talk/third_party/mediastreamer/msilbcdec.h	/^} MSILBCDecoderClass;$/;"	t	typeref:struct:_MSILBCDecoderClass
MSILBCENCODER_H	talk/third_party/mediastreamer/msilbcenc.h	23;"	d
MSILBCENCODER_MAX_INPUTS	talk/third_party/mediastreamer/msilbcenc.h	45;"	d
MSILBCEncoder	talk/third_party/mediastreamer/msilbcenc.h	/^} MSILBCEncoder;$/;"	t	typeref:struct:_MSILBCEncoder
MSILBCEncoderClass	talk/third_party/mediastreamer/msilbcenc.h	/^} MSILBCEncoderClass;$/;"	t	typeref:struct:_MSILBCEncoderClass
MSLPC10DECODER_H	talk/third_party/mediastreamer/msLPC10decoder.h	23;"	d
MSLPC10DECODER_MAX_INPUTS	talk/third_party/mediastreamer/msLPC10decoder.h	31;"	d
MSLPC10Decoder	talk/third_party/mediastreamer/msLPC10decoder.h	/^} MSLPC10Decoder;$/;"	t	typeref:struct:_MSLPC10Decoder
MSLPC10DecoderClass	talk/third_party/mediastreamer/msLPC10decoder.h	/^} MSLPC10DecoderClass;$/;"	t	typeref:struct:_MSLPC10DecoderClass
MSLPC10ENCODER_H	talk/third_party/mediastreamer/msLPC10encoder.h	23;"	d
MSLPC10ENCODER_MAX_INPUTS	talk/third_party/mediastreamer/msLPC10encoder.h	43;"	d
MSLPC10Encoder	talk/third_party/mediastreamer/msLPC10encoder.h	/^} MSLPC10Encoder;$/;"	t	typeref:struct:_MSLPC10Encoder
MSLPC10EncoderClass	talk/third_party/mediastreamer/msLPC10encoder.h	/^} MSLPC10EncoderClass;$/;"	t	typeref:struct:_MSLPC10EncoderClass
MSMULAWDECODER_H	talk/third_party/mediastreamer/msMUlawdec.h	22;"	d
MSMULAWDECODER_MAX_INPUTS	talk/third_party/mediastreamer/msMUlawdec.h	29;"	d
MSMULAWDecoder	talk/third_party/mediastreamer/msMUlawdec.h	/^} MSMULAWDecoder;$/;"	t	typeref:struct:_MSMULAWDecoder
MSMULAWDecoderClass	talk/third_party/mediastreamer/msMUlawdec.h	/^} MSMULAWDecoderClass;$/;"	t	typeref:struct:_MSMULAWDecoderClass
MSMULAWENCODER_H	talk/third_party/mediastreamer/msMUlawenc.h	22;"	d
MSMULAWENCODER_MAX_INPUTS	talk/third_party/mediastreamer/msMUlawenc.h	29;"	d
MSMULAWEncoder	talk/third_party/mediastreamer/msMUlawenc.h	/^} MSMULAWEncoder;$/;"	t	typeref:struct:_MSMULAWEncoder
MSMULAWEncoderClass	talk/third_party/mediastreamer/msMUlawenc.h	/^} MSMULAWEncoderClass;$/;"	t	typeref:struct:_MSMULAWEncoderClass
MSMessage	talk/third_party/mediastreamer/msbuffer.h	/^typedef struct _MSMessage MSMessage;$/;"	t	typeref:struct:_MSMessage
MSNOSYNC_MAX_FILTERS	talk/third_party/mediastreamer/msnosync.h	24;"	d
MSNoSync	talk/third_party/mediastreamer/msnosync.h	/^} MSNoSync;$/;"	t	typeref:struct:_MSNoSync
MSNoSyncClass	talk/third_party/mediastreamer/msnosync.h	/^} MSNoSyncClass;$/;"	t	typeref:struct:_MSNoSyncClass
MSOSSREAD_H	talk/third_party/mediastreamer/msossread.h	21;"	d
MSOSSWRITE_H	talk/third_party/mediastreamer/msosswrite.h	21;"	d
MSOssRead	talk/third_party/mediastreamer/msossread.h	/^typedef struct _MSOssRead MSOssRead;$/;"	t	typeref:struct:_MSOssRead
MSOssReadClass	talk/third_party/mediastreamer/msossread.h	/^typedef struct _MSOssReadClass MSOssReadClass;$/;"	t	typeref:struct:_MSOssReadClass
MSOssWrite	talk/third_party/mediastreamer/msosswrite.h	/^typedef struct _MSOssWrite MSOssWrite;$/;"	t	typeref:struct:_MSOssWrite
MSOssWriteClass	talk/third_party/mediastreamer/msosswrite.h	/^typedef struct _MSOssWriteClass MSOssWriteClass;$/;"	t	typeref:struct:_MSOssWriteClass
MSQDISPATCHER_H	talk/third_party/mediastreamer/msqdispatcher.h	23;"	d
MSQUEUE_H	talk/third_party/mediastreamer/msqueue.h	22;"	d
MSQdispatcher	talk/third_party/mediastreamer/msqdispatcher.h	/^} MSQdispatcher;$/;"	t	typeref:struct:_MSQdispatcher
MSQdispatcherClass	talk/third_party/mediastreamer/msqdispatcher.h	/^} MSQdispatcherClass;$/;"	t	typeref:struct:_MSQdispatcherClass
MSQueue	talk/third_party/mediastreamer/msqueue.h	/^}MSQueue;$/;"	t	typeref:struct:_MSQueue
MSREAD_DEF_GRAN	talk/third_party/mediastreamer/msread.h	31;"	d
MSREAD_H	talk/third_party/mediastreamer/msread.h	22;"	d
MSREAD_MAX_OUTPUTS	talk/third_party/mediastreamer/msread.h	29;"	d
MSRINGPLAYER_H	talk/third_party/mediastreamer/msringplayer.h	22;"	d
MSRTPRECV_DEF_GRAN	talk/third_party/mediastreamer/msrtprecv.h	37;"	d
MSRTPRECV_H	talk/third_party/mediastreamer/msrtprecv.h	23;"	d
MSRTPRECV_MAX_OUTPUTS	talk/third_party/mediastreamer/msrtprecv.h	35;"	d
MSRTPSEND_DEF_GRAN	talk/third_party/mediastreamer/msrtpsend.h	37;"	d
MSRTPSEND_H	talk/third_party/mediastreamer/msrtpsend.h	23;"	d
MSRTPSEND_MAX_INPUTS	talk/third_party/mediastreamer/msrtpsend.h	35;"	d
MSRead	talk/third_party/mediastreamer/msread.h	/^} MSRead;$/;"	t	typeref:struct:_MSRead
MSReadClass	talk/third_party/mediastreamer/msread.h	/^} MSReadClass;$/;"	t	typeref:struct:_MSReadClass
MSReadEvent	talk/third_party/mediastreamer/msread.h	/^} MSReadEvent;$/;"	t	typeref:enum:__anon41
MSReadState	talk/third_party/mediastreamer/msread.h	/^}MSReadState;$/;"	t	typeref:enum:__anon40
MSRingPlayer	talk/third_party/mediastreamer/msringplayer.h	/^typedef struct _MSRingPlayer MSRingPlayer;$/;"	t	typeref:struct:_MSRingPlayer
MSRingPlayerClass	talk/third_party/mediastreamer/msringplayer.h	/^typedef struct _MSRingPlayerClass MSRingPlayerClass;$/;"	t	typeref:struct:_MSRingPlayerClass
MSRtpRecv	talk/third_party/mediastreamer/msrtprecv.h	/^typedef struct _MSRtpRecv MSRtpRecv;$/;"	t	typeref:struct:_MSRtpRecv
MSRtpRecvClass	talk/third_party/mediastreamer/msrtprecv.h	/^typedef struct _MSRtpRecvClass MSRtpRecvClass;$/;"	t	typeref:struct:_MSRtpRecvClass
MSRtpSend	talk/third_party/mediastreamer/msrtpsend.h	/^typedef struct _MSRtpSend MSRtpSend;$/;"	t	typeref:struct:_MSRtpSend
MSRtpSendClass	talk/third_party/mediastreamer/msrtpsend.h	/^typedef struct _MSRtpSendClass MSRtpSendClass;$/;"	t	typeref:struct:_MSRtpSendClass
MSSOUNDREAD_H	talk/third_party/mediastreamer/mssoundread.h	21;"	d
MSSOUNDWRITE_H	talk/third_party/mediastreamer/mssoundwrite.h	21;"	d
MSSPEEXDEC_H	talk/third_party/mediastreamer/msspeexdec.h	23;"	d
MSSPEEXENC_H	talk/third_party/mediastreamer/msspeexenc.h	23;"	d
MSSdlOut	talk/third_party/mediastreamer/mssdlout.h	/^typedef struct _MSSdlOut MSSdlOut;$/;"	t	typeref:struct:_MSSdlOut
MSSdlOutClass	talk/third_party/mediastreamer/mssdlout.h	/^typedef struct _MSSdlOutClass MSSdlOutClass;$/;"	t	typeref:struct:_MSSdlOutClass
MSSoundRead	talk/third_party/mediastreamer/mssoundread.h	/^typedef struct _MSSoundRead MSSoundRead;$/;"	t	typeref:struct:_MSSoundRead
MSSoundReadClass	talk/third_party/mediastreamer/mssoundread.h	/^typedef struct _MSSoundReadClass MSSoundReadClass;$/;"	t	typeref:struct:_MSSoundReadClass
MSSoundWrite	talk/third_party/mediastreamer/mssoundwrite.h	/^typedef struct _MSSoundWrite MSSoundWrite;$/;"	t	typeref:struct:_MSSoundWrite
MSSoundWriteClass	talk/third_party/mediastreamer/mssoundwrite.h	/^typedef struct _MSSoundWriteClass MSSoundWriteClass;$/;"	t	typeref:struct:_MSSoundWriteClass
MSSpeexDec	talk/third_party/mediastreamer/msspeexdec.h	/^typedef struct _MSSpeexDec MSSpeexDec;$/;"	t	typeref:struct:_MSSpeexDec
MSSpeexDecClass	talk/third_party/mediastreamer/msspeexdec.h	/^typedef struct _MSSpeexDecClass MSSpeexDecClass;$/;"	t	typeref:struct:_MSSpeexDecClass
MSSpeexEnc	talk/third_party/mediastreamer/msspeexenc.h	/^typedef struct _MSSpeexEnc MSSpeexEnc;$/;"	t	typeref:struct:_MSSpeexEnc
MSSpeexEncClass	talk/third_party/mediastreamer/msspeexenc.h	/^typedef struct _MSSpeexEncClass MSSpeexEncClass;$/;"	t	typeref:struct:_MSSpeexEncClass
MSSync	talk/third_party/mediastreamer/mssync.h	/^typedef struct _MSSync MSSync;$/;"	t	typeref:struct:_MSSync
MSSyncAttachFunc	talk/third_party/mediastreamer/mssync.h	/^typedef int (*MSSyncAttachFunc)(MSSync*,MSFilter*);$/;"	t
MSSyncClass	talk/third_party/mediastreamer/mssync.h	/^} MSSyncClass;$/;"	t	typeref:struct:_MSSyncClass
MSSyncDestroyFunc	talk/third_party/mediastreamer/mssync.h	/^typedef void (*MSSyncDestroyFunc)(MSSync*);$/;"	t
MSSyncDetachFunc	talk/third_party/mediastreamer/mssync.h	/^typedef int (*MSSyncDetachFunc)(MSSync*,MSFilter*);$/;"	t
MSSyncSyncFunc	talk/third_party/mediastreamer/mssync.h	/^typedef void (*MSSyncSyncFunc)(MSSync*);$/;"	t
MSTIMER_H	talk/third_party/mediastreamer/mstimer.h	21;"	d
MSTIMER_MAX_FILTERS	talk/third_party/mediastreamer/mstimer.h	26;"	d
MSTRUESPEECHDECODER_H	talk/third_party/mediastreamer/mstruespeechdecoder.h	21;"	d
MSTRUESPEECHENCODER_H	talk/third_party/mediastreamer/mstruespeechencoder.h	21;"	d
MSTimer	talk/third_party/mediastreamer/mstimer.h	/^} MSTimer;$/;"	t	typeref:struct:_MSTimer
MSTimerClass	talk/third_party/mediastreamer/mstimer.h	/^} MSTimerClass;$/;"	t	typeref:struct:_MSTimerClass
MSTrueSpeechDecoder	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^} MSTrueSpeechDecoder;$/;"	t	typeref:struct:_MSTrueSpeechDecoder
MSTrueSpeechDecoderClass	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^} MSTrueSpeechDecoderClass;$/;"	t	typeref:struct:_MSTrueSpeechDecoderClass
MSTrueSpeechEncoder	talk/third_party/mediastreamer/mstruespeechencoder.h	/^} MSTrueSpeechEncoder;$/;"	t	typeref:struct:_MSTrueSpeechEncoder
MSTrueSpeechEncoderClass	talk/third_party/mediastreamer/mstruespeechencoder.h	/^} MSTrueSpeechEncoderClass;$/;"	t	typeref:struct:_MSTrueSpeechEncoderClass
MSUTILS_H	talk/third_party/mediastreamer/msutils.h	21;"	d
MSV4L_H	talk/third_party/mediastreamer/msv4l.h	22;"	d
MSV4l	talk/third_party/mediastreamer/msv4l.h	/^typedef struct _MSV4l MSV4l;$/;"	t	typeref:struct:_MSV4l
MSV4lClass	talk/third_party/mediastreamer/msv4l.h	/^typedef struct _MSV4lClass MSV4lClass;$/;"	t	typeref:struct:_MSV4lClass
MSVIDEOSOURCE_H	talk/third_party/mediastreamer/msvideosource.h	22;"	d
MSVIDEOSOURCE_MAX_OUTPUTS	talk/third_party/mediastreamer/msvideosource.h	29;"	d
MSVideoSource	talk/third_party/mediastreamer/msvideosource.h	/^} MSVideoSource;$/;"	t	typeref:struct:_MSVideoSource
MSVideoSourceClass	talk/third_party/mediastreamer/msvideosource.h	/^} MSVideoSourceClass;$/;"	t	typeref:struct:_MSVideoSourceClass
MSWRITE_DEF_GRAN	talk/third_party/mediastreamer/mswrite.h	31;"	d
MSWRITE_H	talk/third_party/mediastreamer/mswrite.h	22;"	d
MSWRITE_MAX_INPUTS	talk/third_party/mediastreamer/mswrite.h	29;"	d
MSWRITE_MIN_GRAN	talk/third_party/mediastreamer/mswrite.h	32;"	d
MSWrite	talk/third_party/mediastreamer/mswrite.h	/^} MSWrite;$/;"	t	typeref:struct:_MSWrite
MSWriteClass	talk/third_party/mediastreamer/mswrite.h	/^} MSWriteClass;$/;"	t	typeref:struct:_MSWriteClass
MS_ALAWDECODER	talk/third_party/mediastreamer/msAlawdec.h	49;"	d
MS_ALAWDECODER_CLASS	talk/third_party/mediastreamer/msAlawdec.h	50;"	d
MS_ALAWENCODER	talk/third_party/mediastreamer/msAlawenc.h	49;"	d
MS_ALAWENCODER_CLASS	talk/third_party/mediastreamer/msAlawenc.h	50;"	d
MS_AVDECODER	talk/third_party/mediastreamer/msavdecoder.h	66;"	d
MS_AVDECODER_CLASS	talk/third_party/mediastreamer/msavdecoder.h	67;"	d
MS_AVENCODER	talk/third_party/mediastreamer/msavencoder.h	67;"	d
MS_AVENCODER_CLASS	talk/third_party/mediastreamer/msavencoder.h	68;"	d
MS_BUFFER_CONTIGUOUS	talk/third_party/mediastreamer/msbuffer.h	42;"	d
MS_BUFFER_LARGE	talk/third_party/mediastreamer/msbuffer.h	33;"	d
MS_CODEC_INFO	talk/third_party/mediastreamer/mscodec.h	65;"	d
MS_COPY	talk/third_party/mediastreamer/mscopy.h	51;"	d
MS_COPY_CLASS	talk/third_party/mediastreamer/mscopy.h	52;"	d
MS_FDISPATCHER	talk/third_party/mediastreamer/msfdispatcher.h	51;"	d
MS_FDISPATCHER_CLASS	talk/third_party/mediastreamer/msfdispatcher.h	52;"	d
MS_FDISPATCHER_DEF_GRAN	talk/third_party/mediastreamer/msfdispatcher.h	32;"	d
MS_FDISPATCHER_MAX_INPUTS	talk/third_party/mediastreamer/msfdispatcher.h	30;"	d
MS_FDISPATCHER_MAX_OUTPUTS	talk/third_party/mediastreamer/msfdispatcher.h	31;"	d
MS_FILTER	talk/third_party/mediastreamer/msfilter.h	110;"	d
MS_FILTER_AUDIO_CODEC	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_AUDIO_CODEC,$/;"	e	enum:_MSFilterType
MS_FILTER_AUDIO_IO	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_AUDIO_IO,$/;"	e	enum:_MSFilterType
MS_FILTER_CLASS	talk/third_party/mediastreamer/msfilter.h	111;"	d
MS_FILTER_DISK_IO	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_DISK_IO,$/;"	e	enum:_MSFilterType
MS_FILTER_GET_CLASS	talk/third_party/mediastreamer/msfilter.h	112;"	d
MS_FILTER_INFO	talk/third_party/mediastreamer/msfilter.h	196;"	d
MS_FILTER_NET_IO	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_NET_IO,$/;"	e	enum:_MSFilterType
MS_FILTER_OTHER	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_OTHER$/;"	e	enum:_MSFilterType
MS_FILTER_PROPERTY_BITRATE	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_PROPERTY_BITRATE, \/*value is int *\/$/;"	e	enum:__anon46
MS_FILTER_PROPERTY_CHANNELS	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_PROPERTY_CHANNELS,\/*value is int *\/$/;"	e	enum:__anon46
MS_FILTER_PROPERTY_FMTP	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_PROPERTY_FMTP    \/* value is string *\/$/;"	e	enum:__anon46
MS_FILTER_PROPERTY_FREQ	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_PROPERTY_FREQ,	\/* value is int *\/$/;"	e	enum:__anon46
MS_FILTER_PROPERTY_STRING_MAX_SIZE	talk/third_party/mediastreamer/msfilter.h	73;"	d
MS_FILTER_VIDEO_CODEC	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_VIDEO_CODEC,$/;"	e	enum:_MSFilterType
MS_FILTER_VIDEO_IO	talk/third_party/mediastreamer/msfilter.h	/^	MS_FILTER_VIDEO_IO,$/;"	e	enum:_MSFilterType
MS_GSMDECODER	talk/third_party/mediastreamer/msGSMdecoder.h	52;"	d
MS_GSMDECODER_CLASS	talk/third_party/mediastreamer/msGSMdecoder.h	53;"	d
MS_GSMENCODER	talk/third_party/mediastreamer/msGSMencoder.h	51;"	d
MS_GSMENCODER_CLASS	talk/third_party/mediastreamer/msGSMencoder.h	52;"	d
MS_H	talk/third_party/mediastreamer/ms.h	24;"	d
MS_ILBCDECODER	talk/third_party/mediastreamer/msilbcdec.h	60;"	d
MS_ILBCDECODER_CLASS	talk/third_party/mediastreamer/msilbcdec.h	61;"	d
MS_ILBCENCODER	talk/third_party/mediastreamer/msilbcenc.h	71;"	d
MS_ILBCENCODER_CLASS	talk/third_party/mediastreamer/msilbcenc.h	72;"	d
MS_LPC10DECODER	talk/third_party/mediastreamer/msLPC10decoder.h	52;"	d
MS_LPC10DECODER_CLASS	talk/third_party/mediastreamer/msLPC10decoder.h	53;"	d
MS_LPC10ENCODER	talk/third_party/mediastreamer/msLPC10encoder.h	64;"	d
MS_LPC10ENCODER_CLASS	talk/third_party/mediastreamer/msLPC10encoder.h	65;"	d
MS_MULAWDECODER	talk/third_party/mediastreamer/msMUlawdec.h	49;"	d
MS_MULAWDECODER_CLASS	talk/third_party/mediastreamer/msMUlawdec.h	50;"	d
MS_MULAWENCODER	talk/third_party/mediastreamer/msMUlawenc.h	49;"	d
MS_MULAWENCODER_CLASS	talk/third_party/mediastreamer/msMUlawenc.h	50;"	d
MS_NOSYNC	talk/third_party/mediastreamer/msnosync.h	56;"	d
MS_NOSYNC_CLASS	talk/third_party/mediastreamer/msnosync.h	58;"	d
MS_OSS_READ	talk/third_party/mediastreamer/msossread.h	62;"	d
MS_OSS_READ_CLASS	talk/third_party/mediastreamer/msossread.h	63;"	d
MS_OSS_READ_MAX_GRAN	talk/third_party/mediastreamer/msossread.h	32;"	d
MS_OSS_READ_MAX_INPUTS	talk/third_party/mediastreamer/msossread.h	30;"	d
MS_OSS_WRITE	talk/third_party/mediastreamer/msosswrite.h	61;"	d
MS_OSS_WRITE_CLASS	talk/third_party/mediastreamer/msosswrite.h	62;"	d
MS_OSS_WRITE_DEF_GRAN	talk/third_party/mediastreamer/msosswrite.h	30;"	d
MS_OSS_WRITE_MAX_INPUTS	talk/third_party/mediastreamer/msosswrite.h	28;"	d
MS_QDISPATCHER	talk/third_party/mediastreamer/msqdispatcher.h	50;"	d
MS_QDISPATCHER_CLASS	talk/third_party/mediastreamer/msqdispatcher.h	51;"	d
MS_QDISPATCHER_MAX_INPUTS	talk/third_party/mediastreamer/msqdispatcher.h	30;"	d
MS_QDISPATCHER_MAX_OUTPUTS	talk/third_party/mediastreamer/msqdispatcher.h	31;"	d
MS_READ	talk/third_party/mediastreamer/msread.h	62;"	d
MS_READ_CLASS	talk/third_party/mediastreamer/msread.h	63;"	d
MS_READ_EVENT_EOF	talk/third_party/mediastreamer/msread.h	/^	MS_READ_EVENT_EOF	\/* end of file *\/$/;"	e	enum:__anon41
MS_READ_STATE_EOF	talk/third_party/mediastreamer/msread.h	/^	MS_READ_STATE_EOF$/;"	e	enum:__anon40
MS_READ_STATE_STARTED	talk/third_party/mediastreamer/msread.h	/^	MS_READ_STATE_STARTED,$/;"	e	enum:__anon40
MS_READ_STATE_STOPPED	talk/third_party/mediastreamer/msread.h	/^	MS_READ_STATE_STOPPED,$/;"	e	enum:__anon40
MS_RING_PLAYER	talk/third_party/mediastreamer/msringplayer.h	68;"	d
MS_RING_PLAYER_CLASS	talk/third_party/mediastreamer/msringplayer.h	69;"	d
MS_RING_PLAYER_DEF_GRAN	talk/third_party/mediastreamer/msringplayer.h	32;"	d
MS_RING_PLAYER_END_OF_RING_EVENT	talk/third_party/mediastreamer/msringplayer.h	34;"	d
MS_RING_PLAYER_MAX_OUTPUTS	talk/third_party/mediastreamer/msringplayer.h	30;"	d
MS_RTP_RECV	talk/third_party/mediastreamer/msrtprecv.h	64;"	d
MS_RTP_RECV_CLASS	talk/third_party/mediastreamer/msrtprecv.h	65;"	d
MS_RTP_SEND	talk/third_party/mediastreamer/msrtpsend.h	68;"	d
MS_RTP_SEND_CLASS	talk/third_party/mediastreamer/msrtpsend.h	69;"	d
MS_SDL_OUT	talk/third_party/mediastreamer/mssdlout.h	62;"	d
MS_SOUND_READ	talk/third_party/mediastreamer/mssoundread.h	51;"	d
MS_SOUND_READ_CLASS	talk/third_party/mediastreamer/mssoundread.h	52;"	d
MS_SOUND_WRITE	talk/third_party/mediastreamer/mssoundwrite.h	51;"	d
MS_SOUND_WRITE_CLASS	talk/third_party/mediastreamer/mssoundwrite.h	52;"	d
MS_SPEEX_DEC	talk/third_party/mediastreamer/msspeexdec.h	51;"	d
MS_SPEEX_DEC_CLASS	talk/third_party/mediastreamer/msspeexdec.h	52;"	d
MS_SPEEX_ENC	talk/third_party/mediastreamer/msspeexenc.h	51;"	d
MS_SPEEX_ENC_CLASS	talk/third_party/mediastreamer/msspeexenc.h	52;"	d
MS_SYNC	talk/third_party/mediastreamer/mssync.h	72;"	d
MS_SYNC_CLASS	talk/third_party/mediastreamer/mssync.h	73;"	d
MS_SYNC_H	talk/third_party/mediastreamer/mssync.h	22;"	d
MS_SYNC_NEED_UPDATE	talk/third_party/mediastreamer/mssync.h	40;"	d
MS_TIMER	talk/third_party/mediastreamer/mstimer.h	62;"	d
MS_TIMER_CLASS	talk/third_party/mediastreamer/mstimer.h	64;"	d
MS_TIMER_RUNNING	talk/third_party/mediastreamer/mstimer.h	50;"	d
MS_TIMER_STOPPED	talk/third_party/mediastreamer/mstimer.h	51;"	d
MS_TRUESPEECHDECODER	talk/third_party/mediastreamer/mstruespeechdecoder.h	50;"	d
MS_TRUESPEECHDECODER_CLASS	talk/third_party/mediastreamer/mstruespeechdecoder.h	51;"	d
MS_TRUESPEECHENCODER	talk/third_party/mediastreamer/mstruespeechencoder.h	54;"	d
MS_TRUESPEECHENCODER_CLASS	talk/third_party/mediastreamer/mstruespeechencoder.h	55;"	d
MS_TRUESPEECH_CODEC_MAX_IN_OUT	talk/third_party/mediastreamer/mstruespeechencoder.h	27;"	d
MS_V4L	talk/third_party/mediastreamer/msv4l.h	72;"	d
MS_V4L_CLASS	talk/third_party/mediastreamer/msv4l.h	73;"	d
MS_VIDEO_SOURCE	talk/third_party/mediastreamer/msvideosource.h	66;"	d
MS_VIDEO_SOURCE_CLASS	talk/third_party/mediastreamer/msvideosource.h	67;"	d
MS_WRITE	talk/third_party/mediastreamer/mswrite.h	52;"	d
MS_WRITE_CLASS	talk/third_party/mediastreamer/mswrite.h	53;"	d
MULAW_DECODER_RMAXGRAN	talk/third_party/mediastreamer/msMUlawdec.h	61;"	d
MULAW_DECODER_WMAXGRAN	talk/third_party/mediastreamer/msMUlawdec.h	60;"	d
MULAW_ENCODER_RMAXGRAN	talk/third_party/mediastreamer/msMUlawenc.h	61;"	d
MULAW_ENCODER_WMAXGRAN	talk/third_party/mediastreamer/msMUlawenc.h	60;"	d
MULAWinfo	talk/third_party/mediastreamer/msMUlawdec.c	/^MSCodecInfo MULAWinfo={$/;"	v
MUTEX_CLEANUP	talk/base/ssladapter.cc	56;"	d	file:
MUTEX_CLEANUP	talk/base/ssladapter.cc	65;"	d	file:
MUTEX_LOCK	talk/base/ssladapter.cc	57;"	d	file:
MUTEX_LOCK	talk/base/ssladapter.cc	66;"	d	file:
MUTEX_SETUP	talk/base/ssladapter.cc	55;"	d	file:
MUTEX_SETUP	talk/base/ssladapter.cc	64;"	d	file:
MUTEX_TYPE	talk/base/ssladapter.cc	54;"	d	file:
MUTEX_TYPE	talk/base/ssladapter.cc	63;"	d	file:
MUTEX_UNLOCK	talk/base/ssladapter.cc	58;"	d	file:
MUTEX_UNLOCK	talk/base/ssladapter.cc	67;"	d	file:
M_NONE	talk/base/tarstream.h	/^  enum ModeType { M_NONE, M_READ, M_WRITE };$/;"	e	enum:talk_base::TarStream::ModeType
M_READ	talk/base/tarstream.h	/^  enum ModeType { M_NONE, M_READ, M_WRITE };$/;"	e	enum:talk_base::TarStream::ModeType
M_WRITE	talk/base/tarstream.h	/^  enum ModeType { M_NONE, M_READ, M_WRITE };$/;"	e	enum:talk_base::TarStream::ModeType
MakeCallTo	talk/examples/call/callclient.cc	/^void CallClient::MakeCallTo(const std::string& name) {$/;"	f	class:CallClient
MakeIq	talk/xmpp/xmpptask.cc	/^XmlElement* XmppTask::MakeIq(const std::string& type,$/;"	f	class:buzz::XmppTask
MakeIqResult	talk/xmpp/xmpptask.cc	/^XmlElement* XmppTask::MakeIqResult(const XmlElement * query) {$/;"	f	class:buzz::XmppTask
MatchHeader	talk/base/httpbase.cc	/^bool MatchHeader(const char* str, size_t len, HttpHeader header) {$/;"	f	namespace:talk_base
MatchRequestIq	talk/xmpp/xmpptask.cc	/^bool XmppTask::MatchRequestIq(const XmlElement* stanza,$/;"	f	class:buzz::XmppTask
MatchResponseIq	talk/xmpp/xmpptask.cc	/^bool XmppTask::MatchResponseIq(const XmlElement* stanza,$/;"	f	class:buzz::XmppTask
MediaChannel	talk/session/phone/mediachannel.h	/^  MediaChannel() {network_interface_ = NULL;}$/;"	f	class:cricket::MediaChannel
MediaChannel	talk/session/phone/mediachannel.h	/^class MediaChannel : public sigslot::has_slots<> {$/;"	c	namespace:cricket
MediaEngine	talk/session/phone/mediaengine.h	/^  MediaEngine() {}$/;"	f	class:cricket::MediaEngine
MediaEngine	talk/session/phone/mediaengine.h	/^class MediaEngine {$/;"	c	namespace:cricket
MediaEngineOptions	talk/session/phone/mediaengine.h	/^  enum MediaEngineOptions {$/;"	g	class:cricket::MediaEngine
MediaInfo	talk/session/phone/mediachannel.h	/^struct MediaInfo {$/;"	s	namespace:cricket
MemoryStream	talk/base/stream.cc	/^MemoryStream::MemoryStream()$/;"	f	class:talk_base::MemoryStream
MemoryStream	talk/base/stream.cc	/^MemoryStream::MemoryStream(const char* data)$/;"	f	class:talk_base::MemoryStream
MemoryStream	talk/base/stream.cc	/^MemoryStream::MemoryStream(const char* data, size_t length)$/;"	f	class:talk_base::MemoryStream
MemoryStream	talk/base/stream.h	/^class MemoryStream : public StreamInterface {$/;"	c	namespace:talk_base
Merged	talk/xmllite/qname.cc	/^QName::Merged() const {$/;"	f	class:buzz::QName
Message	talk/base/messagequeue.h	/^  Message() {$/;"	f	struct:talk_base::Message
Message	talk/base/messagequeue.h	/^struct Message {$/;"	s	namespace:talk_base
MessageData	talk/base/messagequeue.h	/^  MessageData() {}$/;"	f	class:talk_base::MessageData
MessageData	talk/base/messagequeue.h	/^class MessageData {$/;"	c	namespace:talk_base
MessageHandler	talk/base/messagequeue.h	/^class MessageHandler {$/;"	c	namespace:talk_base
MessageQueue	talk/base/messagequeue.cc	/^MessageQueue::MessageQueue(SocketServer* ss)$/;"	f	class:talk_base::MessageQueue
MessageQueue	talk/base/messagequeue.h	/^class MessageQueue {$/;"	c	namespace:talk_base
MessageQueueManager	talk/base/messagequeue.cc	/^MessageQueueManager::MessageQueueManager() {$/;"	f	class:talk_base::MessageQueueManager
MessageQueueManager	talk/base/messagequeue.h	/^class MessageQueueManager {$/;"	c	namespace:talk_base
MixerAction	talk/third_party/mediastreamer/alsacard.c	/^typedef enum {CAPTURE, PLAYBACK, CAPTURE_SWITCH, PLAYBACK_SWITCH} MixerAction;$/;"	t	typeref:enum:__anon43	file:
ModeType	talk/base/tarstream.h	/^  enum ModeType { M_NONE, M_READ, M_WRITE };$/;"	g	class:talk_base::TarStream
MoveFile	talk/base/fileutils.cc	/^bool Filesystem::MoveFile(const Pathname &old_path, const Pathname &new_path)$/;"	f	class:talk_base::Filesystem
MoveFileI	talk/base/unixfilesystem.cc	/^bool UnixFilesystem::MoveFileI(const Pathname &old_path, const Pathname &new_path) $/;"	f	class:talk_base::UnixFilesystem
MoveFileI	talk/base/win32filesystem.cc	/^bool Win32Filesystem::MoveFileI(const Pathname &old_path, const Pathname &new_path) $/;"	f	class:talk_base::Win32Filesystem
Mute	talk/session/phone/call.cc	/^void Call::Mute(bool mute) {$/;"	f	class:cricket::Call
Mute	talk/session/phone/voicechannel.cc	/^void VoiceChannel::Mute(bool mute) {$/;"	f	class:cricket::VoiceChannel
MuteMedia_w	talk/session/phone/voicechannel.cc	/^void VoiceChannel::MuteMedia_w() {$/;"	f	class:cricket::VoiceChannel
MySessionClient	talk/p2p/base/session_unittest.cc	/^  MySessionClient() : create_count(0), a(NULL), b(NULL) { }$/;"	f	struct:MySessionClient
MySessionClient	talk/p2p/base/session_unittest.cc	/^struct MySessionClient: public SessionClient, public sigslot::has_slots<> {$/;"	s	file:
MyWinHttpGetProxyForUrl	talk/base/proxydetect.cc	/^BOOL MyWinHttpGetProxyForUrl(pfnWinHttpGetProxyForUrl pWHGPFU,$/;"	f
NAT	talk/base/nattypes.h	/^class NAT {$/;"	c	namespace:talk_base
NATName	talk/p2p/base/port_unittest.cc	/^const char* NATName(talk_base::NATType type) {$/;"	f
NATServer	talk/base/natserver.cc	/^NATServer::NATServer($/;"	f	class:talk_base::NATServer
NATServer	talk/base/natserver.h	/^class NATServer : public sigslot::has_slots<> {$/;"	c	namespace:talk_base
NATSocket	talk/base/natsocketfactory.cc	/^  NATSocket(AsyncSocket* socket, const SocketAddress& server_addr)$/;"	f	class:talk_base::NATSocket
NATSocket	talk/base/natsocketfactory.cc	/^  NATSocket(Socket* socket, const SocketAddress& server_addr)$/;"	f	class:talk_base::NATSocket
NATSocket	talk/base/natsocketfactory.cc	/^class NATSocket : public AsyncSocket {$/;"	c	namespace:talk_base	file:
NATSocketFactory	talk/base/natsocketfactory.cc	/^NATSocketFactory::NATSocketFactory($/;"	f	class:talk_base::NATSocketFactory
NATSocketFactory	talk/base/natsocketfactory.h	/^class NATSocketFactory : public SocketFactory {$/;"	c	namespace:talk_base
NATType	talk/base/nattypes.h	/^enum NATType {$/;"	g	namespace:talk_base
NAT_ADDR_RESTRICTED	talk/base/nattypes.h	/^  NAT_ADDR_RESTRICTED,$/;"	e	enum:talk_base::NATType
NAT_OPEN_CONE	talk/base/nattypes.h	/^  NAT_OPEN_CONE,$/;"	e	enum:talk_base::NATType
NAT_PORT_RESTRICTED	talk/base/nattypes.h	/^  NAT_PORT_RESTRICTED,$/;"	e	enum:talk_base::NATType
NAT_SERVER_PORT	talk/base/natserver.h	/^const int NAT_SERVER_PORT = 4237;$/;"	v
NAT_SYMMETRIC	talk/base/nattypes.h	/^  NAT_SYMMETRIC$/;"	e	enum:talk_base::NATType
NB_DATA	talk/base/tarstream.h	/^  enum NextBlockType { NB_NONE, NB_FILE_HEADER, NB_DATA, NB_TRAILER };$/;"	e	enum:talk_base::TarStream::NextBlockType
NB_FILE_HEADER	talk/base/tarstream.h	/^  enum NextBlockType { NB_NONE, NB_FILE_HEADER, NB_DATA, NB_TRAILER };$/;"	e	enum:talk_base::TarStream::NextBlockType
NB_NONE	talk/base/tarstream.h	/^  enum NextBlockType { NB_NONE, NB_FILE_HEADER, NB_DATA, NB_TRAILER };$/;"	e	enum:talk_base::TarStream::NextBlockType
NB_TRAILER	talk/base/tarstream.h	/^  enum NextBlockType { NB_NONE, NB_FILE_HEADER, NB_DATA, NB_TRAILER };$/;"	e	enum:talk_base::TarStream::NextBlockType
NORMAL_INSTALL	talk/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/base/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/examples/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/examples/call/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/examples/login/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/examples/pcp/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/p2p/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/p2p/base/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/p2p/client/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/session/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/session/fileshare/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/session/phone/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/session/tunnel/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/third_party/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/third_party/gips/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/third_party/mediastreamer/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/xmllite/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	talk/xmpp/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/base/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/examples/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/examples/call/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/examples/login/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/examples/pcp/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/p2p/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/p2p/base/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/p2p/client/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/session/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/session/fileshare/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/session/phone/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/session/tunnel/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/third_party/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/third_party/gips/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/third_party/mediastreamer/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/xmllite/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	talk/xmpp/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NO_LOGGING	talk/base/logging.h	/^  enum { NO_LOGGING = LS_ERROR + 1 };$/;"	e	enum:talk_base::LogMessage::__anon15
NO_MEMBER_TEMPLATES	talk/base/linked_ptr.h	17;"	d
NS_AVATAR_HASH	talk/xmpp/constants.h	49;"	d
NS_BIND	talk/xmpp/constants.h	42;"	d
NS_CLIENT	talk/xmpp/constants.h	36;"	d
NS_DIALBACK	talk/xmpp/constants.h	43;"	d
NS_PRIVACY	talk/xmpp/constants.h	46;"	d
NS_ROSTER	talk/xmpp/constants.h	47;"	d
NS_SASL	talk/xmpp/constants.h	41;"	d
NS_SERVER	talk/xmpp/constants.h	37;"	d
NS_SESSION	talk/xmpp/constants.h	44;"	d
NS_STANZA	talk/xmpp/constants.h	45;"	d
NS_STREAM	talk/xmpp/constants.h	38;"	d
NS_TLS	talk/xmpp/constants.h	40;"	d
NS_VCARD	talk/xmpp/constants.h	48;"	d
NS_VCARD_UPDATE	talk/xmpp/constants.h	50;"	d
NS_XML	talk/xmllite/xmlconstants.h	40;"	d
NS_XMLNS	talk/xmllite/xmlconstants.h	41;"	d
NS_XSTREAM	talk/xmpp/constants.h	39;"	d
NUM_SAMPLES	talk/base/virtualsocketserver.cc	/^const int NUM_SAMPLES = 100; \/\/ 1000;$/;"	v
Name	talk/base/fileutils.cc	/^std::string DirectoryIterator::Name() const {$/;"	f	class:talk_base::DirectoryIterator
Name	talk/base/httpcommon.cc	/^  static inline const char* Name(E val) { return Names[val]; }$/;"	f	struct:talk_base::Enum
Name	talk/xmllite/xmlelement.h	/^  const QName & Name() const { return name_; }$/;"	f	class:buzz::XmlAttr
Name	talk/xmllite/xmlelement.h	/^  const QName& Name() const { return name_; }$/;"	f	class:buzz::XmlElement
Names	talk/base/httpcommon.cc	/^  static const char** Names;$/;"	m	struct:talk_base::Enum	file:
Namespace	talk/xmllite/qname.h	/^  const std::string & Namespace() const { return data_->namespace_; }$/;"	f	class:buzz::QName
NegotiateAuthContext	talk/base/httpcommon.cc	/^  NegotiateAuthContext(const std::string& auth, CredHandle c1, CtxtHandle c2)$/;"	f	struct:talk_base::NegotiateAuthContext
NegotiateAuthContext	talk/base/httpcommon.cc	/^struct NegotiateAuthContext : public HttpAuthContext {$/;"	s	namespace:talk_base	file:
Network	talk/base/network.cc	/^Network::Network(const std::string& name, uint32 ip)$/;"	f	class:talk_base::Network
Network	talk/base/network.h	/^class Network {$/;"	c	namespace:talk_base
NetworkInterface	talk/session/phone/mediachannel.h	/^  class NetworkInterface {$/;"	c	class:cricket::MediaChannel
NetworkManager	talk/base/network.h	/^class NetworkManager {$/;"	c	namespace:talk_base
NetworkMap	talk/base/network.h	/^  typedef std::map<std::string,Network*> NetworkMap;$/;"	t	class:talk_base::NetworkManager
NetworkSession	talk/base/network.h	/^class NetworkSession {$/;"	c	namespace:talk_base
NetworkToHost16	talk/base/byteorder.h	/^inline uint16 NetworkToHost16(uint16 n) {$/;"	f	namespace:talk_base
NetworkToHost32	talk/base/byteorder.h	/^inline uint32 NetworkToHost32(uint32 n) {$/;"	f	namespace:talk_base
NewSocketPool	talk/base/socketpool.cc	/^NewSocketPool::NewSocketPool(SocketFactory* factory) : factory_(factory) {$/;"	f	class:talk_base::NewSocketPool
NewSocketPool	talk/base/socketpool.h	/^class NewSocketPool : public StreamPool {$/;"	c	namespace:talk_base
Next	talk/base/autodetectproxy.cc	/^void AutoDetectProxy::Next() {$/;"	f	class:AutoDetectProxy
Next	talk/base/fileutils.cc	/^bool DirectoryIterator::Next() {$/;"	f	class:talk_base::DirectoryIterator
NextAttr	talk/xmllite/xmlelement.h	/^  XmlAttr * NextAttr() const { return pNextAttr_; }$/;"	f	class:buzz::XmlAttr
NextBlockType	talk/base/tarstream.h	/^  enum NextBlockType { NB_NONE, NB_FILE_HEADER, NB_DATA, NB_TRAILER };$/;"	g	class:talk_base::TarStream
NextChild	talk/xmllite/xmlelement.h	/^  XmlChild * NextChild() { return pNextChild_; }$/;"	f	class:buzz::XmlChild
NextChild	talk/xmllite/xmlelement.h	/^  const XmlChild * NextChild() const { return pNextChild_; }$/;"	f	class:buzz::XmlChild
NextDelay	talk/base/virtualsocket_unittest.cc	/^  uint32 NextDelay() {$/;"	f	struct:Sender
NextDownload	talk/session/fileshare/fileshare.cc	/^void FileShareSession::NextDownload() {$/;"	f	class:cricket::FileShareSession
NextElement	talk/xmllite/xmlelement.cc	/^XmlElement::NextElement() {$/;"	f	class:buzz::XmlElement
NextElement	talk/xmllite/xmlelement.h	/^  const XmlElement * NextElement() const$/;"	f	class:buzz::XmlElement
NextId	talk/xmpp/xmppclient.cc	/^XmppClient::NextId() {$/;"	f	class:buzz::XmppClient
NextId	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::NextId() {$/;"	f	class:buzz::XmppEngineImpl
NextNamed	talk/xmllite/xmlelement.cc	/^XmlElement::NextNamed(const QName & name) {$/;"	f	class:buzz::XmlElement
NextNamed	talk/xmllite/xmlelement.h	/^  const XmlElement * NextNamed(const QName & name) const$/;"	f	class:buzz::XmlElement
NextPacket	talk/base/testclient.cc	/^TestClient::Packet* TestClient::NextPacket() {$/;"	f	class:talk_base::TestClient
NextStanza	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::NextStanza() {$/;"	f	class:buzz::XmppLoginTask
NextStanza	talk/xmpp/xmpptask.cc	/^const XmlElement* XmppTask::NextStanza() {$/;"	f	class:buzz::XmppTask
NextTimeAllowedForCounter	talk/xmpp/ratelimitmanager.h	/^    uint32 NextTimeAllowedForCounter() {$/;"	f	class:buzz::RateLimitManager::RateLimit
NextWithNamespace	talk/xmllite/xmlelement.cc	/^XmlElement::NextWithNamespace(const std::string & ns) {$/;"	f	class:buzz::XmlElement
NextWithNamespace	talk/xmllite/xmlelement.h	/^  const XmlElement * NextWithNamespace(const std::string & ns) const$/;"	f	class:buzz::XmlElement
Normal	talk/base/virtualsocketserver.cc	/^static double Normal(double x, double mean, double stddev) {$/;"	f	namespace:talk_base	file:
Normalize	talk/base/pathutils.cc	/^void Pathname::Normalize() {$/;"	f	class:talk_base::Pathname
NoteUsed	talk/p2p/base/relayserver.cc	/^void RelayServerBinding::NoteUsed() {$/;"	f	class:cricket::RelayServerBinding
NotifyClock	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::NotifyClock(uint32 now) {$/;"	f	class:cricket::PseudoTcp
NotifyMTU	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::NotifyMTU(uint16 mtu) {$/;"	f	class:cricket::PseudoTcp
NotifyPacket	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::NotifyPacket(const char * buffer, size_t len) {$/;"	f	class:cricket::PseudoTcp
Now	talk/p2p/base/pseudotcp.cc	/^uint32 PseudoTcp::Now() {$/;"	f	class:cricket::PseudoTcp
NsForPrefix	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::NsForPrefix(const std::string & prefix) {$/;"	f	class:buzz::XmlnsStack
NullStream	talk/base/stream.cc	/^NullStream::NullStream() {$/;"	f	class:talk_base::NullStream
NullStream	talk/base/stream.h	/^class NullStream : public StreamInterface {$/;"	c	namespace:talk_base
NumPingableConnections	talk/p2p/base/p2ptransportchannel.cc	/^uint32 P2PTransportChannel::NumPingableConnections() {$/;"	f	class:cricket::P2PTransportChannel
OBJECTS	Makefile	/^OBJECTS = .obj\/asyncpacketsocket.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR = .obj\/$/;"	m
OBJEXT	talk/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/base/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/examples/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/examples/call/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/examples/login/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/examples/pcp/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/p2p/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/p2p/base/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/p2p/client/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/session/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/session/fileshare/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/session/phone/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/session/tunnel/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/third_party/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/third_party/gips/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/third_party/mediastreamer/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/xmllite/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	talk/xmpp/Makefile	/^OBJEXT = o$/;"	m
OBJMOC	Makefile	/^OBJMOC = $/;"	m
OPT_DONTFRAGMENT	talk/base/socket.h	/^    OPT_DONTFRAGMENT$/;"	e	enum:talk_base::Socket::Option
ORIGIN_MESSAGE	talk/p2p/base/port.h	/^  enum CandidateOrigin { ORIGIN_THIS_PORT, ORIGIN_OTHER_PORT, ORIGIN_MESSAGE };$/;"	e	enum:cricket::Port::CandidateOrigin
ORIGIN_OTHER_PORT	talk/p2p/base/port.h	/^  enum CandidateOrigin { ORIGIN_THIS_PORT, ORIGIN_OTHER_PORT, ORIGIN_MESSAGE };$/;"	e	enum:cricket::Port::CandidateOrigin
ORIGIN_THIS_PORT	talk/p2p/base/port.h	/^  enum CandidateOrigin { ORIGIN_THIS_PORT, ORIGIN_OTHER_PORT, ORIGIN_MESSAGE };$/;"	e	enum:cricket::Port::CandidateOrigin
ORTP_CFLAGS	talk/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/base/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/examples/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/examples/call/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/examples/login/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/examples/pcp/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/p2p/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/p2p/base/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/p2p/client/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/session/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/session/fileshare/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/session/phone/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/session/tunnel/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/third_party/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/third_party/gips/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/third_party/mediastreamer/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/xmllite/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_CFLAGS	talk/xmpp/Makefile	/^ORTP_CFLAGS = $/;"	m
ORTP_LIBS	talk/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/base/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/examples/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/examples/call/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/examples/login/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/examples/pcp/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/p2p/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/p2p/base/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/p2p/client/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/session/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/session/fileshare/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/session/phone/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/session/tunnel/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/third_party/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/third_party/gips/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/third_party/mediastreamer/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/xmllite/Makefile	/^ORTP_LIBS = $/;"	m
ORTP_LIBS	talk/xmpp/Makefile	/^ORTP_LIBS = $/;"	m
OSS_CARD_BUFFERS	talk/third_party/mediastreamer/osscard.h	27;"	d
OSS_CARD_H	talk/third_party/mediastreamer/osscard.h	23;"	d
Occupied	talk/xmllite/qname.h	/^    bool Occupied() { return !!refcount_; }$/;"	f	class:buzz::QName::Data
OnAccept	talk/session/tunnel/tunnelsessionclient.cc	/^void TunnelSession::OnAccept() {$/;"	f	class:cricket::TunnelSession
OnAcceptEvent	talk/p2p/base/tcpport.cc	/^void TCPPort::OnAcceptEvent(talk_base::AsyncSocket* socket) {$/;"	f	class:cricket::TCPPort
OnAcceptMessage	talk/p2p/base/session.cc	/^bool Session::OnAcceptMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
OnAddressReady	talk/p2p/base/port_unittest.cc	/^  void OnAddressReady(Port* port) {$/;"	f	struct:Foo
OnAddressReady	talk/p2p/base/session_unittest.cc	/^  void OnAddressReady(Port* port) {$/;"	f	class:TestPortAllocatorSession
OnAddressReady	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::OnAddressReady(Port *port) {$/;"	f	class:cricket::BasicPortAllocatorSession
OnAllocate	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnAllocate() {$/;"	f	class:cricket::P2PTransportChannel
OnAllocate	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::OnAllocate() {$/;"	f	class:cricket::BasicPortAllocatorSession
OnAllocateRequest	talk/p2p/base/stunserver.cc	/^void StunServer::OnAllocateRequest($/;"	f	class:cricket::StunServer
OnAudioMonitor	talk/session/phone/call.cc	/^void Call::OnAudioMonitor(VoiceChannel *channel, const AudioInfo& info) {$/;"	f	class:cricket::Call
OnAudioMonitorUpdate	talk/session/phone/voicechannel.cc	/^void VoiceChannel::OnAudioMonitorUpdate(AudioMonitor *monitor,$/;"	f	class:cricket::VoiceChannel
OnAuthDone	talk/xmpp/xmppclient.cc	/^XmppClient::OnAuthDone() {$/;"	f	class:buzz::XmppClient
OnBindingRequest	talk/p2p/base/stunserver.cc	/^void StunServer::OnBindingRequest($/;"	f	class:cricket::StunServer
OnCallCreate	talk/examples/call/callclient.cc	/^void CallClient::OnCallCreate(cricket::Call* call) {$/;"	f	class:CallClient
OnCallDestroy	talk/examples/call/callclient.cc	/^void CallClient::OnCallDestroy(cricket::Call* call) {$/;"	f	class:CallClient
OnCandidatesMessage	talk/p2p/base/session.cc	/^bool Session::OnCandidatesMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
OnCandidatesReady	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnCandidatesReady($/;"	f	class:cricket::P2PTransportChannel
OnCandidatesReady	talk/p2p/base/rawtransportchannel.cc	/^void RawTransportChannel::OnCandidatesReady($/;"	f	class:cricket::RawTransportChannel
OnChannelClosed	talk/session/tunnel/tunnelsessionclient.cc	/^void TunnelSession::OnChannelClosed(PseudoTcpChannel* channel) {$/;"	f	class:cricket::TunnelSession
OnChannelConnectionChanged	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::OnChannelConnectionChanged(TransportChannel* channel,$/;"	f	class:cricket::PseudoTcpChannel
OnChannelDestroyed	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::OnChannelDestroyed(TransportChannel* channel) {$/;"	f	class:cricket::PseudoTcpChannel
OnChannelMessage	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnChannelMessage(const buzz::XmlElement* msg) {$/;"	f	class:cricket::P2PTransportChannel
OnChannelMessage	talk/p2p/base/rawtransportchannel.cc	/^void RawTransportChannel::OnChannelMessage(const buzz::XmlElement* msg) {$/;"	f	class:cricket::RawTransportChannel
OnChannelMessage	talk/p2p/base/transport.cc	/^void Transport::OnChannelMessage(TransportChannelImpl* impl,$/;"	f	class:cricket::Transport
OnChannelMessage_s	talk/p2p/base/transport.cc	/^void Transport::OnChannelMessage_s() {$/;"	f	class:cricket::Transport
OnChannelRead	talk/session/phone/voicechannel.cc	/^void VoiceChannel::OnChannelRead(TransportChannel* channel,$/;"	f	class:cricket::VoiceChannel
OnChannelRead	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::OnChannelRead(TransportChannel* channel,$/;"	f	class:cricket::PseudoTcpChannel
OnChannelReadableState	talk/p2p/base/transport.cc	/^void Transport::OnChannelReadableState(TransportChannel* channel) {$/;"	f	class:cricket::Transport
OnChannelReadableState_s	talk/p2p/base/transport.cc	/^void Transport::OnChannelReadableState_s() {$/;"	f	class:cricket::Transport
OnChannelRequestSignaling	talk/p2p/base/transport.cc	/^void Transport::OnChannelRequestSignaling() {$/;"	f	class:cricket::Transport
OnChannelRequestSignaling_s	talk/p2p/base/transport.cc	/^void Transport::OnChannelRequestSignaling_s() {$/;"	f	class:cricket::Transport
OnChannelWritableState	talk/p2p/base/transport.cc	/^void Transport::OnChannelWritableState(TransportChannel* channel) {$/;"	f	class:cricket::Transport
OnChannelWritableState	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::OnChannelWritableState(TransportChannel* channel) {$/;"	f	class:cricket::PseudoTcpChannel
OnChannelWritableState_s	talk/p2p/base/transport.cc	/^void Transport::OnChannelWritableState_s() {$/;"	f	class:cricket::Transport
OnChildStopped	talk/base/task.cc	/^void Task::OnChildStopped(Task *child) {$/;"	f	class:talk_base::Task
OnClose	talk/base/win32window.h	/^  virtual bool OnClose() { return true; }$/;"	f	class:talk_base::Win32Window
OnClose	talk/p2p/base/tcpport.cc	/^void TCPConnection::OnClose(talk_base::AsyncTCPSocket* socket, int error) {$/;"	f	class:cricket::TCPConnection
OnCloseEvent	talk/base/asyncsocket.h	/^  virtual void OnCloseEvent(AsyncSocket * socket, int err) { SignalCloseEvent(this, err); }$/;"	f	class:talk_base::AsyncSocketAdapter
OnCloseEvent	talk/base/asynctcpsocket.cc	/^void AsyncTCPSocket::OnCloseEvent(AsyncSocket* socket, int error) {$/;"	f	class:talk_base::AsyncTCPSocket
OnCloseEvent	talk/base/autodetectproxy.cc	/^void AutoDetectProxy::OnCloseEvent(talk_base::AsyncSocket * socket, int error) {$/;"	f	class:AutoDetectProxy
OnCloseEvent	talk/base/openssladapter.cc	/^OpenSSLAdapter::OnCloseEvent(AsyncSocket* socket, int err) {$/;"	f	class:talk_base::OpenSSLAdapter
OnCloseEvent	talk/base/schanneladapter.cc	/^SChannelAdapter::OnCloseEvent(AsyncSocket* socket, int err) {$/;"	f	class:talk_base::SChannelAdapter
OnCloseEvent	talk/base/socketadapters.cc	/^LoggingSocketAdapter::OnCloseEvent(AsyncSocket * socket, int err) {$/;"	f	class:talk_base::LoggingSocketAdapter
OnCloseEvent	talk/base/socketadapters.cc	/^void AsyncHttpsProxySocket::OnCloseEvent(AsyncSocket * socket, int err) {$/;"	f	class:talk_base::AsyncHttpsProxySocket
OnCloseEvent	talk/base/socketstream.h	/^  void OnCloseEvent(AsyncSocket* socket, int err) {$/;"	f	class:talk_base::SocketStream
OnConfigReady	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::OnConfigReady(PortConfiguration* config) {$/;"	f	class:cricket::BasicPortAllocatorSession
OnConnect	talk/p2p/base/relayport.cc	/^void RelayEntry::OnConnect(const talk_base::SocketAddress& mapped_addr) {$/;"	f	class:cricket::RelayEntry
OnConnect	talk/p2p/base/tcpport.cc	/^void TCPConnection::OnConnect(talk_base::AsyncTCPSocket* socket) {$/;"	f	class:cricket::TCPConnection
OnConnectEvent	talk/base/asyncsocket.h	/^  virtual void OnConnectEvent(AsyncSocket * socket) { SignalConnectEvent(this); }$/;"	f	class:talk_base::AsyncSocketAdapter
OnConnectEvent	talk/base/asynctcpsocket.cc	/^void AsyncTCPSocket::OnConnectEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::AsyncTCPSocket
OnConnectEvent	talk/base/autodetectproxy.cc	/^void AutoDetectProxy::OnConnectEvent(talk_base::AsyncSocket * socket) {$/;"	f	class:AutoDetectProxy
OnConnectEvent	talk/base/openssladapter.cc	/^OpenSSLAdapter::OnConnectEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::OpenSSLAdapter
OnConnectEvent	talk/base/schanneladapter.cc	/^SChannelAdapter::OnConnectEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::SChannelAdapter
OnConnectEvent	talk/base/socketadapters.cc	/^LoggingSocketAdapter::OnConnectEvent(AsyncSocket * socket) {$/;"	f	class:talk_base::LoggingSocketAdapter
OnConnectEvent	talk/base/socketadapters.cc	/^void AsyncHttpsProxySocket::OnConnectEvent(AsyncSocket * socket) {$/;"	f	class:talk_base::AsyncHttpsProxySocket
OnConnectEvent	talk/base/socketadapters.cc	/^void AsyncSSLSocket::OnConnectEvent(AsyncSocket * socket) {$/;"	f	class:talk_base::AsyncSSLSocket
OnConnectEvent	talk/base/socketadapters.cc	/^void AsyncSocksProxySocket::OnConnectEvent(AsyncSocket * socket) {$/;"	f	class:talk_base::AsyncSocksProxySocket
OnConnectEvent	talk/base/socketstream.h	/^  void OnConnectEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::SocketStream
OnConnectEvent	talk/examples/login/xmppsocket.cc	/^void XmppSocket::OnConnectEvent(talk_base::AsyncSocket * socket) {$/;"	f	class:XmppSocket
OnConnecting_s	talk/p2p/base/transport.cc	/^void Transport::OnConnecting_s() {$/;"	f	class:cricket::Transport
OnConnectionCreated	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::OnConnectionCreated(Port* port, $/;"	f	class:cricket::BasicPortAllocatorSession
OnConnectionDestroyed	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnConnectionDestroyed(Connection *connection) {$/;"	f	class:cricket::P2PTransportChannel
OnConnectionDestroyed	talk/p2p/base/port.cc	/^void Port::OnConnectionDestroyed(Connection* conn) {$/;"	f	class:cricket::Port
OnConnectionMonitor	talk/p2p/client/socketmonitor.cc	/^void SocketMonitor::OnConnectionMonitor(P2PTransportChannel* channel) {$/;"	f	class:cricket::SocketMonitor
OnConnectionMonitor	talk/session/phone/call.cc	/^void Call::OnConnectionMonitor(VoiceChannel *channel, $/;"	f	class:cricket::Call
OnConnectionMonitorUpdate	talk/session/phone/voicechannel.cc	/^void VoiceChannel::OnConnectionMonitorUpdate($/;"	f	class:cricket::VoiceChannel
OnConnectionRequestErrorResponse	talk/p2p/base/port.cc	/^void Connection::OnConnectionRequestErrorResponse(StunMessage *response, uint32 rtt) {$/;"	f	class:cricket::Connection
OnConnectionRequestResponse	talk/p2p/base/port.cc	/^void Connection::OnConnectionRequestResponse(StunMessage *response, uint32 rtt) {$/;"	f	class:cricket::Connection
OnConnectionStateChange	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnConnectionStateChange(Connection *connection) {$/;"	f	class:cricket::P2PTransportChannel
OnConnectionStateChange	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::OnConnectionStateChange(Connection* conn) {$/;"	f	class:cricket::BasicPortAllocatorSession
OnDestroyed	talk/base/win32window.h	/^  virtual void OnDestroyed() { }$/;"	f	class:talk_base::Win32Window
OnDisconnect	talk/xmpp/xmpptask.cc	/^void XmppTask::OnDisconnect() {$/;"	f	class:buzz::XmppTask
OnDnsNotify	talk/base/win32socketserver.cc	/^Win32Socket::EventSink::OnDnsNotify(WPARAM wParam, LPARAM lParam,$/;"	f	class:talk_base::Win32Socket::EventSink
OnDnsNotify	talk/base/win32socketserver.cc	/^Win32Socket::OnDnsNotify(int ip, int error) {$/;"	f	class:talk_base::Win32Socket
OnError	talk/p2p/base/session_unittest.cc	/^  void OnError(Session* session, Session::Error error) {$/;"	f	struct:SessionHandler
OnErrorMessage	talk/p2p/base/sessionmanager.cc	/^void SessionManager::OnErrorMessage(Session* session,$/;"	f	class:cricket::SessionManager
OnErrorResponse	talk/p2p/base/port.cc	/^  virtual void OnErrorResponse(StunMessage* response) {$/;"	f	class:cricket::ConnectionRequest
OnErrorResponse	talk/p2p/base/relayport.cc	/^void AllocateRequest::OnErrorResponse(StunMessage* response) {$/;"	f	class:cricket::AllocateRequest
OnErrorResponse	talk/p2p/base/stunport.cc	/^  virtual void OnErrorResponse(StunMessage* response) {$/;"	f	class:cricket::StunPortBindingRequest
OnErrorResponse	talk/p2p/base/stunrequest.h	/^  virtual void OnErrorResponse(StunMessage* response) {}$/;"	f	class:cricket::StunRequest
OnEvent	talk/base/httpbase.cc	/^HttpBase::OnEvent(StreamInterface* stream, int events, int error) {$/;"	f	class:talk_base::HttpBase
OnEvent	talk/base/physicalsocketserver.cc	/^  virtual void OnEvent(uint32 ff, int err) {$/;"	f	class:talk_base::EventDispatcher
OnEvent	talk/base/physicalsocketserver.cc	/^  virtual void OnEvent(uint32 ff, int err) {$/;"	f	class:talk_base::FileDispatcher
OnEvent	talk/base/physicalsocketserver.cc	/^  virtual void OnEvent(uint32 ff, int err) {$/;"	f	class:talk_base::SocketDispatcher
OnEvent	talk/base/physicalsocketserver.cc	/^  void OnEvent(uint32 ff, int err) {$/;"	f	class:talk_base::Signaler
OnEvent	talk/base/stream.cc	/^void LoggingAdapter::OnEvent(StreamInterface* stream, int events, int err) {$/;"	f	class:talk_base::LoggingAdapter
OnEvent	talk/base/stream.h	/^  virtual void OnEvent(StreamInterface* stream, int events, int err) {$/;"	f	class:talk_base::StreamAdapterInterface
OnEvent	talk/base/streamutils.cc	/^void StreamRelay::OnEvent(talk_base::StreamInterface* stream, int events, $/;"	f	class:StreamRelay
OnExternalPacket	talk/base/natserver.cc	/^void NATServer::OnExternalPacket($/;"	f	class:talk_base::NATServer
OnExternalPacket	talk/p2p/base/relayserver.cc	/^void RelayServer::OnExternalPacket($/;"	f	class:cricket::RelayServer
OnFailedSend	talk/p2p/base/session.cc	/^void Session::OnFailedSend(const buzz::XmlElement* orig_stanza,$/;"	f	class:cricket::Session
OnFailedSend	talk/p2p/base/sessionmanager.cc	/^void SessionManager::OnFailedSend(const buzz::XmlElement* orig_stanza, $/;"	f	class:cricket::SessionManager
OnFileShareSessionCreate	talk/examples/pcp/pcp_main.cc	/^  void OnFileShareSessionCreate(cricket::FileShareSession *sess) {$/;"	f	class:FileShareClient	file:
OnFinalMessage	talk/base/win32socketserver.cc	/^Win32Socket::EventSink::OnFinalMessage(HWND hWnd) {$/;"	f	class:talk_base::Win32Socket::EventSink
OnHeaderAvailable	talk/base/httpclient.cc	/^HttpError HttpClient::OnHeaderAvailable(bool ignore_data, bool chunked,$/;"	f	class:talk_base::HttpClient
OnHttpClientClosed	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnHttpClientClosed(talk_base::HttpClient* http,$/;"	f	class:cricket::FileShareSession
OnHttpClientComplete	talk/base/asynchttprequest.cc	/^void HttpMonitor::OnHttpClientComplete(talk_base::HttpClient * http, int err) {$/;"	f	class:HttpMonitor
OnHttpClientComplete	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnHttpClientComplete(talk_base::HttpClient* http,$/;"	f	class:cricket::FileShareSession
OnHttpConnectionClosed	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnHttpConnectionClosed(talk_base::HttpServer* server,$/;"	f	class:cricket::FileShareSession
OnHttpRequest	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnHttpRequest(talk_base::HttpServer* server,$/;"	f	class:cricket::FileShareSession
OnHttpRequestComplete	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnHttpRequestComplete(talk_base::HttpServer* server,$/;"	f	class:cricket::FileShareSession
OnIncomingData	talk/session/phone/linphonemediaengine.cc	/^void LinphoneMediaChannel::OnIncomingData(talk_base::AsyncSocket *s)$/;"	f	class:LinphoneMediaChannel
OnIncomingMessage	talk/p2p/base/session.cc	/^void Session::OnIncomingMessage(const buzz::XmlElement* stanza) {$/;"	f	class:cricket::Session
OnIncomingMessage	talk/p2p/base/sessionmanager.cc	/^void SessionManager::OnIncomingMessage(const buzz::XmlElement* stanza) {$/;"	f	class:cricket::SessionManager
OnIncomingResponse	talk/p2p/base/sessionmanager.cc	/^void SessionManager::OnIncomingResponse(const buzz::XmlElement* orig_stanza,$/;"	f	class:cricket::SessionManager
OnInfoMessage	talk/p2p/base/session.cc	/^bool Session::OnInfoMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
OnInitiate	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnInitiate() {$/;"	f	class:cricket::FileShareSession
OnInitiate	talk/session/tunnel/tunnelsessionclient.cc	/^void TunnelSession::OnInitiate() {$/;"	f	class:cricket::TunnelSession
OnInitiateMessage	talk/p2p/base/session.cc	/^bool Session::OnInitiateMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
OnInternalPacket	talk/base/natserver.cc	/^void NATServer::OnInternalPacket($/;"	f	class:talk_base::NATServer
OnInternalPacket	talk/p2p/base/relayserver.cc	/^void RelayServer::OnInternalPacket($/;"	f	class:cricket::RelayServer
OnJingleInfo	talk/examples/call/callclient.cc	/^void CallClient::OnJingleInfo(const std::string &relay_token,$/;"	f	class:CallClient
OnJingleInfo	talk/examples/pcp/pcp_main.cc	/^  void OnJingleInfo(const std::string & relay_token,$/;"	f	class:FileShareClient	file:
OnMediaMonitor	talk/session/phone/call.cc	/^void Call::OnMediaMonitor(VoiceChannel *channel, const MediaInfo& info) {$/;"	f	class:cricket::Call
OnMediaMonitorUpdate	talk/session/phone/voicechannel.cc	/^void VoiceChannel::OnMediaMonitorUpdate($/;"	f	class:cricket::VoiceChannel
OnMessage	talk/base/autodetectproxy.cc	/^void AutoDetectProxy::OnMessage(Message *msg) {$/;"	f	class:AutoDetectProxy
OnMessage	talk/base/schanneladapter.cc	/^SChannelAdapter::OnMessage(Message* pmsg) {$/;"	f	class:talk_base::SChannelAdapter
OnMessage	talk/base/signalthread.cc	/^void SignalThread::OnMessage(Message *msg) {$/;"	f	class:SignalThread
OnMessage	talk/base/testclient.cc	/^void TestClient::OnMessage(Message *pmsg) {$/;"	f	class:talk_base::TestClient
OnMessage	talk/base/virtualsocket_unittest.cc	/^  void OnMessage(Message* pmsg) {$/;"	f	struct:Receiver
OnMessage	talk/base/virtualsocket_unittest.cc	/^  void OnMessage(Message* pmsg) {$/;"	f	struct:Sender
OnMessage	talk/base/virtualsocketserver.cc	/^  void OnMessage(Message *pmsg) {$/;"	f	class:talk_base::VirtualSocket
OnMessage	talk/base/virtualsocketserver.cc	/^void VirtualSocketServer::OnMessage(Message* pmsg) {$/;"	f	class:talk_base::VirtualSocketServer
OnMessage	talk/base/win32socketserver.cc	/^bool Win32Socket::EventSink::OnMessage(UINT uMsg, WPARAM wParam, LPARAM lParam,$/;"	f	class:talk_base::Win32Socket::EventSink
OnMessage	talk/examples/call/console.cc	/^void Console::OnMessage(talk_base::Message *msg) {$/;"	f	class:Console
OnMessage	talk/examples/login/xmpppump.cc	/^void XmppPump::OnMessage(talk_base::Message *pmsg) {$/;"	f	class:XmppPump
OnMessage	talk/examples/login/xmppthread.cc	/^void XmppThread::OnMessage(talk_base::Message* pmsg) {$/;"	f	class:XmppThread
OnMessage	talk/examples/pcp/pcp_main.cc	/^  void OnMessage(talk_base::Message *m) {$/;"	f	class:FileShareClient	file:
OnMessage	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnMessage(talk_base::Message *pmsg) {$/;"	f	class:cricket::P2PTransportChannel
OnMessage	talk/p2p/base/port.cc	/^void Connection::OnMessage(talk_base::Message *pmsg) {$/;"	f	class:cricket::Connection
OnMessage	talk/p2p/base/port.cc	/^void Port::OnMessage(talk_base::Message *pmsg) {$/;"	f	class:cricket::Port
OnMessage	talk/p2p/base/port_unittest.cc	/^  void OnMessage(talk_base::Message* pmsg) {$/;"	f	struct:Foo
OnMessage	talk/p2p/base/rawtransportchannel.cc	/^void RawTransportChannel::OnMessage(talk_base::Message* msg) {$/;"	f	class:cricket::RawTransportChannel
OnMessage	talk/p2p/base/relayserver.cc	/^void RelayServerBinding::OnMessage(talk_base::Message *pmsg) {$/;"	f	class:cricket::RelayServerBinding
OnMessage	talk/p2p/base/session.cc	/^void Session::OnMessage(talk_base::Message *pmsg) {$/;"	f	class:cricket::Session
OnMessage	talk/p2p/base/stunrequest.cc	/^void StunRequest::OnMessage(talk_base::Message* pmsg) {$/;"	f	class:cricket::StunRequest
OnMessage	talk/p2p/base/transport.cc	/^void Transport::OnMessage(talk_base::Message* msg) {$/;"	f	class:cricket::Transport
OnMessage	talk/p2p/client/basicportallocator.cc	/^void AllocationSequence::OnMessage(talk_base::Message* msg) {$/;"	f	class:cricket::AllocationSequence
OnMessage	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::OnMessage(talk_base::Message *message) {$/;"	f	class:cricket::BasicPortAllocatorSession
OnMessage	talk/p2p/client/socketmonitor.cc	/^void SocketMonitor::OnMessage(talk_base::Message *message) {$/;"	f	class:cricket::SocketMonitor
OnMessage	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnMessage(talk_base::Message* msg) {$/;"	f	class:cricket::FileShareSession
OnMessage	talk/session/phone/audiomonitor.cc	/^void AudioMonitor::OnMessage(talk_base::Message *message) {$/;"	f	class:cricket::AudioMonitor
OnMessage	talk/session/phone/call.cc	/^void Call::OnMessage(talk_base::Message *message) {$/;"	f	class:cricket::Call
OnMessage	talk/session/phone/channelmanager.cc	/^void ChannelManager::OnMessage(talk_base::Message *message) {$/;"	f	class:cricket::ChannelManager
OnMessage	talk/session/phone/voicechannel.cc	/^void VoiceChannel::OnMessage(talk_base::Message *pmsg) {$/;"	f	class:cricket::VoiceChannel
OnMessage	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::OnMessage(Message* pmsg) {$/;"	f	class:cricket::PseudoTcpChannel
OnMessage	talk/session/tunnel/tunnelsessionclient.cc	/^void TunnelSessionClient::OnMessage(talk_base::Message* pmsg) {$/;"	f	class:cricket::TunnelSessionClient
OnNextEntry	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnNextEntry(const std::string& name, size_t size) {$/;"	f	class:cricket::FileShareSession
OnOutgoingMessage	talk/p2p/base/session_unittest.cc	/^  void OnOutgoingMessage(const XmlElement* stanza) {$/;"	f	struct:SessionManagerHandler
OnOutgoingMessage	talk/p2p/base/sessionmanager.cc	/^void SessionManager::OnOutgoingMessage(Session* session,$/;"	f	class:cricket::SessionManager
OnOutgoingMessage	talk/p2p/client/sessionmanagertask.h	/^  void OnOutgoingMessage(const buzz::XmlElement* stanza) {$/;"	f	class:cricket::SessionManagerTask
OnPacket	talk/base/testclient.cc	/^void TestClient::OnPacket($/;"	f	class:talk_base::TestClient
OnPacket	talk/p2p/base/stunserver.cc	/^void StunServer::OnPacket($/;"	f	class:cricket::StunServer
OnPacketReceived	talk/session/phone/gipslitemediaengine.cc	/^void GipsLiteMediaChannel::OnPacketReceived(const void *data, int len) {$/;"	f	class:GipsLiteMediaChannel
OnPacketReceived	talk/session/phone/linphonemediaengine.cc	/^void LinphoneMediaChannel::OnPacketReceived(const void *data, int len) {$/;"	f	class:LinphoneMediaChannel
OnPing	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnPing() {$/;"	f	class:cricket::P2PTransportChannel
OnPortDestroyed	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnPortDestroyed(Port* port) {$/;"	f	class:cricket::P2PTransportChannel
OnPortDestroyed	talk/p2p/base/session_unittest.cc	/^  void OnPortDestroyed(Port* port) {$/;"	f	class:TestPortAllocatorSession
OnPortDestroyed	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::OnPortDestroyed(Port* port) {$/;"	f	class:cricket::BasicPortAllocatorSession
OnPortReady	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnPortReady(PortAllocatorSession *session,$/;"	f	class:cricket::P2PTransportChannel
OnPortReady	talk/p2p/base/rawtransportchannel.cc	/^void RawTransportChannel::OnPortReady($/;"	f	class:cricket::RawTransportChannel
OnPreEvent	talk/base/physicalsocketserver.cc	/^  virtual void OnPreEvent(uint32 ff) {$/;"	f	class:talk_base::EventDispatcher
OnPreEvent	talk/base/physicalsocketserver.cc	/^  virtual void OnPreEvent(uint32 ff) {$/;"	f	class:talk_base::FileDispatcher
OnPreEvent	talk/base/physicalsocketserver.cc	/^  virtual void OnPreEvent(uint32 ff) {$/;"	f	class:talk_base::SocketDispatcher
OnProtocolEnabled	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::OnProtocolEnabled(AllocationSequence * seq, $/;"	f	class:cricket::BasicPortAllocatorSession
OnProxyAccept	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnProxyAccept(talk_base::AsyncSocket* socket) {$/;"	f	class:cricket::FileShareSession
OnProxyClosed	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnProxyClosed(StreamRelay* proxy, int error) {$/;"	f	class:cricket::FileShareSession
OnReadEvent	talk/base/asyncsocket.h	/^  virtual void OnReadEvent(AsyncSocket * socket) { SignalReadEvent(this); }$/;"	f	class:talk_base::AsyncSocketAdapter
OnReadEvent	talk/base/asynctcpsocket.cc	/^void AsyncTCPSocket::OnReadEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::AsyncTCPSocket
OnReadEvent	talk/base/asyncudpsocket.cc	/^void AsyncUDPSocket::OnReadEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::AsyncUDPSocket
OnReadEvent	talk/base/autodetectproxy.cc	/^void AutoDetectProxy::OnReadEvent(talk_base::AsyncSocket * socket) {$/;"	f	class:AutoDetectProxy
OnReadEvent	talk/base/httpserver.cc	/^HttpListenServer::OnReadEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::HttpListenServer
OnReadEvent	talk/base/natsocketfactory.cc	/^  void OnReadEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::NATSocket
OnReadEvent	talk/base/openssladapter.cc	/^OpenSSLAdapter::OnReadEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::OpenSSLAdapter
OnReadEvent	talk/base/schanneladapter.cc	/^SChannelAdapter::OnReadEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::SChannelAdapter
OnReadEvent	talk/base/socketadapters.cc	/^void BufferedReadAdapter::OnReadEvent(AsyncSocket * socket) {$/;"	f	class:talk_base::BufferedReadAdapter
OnReadEvent	talk/base/socketstream.h	/^  void OnReadEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::SocketStream
OnReadEvent	talk/examples/login/xmppsocket.cc	/^void XmppSocket::OnReadEvent(talk_base::AsyncSocket * socket) {$/;"	f	class:XmppSocket
OnReadPacket	talk/base/virtualsocket_unittest.cc	/^  void OnReadPacket($/;"	f	struct:Receiver
OnReadPacket	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnReadPacket(Connection *connection, $/;"	f	class:cricket::P2PTransportChannel
OnReadPacket	talk/p2p/base/port.cc	/^void Connection::OnReadPacket(const char* data, size_t size) {$/;"	f	class:cricket::Connection
OnReadPacket	talk/p2p/base/port.cc	/^void Port::OnReadPacket($/;"	f	class:cricket::Port
OnReadPacket	talk/p2p/base/rawtransportchannel.cc	/^void RawTransportChannel::OnReadPacket($/;"	f	class:cricket::RawTransportChannel
OnReadPacket	talk/p2p/base/relayport.cc	/^void RelayEntry::OnReadPacket(const char* data, size_t size,$/;"	f	class:cricket::RelayEntry
OnReadPacket	talk/p2p/base/relayport.cc	/^void RelayPort::OnReadPacket($/;"	f	class:cricket::RelayPort
OnReadPacket	talk/p2p/base/session_unittest.cc	/^  void OnReadPacket(TransportChannel* p, const char* buf, size_t size) {$/;"	f	struct:ChannelHandler
OnReadPacket	talk/p2p/base/stunport.cc	/^void StunPort::OnReadPacket($/;"	f	class:cricket::StunPort
OnReadPacket	talk/p2p/base/tcpport.cc	/^void TCPConnection::OnReadPacket(const char* data, size_t size, $/;"	f	class:cricket::TCPConnection
OnReadPacket	talk/p2p/base/tcpport.cc	/^void TCPPort::OnReadPacket(const char* data, size_t size, $/;"	f	class:cricket::TCPPort
OnReadPacket	talk/p2p/base/transportchannelproxy.cc	/^void TransportChannelProxy::OnReadPacket($/;"	f	class:cricket::TransportChannelProxy
OnReadPacket	talk/p2p/base/udpport.cc	/^void UDPPort::OnReadPacket($/;"	f	class:cricket::UDPPort
OnReadPacketSlot	talk/p2p/base/udpport.cc	/^void UDPPort::OnReadPacketSlot($/;"	f	class:cricket::UDPPort
OnReadableState	talk/p2p/base/session_unittest.cc	/^  void OnReadableState(TransportChannel* p) {$/;"	f	struct:ChannelHandler
OnReadableState	talk/p2p/base/transportchannelproxy.cc	/^void TransportChannelProxy::OnReadableState(TransportChannel* channel) {$/;"	f	class:cricket::TransportChannelProxy
OnReceivedTerminateReason	talk/session/phone/call.cc	/^void Call::OnReceivedTerminateReason(Session *session, const std::string &reason) {$/;"	f	class:cricket::Call
OnRedirectMessage	talk/p2p/base/session.cc	/^bool Session::OnRedirectMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
OnRejectMessage	talk/p2p/base/session.cc	/^bool Session::OnRejectMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
OnRequestDone	talk/p2p/client/httpportallocator.cc	/^void HttpPortAllocatorSession::OnRequestDone(talk_base::SignalThread* data) {$/;"	f	class:cricket::HttpPortAllocatorSession
OnRequestSignaling	talk/examples/call/callclient.cc	/^void CallClient::OnRequestSignaling() {$/;"	f	class:CallClient
OnRequestSignaling	talk/p2p/base/session_unittest.cc	/^  void OnRequestSignaling() {$/;"	f	struct:SessionManagerHandler
OnRequestSignaling	talk/p2p/base/sessionmanager.cc	/^void SessionManager::OnRequestSignaling(Session* session) {$/;"	f	class:cricket::SessionManager
OnResampleImage	talk/examples/pcp/pcp_main.cc	/^  void OnResampleImage(std::string path, int width, int height, talk_base::HttpTransaction *trans) {  $/;"	f	class:FileShareClient	file:
OnResponse	talk/p2p/base/port.cc	/^  virtual void OnResponse(StunMessage* response) {$/;"	f	class:cricket::ConnectionRequest
OnResponse	talk/p2p/base/relayport.cc	/^void AllocateRequest::OnResponse(StunMessage* response) {$/;"	f	class:cricket::AllocateRequest
OnResponse	talk/p2p/base/stunport.cc	/^  virtual void OnResponse(StunMessage* response) {$/;"	f	class:cricket::StunPortBindingRequest
OnResponse	talk/p2p/base/stunrequest.h	/^  virtual void OnResponse(StunMessage* response) {}$/;"	f	class:cricket::StunRequest
OnRouteChange	talk/p2p/base/transportchannelproxy.cc	/^void TransportChannelProxy::OnRouteChange(TransportChannel* channel,$/;"	f	class:cricket::TransportChannelProxy
OnSendPacket	talk/p2p/base/relayport.cc	/^void RelayEntry::OnSendPacket(const void* data, size_t size, StunRequest* req) {$/;"	f	class:cricket::RelayEntry
OnSendPacket	talk/p2p/base/stunport.cc	/^void StunPort::OnSendPacket(const void* data, size_t size, StunRequest* req) {$/;"	f	class:cricket::StunPort
OnSendRequest	talk/p2p/base/stunserver.cc	/^void StunServer::OnSendRequest(StunMessage* msg, const talk_base::SocketAddress& addr) {$/;"	f	class:cricket::StunServer
OnSendStunPacket	talk/p2p/base/port.cc	/^void Connection::OnSendStunPacket($/;"	f	class:cricket::Connection
OnSessionChannelGone	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnSessionChannelGone(cricket::Session* session,$/;"	f	class:cricket::FileShareSession
OnSessionCreate	talk/p2p/base/session_unittest.cc	/^  void OnSessionCreate(Session *session, bool initiate) {$/;"	f	struct:MySessionClient
OnSessionCreate	talk/p2p/base/session_unittest.cc	/^  void OnSessionCreate(Session *session, bool initiate) {$/;"	f	struct:SessionManagerHandler
OnSessionCreate	talk/session/fileshare/fileshare.cc	/^void FileShareSessionClient::OnSessionCreate(cricket::Session* session,$/;"	f	class:cricket::FileShareSessionClient
OnSessionCreate	talk/session/phone/phonesessionclient.cc	/^void PhoneSessionClient::OnSessionCreate(Session *session,$/;"	f	class:cricket::PhoneSessionClient
OnSessionCreate	talk/session/tunnel/tunnelsessionclient.cc	/^void TunnelSessionClient::OnSessionCreate(Session* session, bool received) {$/;"	f	class:cricket::TunnelSessionClient
OnSessionDestroy	talk/p2p/base/session_unittest.cc	/^  void OnSessionDestroy(Session *session) {$/;"	f	struct:SessionManagerHandler
OnSessionDestroy	talk/p2p/base/session_unittest.cc	/^  void OnSessionDestroy(Session *session)$/;"	f	struct:MySessionClient
OnSessionDestroy	talk/session/fileshare/fileshare.cc	/^void FileShareSessionClient::OnSessionDestroy(cricket::Session* session) {$/;"	f	class:cricket::FileShareSessionClient
OnSessionDestroy	talk/session/phone/phonesessionclient.cc	/^void PhoneSessionClient::OnSessionDestroy(Session *session) {$/;"	f	class:cricket::PhoneSessionClient
OnSessionDestroy	talk/session/tunnel/tunnelsessionclient.cc	/^void TunnelSessionClient::OnSessionDestroy(Session* session) {$/;"	f	class:cricket::TunnelSessionClient
OnSessionError	talk/session/phone/call.cc	/^void Call::OnSessionError(Session *session, Session::Error error) {$/;"	f	class:cricket::Call
OnSessionInfoMessage	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnSessionInfoMessage(cricket::Session* session,$/;"	f	class:cricket::FileShareSession
OnSessionState	talk/examples/call/callclient.cc	/^void CallClient::OnSessionState(cricket::Call* call,$/;"	f	class:CallClient
OnSessionState	talk/examples/pcp/pcp_main.cc	/^  void OnSessionState(cricket::FileShareState state) {$/;"	f	class:FileShareClient	file:
OnSessionState	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnSessionState(cricket::Session* session,$/;"	f	class:cricket::FileShareSession
OnSessionState	talk/session/phone/call.cc	/^void Call::OnSessionState(Session *session, Session::State state) {$/;"	f	class:cricket::Call
OnSessionState	talk/session/phone/phonesessionclient.cc	/^void PhoneSessionClient::OnSessionState(Session *session,$/;"	f	class:cricket::PhoneSessionClient
OnSessionState	talk/session/phone/voicechannel.cc	/^void VoiceChannel::OnSessionState(Session* session, Session::State state) {$/;"	f	class:cricket::VoiceChannel
OnSessionState	talk/session/tunnel/tunnelsessionclient.cc	/^void TunnelSession::OnSessionState(Session* session, Session::State state) {$/;"	f	class:cricket::TunnelSession
OnShake	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::OnShake() {$/;"	f	class:cricket::BasicPortAllocatorSession
OnSharedSecretRequest	talk/p2p/base/stunserver.cc	/^void StunServer::OnSharedSecretRequest($/;"	f	class:cricket::StunServer
OnSignalingReady	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnSignalingReady() {$/;"	f	class:cricket::P2PTransportChannel
OnSignalingReady	talk/p2p/base/rawtransportchannel.h	/^  virtual void OnSignalingReady() {}$/;"	f	class:cricket::RawTransportChannel
OnSignalingReady	talk/p2p/base/session.cc	/^void Session::OnSignalingReady() {$/;"	f	class:cricket::Session
OnSignalingReady	talk/p2p/base/sessionmanager.cc	/^void SessionManager::OnSignalingReady() {$/;"	f	class:cricket::SessionManager
OnSignalingReady	talk/p2p/base/transport.cc	/^void Transport::OnSignalingReady() {$/;"	f	class:cricket::Transport
OnSignon	talk/examples/pcp/pcp_main.cc	/^  void OnSignon() {$/;"	f	class:FileShareClient	file:
OnSocketClose	talk/p2p/base/relayport.cc	/^void RelayEntry::OnSocketClose(talk_base::AsyncTCPSocket* socket, int error) {$/;"	f	class:cricket::RelayEntry
OnSocketClosed	talk/xmpp/xmppclient.cc	/^XmppClient::Private::OnSocketClosed() {$/;"	f	class:buzz::XmppClient::Private
OnSocketConnect	talk/p2p/base/relayport.cc	/^void RelayEntry::OnSocketConnect(talk_base::AsyncTCPSocket* socket) {$/;"	f	class:cricket::RelayEntry
OnSocketConnected	talk/xmpp/xmppclient.cc	/^XmppClient::Private::OnSocketConnected() {$/;"	f	class:buzz::XmppClient::Private
OnSocketNotify	talk/base/win32socketserver.cc	/^Win32Socket::EventSink::OnSocketNotify(UINT uMsg, WPARAM wParam, LPARAM lParam,$/;"	f	class:talk_base::Win32Socket::EventSink
OnSocketNotify	talk/base/win32socketserver.cc	/^Win32Socket::OnSocketNotify(int event, int error) {$/;"	f	class:talk_base::Win32Socket
OnSocketRead	talk/xmpp/xmppclient.cc	/^XmppClient::Private::OnSocketRead() {$/;"	f	class:buzz::XmppClient::Private
OnSort	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnSort() {$/;"	f	class:cricket::P2PTransportChannel
OnState	talk/p2p/base/session_unittest.cc	/^  void OnState(Session* session, Session::State state) {$/;"	f	struct:SessionHandler
OnStateChange	talk/examples/call/callclient.cc	/^void CallClient::OnStateChange(buzz::XmppEngine::State state) {$/;"	f	class:CallClient
OnStateChange	talk/examples/login/xmpppump.cc	/^void XmppPump::OnStateChange(buzz::XmppEngine::State state) {$/;"	f	class:XmppPump
OnStateChange	talk/examples/login/xmppthread.cc	/^void XmppThread::OnStateChange(buzz::XmppEngine::State state) {$/;"	f	class:XmppThread
OnStateChange	talk/examples/pcp/pcp_main.cc	/^  void OnStateChange(buzz::XmppEngine::State state) {$/;"	f	class:FileShareClient
OnStateChange	talk/xmpp/xmppclient.cc	/^XmppClient::Private::OnStateChange(int state) {$/;"	f	class:buzz::XmppClient::Private
OnStatusUpdate	talk/examples/call/callclient.cc	/^void CallClient::OnStatusUpdate(const buzz::Status& status) {$/;"	f	class:CallClient
OnStatusUpdate	talk/examples/pcp/pcp_main.cc	/^  void OnStatusUpdate(const buzz::Status &status) {$/;"	f	class:FileShareClient	file:
OnStreamEvent	talk/base/socketpool.cc	/^void StreamCache::OnStreamEvent(StreamInterface* stream, int events, int err) {$/;"	f	class:talk_base::StreamCache
OnTcpClosed	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::OnTcpClosed(PseudoTcp* tcp, uint32 nError) {$/;"	f	class:cricket::PseudoTcpChannel
OnTcpOpen	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::OnTcpOpen(PseudoTcp* tcp) {$/;"	f	class:cricket::PseudoTcpChannel
OnTcpReadable	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::OnTcpReadable(PseudoTcp* tcp) {$/;"	f	class:cricket::PseudoTcpChannel
OnTcpWriteable	talk/session/tunnel/pseudotcpchannel.cc	/^void PseudoTcpChannel::OnTcpWriteable(PseudoTcp* tcp) {$/;"	f	class:cricket::PseudoTcpChannel
OnTerminate	talk/session/tunnel/tunnelsessionclient.cc	/^void TunnelSession::OnTerminate() {$/;"	f	class:cricket::TunnelSession
OnTerminateMessage	talk/p2p/base/session.cc	/^bool Session::OnTerminateMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
OnTimeout	talk/base/task.h	/^  virtual int OnTimeout() {$/;"	f	class:talk_base::Task
OnTimeout	talk/p2p/base/port.cc	/^  virtual void OnTimeout() {$/;"	f	class:cricket::ConnectionRequest
OnTimeout	talk/p2p/base/relayport.cc	/^void AllocateRequest::OnTimeout() {$/;"	f	class:cricket::AllocateRequest
OnTimeout	talk/p2p/base/relayserver.cc	/^void RelayServer::OnTimeout(RelayServerBinding* binding) {$/;"	f	class:cricket::RelayServer
OnTimeout	talk/p2p/base/stunport.cc	/^  virtual void OnTimeout() {$/;"	f	class:cricket::StunPortBindingRequest
OnTimeout	talk/p2p/base/stunrequest.h	/^  virtual void OnTimeout() {}$/;"	f	class:cricket::StunRequest
OnTimeout	talk/p2p/client/sessionsendtask.h	/^  virtual int OnTimeout() {$/;"	f	class:cricket::SessionSendTask
OnTransportAcceptMessage	talk/p2p/base/session.cc	/^bool Session::OnTransportAcceptMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
OnTransportAnswer	talk/p2p/base/p2ptransport.cc	/^bool P2PTransport::OnTransportAnswer(const buzz::XmlElement* elem) {$/;"	f	class:cricket::P2PTransport
OnTransportAnswer	talk/p2p/base/rawtransport.cc	/^bool RawTransport::OnTransportAnswer(const buzz::XmlElement* elem) {$/;"	f	class:cricket::RawTransport
OnTransportChannelGone	talk/p2p/base/session.cc	/^void Session::OnTransportChannelGone(Transport* transport,$/;"	f	class:cricket::Session
OnTransportChannelMessages	talk/p2p/base/p2ptransport.cc	/^void P2PTransport::OnTransportChannelMessages($/;"	f	class:cricket::P2PTransport
OnTransportChannelMessages	talk/p2p/base/transport.cc	/^void Transport::OnTransportChannelMessages($/;"	f	class:cricket::Transport
OnTransportConnecting	talk/p2p/base/session.cc	/^void Session::OnTransportConnecting(Transport* transport) {$/;"	f	class:cricket::Session
OnTransportError	talk/p2p/base/p2ptransport.cc	/^bool P2PTransport::OnTransportError(const buzz::XmlElement* session_msg,$/;"	f	class:cricket::P2PTransport
OnTransportError	talk/p2p/base/rawtransport.cc	/^bool RawTransport::OnTransportError(const buzz::XmlElement* session_msg,$/;"	f	class:cricket::RawTransport
OnTransportInfoMessage	talk/p2p/base/session.cc	/^bool Session::OnTransportInfoMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Session
OnTransportMessage	talk/p2p/base/p2ptransport.cc	/^bool P2PTransport::OnTransportMessage(const buzz::XmlElement* msg,$/;"	f	class:cricket::P2PTransport
OnTransportMessage	talk/p2p/base/rawtransport.cc	/^bool RawTransport::OnTransportMessage(const buzz::XmlElement* msg,$/;"	f	class:cricket::RawTransport
OnTransportOffer	talk/p2p/base/p2ptransport.cc	/^bool P2PTransport::OnTransportOffer(const buzz::XmlElement* elem) {$/;"	f	class:cricket::P2PTransport
OnTransportOffer	talk/p2p/base/rawtransport.cc	/^bool RawTransport::OnTransportOffer(const buzz::XmlElement* elem) {$/;"	f	class:cricket::RawTransport
OnTransportRequestSignaling	talk/p2p/base/session.cc	/^void Session::OnTransportRequestSignaling(Transport* transport) {$/;"	f	class:cricket::Session
OnTransportSendError	talk/p2p/base/session.cc	/^void Session::OnTransportSendError(Transport* transport,$/;"	f	class:cricket::Session
OnTransportSendMessage	talk/p2p/base/session.cc	/^void Session::OnTransportSendMessage(Transport* transport,$/;"	f	class:cricket::Session
OnTransportSignalingReady	talk/p2p/base/transport.h	/^  virtual void OnTransportSignalingReady() {}$/;"	f	class:cricket::Transport
OnTransportWritable	talk/p2p/base/session.cc	/^void Session::OnTransportWritable(Transport* transport) {$/;"	f	class:cricket::Session
OnUnknownAddress	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::OnUnknownAddress($/;"	f	class:cricket::P2PTransportChannel
OnUnknownAddress	talk/p2p/base/port_unittest.cc	/^  void OnUnknownAddress($/;"	f	struct:Foo
OnUpdateBytes	talk/session/fileshare/fileshare.cc	/^void FileShareSession::OnUpdateBytes(size_t count) {$/;"	f	class:cricket::FileShareSession
OnUpdateProgress	talk/examples/pcp/pcp_main.cc	/^  void OnUpdateProgress(cricket::FileShareSession *sess) {$/;"	f	class:FileShareClient	file:
OnWorkDone	talk/base/signalthread.h	/^  virtual void OnWorkDone() { }$/;"	f	class:talk_base::SignalThread
OnWorkStart	talk/base/signalthread.h	/^  virtual void OnWorkStart() { }$/;"	f	class:talk_base::SignalThread
OnWorkStop	talk/base/signalthread.h	/^  virtual void OnWorkStop() { }$/;"	f	class:talk_base::SignalThread
OnWritableState	talk/p2p/base/session_unittest.cc	/^  void OnWritableState(TransportChannel* p) {$/;"	f	struct:ChannelHandler
OnWritableState	talk/p2p/base/transportchannelproxy.cc	/^void TransportChannelProxy::OnWritableState(TransportChannel* channel) {$/;"	f	class:cricket::TransportChannelProxy
OnWritableState	talk/session/phone/voicechannel.cc	/^void VoiceChannel::OnWritableState(TransportChannel* channel) {$/;"	f	class:cricket::VoiceChannel
OnWriteEvent	talk/base/asyncsocket.h	/^  virtual void OnWriteEvent(AsyncSocket * socket) { SignalWriteEvent(this); }$/;"	f	class:talk_base::AsyncSocketAdapter
OnWriteEvent	talk/base/asynctcpsocket.cc	/^void AsyncTCPSocket::OnWriteEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::AsyncTCPSocket
OnWriteEvent	talk/base/natsocketfactory.cc	/^  void OnWriteEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::NATSocket
OnWriteEvent	talk/base/openssladapter.cc	/^OpenSSLAdapter::OnWriteEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::OpenSSLAdapter
OnWriteEvent	talk/base/schanneladapter.cc	/^SChannelAdapter::OnWriteEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::SChannelAdapter
OnWriteEvent	talk/base/socketstream.h	/^  void OnWriteEvent(AsyncSocket* socket) {$/;"	f	class:talk_base::SocketStream
OnWriteEvent	talk/examples/login/xmppsocket.cc	/^void XmppSocket::OnWriteEvent(talk_base::AsyncSocket * socket) {$/;"	f	class:XmppSocket
Open	talk/base/stream.cc	/^bool FileStream::Open(const std::string& filename, const char* mode) {$/;"	f	class:talk_base::FileStream
Open	talk/base/tarstream.cc	/^bool TarStream::Open(const std::string& folder, bool read) {$/;"	f	class:TarStream
OpenConeNAT	talk/base/nattypes.cc	/^class OpenConeNAT : public NAT {$/;"	c	namespace:talk_base	file:
OpenFile	talk/base/fileutils.cc	/^FileStream *Filesystem::OpenFile(const Pathname &filename, $/;"	f	class:talk_base::Filesystem
OpenFileI	talk/base/unixfilesystem.cc	/^FileStream *UnixFilesystem::OpenFileI(const Pathname &filename, $/;"	f	class:talk_base::UnixFilesystem
OpenFileI	talk/base/win32filesystem.cc	/^FileStream *Win32Filesystem::OpenFileI(const Pathname &filename, $/;"	f	class:talk_base::Win32Filesystem
OpenSSLAdapter	talk/base/openssladapter.cc	/^OpenSSLAdapter::OpenSSLAdapter(AsyncSocket* socket)$/;"	f	class:talk_base::OpenSSLAdapter
OpenSSLAdapter	talk/base/openssladapter.h	/^class OpenSSLAdapter : public SSLAdapter {$/;"	c	namespace:talk_base
OpenShare	talk/base/stream.cc	/^bool FileStream::OpenShare(const std::string& filename, const char* mode,$/;"	f	class:talk_base::FileStream
Option	talk/base/socket.h	/^  enum Option {$/;"	g	class:talk_base::Socket
OptionList	talk/p2p/base/transportchannelproxy.h	/^  typedef std::vector<OptionPair> OptionList;$/;"	t	class:cricket::TransportChannelProxy
OptionMap	talk/p2p/base/p2ptransportchannel.h	/^  typedef std::map<talk_base::Socket::Option, int> OptionMap;$/;"	t	class:cricket::P2PTransportChannel
OptionPair	talk/p2p/base/transportchannelproxy.h	/^  typedef std::pair<talk_base::Socket::Option, int> OptionPair;$/;"	t	class:cricket::TransportChannelProxy
OptionValue	talk/p2p/base/relayport.h	/^  typedef std::pair<talk_base::Socket::Option, int> OptionValue;$/;"	t	class:cricket::RelayPort
Options	talk/base/winping.cc	/^    struct ip_option_information Options; \/\/ Reply options$/;"	m	struct:talk_base::icmp_echo_reply	typeref:struct:talk_base::icmp_echo_reply::ip_option_information	file:
OptionsData	talk/base/winping.h	/^    PUCHAR  OptionsData;        \/\/ Pointer to options data$/;"	m	struct:talk_base::ip_option_information
OptionsSize	talk/base/winping.h	/^    UCHAR   OptionsSize;        \/\/ Size in bytes of options data$/;"	m	struct:talk_base::ip_option_information
OssCard	talk/third_party/mediastreamer/osscard.h	/^typedef struct _OssCard OssCard;$/;"	t	typeref:struct:_OssCard
OutgoingStanza	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::OutgoingStanza(const XmlElement * element) {$/;"	f	class:buzz::XmppLoginTask
Output	talk/examples/call/call_main.cc	/^  void Output(const char * data, int len) {$/;"	f	class:DebugLog
Output	talk/examples/pcp/pcp_main.cc	/^  void Output(const char * data, int len) {$/;"	f	class:DebugLog
P2PLIBS	talk/p2p/base/Makefile	/^P2PLIBS = libcricketp2pbase.la ..\/..\/base\/libcricketbase.la -lpthread$/;"	m
P2PTransport	talk/p2p/base/p2ptransport.cc	/^P2PTransport::P2PTransport(SessionManager* session_manager)$/;"	f	class:cricket::P2PTransport
P2PTransport	talk/p2p/base/p2ptransport.h	/^class P2PTransport: public Transport {$/;"	c	namespace:cricket
P2PTransportChannel	talk/p2p/base/p2ptransportchannel.cc	/^P2PTransportChannel::P2PTransportChannel(const std::string &name,$/;"	f	class:cricket::P2PTransportChannel
P2PTransportChannel	talk/p2p/base/p2ptransportchannel.h	/^class P2PTransportChannel : public TransportChannelImpl, $/;"	c	namespace:cricket
PACKAGE	config.h	80;"	d
PACKAGE	talk/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/base/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/examples/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/examples/call/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/examples/login/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/examples/pcp/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/p2p/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/p2p/base/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/p2p/client/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/session/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/session/fileshare/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/session/phone/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/session/tunnel/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/third_party/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/third_party/gips/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/third_party/mediastreamer/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/third_party/mediastreamer/msfilter.h	32;"	d
PACKAGE	talk/third_party/mediastreamer/msrtprecv.h	29;"	d
PACKAGE	talk/third_party/mediastreamer/msrtpsend.h	28;"	d
PACKAGE	talk/third_party/mediastreamer/sndcard.h	26;"	d
PACKAGE	talk/third_party/mediastreamer/sndcard.h	29;"	d
PACKAGE	talk/xmllite/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE	talk/xmpp/Makefile	/^PACKAGE = libjingle$/;"	m
PACKAGE_BUGREPORT	config.h	83;"	d
PACKAGE_BUGREPORT	talk/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/base/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/examples/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/examples/call/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/examples/login/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/examples/pcp/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/p2p/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/p2p/base/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/p2p/client/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/session/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/session/fileshare/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/session/phone/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/session/tunnel/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/third_party/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/third_party/gips/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/third_party/mediastreamer/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/xmllite/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	talk/xmpp/Makefile	/^PACKAGE_BUGREPORT = google-talk-open@googlegroups.com$/;"	m
PACKAGE_NAME	config.h	86;"	d
PACKAGE_NAME	talk/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/base/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/examples/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/examples/call/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/examples/login/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/examples/pcp/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/p2p/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/p2p/base/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/p2p/client/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/session/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/session/fileshare/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/session/phone/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/session/tunnel/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/third_party/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/third_party/gips/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/third_party/mediastreamer/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/xmllite/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_NAME	talk/xmpp/Makefile	/^PACKAGE_NAME = libjingle$/;"	m
PACKAGE_STRING	config.h	89;"	d
PACKAGE_STRING	talk/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/base/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/examples/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/examples/call/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/examples/login/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/examples/pcp/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/p2p/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/p2p/base/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/p2p/client/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/session/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/session/fileshare/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/session/phone/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/session/tunnel/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/third_party/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/third_party/gips/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/third_party/mediastreamer/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/xmllite/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_STRING	talk/xmpp/Makefile	/^PACKAGE_STRING = libjingle 0.4.0$/;"	m
PACKAGE_TARNAME	config.h	92;"	d
PACKAGE_TARNAME	talk/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/base/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/examples/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/examples/call/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/examples/login/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/examples/pcp/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/p2p/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/p2p/base/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/p2p/client/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/session/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/session/fileshare/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/session/phone/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/session/tunnel/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/third_party/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/third_party/gips/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/third_party/mediastreamer/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/xmllite/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_TARNAME	talk/xmpp/Makefile	/^PACKAGE_TARNAME = libjingle$/;"	m
PACKAGE_VERSION	config.h	95;"	d
PACKAGE_VERSION	talk/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/base/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/examples/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/examples/call/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/examples/login/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/examples/pcp/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/p2p/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/p2p/base/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/p2p/client/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/session/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/session/fileshare/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/session/phone/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/session/tunnel/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/third_party/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/third_party/gips/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/third_party/mediastreamer/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/xmllite/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKAGE_VERSION	talk/xmpp/Makefile	/^PACKAGE_VERSION = 0.4.0$/;"	m
PACKET_MAXIMUMS	talk/base/physicalsocketserver.cc	/^const uint16 PACKET_MAXIMUMS[] = {$/;"	v
PACKET_MAXIMUMS	talk/base/win32socketserver.cc	/^static const uint16 PACKET_MAXIMUMS[] = {$/;"	v	file:
PACKET_MAXIMUMS	talk/p2p/base/pseudotcp.cc	/^const uint16 PACKET_MAXIMUMS[] = {$/;"	v
PACKET_OVERHEAD	talk/p2p/base/pseudotcp.cc	/^const uint32 PACKET_OVERHEAD = HEADER_SIZE + UDP_HEADER_SIZE + IP_HEADER_SIZE + JINGLE_HEADER_SIZE;$/;"	v
PATH_SEPARATOR	talk/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/base/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/examples/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/examples/call/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/examples/login/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/examples/pcp/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/p2p/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/p2p/base/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/p2p/client/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/session/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/session/fileshare/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/session/phone/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/session/tunnel/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/third_party/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/third_party/gips/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/third_party/mediastreamer/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/xmllite/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	talk/xmpp/Makefile	/^PATH_SEPARATOR = :$/;"	m
PHASE_RELAY	talk/p2p/client/basicportallocator.cc	/^const int PHASE_RELAY = 1;$/;"	v
PHASE_SSLTCP	talk/p2p/client/basicportallocator.cc	/^const int PHASE_SSLTCP = 3;$/;"	v
PHASE_TCP	talk/p2p/client/basicportallocator.cc	/^const int PHASE_TCP = 2;$/;"	v
PHASE_UDP	talk/p2p/client/basicportallocator.cc	/^const int PHASE_UDP = 0;$/;"	v
PHONE_FALSE	talk/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/base/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/examples/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/examples/call/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/examples/login/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/examples/pcp/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/p2p/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/p2p/base/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/p2p/client/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/session/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/session/fileshare/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/session/phone/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/session/tunnel/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/third_party/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/third_party/gips/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/third_party/mediastreamer/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/xmllite/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_FALSE	talk/xmpp/Makefile	/^PHONE_FALSE = $/;"	m
PHONE_TRUE	talk/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/base/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/examples/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/examples/call/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/examples/login/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/examples/pcp/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/p2p/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/p2p/base/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/p2p/client/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/session/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/session/fileshare/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/session/phone/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/session/tunnel/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/third_party/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/third_party/gips/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/third_party/mediastreamer/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/xmllite/Makefile	/^PHONE_TRUE = #$/;"	m
PHONE_TRUE	talk/xmpp/Makefile	/^PHONE_TRUE = #$/;"	m
PI	talk/base/virtualsocketserver.cc	/^static double PI = 4 * std::atan(1.0);$/;"	v	file:
PICMP_ECHO_REPLY	talk/base/winping.cc	/^} ICMP_ECHO_REPLY, * PICMP_ECHO_REPLY;$/;"	t	namespace:talk_base	typeref:struct:talk_base::icmp_echo_reply	file:
PING_FAIL	talk/base/winping.h	/^    enum PingResult { PING_FAIL, PING_TOO_LARGE, PING_TIMEOUT, PING_SUCCESS };$/;"	e	enum:talk_base::WinPing::PingResult
PING_PACKET_SIZE	talk/p2p/base/p2ptransportchannel.cc	/^static const uint32 PING_PACKET_SIZE = 60 * 8;$/;"	v	file:
PING_SUCCESS	talk/base/winping.h	/^    enum PingResult { PING_FAIL, PING_TOO_LARGE, PING_TIMEOUT, PING_SUCCESS };$/;"	e	enum:talk_base::WinPing::PingResult
PING_TIMEOUT	talk/base/winping.h	/^    enum PingResult { PING_FAIL, PING_TOO_LARGE, PING_TIMEOUT, PING_SUCCESS };$/;"	e	enum:talk_base::WinPing::PingResult
PING_TOO_LARGE	talk/base/winping.h	/^    enum PingResult { PING_FAIL, PING_TOO_LARGE, PING_TIMEOUT, PING_SUCCESS };$/;"	e	enum:talk_base::WinPing::PingResult
PIP_OPTION_INFORMATION	talk/base/winping.h	/^} IP_OPTION_INFORMATION, * PIP_OPTION_INFORMATION;$/;"	t	namespace:talk_base	typeref:struct:talk_base::ip_option_information
PIcmpCloseHandle	talk/base/winping.h	/^typedef BOOL (WINAPI *PIcmpCloseHandle)(HANDLE icmp_handle);$/;"	t	namespace:talk_base
PIcmpCreateFile	talk/base/winping.h	/^typedef HANDLE (WINAPI *PIcmpCreateFile)();$/;"	t	namespace:talk_base
PIcmpSendEcho	talk/base/winping.h	/^typedef DWORD (WINAPI *PIcmpSendEcho)($/;"	t	namespace:talk_base
PKG_CONFIG	talk/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/base/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/examples/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/examples/call/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/examples/login/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/examples/pcp/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/p2p/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/p2p/base/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/p2p/client/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/session/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/session/fileshare/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/session/phone/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/session/tunnel/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/third_party/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/third_party/gips/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/third_party/mediastreamer/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/xmllite/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	talk/xmpp/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKT_LEN_SIZE	talk/base/asynctcpsocket.cc	/^const size_t PKT_LEN_SIZE = sizeof(PacketLength);$/;"	v
PLAYBACK	talk/third_party/mediastreamer/alsacard.c	/^typedef enum {CAPTURE, PLAYBACK, CAPTURE_SWITCH, PLAYBACK_SWITCH} MixerAction;$/;"	e	enum:__anon43	file:
PLAYBACK_SWITCH	talk/third_party/mediastreamer/alsacard.c	/^typedef enum {CAPTURE, PLAYBACK, CAPTURE_SWITCH, PLAYBACK_SWITCH} MixerAction;$/;"	e	enum:__anon43	file:
PLAY_RING	talk/third_party/mediastreamer/msringplayer.c	/^enum { PLAY_RING, PLAY_SILENCE};$/;"	e	enum:__anon45	file:
PLAY_SILENCE	talk/third_party/mediastreamer/msringplayer.c	/^enum { PLAY_RING, PLAY_SILENCE};$/;"	e	enum:__anon45	file:
PLOG	talk/base/logging.h	234;"	d
PLOG	talk/base/logging.h	274;"	d
PORT0	talk/base/nat_unittest.cc	/^const int PORT0 = 7405;$/;"	v
PORT1	talk/base/nat_unittest.cc	/^const int PORT1 = 7450;$/;"	v
PORT2	talk/base/nat_unittest.cc	/^const int PORT2 = 7505;$/;"	v
PORTALLOCATOR_DISABLE_RELAY	talk/p2p/base/portallocator.h	/^const uint32 PORTALLOCATOR_DISABLE_RELAY = 0x04;$/;"	v
PORTALLOCATOR_DISABLE_STUN	talk/p2p/base/portallocator.h	/^const uint32 PORTALLOCATOR_DISABLE_STUN = 0x02;$/;"	v
PORTALLOCATOR_DISABLE_TCP	talk/p2p/base/portallocator.h	/^const uint32 PORTALLOCATOR_DISABLE_TCP = 0x08;$/;"	v
PORTALLOCATOR_DISABLE_UDP	talk/p2p/base/portallocator.h	/^const uint32 PORTALLOCATOR_DISABLE_UDP = 0x01;$/;"	v
PORTALLOCATOR_ENABLE_SHAKER	talk/p2p/base/portallocator.h	/^const uint32 PORTALLOCATOR_ENABLE_SHAKER = 0x10;$/;"	v
POSIX	config.h	98;"	d
POST_INSTALL	talk/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/base/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/examples/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/examples/call/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/examples/login/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/examples/pcp/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/p2p/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/p2p/base/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/p2p/client/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/session/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/session/fileshare/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/session/phone/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/session/tunnel/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/third_party/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/third_party/gips/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/third_party/mediastreamer/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/xmllite/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	talk/xmpp/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	talk/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/base/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/examples/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/examples/call/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/examples/login/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/examples/pcp/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/p2p/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/p2p/base/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/p2p/client/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/session/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/session/fileshare/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/session/phone/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/session/tunnel/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/third_party/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/third_party/gips/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/third_party/mediastreamer/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/xmllite/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	talk/xmpp/Makefile	/^POST_UNINSTALL = :$/;"	m
PREF_LOCAL_STUN	talk/p2p/client/basicportallocator.cc	/^const float PREF_LOCAL_STUN = 0.9f;$/;"	v
PREF_LOCAL_TCP	talk/p2p/client/basicportallocator.cc	/^const float PREF_LOCAL_TCP = 0.8f;$/;"	v
PREF_LOCAL_UDP	talk/p2p/client/basicportallocator.cc	/^const float PREF_LOCAL_UDP = 1.0f;$/;"	v
PREF_RELAY	talk/p2p/client/basicportallocator.cc	/^const float PREF_RELAY = 0.5f;$/;"	v
PRE_INSTALL	talk/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/base/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/examples/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/examples/call/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/examples/login/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/examples/pcp/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/p2p/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/p2p/base/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/p2p/client/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/session/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/session/fileshare/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/session/phone/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/session/tunnel/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/third_party/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/third_party/gips/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/third_party/mediastreamer/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/xmllite/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	talk/xmpp/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	talk/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/base/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/examples/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/examples/call/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/examples/login/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/examples/pcp/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/p2p/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/p2p/base/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/p2p/client/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/session/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/session/fileshare/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/session/phone/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/session/tunnel/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/third_party/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/third_party/gips/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/third_party/mediastreamer/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/xmllite/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	talk/xmpp/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRIORITY_IDLE	talk/base/thread.h	/^  PRIORITY_IDLE,$/;"	e	enum:talk_base::ThreadPriority
PRIORITY_NORMAL	talk/base/thread.h	/^  PRIORITY_NORMAL,$/;"	e	enum:talk_base::ThreadPriority
PRODUCTION	config.h	101;"	d
PRODUCTION_BUILD	config.h	104;"	d
PROGRAMS	talk/base/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PROGRAMS	talk/examples/call/Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PROGRAMS	talk/examples/login/Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PROGRAMS	talk/examples/pcp/Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PROGRAMS	talk/p2p/base/Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
PROTO_LAST	talk/p2p/base/port.h	/^  PROTO_LAST = PROTO_SSLTCP $/;"	e	enum:cricket::ProtocolType
PROTO_NAMES	talk/p2p/base/port.cc	/^static const char * const PROTO_NAMES[PROTO_LAST+1] = { "udp", "tcp", "ssltcp" };$/;"	v	file:
PROTO_SSLTCP	talk/p2p/base/port.h	/^  PROTO_SSLTCP, $/;"	e	enum:cricket::ProtocolType
PROTO_TCP	talk/p2p/base/port.h	/^  PROTO_TCP, $/;"	e	enum:cricket::ProtocolType
PROTO_UDP	talk/p2p/base/port.h	/^  PROTO_UDP, $/;"	e	enum:cricket::ProtocolType
PROXY_HTTPS	talk/base/proxyinfo.h	/^enum ProxyType { PROXY_NONE, PROXY_HTTPS, PROXY_SOCKS5, PROXY_UNKNOWN };$/;"	e	enum:talk_base::ProxyType
PROXY_NONE	talk/base/proxyinfo.h	/^enum ProxyType { PROXY_NONE, PROXY_HTTPS, PROXY_SOCKS5, PROXY_UNKNOWN };$/;"	e	enum:talk_base::ProxyType
PROXY_SOCKS5	talk/base/proxyinfo.h	/^enum ProxyType { PROXY_NONE, PROXY_HTTPS, PROXY_SOCKS5, PROXY_UNKNOWN };$/;"	e	enum:talk_base::ProxyType
PROXY_UNKNOWN	talk/base/proxyinfo.h	/^enum ProxyType { PROXY_NONE, PROXY_HTTPS, PROXY_SOCKS5, PROXY_UNKNOWN };$/;"	e	enum:talk_base::ProxyType
PSEUDO_KEEPALIVE	talk/p2p/base/pseudotcp.cc	115;"	d	file:
PS_AUTHENTICATE	talk/base/socketadapters.h	/^    PS_LEADER, PS_AUTHENTICATE, PS_SKIP_HEADERS, PS_ERROR_HEADERS,$/;"	e	enum:talk_base::AsyncHttpsProxySocket::ProxyState
PS_ERROR	talk/base/socketadapters.h	/^    PS_TUNNEL_HEADERS, PS_SKIP_BODY, PS_TUNNEL, PS_WAIT_CLOSE, PS_ERROR$/;"	e	enum:talk_base::AsyncHttpsProxySocket::ProxyState
PS_ERROR_HEADERS	talk/base/socketadapters.h	/^    PS_LEADER, PS_AUTHENTICATE, PS_SKIP_HEADERS, PS_ERROR_HEADERS,$/;"	e	enum:talk_base::AsyncHttpsProxySocket::ProxyState
PS_LEADER	talk/base/socketadapters.h	/^    PS_LEADER, PS_AUTHENTICATE, PS_SKIP_HEADERS, PS_ERROR_HEADERS,$/;"	e	enum:talk_base::AsyncHttpsProxySocket::ProxyState
PS_SKIP_BODY	talk/base/socketadapters.h	/^    PS_TUNNEL_HEADERS, PS_SKIP_BODY, PS_TUNNEL, PS_WAIT_CLOSE, PS_ERROR$/;"	e	enum:talk_base::AsyncHttpsProxySocket::ProxyState
PS_SKIP_HEADERS	talk/base/socketadapters.h	/^    PS_LEADER, PS_AUTHENTICATE, PS_SKIP_HEADERS, PS_ERROR_HEADERS,$/;"	e	enum:talk_base::AsyncHttpsProxySocket::ProxyState
PS_TUNNEL	talk/base/socketadapters.h	/^    PS_TUNNEL_HEADERS, PS_SKIP_BODY, PS_TUNNEL, PS_WAIT_CLOSE, PS_ERROR$/;"	e	enum:talk_base::AsyncHttpsProxySocket::ProxyState
PS_TUNNEL_HEADERS	talk/base/socketadapters.h	/^    PS_TUNNEL_HEADERS, PS_SKIP_BODY, PS_TUNNEL, PS_WAIT_CLOSE, PS_ERROR$/;"	e	enum:talk_base::AsyncHttpsProxySocket::ProxyState
PS_WAIT_CLOSE	talk/base/socketadapters.h	/^    PS_TUNNEL_HEADERS, PS_SKIP_BODY, PS_TUNNEL, PS_WAIT_CLOSE, PS_ERROR$/;"	e	enum:talk_base::AsyncHttpsProxySocket::ProxyState
Packet	talk/base/testclient.cc	/^TestClient::Packet::Packet(const Packet& p)$/;"	f	class:talk_base::TestClient::Packet
Packet	talk/base/testclient.cc	/^TestClient::Packet::Packet(const SocketAddress& a, const char* b, size_t s)$/;"	f	class:talk_base::TestClient::Packet
Packet	talk/base/testclient.h	/^  struct Packet : public MessageData {$/;"	s	class:talk_base::TestClient
Packet	talk/base/virtualsocketserver.cc	/^  Packet(const char* data, size_t size, const SocketAddress& from)$/;"	f	class:talk_base::Packet
Packet	talk/base/virtualsocketserver.cc	/^class Packet : public MessageData {$/;"	c	namespace:talk_base	file:
PacketLength	talk/base/asynctcpsocket.cc	/^typedef uint16 PacketLength;$/;"	t	namespace:talk_base	file:
Parse	talk/base/httpcommon.cc	/^  static inline bool Parse(E& val, const std::string& name) { $/;"	f	struct:talk_base::Enum
Parse	talk/xmllite/xmlparser.cc	/^XmlParser::Parse(const char *data, size_t len, bool isFinal) {$/;"	f	class:buzz::XmlParser
Parse	talk/xmpp/xmppstanzaparser.h	/^  bool Parse(const char * data, size_t len, bool isFinal)$/;"	f	class:buzz::XmppStanzaParser
ParseAddress	talk/p2p/base/rawtransport.cc	/^bool RawTransport::ParseAddress(const buzz::XmlElement* stanza,$/;"	f	class:cricket::RawTransport
ParseAddress	talk/p2p/base/transport.cc	/^bool Transport::ParseAddress(const buzz::XmlElement* stanza,$/;"	f	class:cricket::Transport
ParseCandidate	talk/p2p/base/p2ptransport.cc	/^bool P2PTransport::ParseCandidate(const buzz::XmlElement* stanza,$/;"	f	class:cricket::P2PTransport
ParseCheck	talk/base/network.cc	/^void ParseCheck(std::istringstream& ist, char ch) {$/;"	f	namespace:__anon24
ParseContext	talk/xmllite/xmlparser.cc	/^XmlParser::ParseContext::ParseContext(XmlParser *parser) :$/;"	f	class:buzz::XmlParser::ParseContext
ParseContext	talk/xmllite/xmlparser.h	/^  class ParseContext : public XmlParseContext {$/;"	c	class:buzz::XmlParser
ParseHandler	talk/xmpp/xmppstanzaparser.h	/^    ParseHandler(XmppStanzaParser * outer) : outer_(outer) {}$/;"	f	class:buzz::XmppStanzaParser::ParseHandler
ParseHandler	talk/xmpp/xmppstanzaparser.h	/^  class ParseHandler : public XmlParseHandler {$/;"	c	class:buzz::XmppStanzaParser
ParseLine	talk/examples/call/callclient.cc	/^void CallClient::ParseLine(const std::string& line) {$/;"	f	class:CallClient
ParseMap	talk/base/network.cc	/^void ParseMap(const std::string& str, StrMap& map) {$/;"	f	namespace:__anon24
ParseMap	talk/p2p/client/httpportallocator.cc	/^void ParseMap(const std::string& string, StringMap& map) {$/;"	f	namespace:__anon13
ParseProxy	talk/base/proxydetect.cc	/^bool ParseProxy(const std::string& saddress, ProxyInfo& proxy) {$/;"	f
ParseString	talk/base/network.cc	/^std::string ParseString(std::istringstream& ist) {$/;"	f	namespace:__anon24
ParseXml	talk/xmllite/xmlparser.cc	/^XmlParser::ParseXml(XmlParseHandler *pxph, std::string text) {$/;"	f	class:buzz::XmlParser
Pathname	talk/base/pathutils.cc	/^Pathname::Pathname()$/;"	f	class:talk_base::Pathname
Pathname	talk/base/pathutils.cc	/^Pathname::Pathname(const std::string& pathname)$/;"	f	class:talk_base::Pathname
Pathname	talk/base/pathutils.h	/^class Pathname {$/;"	c	namespace:talk_base
PauseMedia_w	talk/session/phone/voicechannel.cc	/^void VoiceChannel::PauseMedia_w() {$/;"	f	class:cricket::VoiceChannel
Peek	talk/base/messagequeue.cc	/^bool MessageQueue::Peek(Message *pmsg, int cmsWait) {$/;"	f	class:talk_base::MessageQueue
PhoneSessionClient	talk/session/phone/phonesessionclient.cc	/^PhoneSessionClient::PhoneSessionClient($/;"	f	class:cricket::PhoneSessionClient
PhoneSessionClient	talk/session/phone/phonesessionclient.h	/^class PhoneSessionClient: public SessionClient, public sigslot::has_slots<> {$/;"	c	namespace:cricket
PhoneSessionDescription	talk/session/phone/phonesessionclient.h	/^class PhoneSessionDescription: public SessionDescription {$/;"	c	namespace:cricket
PhysicalSocket	talk/base/physicalsocketserver.cc	/^  PhysicalSocket(PhysicalSocketServer* ss, SOCKET s = INVALID_SOCKET)$/;"	f	class:talk_base::PhysicalSocket
PhysicalSocket	talk/base/physicalsocketserver.cc	/^class PhysicalSocket : public AsyncSocket {$/;"	c	namespace:talk_base	file:
PhysicalSocketServer	talk/base/physicalsocketserver.cc	/^PhysicalSocketServer::PhysicalSocketServer() : fWait_(false),$/;"	f	class:talk_base::PhysicalSocketServer
PhysicalSocketServer	talk/base/physicalsocketserver.h	/^class PhysicalSocketServer : public SocketServer {$/;"	c	namespace:talk_base
Ping	talk/base/winping.cc	/^WinPing::PingResult WinPing::Ping($/;"	f	class:talk_base::WinPing
Ping	talk/p2p/base/port.cc	/^void Connection::Ping(uint32 now) {$/;"	f	class:cricket::Connection
PingResult	talk/base/winping.h	/^    enum PingResult { PING_FAIL, PING_TOO_LARGE, PING_TIMEOUT, PING_SUCCESS };$/;"	g	class:talk_base::WinPing
PlainSaslHandler	talk/xmpp/plainsaslhandler.h	/^  PlainSaslHandler(const Jid & jid, const talk_base::CryptString & password, $/;"	f	class:buzz::PlainSaslHandler
PlainSaslHandler	talk/xmpp/plainsaslhandler.h	/^class PlainSaslHandler : public SaslHandler {$/;"	c	namespace:buzz
Point	talk/base/virtualsocketserver.h	/^  typedef std::pair<double,double> Point;$/;"	t	class:talk_base::VirtualSocketServer
PollSocket	talk/p2p/client/socketmonitor.cc	/^void SocketMonitor::PollSocket(bool poll) {$/;"	f	class:cricket::SocketMonitor
PollTasks	talk/base/taskrunner.cc	/^void TaskRunner::PollTasks() {$/;"	f	class:talk_base::TaskRunner
PollVoiceChannel	talk/session/phone/audiomonitor.cc	/^void AudioMonitor::PollVoiceChannel() {$/;"	f	class:cricket::AudioMonitor
PopFrame	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::PopFrame() {$/;"	f	class:buzz::XmlnsStack
Port	talk/p2p/base/port.cc	/^Port::Port(talk_base::Thread* thread, const std::string& type, $/;"	f	class:cricket::Port
Port	talk/p2p/base/port.h	/^class Port : public talk_base::MessageHandler, public sigslot::has_slots<> {$/;"	c	namespace:cricket
PortAllocator	talk/p2p/base/portallocator.h	/^  PortAllocator() : flags_(kDefaultPortAllocatorFlags) {}$/;"	f	class:cricket::PortAllocator
PortAllocator	talk/p2p/base/portallocator.h	/^class PortAllocator {$/;"	c	namespace:cricket
PortAllocatorSession	talk/p2p/base/portallocator.h	/^  PortAllocatorSession(uint32 flags) : flags_(flags) {}$/;"	f	class:cricket::PortAllocatorSession
PortAllocatorSession	talk/p2p/base/portallocator.h	/^class PortAllocatorSession : public sigslot::has_slots<> {$/;"	c	namespace:cricket
PortAsString	talk/base/socketaddress.cc	/^std::string SocketAddress::PortAsString() const {$/;"	f	class:talk_base::SocketAddress
PortConfiguration	talk/p2p/client/basicportallocator.cc	/^PortConfiguration::PortConfiguration(const talk_base::SocketAddress& sa,$/;"	f	class:cricket::PortConfiguration
PortConfiguration	talk/p2p/client/basicportallocator.h	/^struct PortConfiguration : public talk_base::MessageData {$/;"	s	namespace:cricket
PortData	talk/p2p/client/basicportallocator.h	/^  struct PortData {$/;"	s	class:cricket::BasicPortAllocatorSession
PortList	talk/p2p/client/basicportallocator.h	/^  typedef std::vector<ProtocolAddress> PortList;$/;"	t	struct:cricket::PortConfiguration
PortRestrictedNAT	talk/base/nattypes.cc	/^class PortRestrictedNAT : public NAT {$/;"	c	namespace:talk_base	file:
Post	talk/base/messagequeue.cc	/^void MessageQueue::Post(MessageHandler *phandler, uint32 id,$/;"	f	class:talk_base::MessageQueue
PostDelayed	talk/base/messagequeue.cc	/^void MessageQueue::PostDelayed(int cmsDelay, MessageHandler *phandler,$/;"	f	class:talk_base::MessageQueue
PostEvent	talk/base/schanneladapter.cc	/^SChannelAdapter::PostEvent() {$/;"	f	class:talk_base::SChannelAdapter
PreRun	talk/base/thread.cc	/^void *Thread::PreRun(void *pv) {$/;"	f	class:talk_base::Thread
PreXmppAuth	talk/xmpp/prexmppauth.h	/^class PreXmppAuth : public SaslHandler {$/;"	c	namespace:buzz
PreferenceSort	talk/session/phone/phonesessionclient.h	/^  struct PreferenceSort {$/;"	s	class:cricket::PhoneSessionDescription
PrefixForNs	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::PrefixForNs(const std::string & ns, bool isattr) {$/;"	f	class:buzz::XmlnsStack
PrefixMatchesNs	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::PrefixMatchesNs(const std::string & prefix, const std::string & ns) {$/;"	f	class:buzz::XmlnsStack
Prepare	talk/p2p/base/port.cc	/^  virtual void Prepare(StunMessage* request) {$/;"	f	class:cricket::ConnectionRequest
Prepare	talk/p2p/base/relayport.cc	/^void AllocateRequest::Prepare(StunMessage* request) {$/;"	f	class:cricket::AllocateRequest
Prepare	talk/p2p/base/stunport.cc	/^  virtual void Prepare(StunMessage* request) {$/;"	f	class:cricket::StunPortBindingRequest
Prepare	talk/p2p/base/stunrequest.h	/^  virtual void Prepare(StunMessage* request) {}$/;"	f	class:cricket::StunRequest
PrepareAddress	talk/p2p/base/relayport.cc	/^void RelayPort::PrepareAddress() {$/;"	f	class:cricket::RelayPort
PrepareAddress	talk/p2p/base/stunport.cc	/^void StunPort::PrepareAddress() {$/;"	f	class:cricket::StunPort
PrepareAddress	talk/p2p/base/tcpport.cc	/^void TCPPort::PrepareAddress() {$/;"	f	class:cricket::TCPPort
PrepareAddress	talk/p2p/base/udpport.cc	/^void UDPPort::PrepareAddress() {$/;"	f	class:cricket::UDPPort
PrepareSecondaryAddress	talk/p2p/base/stunport.cc	/^void StunPort::PrepareSecondaryAddress() {$/;"	f	class:cricket::StunPort
PrepareTransport	talk/p2p/base/session_unittest.cc	/^  void PrepareTransport() {$/;"	f	struct:SessionHandler
PrepareValidate	talk/base/httpclient.cc	/^bool HttpClient::PrepareValidate() {$/;"	f	class:talk_base::HttpClient
PresenceOutTask	talk/examples/login/presenceouttask.h	/^  PresenceOutTask(Task * parent) : XmppTask(parent) {}$/;"	f	class:buzz::PresenceOutTask
PresenceOutTask	talk/examples/login/presenceouttask.h	/^class PresenceOutTask : public XmppTask {$/;"	c	namespace:buzz
PresencePushTask	talk/examples/login/presencepushtask.h	/^  PresencePushTask(Task * parent) : XmppTask(parent, XmppEngine::HL_TYPE) {}$/;"	f	class:buzz::PresencePushTask
PresencePushTask	talk/examples/login/presencepushtask.h	/^class PresencePushTask : public XmppTask {$/;"	c	namespace:buzz
PreviousTimeAtCounter	talk/xmpp/ratelimitmanager.h	/^    uint32 PreviousTimeAtCounter() {$/;"	f	class:buzz::RateLimitManager::RateLimit
Print	talk/examples/call/console.cc	/^void Console::Print(const char* str) {$/;"	f	class:Console
Print	talk/examples/call/console.cc	/^void Console::Print(const std::string& str) {$/;"	f	class:Console
Print	talk/xmllite/xmlelement.cc	/^XmlElement::Print($/;"	f	class:buzz::XmlElement
PrintBodyText	talk/xmllite/xmlprinter.cc	/^XmlPrinterImpl::PrintBodyText(const std::string & text) {$/;"	f	class:buzz::XmlPrinterImpl
PrintElement	talk/xmllite/xmlprinter.cc	/^XmlPrinterImpl::PrintElement(const XmlElement * element) {$/;"	f	class:buzz::XmlPrinterImpl
PrintFunction	talk/base/virtualsocketserver.cc	/^void PrintFunction(std::vector<std::pair<double,double> >* f) {$/;"	f	namespace:talk_base
PrintNextStanza	talk/p2p/base/session_unittest.cc	/^  void PrintNextStanza() {$/;"	f	struct:SessionManagerHandler
PrintQuotedValue	talk/xmllite/xmlprinter.cc	/^XmlPrinterImpl::PrintQuotedValue(const std::string & text) {$/;"	f	class:buzz::XmlPrinterImpl
PrintRoster	talk/examples/call/callclient.cc	/^void CallClient::PrintRoster() {	$/;"	f	class:CallClient
PrintXml	talk/xmllite/xmlprinter.cc	/^XmlPrinter::PrintXml(std::ostream * pout, const XmlElement * element) {$/;"	f	class:buzz::XmlPrinter
PrintXml	talk/xmllite/xmlprinter.cc	/^XmlPrinter::PrintXml(std::ostream * pout, const XmlElement * element,$/;"	f	class:buzz::XmlPrinter
Printf	talk/examples/call/console.cc	/^void Console::Printf(const char* format, ...) {$/;"	f	class:Console
Private	talk/xmpp/xmppclient.cc	/^  Private(XmppClient * client) :$/;"	f	class:buzz::XmppClient::Private
Private	talk/xmpp/xmppclient.cc	/^class XmppClient::Private :$/;"	c	class:buzz::XmppClient	file:
Process	talk/base/task.cc	/^int Task::Process(int state) {$/;"	f	class:talk_base::Task
Process	talk/xmpp/xmppclient.h	/^  int Process(int state) {$/;"	f	class:buzz::XmppClient
ProcessBuffer	talk/base/tarstream.cc	/^StreamResult TarStream::ProcessBuffer(void* buffer, size_t buffer_len,$/;"	f	class:TarStream
ProcessContext	talk/base/schanneladapter.cc	/^SChannelAdapter::ProcessContext(long int status, _SecBufferDesc* sbd_in,$/;"	f	class:talk_base::SChannelAdapter
ProcessCookieLogin	talk/xmpp/xmppclient.cc	/^XmppClient::ProcessCookieLogin() {$/;"	f	class:buzz::XmppClient
ProcessEmptyBlock	talk/base/tarstream.cc	/^StreamResult TarStream::ProcessEmptyBlock(size_t start, int* error) {$/;"	f	class:TarStream
ProcessInput	talk/base/asynctcpsocket.cc	/^void AsyncTCPSocket::ProcessInput(char * data, size_t& len) {$/;"	f	class:talk_base::AsyncTCPSocket
ProcessInput	talk/base/socketadapters.cc	/^void AsyncHttpsProxySocket::ProcessInput(char * data, size_t& len) {$/;"	f	class:talk_base::AsyncHttpsProxySocket
ProcessInput	talk/base/socketadapters.cc	/^void AsyncSSLSocket::ProcessInput(char * data, size_t& len) {$/;"	f	class:talk_base::AsyncSSLSocket
ProcessInput	talk/base/socketadapters.cc	/^void AsyncSocksProxySocket::ProcessInput(char * data, size_t& len) {$/;"	f	class:talk_base::AsyncSocksProxySocket
ProcessLine	talk/base/socketadapters.cc	/^void AsyncHttpsProxySocket::ProcessLine(char * data, size_t len) {$/;"	f	class:talk_base::AsyncHttpsProxySocket
ProcessMessages	talk/base/thread.cc	/^bool Thread::ProcessMessages(int cmsLoop) {$/;"	f	class:talk_base::Thread
ProcessMessages	talk/examples/login/xmppthread.cc	/^void XmppThread::ProcessMessages(int cms) {$/;"	f	class:XmppThread
ProcessNextBlock	talk/base/tarstream.cc	/^StreamResult TarStream::ProcessNextBlock(int* error) {$/;"	f	class:TarStream
ProcessNextEntry	talk/base/tarstream.cc	/^StreamResult TarStream::ProcessNextEntry(const DirectoryIterator *data, int *error) {$/;"	f	class:TarStream
ProcessReponse	talk/xmpp/xmpptask.h	/^  virtual int ProcessReponse() { return STATE_DONE; }$/;"	f	class:buzz::XmppTask
ProcessResponse	talk/base/task.h	/^  virtual int ProcessResponse() { return STATE_DONE; }$/;"	f	class:talk_base::Task
ProcessResponse	talk/examples/login/jingleinfotask.cc	/^  virtual int ProcessResponse() {$/;"	f	class:buzz::JingleInfoTask::JingleInfoGetTask
ProcessResponse	talk/p2p/client/sessionsendtask.h	/^  virtual int ProcessResponse() {$/;"	f	class:cricket::SessionSendTask
ProcessResponse	talk/xmpp/xmppclient.cc	/^XmppClient::ProcessResponse() {$/;"	f	class:buzz::XmppClient
ProcessStart	talk/base/taskrunner.h	/^  virtual int ProcessStart() { return STATE_DONE; }$/;"	f	class:talk_base::TaskRunner
ProcessStart	talk/examples/login/jingleinfotask.cc	/^  virtual int ProcessStart() {$/;"	f	class:buzz::JingleInfoTask::JingleInfoGetTask
ProcessStart	talk/examples/login/jingleinfotask.cc	/^JingleInfoTask::ProcessStart() {$/;"	f	class:buzz::JingleInfoTask
ProcessStart	talk/examples/login/presenceouttask.cc	/^PresenceOutTask::ProcessStart() {$/;"	f	class:buzz::PresenceOutTask
ProcessStart	talk/examples/login/presencepushtask.cc	/^PresencePushTask::ProcessStart() {$/;"	f	class:buzz::PresencePushTask
ProcessStart	talk/p2p/client/sessionmanagertask.h	/^  virtual int ProcessStart() {$/;"	f	class:cricket::SessionManagerTask
ProcessStart	talk/p2p/client/sessionsendtask.h	/^  virtual int ProcessStart() {$/;"	f	class:cricket::SessionSendTask
ProcessStart	talk/xmpp/xmppclient.cc	/^XmppClient::ProcessStart() {$/;"	f	class:buzz::XmppClient
ProcessStartXmppLogin	talk/xmpp/xmppclient.cc	/^XmppClient::ProcessStartXmppLogin() {$/;"	f	class:buzz::XmppClient
ProtoToString	talk/p2p/base/port.cc	/^const char * ProtoToString(ProtocolType proto) {$/;"	f	namespace:cricket
ProtocolAddress	talk/p2p/base/port.h	/^  ProtocolAddress(const talk_base::SocketAddress& a, ProtocolType p) $/;"	f	struct:cricket::ProtocolAddress
ProtocolAddress	talk/p2p/base/port.h	/^struct ProtocolAddress {$/;"	s	namespace:cricket
ProtocolEnabled	talk/p2p/client/basicportallocator.cc	/^bool AllocationSequence::ProtocolEnabled(ProtocolType proto) const {$/;"	f	class:cricket::AllocationSequence
ProtocolList	talk/p2p/client/basicportallocator.cc	/^  typedef std::vector<ProtocolType> ProtocolList;$/;"	t	class:cricket::AllocationSequence	file:
ProtocolType	talk/p2p/base/port.h	/^enum ProtocolType { $/;"	g	namespace:cricket
ProxyConnection	talk/p2p/base/port.cc	/^ProxyConnection::ProxyConnection(Port* port, size_t index, const Candidate& candidate)$/;"	f	class:cricket::ProxyConnection
ProxyConnection	talk/p2p/base/port.h	/^class ProxyConnection : public Connection {$/;"	c	namespace:cricket
ProxyInfo	talk/base/proxyinfo.h	/^  ProxyInfo() : type(PROXY_NONE) { }$/;"	f	struct:talk_base::ProxyInfo
ProxyInfo	talk/base/proxyinfo.h	/^struct ProxyInfo {$/;"	s	namespace:talk_base
ProxyItemMatch	talk/base/proxydetect.cc	/^bool ProxyItemMatch(const Url<char>& url, char * item, size_t len) {$/;"	f
ProxyList	talk/session/fileshare/fileshare.h	/^  typedef std::list<StreamRelay*> ProxyList;$/;"	t	class:cricket::FileShareSession
ProxyListMatch	talk/base/proxydetect.cc	/^bool ProxyListMatch(const Url<char>& url, const std::string& slist, char sep) {$/;"	f
ProxyState	talk/base/socketadapters.h	/^  enum ProxyState {$/;"	g	class:talk_base::AsyncHttpsProxySocket
ProxyToString	talk/base/proxyinfo.cc	/^const char * ProxyToString(ProxyType proxy) {$/;"	f	namespace:talk_base
ProxyType	talk/base/proxyinfo.h	/^enum ProxyType { PROXY_NONE, PROXY_HTTPS, PROXY_SOCKS5, PROXY_UNKNOWN };$/;"	g	namespace:talk_base
Prune	talk/p2p/base/port.cc	/^void Connection::Prune() {$/;"	f	class:cricket::Connection
PseudoTcp	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::PseudoTcp(IPseudoTcpNotify * notify, uint32 conv)$/;"	f	class:cricket::PseudoTcp
PseudoTcp	talk/p2p/base/pseudotcp.h	/^class PseudoTcp {$/;"	c	namespace:cricket
PseudoTcpChannel	talk/session/tunnel/pseudotcpchannel.cc	/^PseudoTcpChannel::PseudoTcpChannel(Thread* stream_thread, Session* session)$/;"	f	class:cricket::PseudoTcpChannel
PseudoTcpChannel	talk/session/tunnel/pseudotcpchannel.h	/^class PseudoTcpChannel$/;"	c	namespace:cricket
Pump	talk/base/win32socketserver.cc	/^void Win32SocketServer::Pump() {$/;"	f	class:talk_base::Win32SocketServer
Purge	talk/base/diskcache.cc	/^bool DiskCache::Purge() {$/;"	f	class:talk_base::DiskCache
PurgeFiles	talk/base/diskcache_win32.cc	/^bool DiskCacheWin32::PurgeFiles() {$/;"	f	class:talk_base::DiskCacheWin32
PurgeFiles	talk/base/diskcachestd.cc	/^bool DiskCacheStd::PurgeFiles() {$/;"	f	class:talk_base::DiskCacheStd
PushFrame	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::PushFrame() {$/;"	f	class:buzz::XmlnsStack
QMAKE	Makefile	/^QMAKE    = qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET = jingle$/;"	m
QName	talk/xmllite/qname.cc	/^QName::QName() : data_(QN_EMPTY.data_) {$/;"	f	class:buzz::QName
QName	talk/xmllite/qname.cc	/^QName::QName(bool add, const std::string & ns, const char * local) :$/;"	f	class:buzz::QName
QName	talk/xmllite/qname.cc	/^QName::QName(bool add, const std::string & ns, const std::string & local) :$/;"	f	class:buzz::QName
QName	talk/xmllite/qname.cc	/^QName::QName(const std::string & mergedOrLocal) :$/;"	f	class:buzz::QName
QName	talk/xmllite/qname.cc	/^QName::QName(const std::string & ns, const char * local) :$/;"	f	class:buzz::QName
QName	talk/xmllite/qname.h	/^  QName(const QName & qname) : data_(qname.data_) { data_->AddRef(); }$/;"	f	class:buzz::QName
QName	talk/xmllite/qname.h	/^class QName$/;"	c	namespace:buzz
QName_Hash	talk/xmllite/qname.cc	/^static int QName_Hash(const std::string & ns, const char * local) {$/;"	f	namespace:buzz	file:
QName_LocalPart	talk/xmllite/qname.cc	/^QName_LocalPart(const std::string & name) {$/;"	f	namespace:buzz	file:
QName_Namespace	talk/xmllite/qname.cc	/^QName_Namespace(const std::string & name) {$/;"	f	namespace:buzz	file:
QUALITY_BAD	talk/base/network.h	/^const double QUALITY_BAD  = 3.0;$/;"	v
QUALITY_FAIR	talk/base/network.h	/^const double QUALITY_FAIR = 3.35;$/;"	v
QUALITY_GOOD	talk/base/network.h	/^const double QUALITY_GOOD = 3.7;$/;"	v
QueueEntry	talk/base/virtualsocketserver.cc	/^  struct QueueEntry {$/;"	s	class:talk_base::VirtualSocket	file:
QueueStanza	talk/xmpp/xmpptask.cc	/^void XmppTask::QueueStanza(const XmlElement* stanza) {$/;"	f	class:buzz::XmppTask
QuietStatus	talk/examples/login/status.h	/^  std::string QuietStatus() const {$/;"	f	class:buzz::Status
RANLIB	Makefile	/^RANLIB   = $/;"	m
RANLIB	talk/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/base/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/examples/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/examples/call/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/examples/login/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/examples/pcp/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/p2p/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/p2p/base/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/p2p/client/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/session/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/session/fileshare/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/session/phone/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/session/tunnel/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/third_party/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/third_party/gips/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/third_party/mediastreamer/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/xmllite/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	talk/xmpp/Makefile	/^RANLIB = ranlib$/;"	m
READBUFFERSIZE	talk/third_party/mediastreamer/jackcard.c	33;"	d	file:
RECEIVE_COMMANDS	talk/examples/call/callclient.cc	/^const char* RECEIVE_COMMANDS =$/;"	v
RECURSIVE_TARGETS	talk/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
RECURSIVE_TARGETS	talk/examples/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
RECURSIVE_TARGETS	talk/p2p/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
RECURSIVE_TARGETS	talk/session/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
RECURSIVE_TARGETS	talk/third_party/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
RELAY_BACKUP_PREF_MODIFIER	talk/p2p/client/basicportallocator.cc	/^const float RELAY_BACKUP_PREF_MODIFIER = -0.2f;$/;"	v
RELAY_PRIMARY_PREF_MODIFIER	talk/p2p/client/basicportallocator.cc	/^const float RELAY_PRIMARY_PREF_MODIFIER = 0.0f; \/\/ modifiers of the above constants$/;"	v
RELEASE	talk/base/winfirewall.cc	32;"	d	file:
RETRY_DELAY	talk/p2p/base/relayport.cc	/^const int RETRY_DELAY = 50; \/\/ 50ms, from ICE spec$/;"	v
RETRY_DELAY	talk/p2p/base/stunport.cc	/^const int RETRY_DELAY = 50; \/\/ 50ms, from ICE spec$/;"	v
RETRY_TIMEOUT	talk/p2p/base/relayport.cc	/^const uint32 RETRY_TIMEOUT = 50 * 1000; \/\/ ICE says 50 secs$/;"	v
RETRY_TIMEOUT	talk/p2p/base/stunport.cc	/^const uint32 RETRY_TIMEOUT = 50 * 1000; \/\/ ICE says 50 secs$/;"	v
RList	talk/p2p/base/pseudotcp.h	/^  typedef std::list<RSegment> RList;$/;"	t	class:cricket::PseudoTcp
RSegment	talk/p2p/base/pseudotcp.h	/^  struct RSegment {$/;"	s	class:cricket::PseudoTcp
RTPSEND_CONFIGURED	talk/third_party/mediastreamer/msrtpsend.h	53;"	d
RTP_HDR_SZ	talk/third_party/mediastreamer/mscodec.c	34;"	d	file:
RTT	talk/session/phone/mediachannel.h	/^	int RTT;$/;"	m	struct:cricket::MediaInfo
RTT_RATIO	talk/p2p/base/port.cc	/^const int RTT_RATIO = 3; \/\/ 3 : 1$/;"	v
RaiseError	talk/xmllite/xmlparser.h	/^    virtual void RaiseError(XML_Error err) { if (!raised_) raised_ = err; }$/;"	f	class:buzz::XmlParser::ParseContext
RaiseReset	talk/xmpp/xmppengineimpl.h	/^  void RaiseReset() { raised_reset_ = true; }$/;"	f	class:buzz::XmppEngineImpl
RaisedError	talk/xmllite/xmlparser.h	/^    XML_Error RaisedError() { return raised_; }$/;"	f	class:buzz::XmlParser::ParseContext
Random	talk/base/virtualsocketserver.cc	/^static double Random() {$/;"	f	namespace:talk_base	file:
RateLimit	talk/xmpp/ratelimitmanager.h	/^    RateLimit(int max, int per_x_secs) : counter_(0), max_count_(max),$/;"	f	class:buzz::RateLimitManager::RateLimit
RateLimit	talk/xmpp/ratelimitmanager.h	/^  class RateLimit {$/;"	c	class:buzz::RateLimitManager
RateLimitManager	talk/xmpp/ratelimitmanager.h	/^  RateLimitManager() { };$/;"	f	class:buzz::RateLimitManager
RateLimitManager	talk/xmpp/ratelimitmanager.h	/^class RateLimitManager {$/;"	c	namespace:buzz
RateLimitMap	talk/xmpp/ratelimitmanager.h	/^  typedef std::map<const std::string, RateLimit*> RateLimitMap;$/;"	t	class:buzz::RateLimitManager
RawTransport	talk/p2p/base/rawtransport.cc	/^RawTransport::RawTransport(SessionManager* session_manager)$/;"	f	class:cricket::RawTransport
RawTransport	talk/p2p/base/rawtransport.h	/^class RawTransport: public Transport {$/;"	c	namespace:cricket
RawTransportChannel	talk/p2p/base/rawtransportchannel.cc	/^RawTransportChannel::RawTransportChannel($/;"	f	class:cricket::RawTransportChannel
RawTransportChannel	talk/p2p/base/rawtransportchannel.h	/^class RawTransportChannel : public TransportChannelImpl, $/;"	c	namespace:cricket
Read	talk/base/schanneladapter.cc	/^SChannelAdapter::Read() {$/;"	f	class:talk_base::SChannelAdapter
Read	talk/base/socketstream.h	/^  virtual StreamResult Read(void* buffer, size_t buffer_len,$/;"	f	class:talk_base::SocketStream
Read	talk/base/stream.cc	/^StreamResult FileStream::Read(void* buffer, size_t buffer_len,$/;"	f	class:talk_base::FileStream
Read	talk/base/stream.cc	/^StreamResult LoggingAdapter::Read(void* buffer, size_t buffer_len,$/;"	f	class:talk_base::LoggingAdapter
Read	talk/base/stream.cc	/^StreamResult MemoryStream::Read(void *buffer, size_t bytes,$/;"	f	class:talk_base::MemoryStream
Read	talk/base/stream.cc	/^StreamResult NullStream::Read(void* buffer, size_t buffer_len,$/;"	f	class:talk_base::NullStream
Read	talk/base/stream.cc	/^StreamResult StreamTap::Read(void* buffer, size_t buffer_len,$/;"	f	class:talk_base::StreamTap
Read	talk/base/stream.cc	/^StreamResult StringStream::Read(void* buffer, size_t buffer_len,$/;"	f	class:talk_base::StringStream
Read	talk/base/stream.h	/^  virtual StreamResult Read(void* buffer, size_t buffer_len,$/;"	f	class:talk_base::StreamAdapterInterface
Read	talk/base/streamutils.cc	/^talk_base::StreamResult StreamCounter::Read(void* buffer, size_t buffer_len,$/;"	f	class:StreamCounter
Read	talk/base/tarstream.cc	/^StreamResult TarStream::Read(void* buffer, size_t buffer_len,$/;"	f	class:TarStream
Read	talk/examples/login/xmppsocket.cc	/^bool XmppSocket::Read(char * data, size_t len, size_t* len_read) {$/;"	f	class:XmppSocket
Read	talk/p2p/base/stun.cc	/^bool StunAddressAttribute::Read(ByteBuffer* buf) {$/;"	f	class:cricket::StunAddressAttribute
Read	talk/p2p/base/stun.cc	/^bool StunByteStringAttribute::Read(ByteBuffer* buf) {$/;"	f	class:cricket::StunByteStringAttribute
Read	talk/p2p/base/stun.cc	/^bool StunErrorCodeAttribute::Read(ByteBuffer* buf) {$/;"	f	class:cricket::StunErrorCodeAttribute
Read	talk/p2p/base/stun.cc	/^bool StunMessage::Read(ByteBuffer* buf) {$/;"	f	class:cricket::StunMessage
Read	talk/p2p/base/stun.cc	/^bool StunTransportPrefsAttribute::Read(ByteBuffer* buf) {$/;"	f	class:cricket::StunTransportPrefsAttribute
Read	talk/p2p/base/stun.cc	/^bool StunUInt16ListAttribute::Read(ByteBuffer* buf) {$/;"	f	class:cricket::StunUInt16ListAttribute
Read	talk/p2p/base/stun.cc	/^bool StunUInt32Attribute::Read(ByteBuffer* buf) {$/;"	f	class:cricket::StunUInt32Attribute
Read	talk/session/tunnel/pseudotcpchannel.cc	/^StreamResult PseudoTcpChannel::InternalStream::Read($/;"	f	class:cricket::PseudoTcpChannel::InternalStream
Read	talk/session/tunnel/pseudotcpchannel.cc	/^StreamResult PseudoTcpChannel::Read(void* buffer, size_t buffer_len,$/;"	f	class:cricket::PseudoTcpChannel
ReadAll	talk/base/stream.cc	/^StreamResult StreamInterface::ReadAll(void* buffer, size_t buffer_len,$/;"	f	class:talk_base::StreamInterface
ReadBytes	talk/base/bytebuffer.cc	/^bool ByteBuffer::ReadBytes(char* val, size_t len) {$/;"	f	class:talk_base::ByteBuffer
ReadCacheBody	talk/base/httpclient.cc	/^HttpError HttpClient::ReadCacheBody(const std::string& id) {$/;"	f	class:talk_base::HttpClient
ReadCacheHeaders	talk/base/httpclient.cc	/^HttpError HttpClient::ReadCacheHeaders(const std::string& id, bool override) {$/;"	f	class:talk_base::HttpClient
ReadFieldN	talk/base/tarstream.cc	/^void TarStream::ReadFieldN(size_t& pos, size_t max_len, size_t* numeric_field) {$/;"	f	class:TarStream
ReadFieldS	talk/base/tarstream.cc	/^void TarStream::ReadFieldS(size_t& pos, size_t max_len,$/;"	f	class:TarStream
ReadFirefoxPrefs	talk/base/proxydetect.cc	/^bool ReadFirefoxPrefs(const std::wstring& filename,$/;"	f
ReadLine	talk/base/stream.cc	/^StreamResult StreamInterface::ReadLine(std::string* line) {$/;"	f	class:talk_base::StreamInterface
ReadNextFile	talk/base/tarstream.cc	/^StreamResult TarStream::ReadNextFile(int* error) {$/;"	f	class:TarStream
ReadResource	talk/base/diskcache.cc	/^StreamInterface* DiskCache::ReadResource(const std::string& id,$/;"	f	class:talk_base::DiskCache
ReadState	talk/p2p/base/port.h	/^  enum ReadState {$/;"	g	class:cricket::Connection
ReadString	talk/base/bytebuffer.cc	/^bool ByteBuffer::ReadString(std::string& val, size_t len) {$/;"	f	class:talk_base::ByteBuffer
ReadUInt16	talk/base/bytebuffer.cc	/^bool ByteBuffer::ReadUInt16(uint16& val) {$/;"	f	class:talk_base::ByteBuffer
ReadUInt32	talk/base/bytebuffer.cc	/^bool ByteBuffer::ReadUInt32(uint32& val) {$/;"	f	class:talk_base::ByteBuffer
ReadUInt8	talk/base/bytebuffer.cc	/^bool ByteBuffer::ReadUInt8(uint8& val) {$/;"	f	class:talk_base::ByteBuffer
Read_	talk/base/socketaddress.cc	/^void SocketAddress::Read_(const char* buf, int len) {$/;"	f	class:talk_base::SocketAddress
RecalcNextTimeout	talk/base/taskrunner.cc	/^void TaskRunner::RecalcNextTimeout(Task *exclude_task) {$/;"	f	class:talk_base::TaskRunner
ReceiveSends	talk/base/messagequeue.cc	/^void MessageQueue::ReceiveSends() {$/;"	f	class:talk_base::MessageQueue
ReceiveSends	talk/base/thread.cc	/^void Thread::ReceiveSends() {$/;"	f	class:talk_base::Thread
ReceivedPing	talk/p2p/base/port.cc	/^void Connection::ReceivedPing() {$/;"	f	class:cricket::Connection
Receiver	talk/base/virtualsocket_unittest.cc	/^  Receiver(Thread* th, AsyncUDPSocket* s, uint32 bw)$/;"	f	struct:Receiver
Receiver	talk/base/virtualsocket_unittest.cc	/^struct Receiver : public MessageHandler, public sigslot::has_slots<> {$/;"	s	file:
Recv	talk/base/asyncsocket.h	/^  virtual int Recv(void *pv, size_t cb) { return socket_->Recv(pv, cb); }$/;"	f	class:talk_base::AsyncSocketAdapter
Recv	talk/base/firewallsocketserver.cc	/^  virtual int Recv(void * pv, size_t cb) {$/;"	f	class:talk_base::FirewallSocket
Recv	talk/base/natsocketfactory.cc	/^  int Recv(void *pv, size_t cb) {$/;"	f	class:talk_base::NATSocket
Recv	talk/base/openssladapter.cc	/^OpenSSLAdapter::Recv(void* pv, size_t cb) {$/;"	f	class:talk_base::OpenSSLAdapter
Recv	talk/base/physicalsocketserver.cc	/^  int Recv(void *pv, size_t cb) {$/;"	f	class:talk_base::PhysicalSocket
Recv	talk/base/schanneladapter.cc	/^SChannelAdapter::Recv(void* pv, size_t cb) {$/;"	f	class:talk_base::SChannelAdapter
Recv	talk/base/socketadapters.cc	/^LoggingSocketAdapter::Recv(void *pv, size_t cb) {$/;"	f	class:talk_base::LoggingSocketAdapter
Recv	talk/base/socketadapters.cc	/^int BufferedReadAdapter::Recv(void *pv, size_t cb) {$/;"	f	class:talk_base::BufferedReadAdapter
Recv	talk/base/virtualsocketserver.cc	/^  int Recv(void *pv, size_t cb) {$/;"	f	class:talk_base::VirtualSocket
Recv	talk/base/win32socketserver.cc	/^Win32Socket::Recv(void *pv, size_t cb) {$/;"	f	class:talk_base::Win32Socket
Recv	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::Recv(char * buffer, size_t len) {$/;"	f	class:cricket::PseudoTcp
RecvFrom	talk/base/asyncsocket.h	/^  virtual int RecvFrom(void *pv, size_t cb, SocketAddress *paddr) { return socket_->RecvFrom(pv, cb, paddr); }$/;"	f	class:talk_base::AsyncSocketAdapter
RecvFrom	talk/base/firewallsocketserver.cc	/^  virtual int RecvFrom(void * pv, size_t cb, SocketAddress * paddr) {$/;"	f	class:talk_base::FirewallSocket
RecvFrom	talk/base/natsocketfactory.cc	/^  int RecvFrom(void *pv, size_t cb, SocketAddress *paddr) {$/;"	f	class:talk_base::NATSocket
RecvFrom	talk/base/physicalsocketserver.cc	/^  int RecvFrom(void *pv, size_t cb, SocketAddress *paddr) {$/;"	f	class:talk_base::PhysicalSocket
RecvFrom	talk/base/socketadapters.cc	/^LoggingSocketAdapter::RecvFrom(void *pv, size_t cb, SocketAddress *paddr) {$/;"	f	class:talk_base::LoggingSocketAdapter
RecvFrom	talk/base/virtualsocketserver.cc	/^  int RecvFrom(void *pv, size_t cb, SocketAddress *paddr) {$/;"	f	class:talk_base::VirtualSocket
RecvFrom	talk/base/win32socketserver.cc	/^Win32Socket::RecvFrom(void *pv, size_t cb, talk_base::SocketAddress *paddr) {$/;"	f	class:talk_base::Win32Socket
Redirect	talk/p2p/base/session.cc	/^bool Session::Redirect(const std::string & target) {$/;"	f	class:cricket::Session
RedirectSession	talk/session/phone/call.cc	/^void Call::RedirectSession(Session *session, const buzz::Jid &to) {$/;"	f	class:cricket::Call
RefreshJingleInfoNow	talk/examples/login/jingleinfotask.cc	/^void JingleInfoTask::RefreshJingleInfoNow() {$/;"	f	class:buzz::JingleInfoTask
Reject	talk/p2p/base/session.cc	/^bool Session::Reject() {$/;"	f	class:cricket::Session
RejectSession	talk/session/phone/call.cc	/^void Call::RejectSession(Session *session) {$/;"	f	class:cricket::Call
RelayEntry	talk/p2p/base/relayport.cc	/^RelayEntry::RelayEntry(RelayPort* port, $/;"	f	class:cricket::RelayEntry
RelayEntry	talk/p2p/base/relayport.cc	/^class RelayEntry : public sigslot::has_slots<> {$/;"	c	namespace:cricket	file:
RelayList	talk/p2p/client/basicportallocator.h	/^  typedef std::vector<RelayServer> RelayList;$/;"	t	struct:cricket::PortConfiguration
RelayPort	talk/p2p/base/relayport.cc	/^RelayPort::RelayPort($/;"	f	class:cricket::RelayPort
RelayPort	talk/p2p/base/relayport.h	/^class RelayPort : public Port {$/;"	c	namespace:cricket
RelayServer	talk/p2p/base/relayserver.cc	/^RelayServer::RelayServer(talk_base::Thread* thread)$/;"	f	class:cricket::RelayServer
RelayServer	talk/p2p/base/relayserver.h	/^class RelayServer : public sigslot::has_slots<> {$/;"	c	namespace:cricket
RelayServer	talk/p2p/client/basicportallocator.h	/^  struct RelayServer {$/;"	s	struct:cricket::PortConfiguration
RelayServerBinding	talk/p2p/base/relayserver.cc	/^RelayServerBinding::RelayServerBinding($/;"	f	class:cricket::RelayServerBinding
RelayServerBinding	talk/p2p/base/relayserver.h	/^class RelayServerBinding : public talk_base::MessageHandler {$/;"	c	namespace:cricket
RelayServerConnection	talk/p2p/base/relayserver.cc	/^RelayServerConnection::RelayServerConnection($/;"	f	class:cricket::RelayServerConnection
RelayServerConnection	talk/p2p/base/relayserver.h	/^class RelayServerConnection {$/;"	c	namespace:cricket
Release	talk/base/sec_buffer.h	/^  void Release() {$/;"	f	class:talk_base::CSecBuffer
Release	talk/base/sec_buffer.h	/^  void Release() {$/;"	f	class:talk_base::CSecBufferBundle
Release	talk/base/signalthread.cc	/^void SignalThread::Release() {$/;"	f	class:SignalThread
Release	talk/xmllite/qname.h	/^    void Release() { if (!--refcount_) { delete this; } }$/;"	f	class:buzz::QName::Data
Release	talk/xmpp/jid.h	/^    void Release() { if (!--refcount_) delete this; }$/;"	f	class:buzz::Jid::Data
ReleaseResource	talk/base/diskcache.cc	/^void DiskCache::ReleaseResource(const std::string& id, size_t index) const {$/;"	f	class:talk_base::DiskCache
ReleaseSession	talk/session/tunnel/tunnelsessionclient.cc	/^Session* TunnelSession::ReleaseSession(bool channel_exists) {$/;"	f	class:cricket::TunnelSession
RememberRemoteCandidate	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::RememberRemoteCandidate($/;"	f	class:cricket::P2PTransportChannel
RemoteCandidate	talk/p2p/base/p2ptransportchannel.h	/^  RemoteCandidate(const Candidate& c, Port* origin_port)$/;"	f	class:cricket::RemoteCandidate
RemoteCandidate	talk/p2p/base/p2ptransportchannel.h	/^class RemoteCandidate : public Candidate {$/;"	c	namespace:cricket
Remove	talk/base/httpserver.cc	/^HttpServer::Remove(int connection_id) {$/;"	f	class:talk_base::HttpServer
Remove	talk/base/messagequeue.cc	/^void MessageQueueManager::Remove(MessageQueue *message_queue) {$/;"	f	class:talk_base::MessageQueueManager
Remove	talk/base/physicalsocketserver.cc	/^void PhysicalSocketServer::Remove(Dispatcher *pdispatcher) {$/;"	f	class:talk_base::PhysicalSocketServer
Remove	talk/base/thread.cc	/^void ThreadManager::Remove(Thread *thread) {$/;"	f	class:talk_base::ThreadManager
Remove	talk/p2p/base/stunrequest.cc	/^void StunRequestManager::Remove(StunRequest* request) {$/;"	f	class:cricket::StunRequestManager
RemoveBinding	talk/p2p/base/relayserver.cc	/^void RelayServer::RemoveBinding(RelayServerBinding* binding) {$/;"	f	class:cricket::RelayServer
RemoveChildAfter	talk/xmllite/xmlelement.cc	/^XmlElement::RemoveChildAfter(XmlChild * pPredecessor) {$/;"	f	class:buzz::XmlElement
RemoveClient	talk/p2p/base/sessionmanager.cc	/^void SessionManager::RemoveClient(const std::string& session_type) {$/;"	f	class:cricket::SessionManager
RemoveConnection	talk/p2p/base/relayserver.cc	/^void RelayServer::RemoveConnection(RelayServerConnection* conn) {$/;"	f	class:cricket::RelayServer
RemoveExternalSocket	talk/p2p/base/relayserver.cc	/^void RelayServer::RemoveExternalSocket(talk_base::AsyncPacketSocket* socket) {$/;"	f	class:cricket::RelayServer
RemoveInternalSocket	talk/p2p/base/relayserver.cc	/^void RelayServer::RemoveInternalSocket(talk_base::AsyncPacketSocket* socket) {$/;"	f	class:cricket::RelayServer
RemoveIqHandler	talk/xmpp/xmppengineimpl_iq.cc	/^XmppEngineImpl::RemoveIqHandler(XmppIqCookie cookie,$/;"	f	class:buzz::XmppEngineImpl
RemoveServer	talk/base/firewallsocketserver.cc	/^void FirewallManager::RemoveServer(FirewallSocketServer * server) {$/;"	f	class:talk_base::FirewallManager
RemoveSession	talk/session/phone/call.cc	/^void Call::RemoveSession(Session *session) {$/;"	f	class:cricket::Call
RemoveStanzaHandler	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::RemoveStanzaHandler(XmppStanzaHandler * stanza_handler) {$/;"	f	class:buzz::XmppEngineImpl
RemoveXmlns	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::RemoveXmlns() {$/;"	f	class:buzz::XmlnsStack
RemoveXmppTask	talk/xmpp/xmppclient.cc	/^XmppClient::RemoveXmppTask(XmppTask * task) {$/;"	f	class:buzz::XmppClient
ReplySize	talk/base/winping.cc	/^inline uint32 ReplySize(uint32 data_size) {$/;"	f	namespace:talk_base
ReportWSAError	talk/base/win32socketserver.cc	/^void ReportWSAError(LPCSTR context, int error, const sockaddr_in& addr) { }$/;"	f	namespace:talk_base
ReportWSAError	talk/base/win32socketserver.cc	/^void ReportWSAError(LPCSTR context, int error, const sockaddr_in& addr) {$/;"	f	namespace:talk_base
RequestConnectedStream	talk/base/socketpool.cc	/^NewSocketPool::RequestConnectedStream(const SocketAddress& remote, int* err) {$/;"	f	class:talk_base::NewSocketPool
RequestConnectedStream	talk/base/socketpool.cc	/^ReuseSocketPool::RequestConnectedStream(const SocketAddress& remote, int* err) {$/;"	f	class:talk_base::ReuseSocketPool
RequestConnectedStream	talk/base/socketpool.cc	/^StreamInterface* LoggingPoolAdapter::RequestConnectedStream($/;"	f	class:talk_base::LoggingPoolAdapter
RequestConnectedStream	talk/base/socketpool.cc	/^StreamInterface* StreamCache::RequestConnectedStream($/;"	f	class:talk_base::StreamCache
RequestConnectedStream	talk/session/fileshare/fileshare.cc	/^talk_base::StreamInterface* FileShareSession::RequestConnectedStream($/;"	f	class:cricket::FileShareSession
RequestMap	talk/p2p/base/stunrequest.h	/^  typedef std::map<std::string, StunRequest*> RequestMap;$/;"	t	class:cricket::StunRequestManager
RequestSort	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::RequestSort() {$/;"	f	class:cricket::P2PTransportChannel
Resample	talk/base/virtualsocketserver.cc	/^VirtualSocketServer::Function* VirtualSocketServer::Resample($/;"	f	class:talk_base::VirtualSocketServer
ResampleComplete	talk/session/fileshare/fileshare.cc	/^void FileShareSession::ResampleComplete(talk_base::StreamInterface *i, talk_base::HttpTransaction *trans, bool success) {$/;"	f	class:cricket::FileShareSession
ReserveSize	talk/base/socketstream.h	/^  virtual bool ReserveSize(size_t size) { return true; }$/;"	f	class:talk_base::SocketStream
ReserveSize	talk/base/stream.cc	/^bool FileStream::ReserveSize(size_t size) {$/;"	f	class:talk_base::FileStream
ReserveSize	talk/base/stream.cc	/^bool MemoryStream::ReserveSize(size_t size) {$/;"	f	class:talk_base::MemoryStream
ReserveSize	talk/base/stream.cc	/^bool NullStream::ReserveSize(size_t size) {$/;"	f	class:talk_base::NullStream
ReserveSize	talk/base/stream.cc	/^bool StringStream::ReserveSize(size_t size) {$/;"	f	class:talk_base::StringStream
ReserveSize	talk/base/stream.h	/^  virtual bool ReserveSize(size_t size) {$/;"	f	class:talk_base::StreamAdapterInterface
ReserveSize	talk/base/tarstream.h	/^  virtual bool ReserveSize(size_t size) { return true; }$/;"	f	class:talk_base::TarStream
ReserveSize	talk/session/tunnel/pseudotcpchannel.cc	/^  virtual bool ReserveSize(size_t size) { return true; }$/;"	f	class:cricket::PseudoTcpChannel::InternalStream
Reserved	talk/base/winping.cc	/^    USHORT  Reserved;           \/\/ Reserved for system use$/;"	m	struct:talk_base::icmp_echo_reply	file:
Reset	talk/base/event.h	/^  void Reset() {$/;"	f	class:talk_base::Event
Reset	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::Reset() {$/;"	f	class:cricket::P2PTransportChannel
Reset	talk/p2p/base/rawtransportchannel.cc	/^void RawTransportChannel::Reset() {$/;"	f	class:cricket::RawTransportChannel
Reset	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::Reset() {$/;"	f	class:buzz::XmlBuilder
Reset	talk/xmllite/xmlnsstack.cc	/^void XmlnsStack::Reset() {$/;"	f	class:buzz::XmlnsStack
Reset	talk/xmllite/xmlparser.cc	/^XmlParser::ParseContext::Reset() {$/;"	f	class:buzz::XmlParser::ParseContext
Reset	talk/xmllite/xmlparser.cc	/^XmlParser::Reset() {$/;"	f	class:buzz::XmlParser
Reset	talk/xmpp/xmppstanzaparser.cc	/^XmppStanzaParser::Reset() {$/;"	f	class:buzz::XmppStanzaParser
ResetByteCount	talk/base/streamutils.h	/^  inline void ResetByteCount() { count_ = 0; }$/;"	f	class:StreamCounter
ResetChannels	talk/p2p/base/transport.cc	/^void Transport::ResetChannels() {$/;"	f	class:cricket::Transport
ResetChannels_w	talk/p2p/base/transport.cc	/^void Transport::ResetChannels_w() {$/;"	f	class:cricket::Transport
ResetTimeout	talk/base/task.cc	/^void Task::ResetTimeout() {$/;"	f	class:talk_base::Task
ResetTimestamps	talk/base/logging.cc	/^void LogMessage::ResetTimestamps() {$/;"	f	class:talk_base::LogMessage
Resize	talk/base/bytebuffer.cc	/^void ByteBuffer::Resize(size_t size) {$/;"	f	class:talk_base::ByteBuffer
Resolve	talk/base/socketaddress.cc	/^bool SocketAddress::Resolve(bool force, bool use_dns) {$/;"	f	class:talk_base::SocketAddress
ResolveQName	talk/xmllite/xmlparser.cc	/^XmlParser::ParseContext::ResolveQName(const char *qname, bool isAttr) {$/;"	f	class:buzz::XmlParser::ParseContext
Respond	talk/base/httpserver.cc	/^HttpServer::Connection::Respond(HttpTransaction* transaction) {$/;"	f	class:talk_base::HttpServer::Connection
Respond	talk/base/httpserver.cc	/^HttpServer::Respond(HttpTransaction* transaction) {$/;"	f	class:talk_base::HttpServer
Restart	talk/base/messagequeue.cc	/^void MessageQueue::Restart() {$/;"	f	class:talk_base::MessageQueue
ResumeTimeout	talk/base/task.cc	/^void Task::ResumeTimeout() {$/;"	f	class:talk_base::Task
ReturnConnectedStream	talk/base/socketpool.cc	/^NewSocketPool::ReturnConnectedStream(StreamInterface* stream) {$/;"	f	class:talk_base::NewSocketPool
ReturnConnectedStream	talk/base/socketpool.cc	/^ReuseSocketPool::ReturnConnectedStream(StreamInterface* stream) {$/;"	f	class:talk_base::ReuseSocketPool
ReturnConnectedStream	talk/base/socketpool.cc	/^void LoggingPoolAdapter::ReturnConnectedStream(StreamInterface* stream) {$/;"	f	class:talk_base::LoggingPoolAdapter
ReturnConnectedStream	talk/base/socketpool.cc	/^void StreamCache::ReturnConnectedStream(StreamInterface* stream) {$/;"	f	class:talk_base::StreamCache
ReturnConnectedStream	talk/session/fileshare/fileshare.cc	/^void FileShareSession::ReturnConnectedStream($/;"	f	class:cricket::FileShareSession
ReuseSocketPool	talk/base/socketpool.cc	/^ReuseSocketPool::ReuseSocketPool(SocketFactory* factory, AsyncSocket* socket)$/;"	f	class:talk_base::ReuseSocketPool
ReuseSocketPool	talk/base/socketpool.h	/^class ReuseSocketPool : public StreamPool {$/;"	c	namespace:talk_base
Reverse	talk/p2p/base/session_unittest.cc	/^char* Reverse(const char* str) {$/;"	f
Rewind	talk/base/socketstream.h	/^  virtual bool Rewind() { return false; }$/;"	f	class:talk_base::SocketStream
Rewind	talk/base/stream.cc	/^bool NullStream::Rewind() {$/;"	f	class:talk_base::NullStream
Rewind	talk/base/stream.cc	/^bool StringStream::Rewind() {$/;"	f	class:talk_base::StringStream
Rewind	talk/base/stream.h	/^  virtual bool Rewind() { return SetPosition(0); }$/;"	f	class:talk_base::FileStream
Rewind	talk/base/stream.h	/^  virtual bool Rewind() { return SetPosition(0); }$/;"	f	class:talk_base::MemoryStream
Rewind	talk/base/stream.h	/^  virtual bool Rewind() {$/;"	f	class:talk_base::StreamAdapterInterface
Rewind	talk/base/tarstream.h	/^  virtual bool Rewind() { return false; }$/;"	f	class:talk_base::TarStream
Rewind	talk/session/tunnel/pseudotcpchannel.cc	/^  virtual bool Rewind() { return false; }$/;"	f	class:cricket::PseudoTcpChannel::InternalStream
RingStream	talk/third_party/mediastreamer/mediastream.h	/^typedef struct _RingStream RingStream;$/;"	t	typeref:struct:_RingStream
RosterItem	talk/examples/call/callclient.h	/^struct RosterItem {$/;"	s
RosterMap	talk/examples/call/callclient.h	/^  typedef std::map<std::string,RosterItem> RosterMap;$/;"	t	class:CallClient
RoundTripTime	talk/base/winping.cc	/^    ULONG   RoundTripTime;      \/\/ RTT in milliseconds$/;"	m	struct:talk_base::icmp_echo_reply	file:
RouteCmp	talk/base/natserver.cc	/^RouteCmp::RouteCmp(NAT* nat) : symmetric(nat->IsSymmetric()) {$/;"	f	class:talk_base::RouteCmp
RouteCmp	talk/base/natserver.h	/^struct RouteCmp {$/;"	s	namespace:talk_base
Rule	talk/base/firewallsocketserver.h	/^  struct Rule {$/;"	s	class:talk_base::FirewallSocketServer
Run	talk/base/signalthread.cc	/^void SignalThread::Run() {$/;"	f	class:SignalThread
Run	talk/base/signalthread.h	/^    virtual void Run() { parent_->Run(); }$/;"	f	class:talk_base::SignalThread::Worker
Run	talk/base/thread.cc	/^void Thread::Run() {$/;"	f	class:talk_base::Thread
RunTasks	talk/base/taskrunner.cc	/^void TaskRunner::RunTasks() {$/;"	f	class:talk_base::TaskRunner
SCHANNEL_BUFFER_TYPES	talk/base/schanneladapter.cc	/^const ConstantLabel SCHANNEL_BUFFER_TYPES[] = {$/;"	v
SChannelAdapter	talk/base/schanneladapter.cc	/^SChannelAdapter::SChannelAdapter(AsyncSocket* socket)$/;"	f	class:talk_base::SChannelAdapter
SChannelAdapter	talk/base/schanneladapter.h	/^class SChannelAdapter : public SSLAdapter, public MessageHandler {$/;"	c	namespace:talk_base
SChannelBuffer	talk/base/schanneladapter.cc	/^typedef std::vector<char> SChannelBuffer;$/;"	t	namespace:talk_base	file:
SD_FORCEFUL	talk/p2p/base/pseudotcp.h	/^  enum Shutdown { SD_NONE, SD_GRACEFUL, SD_FORCEFUL } m_shutdown;$/;"	e	enum:cricket::PseudoTcp::Shutdown
SD_GRACEFUL	talk/p2p/base/pseudotcp.h	/^  enum Shutdown { SD_NONE, SD_GRACEFUL, SD_FORCEFUL } m_shutdown;$/;"	e	enum:cricket::PseudoTcp::Shutdown
SD_NONE	talk/p2p/base/pseudotcp.h	/^  enum Shutdown { SD_NONE, SD_GRACEFUL, SD_FORCEFUL } m_shutdown;$/;"	e	enum:cricket::PseudoTcp::Shutdown
SECURITY_ERRORS	talk/base/schanneladapter.cc	/^const ConstantLabel SECURITY_ERRORS[] = {$/;"	v
SECURITY_WIN32	talk/base/httpcommon.cc	35;"	d	file:
SECURITY_WIN32	talk/base/schanneladapter.cc	29;"	d	file:
SECURITY_WIN32	talk/base/socketadapters.cc	40;"	d	file:
SEC_E_CERT_EXPIRED	talk/base/httpbase.cc	35;"	d	file:
SESSION_STATES	talk/session/tunnel/tunnelsessionclient.cc	/^const talk_base::ConstantLabel SESSION_STATES[] = {$/;"	v
SET_MAKE	talk/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/base/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/examples/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/examples/call/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/examples/login/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/examples/pcp/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/p2p/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/p2p/base/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/p2p/client/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/session/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/session/fileshare/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/session/phone/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/session/tunnel/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/third_party/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/third_party/gips/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/third_party/mediastreamer/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/xmllite/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	talk/xmpp/Makefile	/^SET_MAKE = $/;"	m
SE_CLOSE	talk/base/stream.h	/^enum StreamEvent { SE_OPEN = 1, SE_READ = 2, SE_WRITE = 4, SE_CLOSE = 8 };$/;"	e	enum:talk_base::StreamEvent
SE_OPEN	talk/base/stream.h	/^enum StreamEvent { SE_OPEN = 1, SE_READ = 2, SE_WRITE = 4, SE_CLOSE = 8 };$/;"	e	enum:talk_base::StreamEvent
SE_READ	talk/base/stream.h	/^enum StreamEvent { SE_OPEN = 1, SE_READ = 2, SE_WRITE = 4, SE_CLOSE = 8 };$/;"	e	enum:talk_base::StreamEvent
SE_WRITE	talk/base/stream.h	/^enum StreamEvent { SE_OPEN = 1, SE_READ = 2, SE_WRITE = 4, SE_CLOSE = 8 };$/;"	e	enum:talk_base::StreamEvent
SHAKE_MAX_DELAY	talk/p2p/client/basicportallocator.cc	/^const int SHAKE_MAX_DELAY = 90 * 1000; \/\/ 90 seconds$/;"	v
SHAKE_MIN_DELAY	talk/p2p/client/basicportallocator.cc	/^const int SHAKE_MIN_DELAY = 45 * 1000; \/\/ 45 seconds$/;"	v
SHELL	talk/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/base/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/examples/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/examples/call/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/examples/login/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/examples/pcp/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/p2p/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/p2p/base/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/p2p/client/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/session/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/session/fileshare/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/session/phone/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/session/tunnel/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/third_party/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/third_party/gips/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/third_party/mediastreamer/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/xmllite/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	talk/xmpp/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHOW_AWAY	talk/examples/login/status.h	/^    SHOW_AWAY     = 3,$/;"	e	enum:buzz::Status::Show
SHOW_CHAT	talk/examples/login/status.h	/^    SHOW_CHAT     = 6,$/;"	e	enum:buzz::Status::Show
SHOW_DND	talk/examples/login/status.h	/^    SHOW_DND      = 4,$/;"	e	enum:buzz::Status::Show
SHOW_NONE	talk/examples/login/status.h	/^    SHOW_NONE     = 0,$/;"	e	enum:buzz::Status::Show
SHOW_OFFLINE	talk/examples/login/status.h	/^    SHOW_OFFLINE  = 1,$/;"	e	enum:buzz::Status::Show
SHOW_ONLINE	talk/examples/login/status.h	/^    SHOW_ONLINE   = 5,$/;"	e	enum:buzz::Status::Show
SHOW_XA	talk/examples/login/status.h	/^    SHOW_XA       = 2,$/;"	e	enum:buzz::Status::Show
SIGSLOT_DEFAULT_MT_POLICY	talk/base/sigslot.h	101;"	d
SIGSLOT_DEFAULT_MT_POLICY	talk/base/sigslot.h	103;"	d
SIGSLOT_PURE_ISO	talk/base/sigslot.h	85;"	d
SIZE	talk/p2p/base/stun.h	/^  enum { SIZE = 4 };$/;"	e	enum:cricket::StunUInt32Attribute::__anon7
SIZE	talk/p2p/base/stun.h	/^  enum { SIZE = 8 };$/;"	e	enum:cricket::StunAddressAttribute::__anon6
SIZE	talk/p2p/base/stun.h	/^  static const uint16 SIZE = 4;$/;"	m	class:cricket::StunUInt32Attribute
SIZE	talk/p2p/base/stun.h	/^  static const uint16 SIZE = 8;$/;"	m	class:cricket::StunAddressAttribute
SIZE1	talk/p2p/base/stun.h	/^  enum { SIZE1 = 4, SIZE2 = 12 };$/;"	e	enum:cricket::StunTransportPrefsAttribute::__anon9
SIZE1	talk/p2p/base/stun.h	/^  static const uint16 SIZE1 = 4;$/;"	m	class:cricket::StunTransportPrefsAttribute
SIZE2	talk/p2p/base/stun.h	/^  enum { SIZE1 = 4, SIZE2 = 12 };$/;"	e	enum:cricket::StunTransportPrefsAttribute::__anon9
SIZE2	talk/p2p/base/stun.h	/^  static const uint16 SIZE2 = 12;$/;"	m	class:cricket::StunTransportPrefsAttribute
SIZE_UNKNOWN	talk/base/stringutils.h	/^const size_t SIZE_UNKNOWN = static_cast<size_t>(-1);$/;"	v
SIZE_UNKNOWN	talk/session/fileshare/fileshare.h	/^  enum { SIZE_UNKNOWN = talk_base::SIZE_UNKNOWN };$/;"	e	enum:cricket::FileShareManifest::__anon28
SList	talk/p2p/base/pseudotcp.h	/^  typedef std::list<SSegment> SList;$/;"	t	class:cricket::PseudoTcp
SNDCARD_H	talk/third_party/mediastreamer/sndcard.h	24;"	d
SND_CARD	talk/third_party/mediastreamer/sndcard.h	116;"	d
SND_CARD_FLAGS_OPENED	talk/third_party/mediastreamer/sndcard.h	65;"	d
SND_CARD_LEVEL_GENERAL	talk/third_party/mediastreamer/sndcard.h	109;"	d
SND_CARD_LEVEL_INPUT	talk/third_party/mediastreamer/sndcard.h	110;"	d
SND_CARD_LEVEL_OUTPUT	talk/third_party/mediastreamer/sndcard.h	111;"	d
SND_CARD_LEVEL_TO_HPUX_LEVEL	talk/third_party/mediastreamer/hpuxsndcard.c	171;"	d	file:
SOCKET	talk/base/physicalsocketserver.h	/^typedef int SOCKET;$/;"	t
SOCKET_EACCES	talk/base/socket.h	38;"	d
SOCKET_EACCES	talk/base/socket.h	93;"	d
SOCKET_ERROR	talk/base/socket.h	98;"	d
SOURCES	Makefile	/^SOURCES = talk\/base\/asyncpacketsocket.cc \\$/;"	m
SOURCES	talk/Makefile	/^SOURCES =$/;"	m
SOURCES	talk/base/Makefile	/^SOURCES = $(libcricketbase_la_SOURCES) $(libcrickettest_la_SOURCES) \\$/;"	m
SOURCES	talk/examples/Makefile	/^SOURCES =$/;"	m
SOURCES	talk/examples/call/Makefile	/^SOURCES = $(call_SOURCES)$/;"	m
SOURCES	talk/examples/login/Makefile	/^SOURCES = $(libcricketexampleslogin_la_SOURCES) $(login_SOURCES)$/;"	m
SOURCES	talk/examples/pcp/Makefile	/^SOURCES = $(pcp_SOURCES)$/;"	m
SOURCES	talk/p2p/Makefile	/^SOURCES =$/;"	m
SOURCES	talk/p2p/base/Makefile	/^SOURCES = $(libcricketp2pbase_la_SOURCES) $(port_unittest_SOURCES) \\$/;"	m
SOURCES	talk/p2p/client/Makefile	/^SOURCES = $(libcricketp2pclient_la_SOURCES)$/;"	m
SOURCES	talk/session/Makefile	/^SOURCES =$/;"	m
SOURCES	talk/session/fileshare/Makefile	/^SOURCES = $(libcricketsessionfileshare_la_SOURCES)$/;"	m
SOURCES	talk/session/phone/Makefile	/^SOURCES = $(libcricketsessionphone_la_SOURCES) \\$/;"	m
SOURCES	talk/session/tunnel/Makefile	/^SOURCES = $(libcricketsessiontunnel_la_SOURCES)$/;"	m
SOURCES	talk/third_party/Makefile	/^SOURCES =$/;"	m
SOURCES	talk/third_party/gips/Makefile	/^SOURCES =$/;"	m
SOURCES	talk/third_party/mediastreamer/Makefile	/^SOURCES = $(libmediastreamer_la_SOURCES)$/;"	m
SOURCES	talk/xmllite/Makefile	/^SOURCES = $(libcricketxmllite_la_SOURCES)$/;"	m
SOURCES	talk/xmpp/Makefile	/^SOURCES = $(libcricketxmpp_la_SOURCES)$/;"	m
SPEEX_CFLAGS	talk/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/base/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/examples/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/examples/call/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/examples/login/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/examples/pcp/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/p2p/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/p2p/base/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/p2p/client/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/session/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/session/fileshare/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/session/phone/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/session/tunnel/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/third_party/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/third_party/gips/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/third_party/mediastreamer/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/xmllite/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_CFLAGS	talk/xmpp/Makefile	/^SPEEX_CFLAGS = $/;"	m
SPEEX_LIBS	talk/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/base/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/examples/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/examples/call/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/examples/login/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/examples/pcp/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/p2p/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/p2p/base/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/p2p/client/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/session/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/session/fileshare/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/session/phone/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/session/tunnel/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/third_party/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/third_party/gips/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/third_party/mediastreamer/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/xmllite/Makefile	/^SPEEX_LIBS = $/;"	m
SPEEX_LIBS	talk/xmpp/Makefile	/^SPEEX_LIBS = $/;"	m
SRCMOC	Makefile	/^SRCMOC   = $/;"	m
SR_BLOCK	talk/base/stream.h	/^enum StreamResult { SR_ERROR, SR_SUCCESS, SR_BLOCK, SR_EOS };$/;"	e	enum:talk_base::StreamResult
SR_EOS	talk/base/stream.h	/^enum StreamResult { SR_ERROR, SR_SUCCESS, SR_BLOCK, SR_EOS };$/;"	e	enum:talk_base::StreamResult
SR_ERROR	talk/base/stream.h	/^enum StreamResult { SR_ERROR, SR_SUCCESS, SR_BLOCK, SR_EOS };$/;"	e	enum:talk_base::StreamResult
SR_SUCCESS	talk/base/stream.h	/^enum StreamResult { SR_ERROR, SR_SUCCESS, SR_BLOCK, SR_EOS };$/;"	e	enum:talk_base::StreamResult
SSL	talk/base/openssladapter.h	/^typedef struct ssl_st SSL;$/;"	t	typeref:struct:ssl_st
SSLAdapter	talk/base/ssladapter.h	/^  SSLAdapter(AsyncSocket* socket)$/;"	f	class:talk_base::SSLAdapter
SSLAdapter	talk/base/ssladapter.h	/^class SSLAdapter : public AsyncSocketAdapter {$/;"	c	namespace:talk_base
SSLImpl	talk/base/schanneladapter.cc	/^  SSLImpl() : cred_init(false), ctx_init(false) { }$/;"	f	struct:talk_base::SChannelAdapter::SSLImpl
SSLImpl	talk/base/schanneladapter.cc	/^struct SChannelAdapter::SSLImpl {$/;"	s	class:talk_base::SChannelAdapter	file:
SSLInfoCallback	talk/base/openssladapter.cc	/^OpenSSLAdapter::SSLInfoCallback(const SSL* s, int where, int ret) {$/;"	f	class:talk_base::OpenSSLAdapter
SSLPostConnectionCheck	talk/base/openssladapter.cc	/^OpenSSLAdapter::SSLPostConnectionCheck(SSL* ssl, const char* host) {$/;"	f	class:talk_base::OpenSSLAdapter
SSLState	talk/base/openssladapter.h	/^  enum SSLState {$/;"	g	class:talk_base::OpenSSLAdapter
SSLState	talk/base/schanneladapter.h	/^  enum SSLState {$/;"	g	class:talk_base::SChannelAdapter
SSLVerifyCallback	talk/base/openssladapter.cc	/^OpenSSLAdapter::SSLVerifyCallback(int ok, X509_STORE_CTX* store) {$/;"	f	class:talk_base::OpenSSLAdapter
SSL_CLIENT_HELLO	talk/base/socketadapters.cc	/^const char SSL_CLIENT_HELLO[] = {$/;"	v
SSL_CONNECTED	talk/base/openssladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::OpenSSLAdapter::SSLState
SSL_CONNECTED	talk/base/schanneladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::SChannelAdapter::SSLState
SSL_CONNECTING	talk/base/openssladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::OpenSSLAdapter::SSLState
SSL_CONNECTING	talk/base/schanneladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::SChannelAdapter::SSLState
SSL_CTX	talk/base/openssladapter.h	/^typedef struct ssl_ctx_st SSL_CTX;$/;"	t	typeref:struct:ssl_ctx_st
SSL_ERROR	talk/base/openssladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::OpenSSLAdapter::SSLState
SSL_ERROR	talk/base/schanneladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::SChannelAdapter::SSLState
SSL_FLAGS_DEFAULT	talk/base/schanneladapter.cc	/^const ULONG SSL_FLAGS_DEFAULT = ISC_REQ_ALLOCATE_MEMORY$/;"	v
SSL_NONE	talk/base/openssladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::OpenSSLAdapter::SSLState
SSL_NONE	talk/base/schanneladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::SChannelAdapter::SSLState
SSL_SERVER_HELLO	talk/base/socketadapters.cc	/^const uint8 SSL_SERVER_HELLO[] = {$/;"	v
SSL_USE_OPENSSL	talk/base/ssladapter.cc	34;"	d	file:
SSL_USE_SCHANNEL	talk/base/ssladapter.cc	32;"	d	file:
SSL_WAIT	talk/base/openssladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::OpenSSLAdapter::SSLState
SSL_WAIT	talk/base/schanneladapter.h	/^    SSL_NONE, SSL_WAIT, SSL_CONNECTING, SSL_CONNECTED, SSL_ERROR$/;"	e	enum:talk_base::SChannelAdapter::SSLState
SS_AUTH	talk/base/socketadapters.h	/^  enum SocksState { SS_HELLO, SS_AUTH, SS_CONNECT, SS_TUNNEL, SS_ERROR } state_;$/;"	e	enum:talk_base::AsyncSocksProxySocket::SocksState
SS_CLOSED	talk/base/stream.h	/^enum StreamState { SS_CLOSED, SS_OPENING, SS_OPEN };$/;"	e	enum:talk_base::StreamState
SS_CONNECT	talk/base/socketadapters.h	/^  enum SocksState { SS_HELLO, SS_AUTH, SS_CONNECT, SS_TUNNEL, SS_ERROR } state_;$/;"	e	enum:talk_base::AsyncSocksProxySocket::SocksState
SS_ERROR	talk/base/socketadapters.h	/^  enum SocksState { SS_HELLO, SS_AUTH, SS_CONNECT, SS_TUNNEL, SS_ERROR } state_;$/;"	e	enum:talk_base::AsyncSocksProxySocket::SocksState
SS_HELLO	talk/base/socketadapters.h	/^  enum SocksState { SS_HELLO, SS_AUTH, SS_CONNECT, SS_TUNNEL, SS_ERROR } state_;$/;"	e	enum:talk_base::AsyncSocksProxySocket::SocksState
SS_OPEN	talk/base/stream.h	/^enum StreamState { SS_CLOSED, SS_OPENING, SS_OPEN };$/;"	e	enum:talk_base::StreamState
SS_OPENING	talk/base/stream.h	/^enum StreamState { SS_CLOSED, SS_OPENING, SS_OPEN };$/;"	e	enum:talk_base::StreamState
SS_TUNNEL	talk/base/socketadapters.h	/^  enum SocksState { SS_HELLO, SS_AUTH, SS_CONNECT, SS_TUNNEL, SS_ERROR } state_;$/;"	e	enum:talk_base::AsyncSocksProxySocket::SocksState
SSegment	talk/p2p/base/pseudotcp.h	/^    SSegment(uint32 s, uint32 l, bool c) : seq(s), len(l), \/*tstamp(0),*\/ xmit(0), bCtrl(c) { }$/;"	f	struct:cricket::PseudoTcp::SSegment
SSegment	talk/p2p/base/pseudotcp.h	/^  struct SSegment {$/;"	s	class:cricket::PseudoTcp
START_REQUESTED	talk/third_party/mediastreamer/msossread.h	46;"	d
STATE_BLOCKED	talk/base/task.h	/^    STATE_BLOCKED = -1,$/;"	e	enum:talk_base::Task::__anon22
STATE_CLOSED	talk/xmpp/asyncsocket.h	/^    STATE_CLOSED = 0,      \/\/!< Socket is not open.$/;"	e	enum:buzz::AsyncSocket::State
STATE_CLOSED	talk/xmpp/xmppengine.h	/^    STATE_CLOSED,          \/\/!< Session closed, possibly due to error.$/;"	e	enum:buzz::XmppEngine::State
STATE_CLOSING	talk/xmpp/asyncsocket.h	/^    STATE_CLOSING,         \/\/!< Socket is closing but can have buffered data$/;"	e	enum:buzz::AsyncSocket::State
STATE_CONNECTING	talk/xmpp/asyncsocket.h	/^    STATE_CONNECTING,      \/\/!< In the process of$/;"	e	enum:buzz::AsyncSocket::State
STATE_DEINIT	talk/p2p/base/session.h	/^    STATE_DEINIT,            \/\/ session is being destroyed$/;"	e	enum:cricket::Session::State
STATE_DONE	talk/base/task.h	/^    STATE_DONE = 2,$/;"	e	enum:talk_base::Task::__anon22
STATE_ERROR	talk/base/task.h	/^    STATE_ERROR = 3,$/;"	e	enum:talk_base::Task::__anon22
STATE_INIT	talk/base/task.h	/^    STATE_INIT = 0,$/;"	e	enum:talk_base::Task::__anon22
STATE_INIT	talk/p2p/base/session.h	/^    STATE_INIT = 0,$/;"	e	enum:cricket::Session::State
STATE_INPROGRESS	talk/p2p/base/session.h	/^    STATE_INPROGRESS,        \/\/ session accepted and in progress$/;"	e	enum:cricket::Session::State
STATE_NEXT	talk/base/task.h	/^    STATE_NEXT = 5,  \/\/ Subclasses which need more states start here and higher$/;"	e	enum:talk_base::Task::__anon22
STATE_NONE	talk/xmpp/xmppengine.h	/^    STATE_NONE = 0,        \/\/!< Nonexistent state$/;"	e	enum:buzz::XmppEngine::State
STATE_OPEN	talk/xmpp/asyncsocket.h	/^    STATE_OPEN,            \/\/!< Socket is connected$/;"	e	enum:buzz::AsyncSocket::State
STATE_OPEN	talk/xmpp/xmppengine.h	/^    STATE_OPEN,            \/\/!< Authenticated and bound.$/;"	e	enum:buzz::XmppEngine::State
STATE_OPENING	talk/xmpp/xmppengine.h	/^    STATE_OPENING,         \/\/!< Exchanging stream headers, authenticating and so on.$/;"	e	enum:buzz::XmppEngine::State
STATE_PRE_XMPP_LOGIN	talk/xmpp/xmppclient.h	/^    STATE_PRE_XMPP_LOGIN = STATE_NEXT,$/;"	e	enum:buzz::XmppClient::__anon27
STATE_READABLE	talk/p2p/base/port.h	/^    STATE_READABLE     = 0, \/\/ we have received pings recently$/;"	e	enum:cricket::Connection::ReadState
STATE_READ_TIMEOUT	talk/p2p/base/port.h	/^    STATE_READ_TIMEOUT = 1  \/\/ we haven't received pings in a while$/;"	e	enum:cricket::Connection::ReadState
STATE_RECEIVEDACCEPT	talk/p2p/base/session.h	/^    STATE_RECEIVEDACCEPT,    \/\/ received accept. begin connecting transport$/;"	e	enum:cricket::Session::State
STATE_RECEIVEDINITIATE	talk/p2p/base/session.h	/^    STATE_RECEIVEDINITIATE,  \/\/ received an initiate. Call Accept or Reject$/;"	e	enum:cricket::Session::State
STATE_RECEIVEDMODIFY	talk/p2p/base/session.h	/^    STATE_RECEIVEDMODIFY,    \/\/ received modify, call Accept or Reject$/;"	e	enum:cricket::Session::State
STATE_RECEIVEDREJECT	talk/p2p/base/session.h	/^    STATE_RECEIVEDREJECT,    \/\/ received reject after sending initiate$/;"	e	enum:cricket::Session::State
STATE_RECEIVEDTERMINATE	talk/p2p/base/session.h	/^    STATE_RECEIVEDTERMINATE, \/\/ received terminate (any time \/ either side)$/;"	e	enum:cricket::Session::State
STATE_RESPONSE	talk/base/task.h	/^    STATE_RESPONSE = 4,$/;"	e	enum:talk_base::Task::__anon22
STATE_SENTACCEPT	talk/p2p/base/session.h	/^    STATE_SENTACCEPT,        \/\/ sent accept. begin connecting transport$/;"	e	enum:cricket::Session::State
STATE_SENTINITIATE	talk/p2p/base/session.h	/^    STATE_SENTINITIATE,      \/\/ sent initiate, waiting for Accept or Reject$/;"	e	enum:cricket::Session::State
STATE_SENTMODIFY	talk/p2p/base/session.h	/^    STATE_SENTMODIFY,        \/\/ sent modify, waiting for Accept or Reject$/;"	e	enum:cricket::Session::State
STATE_SENTREDIRECT	talk/p2p/base/session.h	/^    STATE_SENTREDIRECT,      \/\/ sent direct after receiving initiate$/;"	e	enum:cricket::Session::State
STATE_SENTREJECT	talk/p2p/base/session.h	/^    STATE_SENTREJECT,        \/\/ sent reject after receiving initiate$/;"	e	enum:cricket::Session::State
STATE_SENTTERMINATE	talk/p2p/base/session.h	/^    STATE_SENTTERMINATE,     \/\/ sent terminate (any time \/ either side)$/;"	e	enum:cricket::Session::State
STATE_START	talk/base/task.h	/^    STATE_START = 1,$/;"	e	enum:talk_base::Task::__anon22
STATE_START	talk/xmpp/xmppengine.h	/^    STATE_START,           \/\/!< Initial state.$/;"	e	enum:buzz::XmppEngine::State
STATE_START_XMPP_LOGIN	talk/xmpp/xmppclient.h	/^    STATE_START_XMPP_LOGIN = STATE_NEXT + 1,$/;"	e	enum:buzz::XmppClient::__anon27
STATE_TLS_CONNECTING	talk/xmpp/asyncsocket.h	/^    STATE_TLS_CONNECTING,  \/\/!< Establishing TLS connection$/;"	e	enum:buzz::AsyncSocket::State
STATE_TLS_OPEN	talk/xmpp/asyncsocket.h	/^    STATE_TLS_OPEN,        \/\/!< TLS connected$/;"	e	enum:buzz::AsyncSocket::State
STATE_WRITABLE	talk/p2p/base/port.h	/^    STATE_WRITABLE      = 0, \/\/ we have received ping responses recently$/;"	e	enum:cricket::Connection::WriteState
STATE_WRITE_CONNECT	talk/p2p/base/port.h	/^    STATE_WRITE_CONNECT = 1, \/\/ we have had a few ping failures$/;"	e	enum:cricket::Connection::WriteState
STATE_WRITE_TIMEOUT	talk/p2p/base/port.h	/^    STATE_WRITE_TIMEOUT = 2  \/\/ we have had a large number of ping failures$/;"	e	enum:cricket::Connection::WriteState
STDC_HEADERS	config.h	107;"	d
STD_MAP	talk/base/stl_decl.h	61;"	d
STD_MAP	talk/base/stl_decl.h	72;"	d
STD_SET	talk/base/stl_decl.h	67;"	d
STD_SET	talk/base/stl_decl.h	78;"	d
STD_VECTOR	talk/base/stl_decl.h	64;"	d
STD_VECTOR	talk/base/stl_decl.h	75;"	d
STOP_REQUESTED	talk/third_party/mediastreamer/msossread.h	47;"	d
STRIP	talk/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/base/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/examples/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/examples/call/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/examples/login/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/examples/pcp/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/p2p/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/p2p/base/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/p2p/client/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/session/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/session/fileshare/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/session/phone/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/session/tunnel/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/third_party/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/third_party/gips/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/third_party/mediastreamer/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/xmllite/Makefile	/^STRIP = strip$/;"	m
STRIP	talk/xmpp/Makefile	/^STRIP = strip$/;"	m
STR_CLIENT	talk/xmpp/constants.h	51;"	d
STR_EMPTY	talk/xmllite/xmlconstants.h	39;"	d
STR_ENCODING	talk/xmllite/xmlconstants.h	45;"	d
STR_SERVER	talk/xmpp/constants.h	52;"	d
STR_STREAM	talk/xmpp/constants.h	53;"	d
STR_VERSION	talk/xmllite/xmlconstants.h	44;"	d
STR_XML	talk/xmllite/xmlconstants.h	43;"	d
STR_XMLNS	talk/xmllite/xmlconstants.h	42;"	d
STUN_ALLOCATE_ERROR_RESPONSE	talk/p2p/base/stun.h	/^  STUN_ALLOCATE_ERROR_RESPONSE      = 0x0113,$/;"	e	enum:cricket::StunMessageType
STUN_ALLOCATE_REQUEST	talk/p2p/base/stun.h	/^  STUN_ALLOCATE_REQUEST             = 0x0003,$/;"	e	enum:cricket::StunMessageType
STUN_ALLOCATE_RESPONSE	talk/p2p/base/stun.h	/^  STUN_ALLOCATE_RESPONSE            = 0x0103,$/;"	e	enum:cricket::StunMessageType
STUN_ATTR_ALTERNATE_SERVER	talk/p2p/base/stun.h	/^  STUN_ATTR_ALTERNATE_SERVER      = 0x000e, \/\/ Address$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_BANDWIDTH	talk/p2p/base/stun.h	/^  STUN_ATTR_BANDWIDTH             = 0x0010, \/\/ UInt32$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_CHANGED_ADDRESS	talk/p2p/base/stun.h	/^  STUN_ATTR_CHANGED_ADDRESS       = 0x0005, \/\/ Address$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_CHANGE_REQUEST	talk/p2p/base/stun.h	/^  STUN_ATTR_CHANGE_REQUEST        = 0x0003, \/\/ UInt32$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_DATA	talk/p2p/base/stun.h	/^  STUN_ATTR_DATA                  = 0x0013, \/\/ ByteString$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_DESTINATION_ADDRESS	talk/p2p/base/stun.h	/^  STUN_ATTR_DESTINATION_ADDRESS   = 0x0011, \/\/ Address$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_ERROR_CODE	talk/p2p/base/stun.h	/^  STUN_ATTR_ERROR_CODE            = 0x0009, \/\/ ErrorCode$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_LIFETIME	talk/p2p/base/stun.h	/^  STUN_ATTR_LIFETIME              = 0x000d, \/\/ UInt32$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_MAGIC_COOKIE	talk/p2p/base/stun.h	/^  STUN_ATTR_MAGIC_COOKIE          = 0x000f, \/\/ ByteString, 4 bytes$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_MAPPED_ADDRESS	talk/p2p/base/stun.h	/^  STUN_ATTR_MAPPED_ADDRESS        = 0x0001, \/\/ Address$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_MESSAGE_INTEGRITY	talk/p2p/base/stun.h	/^  STUN_ATTR_MESSAGE_INTEGRITY     = 0x0008, \/\/ ByteString, 20 bytes$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_OPTIONS	talk/p2p/base/stun.h	/^  STUN_ATTR_OPTIONS               = 0x8001  \/\/ UInt32$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_PASSWORD	talk/p2p/base/stun.h	/^  STUN_ATTR_PASSWORD              = 0x0007, \/\/ ByteString, multiple of 4 bytes$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_REFLECTED_FROM	talk/p2p/base/stun.h	/^  STUN_ATTR_REFLECTED_FROM        = 0x000b, \/\/ Address$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_RESPONSE_ADDRESS	talk/p2p/base/stun.h	/^  STUN_ATTR_RESPONSE_ADDRESS      = 0x0002, \/\/ Address$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_SOURCE_ADDRESS	talk/p2p/base/stun.h	/^  STUN_ATTR_SOURCE_ADDRESS        = 0x0004, \/\/ Address$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_SOURCE_ADDRESS2	talk/p2p/base/stun.h	/^  STUN_ATTR_SOURCE_ADDRESS2       = 0x0012, \/\/ Address$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_TRANSPORT_PREFERENCES	talk/p2p/base/stun.h	/^  STUN_ATTR_TRANSPORT_PREFERENCES = 0x000c, \/\/ TransportPrefs$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_UNKNOWN_ATTRIBUTES	talk/p2p/base/stun.h	/^  STUN_ATTR_UNKNOWN_ATTRIBUTES    = 0x000a, \/\/ UInt16List$/;"	e	enum:cricket::StunAttributeType
STUN_ATTR_USERNAME	talk/p2p/base/stun.h	/^  STUN_ATTR_USERNAME              = 0x0006, \/\/ ByteString, multiple of 4 bytes$/;"	e	enum:cricket::StunAttributeType
STUN_BINDING_ERROR_RESPONSE	talk/p2p/base/stun.h	/^  STUN_BINDING_ERROR_RESPONSE       = 0x0111,$/;"	e	enum:cricket::StunMessageType
STUN_BINDING_REQUEST	talk/p2p/base/stun.h	/^  STUN_BINDING_REQUEST              = 0x0001,$/;"	e	enum:cricket::StunMessageType
STUN_BINDING_RESPONSE	talk/p2p/base/stun.h	/^  STUN_BINDING_RESPONSE             = 0x0101,$/;"	e	enum:cricket::StunMessageType
STUN_DATA_INDICATION	talk/p2p/base/stun.h	/^  STUN_DATA_INDICATION              = 0x0115$/;"	e	enum:cricket::StunMessageType
STUN_ERROR_BAD_REQUEST	talk/p2p/base/stun.h	/^  STUN_ERROR_BAD_REQUEST          = 400,$/;"	e	enum:cricket::StunErrorCodes
STUN_ERROR_GLOBAL_FAILURE	talk/p2p/base/stun.h	/^  STUN_ERROR_GLOBAL_FAILURE       = 600$/;"	e	enum:cricket::StunErrorCodes
STUN_ERROR_INTEGRITY_CHECK_FAILURE	talk/p2p/base/stun.h	/^  STUN_ERROR_INTEGRITY_CHECK_FAILURE = 431,$/;"	e	enum:cricket::StunErrorCodes
STUN_ERROR_MISSING_USERNAME	talk/p2p/base/stun.h	/^  STUN_ERROR_MISSING_USERNAME     = 432,$/;"	e	enum:cricket::StunErrorCodes
STUN_ERROR_REASON_BAD_REQUEST	talk/p2p/base/stun.cc	/^const std::string STUN_ERROR_REASON_BAD_REQUEST = "BAD REQUEST";$/;"	v
STUN_ERROR_REASON_GLOBAL_FAILURE	talk/p2p/base/stun.cc	/^const std::string STUN_ERROR_REASON_GLOBAL_FAILURE = "GLOBAL FAILURE";$/;"	v
STUN_ERROR_REASON_INTEGRITY_CHECK_FAILURE	talk/p2p/base/stun.cc	/^const std::string STUN_ERROR_REASON_INTEGRITY_CHECK_FAILURE = "INTEGRITY CHECK FAILURE";$/;"	v
STUN_ERROR_REASON_MISSING_USERNAME	talk/p2p/base/stun.cc	/^const std::string STUN_ERROR_REASON_MISSING_USERNAME = "MISSING USERNAME";$/;"	v
STUN_ERROR_REASON_SERVER_ERROR	talk/p2p/base/stun.cc	/^const std::string STUN_ERROR_REASON_SERVER_ERROR = "SERVER ERROR";$/;"	v
STUN_ERROR_REASON_STALE_CREDENTIALS	talk/p2p/base/stun.cc	/^const std::string STUN_ERROR_REASON_STALE_CREDENTIALS = "STALE CREDENTIALS";$/;"	v
STUN_ERROR_REASON_UNAUTHORIZED	talk/p2p/base/stun.cc	/^const std::string STUN_ERROR_REASON_UNAUTHORIZED = "UNAUTHORIZED";$/;"	v
STUN_ERROR_REASON_UNKNOWN_ATTRIBUTE	talk/p2p/base/stun.cc	/^const std::string STUN_ERROR_REASON_UNKNOWN_ATTRIBUTE = "UNKNOWN ATTRIBUTE";$/;"	v
STUN_ERROR_REASON_USE_TLS	talk/p2p/base/stun.cc	/^const std::string STUN_ERROR_REASON_USE_TLS = "USE TLS";$/;"	v
STUN_ERROR_SERVER_ERROR	talk/p2p/base/stun.h	/^  STUN_ERROR_SERVER_ERROR         = 500,$/;"	e	enum:cricket::StunErrorCodes
STUN_ERROR_STALE_CREDENTIALS	talk/p2p/base/stun.h	/^  STUN_ERROR_STALE_CREDENTIALS    = 430,$/;"	e	enum:cricket::StunErrorCodes
STUN_ERROR_UNAUTHORIZED	talk/p2p/base/stun.h	/^  STUN_ERROR_UNAUTHORIZED         = 401,$/;"	e	enum:cricket::StunErrorCodes
STUN_ERROR_UNKNOWN_ATTRIBUTE	talk/p2p/base/stun.h	/^  STUN_ERROR_UNKNOWN_ATTRIBUTE    = 420,$/;"	e	enum:cricket::StunErrorCodes
STUN_ERROR_USE_TLS	talk/p2p/base/stun.h	/^  STUN_ERROR_USE_TLS              = 433,$/;"	e	enum:cricket::StunErrorCodes
STUN_MAGIC_COOKIE_VALUE	talk/p2p/base/stun.h	/^const char STUN_MAGIC_COOKIE_VALUE[] = { 0x72, char(0xc6), 0x4b, char(0xc6) };$/;"	v
STUN_SEND_ERROR_RESPONSE	talk/p2p/base/stun.h	/^  STUN_SEND_ERROR_RESPONSE          = 0x0114,$/;"	e	enum:cricket::StunMessageType
STUN_SEND_REQUEST	talk/p2p/base/stun.h	/^  STUN_SEND_REQUEST                 = 0x0004,$/;"	e	enum:cricket::StunMessageType
STUN_SEND_RESPONSE	talk/p2p/base/stun.h	/^  STUN_SEND_RESPONSE                = 0x0104,$/;"	e	enum:cricket::StunMessageType
STUN_SERVER_PORT	talk/p2p/base/stunserver.h	/^const int STUN_SERVER_PORT = 3478;$/;"	v
STUN_SHARED_SECRET_ERROR_RESPONSE	talk/p2p/base/stun.h	/^  STUN_SHARED_SECRET_ERROR_RESPONSE = 0x0112,$/;"	e	enum:cricket::StunMessageType
STUN_SHARED_SECRET_REQUEST	talk/p2p/base/stun.h	/^  STUN_SHARED_SECRET_REQUEST        = 0x0002,$/;"	e	enum:cricket::StunMessageType
STUN_SHARED_SECRET_RESPONSE	talk/p2p/base/stun.h	/^  STUN_SHARED_SECRET_RESPONSE       = 0x0102,$/;"	e	enum:cricket::StunMessageType
ST_CHUNKSIZE	talk/base/httpbase.h	/^    ST_CHUNKSIZE, ST_CHUNKTERM, ST_TRAILERS,$/;"	e	enum:talk_base::HttpParser::State
ST_CHUNKTERM	talk/base/httpbase.h	/^    ST_CHUNKSIZE, ST_CHUNKTERM, ST_TRAILERS,$/;"	e	enum:talk_base::HttpParser::State
ST_COMPLETE	talk/base/httpbase.h	/^    ST_DATA, ST_COMPLETE$/;"	e	enum:talk_base::HttpParser::State
ST_DATA	talk/base/httpbase.h	/^    ST_DATA, ST_COMPLETE$/;"	e	enum:talk_base::HttpParser::State
ST_HEADERS	talk/base/httpbase.h	/^    ST_LEADER, ST_HEADERS,$/;"	e	enum:talk_base::HttpParser::State
ST_LEADER	talk/base/httpbase.h	/^    ST_LEADER, ST_HEADERS,$/;"	e	enum:talk_base::HttpParser::State
ST_MSG_FIRST_AVAILABLE	talk/base/signalthread.h	/^  enum { ST_MSG_WORKER_DONE, ST_MSG_FIRST_AVAILABLE };$/;"	e	enum:talk_base::SignalThread::__anon16
ST_MSG_WORKER_DONE	talk/base/signalthread.h	/^  enum { ST_MSG_WORKER_DONE, ST_MSG_FIRST_AVAILABLE };$/;"	e	enum:talk_base::SignalThread::__anon16
ST_TRAILERS	talk/base/httpbase.h	/^    ST_CHUNKSIZE, ST_CHUNKTERM, ST_TRAILERS,$/;"	e	enum:talk_base::HttpParser::State
SUBDIRS	talk/Makefile	/^SUBDIRS = base xmllite xmpp p2p session third_party examples $/;"	m
SUBDIRS	talk/examples/Makefile	/^SUBDIRS = login pcp$/;"	m
SUBDIRS	talk/p2p/Makefile	/^SUBDIRS = base client$/;"	m
SUBDIRS	talk/session/Makefile	/^SUBDIRS = tunnel fileshare$/;"	m
SYMLINK	Makefile	/^SYMLINK  = ln -sf$/;"	m
SaslCookieMechanism	talk/xmpp/saslcookiemechanism.h	/^  SaslCookieMechanism(const std::string & mechanism, const std::string & username, const std::string & cookie) :$/;"	f	class:buzz::SaslCookieMechanism
SaslCookieMechanism	talk/xmpp/saslcookiemechanism.h	/^class SaslCookieMechanism : public SaslMechanism {$/;"	c	namespace:buzz
SaslHandler	talk/xmpp/saslhandler.h	/^class SaslHandler {$/;"	c	namespace:buzz
SaslMechanism	talk/xmpp/saslmechanism.h	/^class SaslMechanism {$/;"	c	namespace:buzz
SaslPlainMechanism	talk/xmpp/saslplainmechanism.h	/^  SaslPlainMechanism(const buzz::Jid user_jid, const talk_base::CryptString & password) :$/;"	f	class:buzz::SaslPlainMechanism
SaslPlainMechanism	talk/xmpp/saslplainmechanism.h	/^class SaslPlainMechanism : public SaslMechanism {$/;"	c	namespace:buzz
ScheduleKeepAlive	talk/p2p/base/relayport.cc	/^void RelayEntry::ScheduleKeepAlive() {$/;"	f	class:cricket::RelayEntry
SecBufferBundleBase	talk/base/sec_buffer.h	/^class SecBufferBundleBase {$/;"	c	namespace:talk_base
Segment	talk/p2p/base/pseudotcp.h	/^  struct Segment {$/;"	s	class:cricket::PseudoTcp
Send	talk/base/asyncpacketsocket.cc	/^int AsyncPacketSocket::Send(const void *pv, size_t cb) {$/;"	f	class:talk_base::AsyncPacketSocket
Send	talk/base/asyncsocket.h	/^  virtual int Send(const void *pv, size_t cb) { return socket_->Send(pv, cb); }$/;"	f	class:talk_base::AsyncSocketAdapter
Send	talk/base/asynctcpsocket.cc	/^int AsyncTCPSocket::Send(const void *pv, size_t cb) {$/;"	f	class:talk_base::AsyncTCPSocket
Send	talk/base/firewallsocketserver.cc	/^  virtual int Send(const void * pv, size_t cb) {$/;"	f	class:talk_base::FirewallSocket
Send	talk/base/natsocketfactory.cc	/^  int Send(const void *pv, size_t cb) {$/;"	f	class:talk_base::NATSocket
Send	talk/base/openssladapter.cc	/^OpenSSLAdapter::Send(const void* pv, size_t cb) {$/;"	f	class:talk_base::OpenSSLAdapter
Send	talk/base/physicalsocketserver.cc	/^  int Send(const void *pv, size_t cb) {$/;"	f	class:talk_base::PhysicalSocket
Send	talk/base/schanneladapter.cc	/^SChannelAdapter::Send(const void* pv, size_t cb) {$/;"	f	class:talk_base::SChannelAdapter
Send	talk/base/socketadapters.cc	/^LoggingSocketAdapter::Send(const void *pv, size_t cb) {$/;"	f	class:talk_base::LoggingSocketAdapter
Send	talk/base/socketadapters.cc	/^int BufferedReadAdapter::Send(const void *pv, size_t cb) {$/;"	f	class:talk_base::BufferedReadAdapter
Send	talk/base/testclient.cc	/^void TestClient::Send(const char* buf, size_t size) {$/;"	f	class:talk_base::TestClient
Send	talk/base/thread.cc	/^void Thread::Send(MessageHandler *phandler, uint32 id, MessageData *pdata) {$/;"	f	class:talk_base::Thread
Send	talk/base/virtualsocketserver.cc	/^  int Send(const void *pv, size_t cb) {$/;"	f	class:talk_base::VirtualSocket
Send	talk/base/virtualsocketserver.cc	/^int VirtualSocketServer::Send($/;"	f	class:talk_base::VirtualSocketServer
Send	talk/base/win32socketserver.cc	/^Win32Socket::Send(const void *pv, size_t cb) {$/;"	f	class:talk_base::Win32Socket
Send	talk/examples/login/presenceouttask.cc	/^PresenceOutTask::Send(const Status & s) {$/;"	f	class:buzz::PresenceOutTask
Send	talk/p2p/base/port.cc	/^int ProxyConnection::Send(const void* data, size_t size) {$/;"	f	class:cricket::ProxyConnection
Send	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::Send(const char * buffer, size_t len) {$/;"	f	class:cricket::PseudoTcp
Send	talk/p2p/base/relayserver.cc	/^void RelayServerConnection::Send($/;"	f	class:cricket::RelayServerConnection
Send	talk/p2p/base/relayserver.cc	/^void RelayServerConnection::Send(const char* data, size_t size) {$/;"	f	class:cricket::RelayServerConnection
Send	talk/p2p/base/relayserver.cc	/^void Send(talk_base::AsyncPacketSocket* socket, const char* bytes, size_t size,$/;"	f	namespace:cricket
Send	talk/p2p/base/session_unittest.cc	/^  void Send(const char* data, size_t size) {$/;"	f	struct:ChannelHandler
Send	talk/p2p/base/stunrequest.cc	/^void StunRequestManager::Send(StunRequest* request) {$/;"	f	class:cricket::StunRequestManager
Send	talk/p2p/base/tcpport.cc	/^int TCPConnection::Send(const void* data, size_t size) {$/;"	f	class:cricket::TCPConnection
Send	talk/p2p/client/sessionsendtask.h	/^  void Send(const buzz::XmlElement* stanza) {$/;"	f	class:cricket::SessionSendTask
SendAcknowledgementMessage	talk/p2p/base/session.cc	/^void Session::SendAcknowledgementMessage(const buzz::XmlElement* stanza) {$/;"	f	class:cricket::Session
SendAuth	talk/base/socketadapters.cc	/^void AsyncSocksProxySocket::SendAuth() {$/;"	f	class:talk_base::AsyncSocksProxySocket
SendBindingErrorResponse	talk/p2p/base/port.cc	/^void Port::SendBindingErrorResponse($/;"	f	class:cricket::Port
SendBindingRequest	talk/p2p/base/port.cc	/^void Port::SendBindingRequest(Connection* conn) {$/;"	f	class:cricket::Port
SendBindingResponse	talk/p2p/base/port.cc	/^void Port::SendBindingResponse($/;"	f	class:cricket::Port
SendConnect	talk/base/socketadapters.cc	/^void AsyncSocksProxySocket::SendConnect() {$/;"	f	class:talk_base::AsyncSocksProxySocket
SendDelay	talk/base/virtualsocketserver.cc	/^uint32 VirtualSocketServer::SendDelay(uint32 size) {$/;"	f	class:talk_base::VirtualSocketServer
SendDelayed	talk/p2p/base/stunrequest.cc	/^void StunRequestManager::SendDelayed(StunRequest* request, int delay) {$/;"	f	class:cricket::StunRequestManager
SendDirected	talk/examples/login/presenceouttask.cc	/^PresenceOutTask::SendDirected(const Jid & j, const Status & s) {$/;"	f	class:buzz::PresenceOutTask
SendErrorMessage	talk/p2p/base/sessionmanager.cc	/^void SessionManager::SendErrorMessage(const buzz::XmlElement* stanza,$/;"	f	class:cricket::SessionManager
SendErrorResponse	talk/p2p/base/stunserver.cc	/^void StunServer::SendErrorResponse($/;"	f	class:cricket::StunServer
SendFlags	talk/p2p/base/pseudotcp.h	/^  enum SendFlags { sfNone, sfDelayedAck, sfImmediateAck };$/;"	g	class:cricket::PseudoTcp
SendHello	talk/base/socketadapters.cc	/^void AsyncSocksProxySocket::SendHello() {$/;"	f	class:talk_base::AsyncSocksProxySocket
SendInfoMessage	talk/p2p/base/session.cc	/^void Session::SendInfoMessage(const XmlElements& elems) {$/;"	f	class:cricket::Session
SendInternal	talk/base/natsocketfactory.cc	/^  int SendInternal(const void *pv, size_t cb, const SocketAddress& addr) {$/;"	f	class:talk_base::NATSocket
SendInternal	talk/base/virtualsocketserver.cc	/^  int SendInternal(const void *pv, size_t cb, const SocketAddress& addr) {$/;"	f	class:talk_base::VirtualSocket
SendIq	talk/xmpp/xmppengineimpl_iq.cc	/^XmppEngineImpl::SendIq(const XmlElement * element, XmppIqHandler * iq_handler,$/;"	f	class:buzz::XmppEngineImpl
SendPacket	talk/p2p/base/p2ptransportchannel.cc	/^int P2PTransportChannel::SendPacket(const char *data, size_t len) {$/;"	f	class:cricket::P2PTransportChannel
SendPacket	talk/p2p/base/rawtransportchannel.cc	/^int RawTransportChannel::SendPacket(const char *data, size_t size) {$/;"	f	class:cricket::RawTransportChannel
SendPacket	talk/p2p/base/relayport.cc	/^int RelayEntry::SendPacket(const void* data, size_t size) {$/;"	f	class:cricket::RelayEntry
SendPacket	talk/p2p/base/transportchannelproxy.cc	/^int TransportChannelProxy::SendPacket(const char *data, size_t len) {$/;"	f	class:cricket::TransportChannelProxy
SendPacket	talk/session/phone/gipslitemediaengine.h	/^  virtual int SendPacket(int channel, const void *data, int len) {if (network_interface_) network_interface_->SendPacket(data, len); return 1;}$/;"	f	class:cricket::GipsLiteMediaChannel
SendPacket	talk/session/phone/voicechannel.cc	/^void VoiceChannel::SendPacket(const void *data, size_t len) {$/;"	f	class:cricket::VoiceChannel
SendProbe	talk/examples/login/presenceouttask.cc	/^XmppReturnStatus PresenceOutTask::SendProbe(const Jid & jid) {$/;"	f	class:buzz::PresenceOutTask
SendQueue	talk/base/virtualsocketserver.cc	/^  typedef std::deque<QueueEntry> SendQueue;$/;"	t	class:talk_base::VirtualSocket	file:
SendRTCPPacket	talk/session/phone/gipslitemediaengine.h	/^  virtual int SendRTCPPacket(int channel, const void *data, int len) {return 1;}$/;"	f	class:cricket::GipsLiteMediaChannel
SendRaw	talk/base/asynctcpsocket.cc	/^int AsyncTCPSocket::SendRaw(const void * pv, size_t cb) {$/;"	f	class:talk_base::AsyncTCPSocket
SendRaw	talk/xmpp/xmppclient.cc	/^XmppClient::SendRaw(const std::string & text) {$/;"	f	class:buzz::XmppClient
SendRaw	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SendRaw(const std::string & text) {$/;"	f	class:buzz::XmppEngineImpl
SendRequest	talk/base/socketadapters.cc	/^void AsyncHttpsProxySocket::SendRequest() {$/;"	f	class:talk_base::AsyncHttpsProxySocket
SendResponse	talk/p2p/base/stunserver.cc	/^void StunServer::SendResponse($/;"	f	class:cricket::StunServer
SendSessionMessage	talk/p2p/base/session.cc	/^void Session::SendSessionMessage($/;"	f	class:cricket::Session
SendStanza	talk/examples/login/xmpppump.cc	/^buzz::XmppReturnStatus XmppPump::SendStanza(const buzz::XmlElement *stanza) {$/;"	f	class:XmppPump
SendStanza	talk/xmpp/xmppclient.cc	/^XmppClient::SendStanza(const XmlElement * stanza) {$/;"	f	class:buzz::XmppClient
SendStanza	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SendStanza(const XmlElement * element) {$/;"	f	class:buzz::XmppEngineImpl
SendStanza	talk/xmpp/xmpptask.cc	/^XmppReturnStatus XmppTask::SendStanza(const XmlElement* stanza) {$/;"	f	class:buzz::XmppTask
SendStanzaError	talk/xmpp/xmppclient.cc	/^XmppClient::SendStanzaError(const XmlElement * old_stanza, XmppStanzaError xse, const std::string & message) {$/;"	f	class:buzz::XmppClient
SendStanzaError	talk/xmpp/xmppengineimpl_iq.cc	/^XmppEngineImpl::SendStanzaError(const XmlElement * element_original,$/;"	f	class:buzz::XmppEngineImpl
SendStanzaError	talk/xmpp/xmpptask.cc	/^XmppReturnStatus XmppTask::SendStanzaError(const XmlElement* element_original,$/;"	f	class:buzz::XmppTask
SendStun	talk/p2p/base/relayserver.cc	/^void RelayServerConnection::SendStun(const StunMessage& msg) {$/;"	f	class:cricket::RelayServerConnection
SendStun	talk/p2p/base/relayserver.cc	/^void SendStun(const StunMessage& msg,$/;"	f	namespace:cricket
SendStunError	talk/p2p/base/relayserver.cc	/^void RelayServerConnection::SendStunError($/;"	f	class:cricket::RelayServerConnection
SendStunError	talk/p2p/base/relayserver.cc	/^void SendStunError(const StunMessage& msg, talk_base::AsyncPacketSocket* socket,$/;"	f	namespace:cricket
SendTo	talk/base/asyncpacketsocket.cc	/^int AsyncPacketSocket::SendTo($/;"	f	class:talk_base::AsyncPacketSocket
SendTo	talk/base/asyncsocket.h	/^  virtual int SendTo(const void *pv, size_t cb, const SocketAddress& addr) { return socket_->SendTo(pv, cb, addr); }$/;"	f	class:talk_base::AsyncSocketAdapter
SendTo	talk/base/asynctcpsocket.cc	/^int AsyncTCPSocket::SendTo(const void *pv, size_t cb, const SocketAddress& addr) {$/;"	f	class:talk_base::AsyncTCPSocket
SendTo	talk/base/firewallsocketserver.cc	/^  virtual int SendTo(const void * pv, size_t cb, const SocketAddress& addr) {$/;"	f	class:talk_base::FirewallSocket
SendTo	talk/base/natsocketfactory.cc	/^  int SendTo(const void *pv, size_t cb, const SocketAddress& addr) {$/;"	f	class:talk_base::NATSocket
SendTo	talk/base/physicalsocketserver.cc	/^  int SendTo(const void *pv, size_t cb, const SocketAddress& addr) {$/;"	f	class:talk_base::PhysicalSocket
SendTo	talk/base/socketadapters.cc	/^LoggingSocketAdapter::SendTo(const void *pv, size_t cb,$/;"	f	class:talk_base::LoggingSocketAdapter
SendTo	talk/base/testclient.cc	/^void TestClient::SendTo($/;"	f	class:talk_base::TestClient
SendTo	talk/base/virtualsocketserver.cc	/^  int SendTo(const void *pv, size_t cb, const SocketAddress& addr) {$/;"	f	class:talk_base::VirtualSocket
SendTo	talk/base/win32socketserver.cc	/^Win32Socket::SendTo(const void *pv, size_t cb, $/;"	f	class:talk_base::Win32Socket
SendTo	talk/p2p/base/relayport.cc	/^int RelayEntry::SendTo(const void* data, size_t size,$/;"	f	class:cricket::RelayEntry
SendTo	talk/p2p/base/relayport.cc	/^int RelayPort::SendTo(const void* data, size_t size,$/;"	f	class:cricket::RelayPort
SendTo	talk/p2p/base/stunport.cc	/^int StunPort::SendTo($/;"	f	class:cricket::StunPort
SendTo	talk/p2p/base/tcpport.cc	/^int TCPPort::SendTo(const void* data, size_t size, $/;"	f	class:cricket::TCPPort
SendTo	talk/p2p/base/udpport.cc	/^int UDPPort::SendTo(const void* data, size_t size, $/;"	f	class:cricket::UDPPort
Sender	talk/base/virtualsocket_unittest.cc	/^  Sender(Thread* th, AsyncUDPSocket* s, uint32 rt)$/;"	f	struct:Sender
Sender	talk/base/virtualsocket_unittest.cc	/^struct Sender : public MessageHandler {$/;"	s	file:
ServerAddress	talk/p2p/base/relayport.cc	/^const ProtocolAddress * RelayPort::ServerAddress(size_t index) const {$/;"	f	class:cricket::RelayPort
ServerIndex	talk/p2p/base/relayport.cc	/^  size_t ServerIndex() const { return server_index_; }$/;"	f	class:cricket::RelayEntry
Session	talk/p2p/base/session.cc	/^Session::Session(SessionManager *session_manager, const std::string& name,$/;"	f	class:cricket::Session
Session	talk/p2p/base/session.h	/^class Session : public talk_base::MessageHandler, public sigslot::has_slots<> {$/;"	c	namespace:cricket
SessionClient	talk/p2p/base/sessionclient.h	/^class SessionClient {$/;"	c	namespace:cricket
SessionDescription	talk/p2p/base/sessiondescription.h	/^class SessionDescription {$/;"	c	namespace:cricket
SessionHandler	talk/p2p/base/session_unittest.cc	/^  SessionHandler(Session* s) : session(s) {$/;"	f	struct:SessionHandler
SessionHandler	talk/p2p/base/session_unittest.cc	/^struct SessionHandler : sigslot::has_slots<> {$/;"	s	file:
SessionID	talk/p2p/base/sessionid.h	/^  SessionID() : id_str_("0") {$/;"	f	class:cricket::SessionID
SessionID	talk/p2p/base/sessionid.h	/^  SessionID(const SessionID& sid) $/;"	f	class:cricket::SessionID
SessionID	talk/p2p/base/sessionid.h	/^  SessionID(const std::string& initiator, uint32 id)$/;"	f	class:cricket::SessionID
SessionID	talk/p2p/base/sessionid.h	/^class SessionID {$/;"	c	namespace:cricket
SessionList	talk/base/network.h	/^  typedef std::vector<NetworkSession*> SessionList;$/;"	t	class:talk_base::Network
SessionManager	talk/p2p/base/sessionmanager.cc	/^SessionManager::SessionManager(PortAllocator *allocator, $/;"	f	class:cricket::SessionManager
SessionManager	talk/p2p/base/sessionmanager.h	/^class SessionManager : public sigslot::has_slots<> {$/;"	c	namespace:cricket
SessionManagerHandler	talk/p2p/base/session_unittest.cc	/^  SessionManagerHandler(SessionManager* m, const std::string& u)$/;"	f	struct:SessionManagerHandler
SessionManagerHandler	talk/p2p/base/session_unittest.cc	/^struct SessionManagerHandler : sigslot::has_slots<> {$/;"	s	file:
SessionManagerTask	talk/p2p/client/sessionmanagertask.h	/^  SessionManagerTask(Task *parent, SessionManager *session_manager)$/;"	f	class:cricket::SessionManagerTask
SessionManagerTask	talk/p2p/client/sessionmanagertask.h	/^class SessionManagerTask : public buzz::XmppTask {$/;"	c	namespace:cricket
SessionMap	talk/p2p/base/sessionmanager.h	/^  typedef std::map<SessionID, Session *> SessionMap;$/;"	t	class:cricket::SessionManager
SessionSendTask	talk/p2p/client/sessionsendtask.h	/^  SessionSendTask(Task *parent, SessionManager *session_manager)$/;"	f	class:cricket::SessionSendTask
SessionSendTask	talk/p2p/client/sessionsendtask.h	/^class SessionSendTask : public buzz::XmppTask {$/;"	c	namespace:cricket
SessionSet	talk/session/fileshare/fileshare.h	/^  typedef std::set<cricket::Session*> SessionSet;$/;"	t	class:cricket::FileShareSessionClient
Set	talk/base/event.h	/^  void Set() {$/;"	f	class:talk_base::Event
SetApplicationName	talk/base/pathutils.cc	/^void SetApplicationName(const std::string& application) {$/;"	f	namespace:talk_base
SetAttr	talk/xmllite/xmlelement.cc	/^XmlElement::SetAttr(const QName & name, const std::string & value) {$/;"	f	class:buzz::XmlElement
SetAudioOptions	talk/session/phone/channelmanager.cc	/^void ChannelManager::SetAudioOptions(bool auto_gain_control, int wave_in_device,$/;"	f	class:cricket::ChannelManager
SetAudioOptions	talk/session/phone/gipslitemediaengine.cc	/^int GipsLiteMediaEngine::SetAudioOptions(int options) {$/;"	f	class:GipsLiteMediaEngine
SetAudioOptions	talk/session/phone/linphonemediaengine.cc	/^int LinphoneMediaEngine::SetAudioOptions(int options) {}$/;"	f	class:LinphoneMediaEngine
SetAudioOptions	talk/session/phone/phonesessionclient.h	/^  void SetAudioOptions(bool auto_gain_control, int wave_in_device,$/;"	f	class:cricket::PhoneSessionClient
SetAudioOptions_w	talk/session/phone/channelmanager.cc	/^void ChannelManager::SetAudioOptions_w(AudioOptions options) {$/;"	f	class:cricket::ChannelManager
SetBasename	talk/base/pathutils.cc	/^void Pathname::SetBasename(const std::string& basename) {$/;"	f	class:talk_base::Pathname
SetBit	talk/p2p/base/stun.cc	/^void StunUInt32Attribute::SetBit(int index, bool value) {$/;"	f	class:cricket::StunUInt32Attribute
SetBodyText	talk/xmllite/xmlelement.cc	/^XmlElement::SetBodyText(const std::string & text) {$/;"	f	class:buzz::XmlElement
SetByte	talk/p2p/base/stun.cc	/^void StunByteStringAttribute::SetByte(int index, uint8 value) {$/;"	f	class:cricket::StunByteStringAttribute
SetBytes	talk/p2p/base/stun.cc	/^void StunByteStringAttribute::SetBytes(char* bytes, uint16 length) {$/;"	f	class:cricket::StunByteStringAttribute
SetCodecs	talk/session/phone/gipslitemediaengine.cc	/^void GipsLiteMediaChannel::SetCodecs(const std::vector<Codec> &codecs) {$/;"	f	class:GipsLiteMediaChannel
SetCodecs	talk/session/phone/linphonemediaengine.cc	/^void LinphoneMediaChannel::SetCodecs(const std::vector<Codec> &codecs) {$/;"	f	class:LinphoneMediaChannel
SetConsole	talk/examples/call/callclient.h	/^  void SetConsole(Console *console) {console_ = console;}$/;"	f	class:CallClient
SetConsoleEcho	talk/examples/call/call_main.cc	/^void SetConsoleEcho(bool on) {$/;"	f
SetConsoleEcho	talk/examples/pcp/pcp_main.cc	/^void SetConsoleEcho(bool on) {$/;"	f
SetContents	talk/base/stream.cc	/^void MemoryStream::SetContents(const char* data, size_t length) { $/;"	f	class:talk_base::MemoryStream
SetCurrent	talk/base/thread.cc	/^void ThreadManager::SetCurrent(Thread *thread) {$/;"	f	class:talk_base::ThreadManager
SetDiagnosticMode	talk/base/logging.h	/^  static void SetDiagnosticMode(bool f) { is_diagnostic_mode_ = f; }$/;"	f	class:talk_base::LogMessage
SetError	talk/base/asyncpacketsocket.cc	/^void AsyncPacketSocket::SetError(int error) {$/;"	f	class:talk_base::AsyncPacketSocket
SetError	talk/base/asyncsocket.h	/^  virtual void SetError(int error) { return socket_->SetError(error); }$/;"	f	class:talk_base::AsyncSocketAdapter
SetError	talk/base/natsocketfactory.cc	/^  void SetError(int error) { socket_->SetError(error); }$/;"	f	class:talk_base::NATSocket
SetError	talk/base/physicalsocketserver.cc	/^  void SetError(int error) {$/;"	f	class:talk_base::PhysicalSocket
SetError	talk/base/virtualsocketserver.cc	/^  void SetError(int error) {$/;"	f	class:talk_base::VirtualSocket
SetError	talk/base/win32socketserver.cc	/^Win32Socket::SetError(int error) {$/;"	f	class:talk_base::Win32Socket
SetError	talk/p2p/base/session.cc	/^void Session::SetError(Error error) {$/;"	f	class:cricket::Session
SetErrorClass	talk/p2p/base/stun.h	/^  void SetErrorClass(uint8 eclass) { class_ = eclass; }$/;"	f	class:cricket::StunErrorCodeAttribute
SetErrorCode	talk/p2p/base/stun.cc	/^void StunErrorCodeAttribute::SetErrorCode(uint32 code) {$/;"	f	class:cricket::StunErrorCodeAttribute
SetExtension	talk/base/pathutils.cc	/^void Pathname::SetExtension(const std::string& extension) {$/;"	f	class:talk_base::Pathname
SetFamily	talk/p2p/base/stun.h	/^  void SetFamily(uint8 family) { family_ = family; }$/;"	f	class:cricket::StunAddressAttribute
SetFilename	talk/base/pathutils.cc	/^void Pathname::SetFilename(const std::string& filename) {$/;"	f	class:talk_base::Pathname
SetFocus	talk/session/phone/phonesessionclient.cc	/^void PhoneSessionClient::SetFocus(Call *call) {$/;"	f	class:cricket::PhoneSessionClient
SetFolder	talk/base/pathutils.cc	/^void Pathname::SetFolder(const std::string& folder) {$/;"	f	class:talk_base::Pathname
SetFolderDelimiter	talk/base/pathutils.cc	/^void Pathname::SetFolderDelimiter(char delimiter) {$/;"	f	class:talk_base::Pathname
SetIP	talk/base/socketaddress.cc	/^bool SocketAddress::SetIP(const std::string& hostname, bool use_dns) {$/;"	f	class:talk_base::SocketAddress
SetIP	talk/base/socketaddress.cc	/^void SocketAddress::SetIP(uint32 ip) {$/;"	f	class:talk_base::SocketAddress
SetIP	talk/p2p/base/stun.h	/^  void SetIP(uint32 ip) { ip_ = ip; }$/;"	f	class:cricket::StunAddressAttribute
SetIgnoreBadCert	talk/base/asynchttprequest.h	/^  void SetIgnoreBadCert(bool ignore) { ignore_bad_cert_ = ignore; }$/;"	f	class:talk_base::SslSocketFactory
SetImplementation	talk/p2p/base/transportchannelproxy.cc	/^void TransportChannelProxy::SetImplementation(TransportChannelImpl* impl) {$/;"	f	class:cricket::TransportChannelProxy
SetInterface	talk/session/phone/mediachannel.h	/^  void SetInterface(NetworkInterface *iface) {network_interface_ = iface;}$/;"	f	class:cricket::MediaChannel
SetLanguage	talk/xmpp/xmppengineimpl.h	/^  virtual void SetLanguage(const std::string & lang) {$/;"	f	class:buzz::XmppEngineImpl
SetLength	talk/p2p/base/stun.h	/^  void SetLength(uint16 length) { length_ = length; }$/;"	f	class:cricket::StunAttribute
SetLocalFolder	talk/session/fileshare/fileshare.h	/^  void SetLocalFolder(const std::string& folder) { local_folder_ = folder; }$/;"	f	class:cricket::FileShareSession
SetLogging	talk/base/asynchttprequest.h	/^  void SetLogging(talk_base::LoggingSeverity level, const std::string& label, $/;"	f	class:talk_base::SslSocketFactory
SetName	talk/xmllite/xmlelement.h	/^  void SetName(const QName& name) { name_ = name; }$/;"	f	class:buzz::XmlElement
SetNumber	talk/p2p/base/stun.h	/^  void SetNumber(uint8 number) { number_ = number; }$/;"	f	class:cricket::StunErrorCodeAttribute
SetOption	talk/base/asyncpacketsocket.cc	/^int AsyncPacketSocket::SetOption(Socket::Option opt, int value) {$/;"	f	class:talk_base::AsyncPacketSocket
SetOption	talk/base/asyncsocket.h	/^  virtual int SetOption(Option opt, int value) { return socket_->SetOption(opt, value); }$/;"	f	class:talk_base::AsyncSocketAdapter
SetOption	talk/base/natsocketfactory.cc	/^  virtual int SetOption(Option opt, int value) { return socket_->SetOption(opt, value); }$/;"	f	class:talk_base::NATSocket
SetOption	talk/base/physicalsocketserver.cc	/^  int SetOption(Option opt, int value) {$/;"	f	class:talk_base::PhysicalSocket
SetOption	talk/base/virtualsocketserver.cc	/^  int SetOption(Option opt, int value) {$/;"	f	class:talk_base::VirtualSocket
SetOption	talk/base/win32socketserver.cc	/^Win32Socket::SetOption(Option opt, int value) {$/;"	f	class:talk_base::Win32Socket
SetOption	talk/p2p/base/p2ptransportchannel.cc	/^int P2PTransportChannel::SetOption(talk_base::Socket::Option opt, int value) {$/;"	f	class:cricket::P2PTransportChannel
SetOption	talk/p2p/base/rawtransportchannel.cc	/^int RawTransportChannel::SetOption(talk_base::Socket::Option opt, int value) {$/;"	f	class:cricket::RawTransportChannel
SetOption	talk/p2p/base/relayport.cc	/^int RelayPort::SetOption(talk_base::Socket::Option opt, int value) {$/;"	f	class:cricket::RelayPort
SetOption	talk/p2p/base/stunport.cc	/^int StunPort::SetOption(talk_base::Socket::Option opt, int value) {$/;"	f	class:cricket::StunPort
SetOption	talk/p2p/base/tcpport.cc	/^int TCPPort::SetOption(talk_base::Socket::Option opt, int value) {$/;"	f	class:cricket::TCPPort
SetOption	talk/p2p/base/transportchannelproxy.cc	/^int TransportChannelProxy::SetOption(talk_base::Socket::Option opt, int value) {$/;"	f	class:cricket::TransportChannelProxy
SetOption	talk/p2p/base/udpport.cc	/^int UDPPort::SetOption(talk_base::Socket::Option opt, int value) {$/;"	f	class:cricket::UDPPort
SetOrganizationName	talk/base/pathutils.cc	/^void SetOrganizationName(const std::string& organization) {$/;"	f	namespace:talk_base
SetOutputHandler	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SetOutputHandler(XmppOutputHandler* output_handler) {$/;"	f	class:buzz::XmppEngineImpl
SetPathname	talk/base/pathutils.cc	/^void Pathname::SetPathname(const std::string &pathname) {$/;"	f	class:talk_base::Pathname
SetPlayout	talk/session/phone/gipslitemediaengine.cc	/^void GipsLiteMediaChannel::SetPlayout(bool playout) {$/;"	f	class:GipsLiteMediaChannel
SetPlayout	talk/session/phone/linphonemediaengine.cc	/^void LinphoneMediaChannel::SetPlayout(bool playout) {$/;"	f	class:LinphoneMediaChannel
SetPort	talk/base/physicalsocketserver.cc	49;"	d	file:
SetPort	talk/base/socketaddress.cc	/^void SocketAddress::SetPort(int port) {$/;"	f	class:talk_base::SocketAddress
SetPort	talk/base/socketaddress.cc	45;"	d	file:
SetPort	talk/base/socketaddress.h	36;"	d
SetPort	talk/base/winping.h	40;"	d
SetPort	talk/p2p/base/portallocator.h	34;"	d
SetPort	talk/p2p/base/rawtransportchannel.cc	/^void RawTransportChannel::SetPort(Port* port) {$/;"	f	class:cricket::RawTransportChannel
SetPort	talk/p2p/base/stun.h	/^  void SetPort(uint16 port) { port_ = port; }$/;"	f	class:cricket::StunAddressAttribute
SetPort	talk/session/phone/voicechannel.cc	35;"	d	file:
SetPosition	talk/base/stream.cc	/^bool FileStream::SetPosition(size_t position) {$/;"	f	class:talk_base::FileStream
SetPosition	talk/base/stream.cc	/^bool MemoryStream::SetPosition(size_t position) {$/;"	f	class:talk_base::MemoryStream
SetPotentialTransports	talk/p2p/base/session.cc	/^void Session::SetPotentialTransports(const std::string names[], size_t length) {$/;"	f	class:cricket::Session
SetPreallocateAddress	talk/p2p/base/stun.cc	/^void StunTransportPrefsAttribute::SetPreallocateAddress($/;"	f	class:cricket::StunTransportPrefsAttribute
SetPreferenceType	talk/p2p/base/stun.h	/^  void SetPreferenceType(uint8 prefs) { prefs_ = prefs; }$/;"	f	class:cricket::StunTransportPrefsAttribute
SetPriority	talk/base/signalthread.cc	/^void SignalThread::SetPriority(ThreadPriority priority) {$/;"	f	class:SignalThread
SetPriority	talk/base/thread.h	/^  void SetPriority(ThreadPriority priority) {$/;"	f	class:talk_base::Thread
SetPrompt	talk/examples/call/console.h	/^  void SetPrompt(const char *prompt) {$/;"	f	class:Console
SetPrompting	talk/examples/call/console.h	/^  void SetPrompting(bool prompting) {$/;"	f	class:Console
SetProxy	talk/base/asynchttprequest.h	/^  void SetProxy(const talk_base::ProxyInfo& proxy) { proxy_ = proxy; }$/;"	f	class:talk_base::SslSocketFactory
SetRandomSeed	talk/base/helpers.cc	/^void SetRandomSeed(unsigned long seed)$/;"	f	namespace:cricket
SetReady	talk/p2p/base/relayport.cc	/^void RelayPort::SetReady() {$/;"	f	class:cricket::RelayPort
SetReason	talk/p2p/base/stun.cc	/^void StunErrorCodeAttribute::SetReason(const std::string& reason) {$/;"	f	class:cricket::StunErrorCodeAttribute
SetRelayHosts	talk/p2p/client/httpportallocator.h	/^  void SetRelayHosts(const std::vector<std::string> &hosts) {relay_hosts_ = hosts;}$/;"	f	class:cricket::HttpPortAllocator
SetRelayToken	talk/p2p/client/httpportallocator.h	/^  void SetRelayToken(const std::string &relay) {relay_token_ = relay;}$/;"	f	class:cricket::HttpPortAllocator
SetRequestedResource	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SetRequestedResource(const std::string & resource) {$/;"	f	class:buzz::XmppEngineImpl
SetResolvedIP	talk/base/socketaddress.cc	/^void SocketAddress::SetResolvedIP(uint32 ip) {$/;"	f	class:talk_base::SocketAddress
SetSaslHandler	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SetSaslHandler(SaslHandler * sasl_handler) {$/;"	f	class:buzz::XmppEngineImpl
SetSend	talk/session/phone/gipslitemediaengine.cc	/^void GipsLiteMediaChannel::SetSend(bool send) {$/;"	f	class:GipsLiteMediaChannel
SetSend	talk/session/phone/linphonemediaengine.cc	/^void LinphoneMediaChannel::SetSend(bool send) {$/;"	f	class:LinphoneMediaChannel
SetSendCodec_w	talk/session/phone/voicechannel.cc	/^void VoiceChannel::SetSendCodec_w() {$/;"	f	class:cricket::VoiceChannel
SetServerIndex	talk/p2p/base/relayport.cc	/^  void SetServerIndex(size_t sindex) { server_index_ = sindex; }$/;"	f	class:cricket::RelayEntry
SetSessionHandler	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SetSessionHandler(XmppSessionHandler* session_handler) {$/;"	f	class:buzz::XmppEngineImpl
SetSoundDevices	talk/session/phone/gipslitemediaengine.cc	/^int GipsLiteMediaEngine::SetSoundDevices(int wave_in_device, int wave_out_device) {$/;"	f	class:GipsLiteMediaEngine
SetSoundDevices	talk/session/phone/linphonemediaengine.cc	/^int LinphoneMediaEngine::SetSoundDevices(int wave_in_device, int wave_out_device) {}$/;"	f	class:LinphoneMediaEngine
SetState	talk/base/network.cc	/^void Network::SetState(std::string str) {$/;"	f	class:talk_base::Network
SetState	talk/base/network.cc	/^void NetworkManager::SetState(std::string str) {$/;"	f	class:talk_base::NetworkManager
SetState	talk/p2p/base/session.cc	/^void Session::SetState(State state) {$/;"	f	class:cricket::Session
SetState	talk/session/fileshare/fileshare.cc	/^void FileShareSession::SetState(FileShareState state, bool prevent_close) {$/;"	f	class:cricket::FileShareSession
SetStunHosts	talk/p2p/client/httpportallocator.h	/^  void SetStunHosts(const std::vector<talk_base::SocketAddress> &hosts) {stun_hosts_ = hosts;}$/;"	f	class:cricket::HttpPortAllocator
SetText	talk/xmllite/xmlelement.cc	/^XmlText::SetText(const std::string & text) {$/;"	f	class:buzz::XmlText
SetThreadName	talk/base/thread.cc	/^void SetThreadName( DWORD dwThreadID, LPCSTR szThreadName)$/;"	f	namespace:talk_base
SetTimeout	talk/base/win32socketserver.cc	/^Win32Socket::SetTimeout(int ms) {$/;"	f	class:talk_base::Win32Socket
SetTlsServer	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SetTlsServer(const std::string & tls_server_hostname,$/;"	f	class:buzz::XmppEngineImpl
SetTransactionID	talk/p2p/base/stun.cc	/^void StunMessage::SetTransactionID(const std::string& str) {$/;"	f	class:cricket::StunMessage
SetTransport	talk/p2p/base/session.cc	/^void Session::SetTransport(Transport* transport) {$/;"	f	class:cricket::Session
SetTransports	talk/p2p/base/session_unittest.cc	/^  void SetTransports(bool p2p, bool raw) {$/;"	f	struct:MySessionClient
SetType	talk/p2p/base/stun.cc	/^void StunUInt16ListAttribute::SetType(int index, uint16 value) {$/;"	f	class:cricket::StunUInt16ListAttribute
SetType	talk/p2p/base/stun.h	/^  void SetType(StunMessageType type) { type_ = type; }$/;"	f	class:cricket::StunMessage
SetUseTls	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SetUseTls(bool useTls) {$/;"	f	class:buzz::XmppEngineImpl
SetUser	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SetUser(const Jid & jid) {$/;"	f	class:buzz::XmppEngineImpl
SetValue	talk/p2p/base/stun.h	/^  void SetValue(uint32 bits) { bits_ = bits; }$/;"	f	class:cricket::StunUInt32Attribute
SetWritable	talk/p2p/base/rawtransportchannel.cc	/^void RawTransportChannel::SetWritable() {$/;"	f	class:cricket::RawTransportChannel
SetupSSLContext	talk/base/openssladapter.cc	/^OpenSSLAdapter::SetupSSLContext() {$/;"	f	class:talk_base::OpenSSLAdapter
ShakeDelay	talk/p2p/client/basicportallocator.cc	/^int ShakeDelay() {$/;"	f	namespace:__anon12
Share	talk/session/fileshare/fileshare.cc	/^FileShareSession::Share(const buzz::Jid& jid, FileShareManifest* manifest) {$/;"	f	class:cricket::FileShareSession
Shift	talk/base/bytebuffer.cc	/^void ByteBuffer::Shift(size_t size) {$/;"	f	class:talk_base::ByteBuffer
ShouldSwitch	talk/p2p/base/p2ptransportchannel.cc	/^bool ShouldSwitch(cricket::Connection* a_conn, cricket::Connection* b_conn) {$/;"	f	namespace:__anon1
Show	talk/examples/login/status.h	/^  enum Show {$/;"	g	class:buzz::Status
ShowStatus	talk/examples/login/status.h	/^  std::string ShowStatus() const {$/;"	f	class:buzz::Status
Shutdown	talk/base/winfirewall.cc	/^WinFirewall::Shutdown() {$/;"	f	class:talk_base::WinFirewall
Shutdown	talk/p2p/base/pseudotcp.h	/^  enum Shutdown { SD_NONE, SD_GRACEFUL, SD_FORCEFUL } m_shutdown;$/;"	g	class:cricket::PseudoTcp
Signal	talk/base/physicalsocketserver.cc	/^  virtual void Signal() {$/;"	f	class:talk_base::EventDispatcher
SignalAddSession	talk/session/phone/call.h	/^  sigslot::signal2<Call *, Session *> SignalAddSession;$/;"	m	class:cricket::Call
SignalAddressError	talk/p2p/base/port.h	/^  sigslot::signal1<Port*> SignalAddressError;$/;"	m	class:cricket::Port
SignalAddressReady	talk/p2p/base/port.h	/^  sigslot::signal1<Port*> SignalAddressReady;$/;"	m	class:cricket::Port
SignalAudioMonitor	talk/session/phone/call.h	/^  sigslot::signal3<Call *, Session *, const AudioInfo&> SignalAudioMonitor;$/;"	m	class:cricket::Call
SignalAudioMonitor	talk/session/phone/voicechannel.h	/^  sigslot::signal2<VoiceChannel *, const AudioInfo&> SignalAudioMonitor;$/;"	m	class:cricket::VoiceChannel
SignalAuthDone	talk/xmpp/prexmppauth.h	/^  sigslot::signal0<> SignalAuthDone;$/;"	m	class:buzz::PreXmppAuth
SignalBound	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SignalBound(const Jid & fullJid) {$/;"	f	class:buzz::XmppEngineImpl
SignalCallCreate	talk/session/phone/phonesessionclient.h	/^  sigslot::signal1<Call *> SignalCallCreate;$/;"	m	class:cricket::PhoneSessionClient
SignalCallDestroy	talk/session/phone/phonesessionclient.h	/^  sigslot::signal1<Call *> SignalCallDestroy;$/;"	m	class:cricket::PhoneSessionClient
SignalCandidatesReady	talk/p2p/base/portallocator.h	/^  sigslot::signal2<PortAllocatorSession*, const std::vector<Candidate>&> SignalCandidatesReady;$/;"	m	class:cricket::PortAllocatorSession
SignalChannelClosed	talk/session/tunnel/pseudotcpchannel.h	/^  sigslot::signal1<PseudoTcpChannel*> SignalChannelClosed;$/;"	m	class:cricket::PseudoTcpChannel
SignalChannelGone	talk/p2p/base/session.h	/^  sigslot::signal2<Session*, const std::string&> SignalChannelGone;$/;"	m	class:cricket::Session
SignalChannelGone	talk/p2p/base/transport.h	/^  sigslot::signal2<Transport*, const std::string&> SignalChannelGone;$/;"	m	class:cricket::Transport
SignalChannelMessage	talk/p2p/base/transportchannelimpl.h	/^                   buzz::XmlElement*> SignalChannelMessage;$/;"	m	class:cricket::TransportChannelImpl
SignalClose	talk/base/asynctcpsocket.h	/^  sigslot::signal2<AsyncTCPSocket*,int> SignalClose;$/;"	m	class:talk_base::AsyncTCPSocket
SignalCloseEvent	talk/base/asyncfile.h	/^  sigslot::signal2<AsyncFile*,int> SignalCloseEvent;$/;"	m	class:talk_base::AsyncFile
SignalCloseEvent	talk/base/asyncsocket.h	/^  sigslot::signal2<AsyncSocket*,int> SignalCloseEvent; \/\/ closed$/;"	m	class:talk_base::AsyncSocket
SignalClosed	talk/base/streamutils.h	/^  sigslot::signal2<StreamRelay*, int> SignalClosed;$/;"	m	class:StreamRelay
SignalClosed	talk/xmpp/asyncsocket.h	/^  sigslot::signal0<> SignalClosed;$/;"	m	class:buzz::AsyncSocket
SignalConnect	talk/base/asynctcpsocket.h	/^  sigslot::signal1<AsyncTCPSocket*> SignalConnect;$/;"	m	class:talk_base::AsyncTCPSocket
SignalConnectEvent	talk/base/asyncsocket.h	/^  sigslot::signal1<AsyncSocket*> SignalConnectEvent; \/\/ connected$/;"	m	class:talk_base::AsyncSocket
SignalConnected	talk/xmpp/asyncsocket.h	/^  sigslot::signal0<> SignalConnected;$/;"	m	class:buzz::AsyncSocket
SignalConnecting	talk/p2p/base/transport.h	/^  sigslot::signal1<Transport*> SignalConnecting;$/;"	m	class:cricket::Transport
SignalConnectionClosed	talk/base/httpserver.h	/^  sigslot::signal3<HttpServer*, int, StreamInterface*> SignalConnectionClosed;$/;"	m	class:talk_base::HttpServer
SignalConnectionCreated	talk/p2p/base/port.h	/^  sigslot::signal2<Port*, Connection*> SignalConnectionCreated;$/;"	m	class:cricket::Port
SignalConnectionMonitor	talk/p2p/base/p2ptransportchannel.h	/^  sigslot::signal1<P2PTransportChannel*> SignalConnectionMonitor;$/;"	m	class:cricket::P2PTransportChannel
SignalConnectionMonitor	talk/session/phone/call.h	/^  sigslot::signal3<Call *, Session *, const std::vector<ConnectionInfo> &> SignalConnectionMonitor;$/;"	m	class:cricket::Call
SignalConnectionMonitor	talk/session/phone/voicechannel.h	/^      SignalConnectionMonitor;$/;"	m	class:cricket::VoiceChannel
SignalDestroyed	talk/p2p/base/port.h	/^  sigslot::signal1<Connection*> SignalDestroyed;$/;"	m	class:cricket::Connection
SignalDestroyed	talk/p2p/base/port.h	/^  sigslot::signal1<Port*> SignalDestroyed;$/;"	m	class:cricket::Port
SignalDestroyed	talk/p2p/base/transportchannel.h	/^  sigslot::signal1<TransportChannel*> SignalDestroyed;$/;"	m	class:cricket::TransportChannel
SignalDisconnected	talk/xmpp/xmppclient.h	/^  sigslot::signal0<> SignalDisconnected;$/;"	m	class:buzz::XmppClient
SignalDone	talk/p2p/client/sessionsendtask.h	/^  sigslot::signal1<SessionSendTask *> SignalDone;$/;"	m	class:cricket::SessionSendTask
SignalError	talk/p2p/base/session.h	/^  sigslot::signal2<Session *, Error> SignalError;$/;"	m	class:cricket::Session
SignalError	talk/xmpp/asyncsocket.h	/^  sigslot::signal0<> SignalError;$/;"	m	class:buzz::AsyncSocket
SignalError	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SignalError(Error errorCode, int subCode) {$/;"	f	class:buzz::XmppEngineImpl
SignalErrorMessage	talk/p2p/base/session.h	/^                   const buzz::XmlElement*> SignalErrorMessage;$/;"	m	class:cricket::Session
SignalEvent	talk/base/stream.h	/^  sigslot::signal3<StreamInterface*, int, int> SignalEvent;$/;"	m	class:talk_base::StreamInterface
SignalFileShareSessionCreate	talk/session/fileshare/fileshare.h	/^  sigslot::signal1<FileShareSession*> SignalFileShareSessionCreate;$/;"	m	class:cricket::FileShareSessionClient
SignalFileShareSessionDestroy	talk/session/fileshare/fileshare.h	/^  sigslot::signal1<FileShareSession*> SignalFileShareSessionDestroy;$/;"	m	class:cricket::FileShareSessionClient
SignalFocus	talk/session/phone/phonesessionclient.h	/^  sigslot::signal2<Call *, Call *> SignalFocus;$/;"	m	class:cricket::PhoneSessionClient
SignalHeaderAvailable	talk/base/httpclient.h	/^  sigslot::signal3<const HttpClient*,bool,size_t> SignalHeaderAvailable;$/;"	m	class:talk_base::HttpClient
SignalHttpClientClosed	talk/base/httpclient.h	/^  sigslot::signal2<HttpClient*,int> SignalHttpClientClosed;$/;"	m	class:talk_base::HttpClient
SignalHttpClientComplete	talk/base/httpclient.h	/^  sigslot::signal2<HttpClient*,int> SignalHttpClientComplete;$/;"	m	class:talk_base::HttpClient
SignalHttpRequest	talk/base/httpserver.h	/^  sigslot::signal2<HttpServer*, HttpTransaction*> SignalHttpRequest;$/;"	m	class:talk_base::HttpServer
SignalHttpRequestComplete	talk/base/httpserver.h	/^    SignalHttpRequestComplete;$/;"	m	class:talk_base::HttpServer
SignalIncomingTunnel	talk/session/tunnel/tunnelsessionclient.h	/^    SignalIncomingTunnel;$/;"	m	class:cricket::TunnelSessionClient
SignalInfoMessage	talk/p2p/base/session.h	/^  sigslot::signal2<Session*, const XmlElements&> SignalInfoMessage;$/;"	m	class:cricket::Session
SignalJingleInfo	talk/examples/login/jingleinfotask.h	/^                   const std::vector<talk_base::SocketAddress> &> SignalJingleInfo;$/;"	m	class:buzz::JingleInfoTask
SignalLogInput	talk/xmpp/xmppclient.h	/^  sigslot::signal2<const char *, int> SignalLogInput;$/;"	m	class:buzz::XmppClient
SignalLogOutput	talk/xmpp/xmppclient.h	/^  sigslot::signal2<const char *, int> SignalLogOutput;$/;"	m	class:buzz::XmppClient
SignalMediaMonitor	talk/session/phone/call.h	/^  sigslot::signal3<Call *, Session *, const MediaInfo&> SignalMediaMonitor;$/;"	m	class:cricket::Call
SignalMediaMonitor	talk/session/phone/mediachannel.h	/^  sigslot::signal2<MediaChannel *, const MediaInfo &> SignalMediaMonitor;$/;"	m	class:cricket::MediaChannel
SignalMediaMonitor	talk/session/phone/voicechannel.h	/^  sigslot::signal2<VoiceChannel *, const MediaInfo&> SignalMediaMonitor;$/;"	m	class:cricket::VoiceChannel
SignalNextEntry	talk/base/tarstream.h	/^  sigslot::signal2<const std::string&, size_t> SignalNextEntry;$/;"	m	class:talk_base::TarStream
SignalNextFile	talk/session/fileshare/fileshare.h	/^  sigslot::signal1<FileShareSession*> SignalNextFile;$/;"	m	class:cricket::FileShareSession
SignalOutgoingMessage	talk/p2p/base/session.h	/^  sigslot::signal2<Session *, const buzz::XmlElement*> SignalOutgoingMessage;$/;"	m	class:cricket::Session
SignalOutgoingMessage	talk/p2p/base/sessionmanager.h	/^  sigslot::signal1<const buzz::XmlElement*> SignalOutgoingMessage;$/;"	m	class:cricket::SessionManager
SignalPortReady	talk/p2p/base/portallocator.h	/^  sigslot::signal2<PortAllocatorSession*, Port*> SignalPortReady;$/;"	m	class:cricket::PortAllocatorSession
SignalRead	talk/xmpp/asyncsocket.h	/^  sigslot::signal0<> SignalRead;$/;"	m	class:buzz::AsyncSocket
SignalReadError	talk/p2p/base/port.h	/^  sigslot::signal2<Port*, int> SignalReadError;$/;"	m	class:cricket::Port
SignalReadEvent	talk/base/asyncfile.h	/^  sigslot::signal1<AsyncFile*> SignalReadEvent;$/;"	m	class:talk_base::AsyncFile
SignalReadEvent	talk/base/asyncsocket.h	/^  sigslot::signal1<AsyncSocket*> SignalReadEvent;  \/\/ ready to read$/;"	m	class:talk_base::AsyncSocket
SignalReadPacket	talk/base/asyncpacketsocket.h	/^  sigslot::signal4<const char*, size_t, const SocketAddress&, AsyncPacketSocket*> SignalReadPacket;$/;"	m	class:talk_base::AsyncPacketSocket
SignalReadPacket	talk/p2p/base/port.h	/^      SignalReadPacket;$/;"	m	class:cricket::Port
SignalReadPacket	talk/p2p/base/port.h	/^  sigslot::signal3<Connection*, const char*, size_t> SignalReadPacket;$/;"	m	class:cricket::Connection
SignalReadPacket	talk/p2p/base/transportchannel.h	/^  sigslot::signal3<TransportChannel*, const char*, size_t> SignalReadPacket;$/;"	m	class:cricket::TransportChannel
SignalReadableState	talk/p2p/base/transport.h	/^  sigslot::signal1<Transport*> SignalReadableState;$/;"	m	class:cricket::Transport
SignalReadableState	talk/p2p/base/transportchannel.h	/^  sigslot::signal1<TransportChannel*> SignalReadableState;$/;"	m	class:cricket::TransportChannel
SignalReceivedTerminateReason	talk/p2p/base/session.h	/^  sigslot::signal2<Session *, const std::string &> SignalReceivedTerminateReason;$/;"	m	class:cricket::Session
SignalReceivedTerminateReason	talk/session/phone/call.h	/^  sigslot::signal3<Call *, Session *, const std::string &> SignalReceivedTerminateReason;$/;"	m	class:cricket::Call
SignalRemoveSession	talk/session/phone/call.h	/^  sigslot::signal2<Call *, Session *> SignalRemoveSession;$/;"	m	class:cricket::Call
SignalRequestSignaling	talk/p2p/base/session.h	/^  sigslot::signal1<Session*> SignalRequestSignaling;$/;"	m	class:cricket::Session
SignalRequestSignaling	talk/p2p/base/sessionmanager.h	/^  sigslot::signal0<> SignalRequestSignaling;$/;"	m	class:cricket::SessionManager
SignalRequestSignaling	talk/p2p/base/transport.h	/^  sigslot::signal1<Transport*> SignalRequestSignaling;$/;"	m	class:cricket::Transport
SignalRequestSignaling	talk/p2p/base/transportchannelimpl.h	/^  sigslot::signal0<> SignalRequestSignaling;$/;"	m	class:cricket::TransportChannelImpl
SignalResampleImage	talk/session/fileshare/fileshare.h	/^  sigslot::signal4<std::string, int, int, talk_base::HttpTransaction*> SignalResampleImage;$/;"	m	class:cricket::FileShareSession
SignalRouteChange	talk/p2p/base/transportchannel.h	/^      SignalRouteChange;$/;"	m	class:cricket::TransportChannel
SignalSSLConnected	talk/xmpp/asyncsocket.h	/^  sigslot::signal0<> SignalSSLConnected;$/;"	m	class:buzz::AsyncSocket
SignalSendPacket	talk/p2p/base/stunrequest.h	/^  sigslot::signal3<const void*, size_t, StunRequest*> SignalSendPacket;$/;"	m	class:cricket::StunRequestManager
SignalSessionCreate	talk/p2p/base/sessionmanager.h	/^  sigslot::signal2<Session *, bool> SignalSessionCreate;$/;"	m	class:cricket::SessionManager
SignalSessionDestroy	talk/p2p/base/sessionmanager.h	/^  sigslot::signal1<Session *> SignalSessionDestroy;$/;"	m	class:cricket::SessionManager
SignalSessionError	talk/session/phone/call.h	/^  sigslot::signal3<Call *, Session *, Session::Error> SignalSessionError;$/;"	m	class:cricket::Call
SignalSessionState	talk/session/phone/call.h	/^  sigslot::signal3<Call *, Session *, Session::State> SignalSessionState;$/;"	m	class:cricket::Call
SignalSetupToCallVoicemail	talk/session/phone/call.h	/^  sigslot::signal0<> SignalSetupToCallVoicemail;$/;"	m	class:cricket::Call
SignalState	talk/p2p/base/session.h	/^  sigslot::signal2<Session *, State> SignalState;$/;"	m	class:cricket::Session
SignalState	talk/session/fileshare/fileshare.h	/^  sigslot::signal1<FileShareState> SignalState;$/;"	m	class:cricket::FileShareSession
SignalStateChange	talk/p2p/base/port.h	/^  sigslot::signal1<Connection*> SignalStateChange;$/;"	m	class:cricket::Connection
SignalStateChange	talk/xmpp/xmppclient.h	/^  sigslot::signal1<XmppEngine::State> SignalStateChange;$/;"	m	class:buzz::XmppClient
SignalStatusUpdate	talk/examples/login/presencepushtask.h	/^  sigslot::signal1<const Status &>SignalStatusUpdate;$/;"	m	class:buzz::PresencePushTask
SignalStreamError	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::SignalStreamError(const XmlElement * pelStreamError) {$/;"	f	class:buzz::XmppEngineImpl
SignalThread	talk/base/signalthread.cc	/^SignalThread::SignalThread()$/;"	f	class:SignalThread
SignalThread	talk/base/signalthread.h	/^class SignalThread : protected MessageHandler {$/;"	c	namespace:talk_base
SignalTimeout	talk/base/task.h	/^  sigslot::signal0<> SignalTimeout;$/;"	m	class:talk_base::Task
SignalTimeout	talk/p2p/base/relayserver.h	/^  sigslot::signal1<RelayServerBinding*> SignalTimeout;$/;"	m	class:cricket::RelayServerBinding
SignalTransportError	talk/p2p/base/transport.h	/^      SignalTransportError;$/;"	m	class:cricket::Transport
SignalTransportMessage	talk/p2p/base/transport.h	/^      SignalTransportMessage;$/;"	m	class:cricket::Transport
SignalUnknownAddress	talk/p2p/base/port.h	/^                   const std::string&> SignalUnknownAddress;$/;"	m	class:cricket::Port
SignalUpdate	talk/p2p/client/socketmonitor.h	/^                   const std::vector<ConnectionInfo> &> SignalUpdate;$/;"	m	class:cricket::SocketMonitor
SignalUpdate	talk/session/phone/audiomonitor.h	/^  sigslot::signal2<AudioMonitor*, const AudioInfo&> SignalUpdate;$/;"	m	class:cricket::AudioMonitor
SignalUpdateByteCount	talk/base/streamutils.h	/^  sigslot::signal1<size_t> SignalUpdateByteCount;$/;"	m	class:StreamCounter
SignalUpdateProgress	talk/session/fileshare/fileshare.h	/^  sigslot::signal1<FileShareSession*> SignalUpdateProgress;$/;"	m	class:cricket::FileShareSession
SignalWorkDone	talk/base/signalthread.h	/^  sigslot::signal1<SignalThread *> SignalWorkDone;$/;"	m	class:talk_base::SignalThread
SignalWritableState	talk/p2p/base/transport.h	/^  sigslot::signal1<Transport*> SignalWritableState;$/;"	m	class:cricket::Transport
SignalWritableState	talk/p2p/base/transportchannel.h	/^  sigslot::signal1<TransportChannel*> SignalWritableState;$/;"	m	class:cricket::TransportChannel
SignalWriteError	talk/p2p/base/port.h	/^  sigslot::signal2<Port*, int> SignalWriteError;$/;"	m	class:cricket::Port
SignalWriteEvent	talk/base/asyncfile.h	/^  sigslot::signal1<AsyncFile*> SignalWriteEvent;$/;"	m	class:talk_base::AsyncFile
SignalWriteEvent	talk/base/asyncsocket.h	/^  sigslot::signal1<AsyncSocket*> SignalWriteEvent; \/\/ ready to write$/;"	m	class:talk_base::AsyncSocket
Signaler	talk/base/physicalsocketserver.cc	/^  Signaler(PhysicalSocketServer* ss, bool* pf)$/;"	f	class:talk_base::Signaler
Signaler	talk/base/physicalsocketserver.cc	/^class Signaler : public EventDispatcher {$/;"	c	namespace:talk_base	file:
Size	talk/base/httpcommon.cc	/^  static size_t Size;$/;"	m	struct:talk_base::Enum	file:
Size	talk/p2p/base/stun.cc	/^size_t StunUInt16ListAttribute::Size() const {$/;"	f	class:cricket::StunUInt16ListAttribute
Size_	talk/base/socketaddress.cc	/^size_t SocketAddress::Size_() const {$/;"	f	class:talk_base::SocketAddress
SndCard	talk/third_party/mediastreamer/sndcard.h	/^typedef struct _SndCard SndCard;$/;"	t	typeref:struct:_SndCard
SndCardCloseFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef void (*SndCardCloseFunc)(struct _SndCard*);$/;"	t
SndCardCreateFilterFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef struct _MSFilter * (*SndCardCreateFilterFunc)(struct _SndCard *);	$/;"	t	typeref:struct:SndCardCreateFilterFunc
SndCardDestroyFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef void (*SndCardDestroyFunc)(struct _SndCard*);$/;"	t
SndCardIOFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef gint (*SndCardIOFunc)(struct _SndCard*,char *,int);$/;"	t
SndCardManager	talk/third_party/mediastreamer/sndcard.h	/^typedef struct _SndCardManager SndCardManager;$/;"	t	typeref:struct:_SndCardManager
SndCardMixerGetLevelFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef gint (*SndCardMixerGetLevelFunc)(struct _SndCard*,gint);$/;"	t
SndCardMixerSetLevelFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef void (*SndCardMixerSetLevelFunc)(struct _SndCard*,gint ,gint);$/;"	t
SndCardMixerSetRecSourceFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef void (*SndCardMixerSetRecSourceFunc)(struct _SndCard*,gint);	$/;"	t
SndCardOpenFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef int (*SndCardOpenFunc)(struct _SndCard*,int, int, int);$/;"	t
SndCardPollFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef gboolean (*SndCardPollFunc)(struct _SndCard*);$/;"	t
SndCardSetBlockingModeFunc	talk/third_party/mediastreamer/sndcard.h	/^typedef void (*SndCardSetBlockingModeFunc)(struct _SndCard*, gboolean );$/;"	t
Socket	talk/base/socket.h	/^  Socket() {}$/;"	f	class:talk_base::Socket
Socket	talk/base/socket.h	/^class Socket {$/;"	c	namespace:talk_base
SocketAddress	talk/base/socketaddress.cc	/^SocketAddress::SocketAddress() {$/;"	f	class:talk_base::SocketAddress
SocketAddress	talk/base/socketaddress.cc	/^SocketAddress::SocketAddress(const SocketAddress& addr) {$/;"	f	class:talk_base::SocketAddress
SocketAddress	talk/base/socketaddress.cc	/^SocketAddress::SocketAddress(const std::string& hostname, int port, bool use_dns) {$/;"	f	class:talk_base::SocketAddress
SocketAddress	talk/base/socketaddress.cc	/^SocketAddress::SocketAddress(uint32 ip, int port) {$/;"	f	class:talk_base::SocketAddress
SocketAddress	talk/base/socketaddress.h	/^class SocketAddress {$/;"	c	namespace:talk_base
SocketAddressPair	talk/base/socketaddresspair.cc	/^SocketAddressPair::SocketAddressPair($/;"	f	class:talk_base::SocketAddressPair
SocketAddressPair	talk/base/socketaddresspair.h	/^  SocketAddressPair() {}$/;"	f	class:talk_base::SocketAddressPair
SocketAddressPair	talk/base/socketaddresspair.h	/^class SocketAddressPair {$/;"	c	namespace:talk_base
SocketDispatcher	talk/base/physicalsocketserver.cc	/^  SocketDispatcher(PhysicalSocketServer *ss) : PhysicalSocket(ss) {$/;"	f	class:talk_base::SocketDispatcher
SocketDispatcher	talk/base/physicalsocketserver.cc	/^  SocketDispatcher(PhysicalSocketServer* ss) : PhysicalSocket(ss), id_(0), signal_close_(false) {$/;"	f	class:talk_base::SocketDispatcher
SocketDispatcher	talk/base/physicalsocketserver.cc	/^  SocketDispatcher(SOCKET s, PhysicalSocketServer *ss) : PhysicalSocket(ss, s) {$/;"	f	class:talk_base::SocketDispatcher
SocketDispatcher	talk/base/physicalsocketserver.cc	/^  SocketDispatcher(SOCKET s, PhysicalSocketServer* ss) : PhysicalSocket(ss, s), id_(0), signal_close_(false) {$/;"	f	class:talk_base::SocketDispatcher
SocketDispatcher	talk/base/physicalsocketserver.cc	/^class SocketDispatcher : public Dispatcher, public PhysicalSocket {$/;"	c	namespace:talk_base	file:
SocketFactory	talk/base/socketfactory.h	/^class SocketFactory {$/;"	c	namespace:talk_base
SocketList	talk/p2p/base/relayserver.h	/^  typedef std::vector<talk_base::AsyncPacketSocket*> SocketList;$/;"	t	class:cricket::RelayServer
SocketMonitor	talk/p2p/client/socketmonitor.cc	/^SocketMonitor::SocketMonitor(Session* session,$/;"	f	class:cricket::SocketMonitor
SocketMonitor	talk/p2p/client/socketmonitor.h	/^class SocketMonitor : public talk_base::MessageHandler, $/;"	c	namespace:cricket
SocketServer	talk/base/socketserver.h	/^class SocketServer : public SocketFactory {$/;"	c	namespace:talk_base
SocketStream	talk/base/socketstream.h	/^  SocketStream(AsyncSocket* socket) : socket_(NULL) {$/;"	f	class:talk_base::SocketStream
SocketStream	talk/base/socketstream.h	/^class SocketStream : public StreamInterface, public sigslot::has_slots<> {$/;"	c	namespace:talk_base
SocksState	talk/base/socketadapters.h	/^  enum SocksState { SS_HELLO, SS_AUTH, SS_CONNECT, SS_TUNNEL, SS_ERROR } state_;$/;"	g	class:talk_base::AsyncSocksProxySocket
Sort	talk/session/phone/phonesessionclient.h	/^  void Sort() { std::sort(codecs_.begin(), codecs_.end(), PreferenceSort()); }$/;"	f	class:cricket::PhoneSessionDescription
SortConnections	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::SortConnections() {$/;"	f	class:cricket::P2PTransportChannel
SslSocketFactory	talk/base/asynchttprequest.h	/^  SslSocketFactory(talk_base::SocketFactory * factory, const std::string &user_agent)$/;"	f	class:talk_base::SslSocketFactory
SslSocketFactory	talk/base/asynchttprequest.h	/^class SslSocketFactory : public talk_base::SocketFactory {$/;"	c	namespace:talk_base
Stanza	talk/xmpp/xmppengineimpl.h	/^    virtual void Stanza(const XmlElement * pelStanza)$/;"	f	class:buzz::XmppEngineImpl::StanzaParseHandler
StanzaHandlerVector	talk/xmpp/xmppengineimpl.h	/^  typedef STD_VECTOR(XmppStanzaHandler*) StanzaHandlerVector;$/;"	t	class:buzz::XmppEngineImpl
StanzaParseHandler	talk/xmpp/xmppengineimpl.h	/^    StanzaParseHandler(XmppEngineImpl * outer) : outer_(outer) {}$/;"	f	class:buzz::XmppEngineImpl::StanzaParseHandler
StanzaParseHandler	talk/xmpp/xmppengineimpl.h	/^  class StanzaParseHandler : public XmppStanzaParseHandler {$/;"	c	class:buzz::XmppEngineImpl
Start	talk/base/signalthread.cc	/^void SignalThread::Start() {$/;"	f	class:SignalThread
Start	talk/base/task.cc	/^void Task::Start() {$/;"	f	class:talk_base::Task
Start	talk/base/thread.cc	/^void Thread::Start() {$/;"	f	class:talk_base::Thread
Start	talk/p2p/base/port.cc	/^void Port::Start() {$/;"	f	class:cricket::Port
Start	talk/p2p/client/basicportallocator.cc	/^void AllocationSequence::Start() {$/;"	f	class:cricket::AllocationSequence
Start	talk/p2p/client/socketmonitor.cc	/^void SocketMonitor::Start(int milliseconds) {$/;"	f	class:cricket::SocketMonitor
Start	talk/session/phone/audiomonitor.cc	/^void AudioMonitor::Start(int milliseconds) {$/;"	f	class:cricket::AudioMonitor
StartAudioMonitor	talk/session/phone/call.cc	/^void Call::StartAudioMonitor(Session *session, int cms) {$/;"	f	class:cricket::Call
StartAudioMonitor	talk/session/phone/voicechannel.cc	/^void VoiceChannel::StartAudioMonitor(int cms) {$/;"	f	class:cricket::VoiceChannel
StartConnectionMonitor	talk/session/phone/call.cc	/^void Call::StartConnectionMonitor(Session *session, int cms) {$/;"	f	class:cricket::Call
StartConnectionMonitor	talk/session/phone/voicechannel.cc	/^void VoiceChannel::StartConnectionMonitor(int cms) {$/;"	f	class:cricket::VoiceChannel
StartConsole	talk/examples/call/console.cc	/^void Console::StartConsole() {$/;"	f	class:Console
StartElement	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::StartElement(XmlParseContext * pctx,$/;"	f	class:buzz::XmlBuilder
StartElement	talk/xmllite/xmlparser.cc	/^XmlParser::ParseContext::StartElement() {$/;"	f	class:buzz::XmlParser::ParseContext
StartElement	talk/xmpp/xmppstanzaparser.h	/^    virtual void StartElement(XmlParseContext * pctx,$/;"	f	class:buzz::XmppStanzaParser::ParseHandler
StartElementCallback	talk/xmllite/xmlparser.cc	/^StartElementCallback(void * userData, const char *name, const char **atts) {$/;"	f	namespace:buzz	file:
StartGetAllPorts	talk/p2p/base/session_unittest.cc	/^  virtual void StartGetAllPorts() { running_ = true; }$/;"	f	class:TestPortAllocatorSession
StartGetAllPorts	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::StartGetAllPorts() {$/;"	f	class:cricket::BasicPortAllocatorSession
StartMediaMonitor	talk/session/phone/gipslitemediaengine.h	/^  virtual void StartMediaMonitor(VoiceChannel *voice_channel, uint32 cms) {}$/;"	f	class:cricket::GipsLiteMediaChannel
StartMediaMonitor	talk/session/phone/linphonemediaengine.h	/^  virtual void StartMediaMonitor(VoiceChannel * voice_channel, uint32 cms) {}$/;"	f	class:cricket::LinphoneMediaChannel
StartMediaMonitor	talk/session/phone/voicechannel.cc	/^void VoiceChannel::StartMediaMonitor(int cms) {$/;"	f	class:cricket::VoiceChannel
StartNamespace	talk/xmllite/xmlparser.cc	/^XmlParser::ParseContext::StartNamespace(const char *prefix, const char *ns) {$/;"	f	class:buzz::XmlParser::ParseContext
StartPreXmppAuth	talk/examples/login/xmppauth.cc	/^void XmppAuth::StartPreXmppAuth(const buzz::Jid & jid,$/;"	f	class:XmppAuth
StartSSL	talk/base/openssladapter.cc	/^OpenSSLAdapter::StartSSL(const char* hostname, bool restartable) {$/;"	f	class:talk_base::OpenSSLAdapter
StartSSL	talk/base/schanneladapter.cc	/^SChannelAdapter::StartSSL(const char* hostname, bool restartable) {$/;"	f	class:talk_base::SChannelAdapter
StartSaslAuth	talk/xmpp/saslcookiemechanism.h	/^  virtual XmlElement * StartSaslAuth() {$/;"	f	class:buzz::SaslCookieMechanism
StartSaslAuth	talk/xmpp/saslmechanism.cc	/^SaslMechanism::StartSaslAuth() {$/;"	f	class:buzz::SaslMechanism
StartSaslAuth	talk/xmpp/saslplainmechanism.h	/^  virtual XmlElement * StartSaslAuth() {$/;"	f	class:buzz::SaslPlainMechanism
StartSession	talk/base/network.cc	/^void Network::StartSession(NetworkSession* session) {$/;"	f	class:talk_base::Network
StartStream	talk/xmpp/xmppengineimpl.h	/^    virtual void StartStream(const XmlElement * pelStream)$/;"	f	class:buzz::XmppEngineImpl::StanzaParseHandler
StartTask	talk/base/taskrunner.cc	/^void TaskRunner::StartTask(Task * task) {$/;"	f	class:talk_base::TaskRunner
StartTime	talk/base/time.cc	/^uint32 StartTime() {$/;"	f	namespace:talk_base
StartTls	talk/examples/login/xmppsocket.cc	/^bool XmppSocket::StartTls(const std::string & domainname) {$/;"	f	class:XmppSocket
StartTls	talk/xmpp/xmppclient.cc	/^XmppClient::Private::StartTls(const std::string & domain) {$/;"	f	class:buzz::XmppClient::Private
StartTls	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::StartTls(const std::string & domain) {$/;"	f	class:buzz::XmppEngineImpl
State	talk/base/httpbase.h	/^  enum State {$/;"	g	class:talk_base::HttpParser
State	talk/base/signalthread.h	/^  enum State { kInit, kRunning, kComplete, kStopping, kReleasing } state_;$/;"	g	class:talk_base::SignalThread
State	talk/p2p/base/pseudotcp.h	/^  TcpState State() const { return m_state; }$/;"	f	class:cricket::PseudoTcp
State	talk/p2p/base/session.h	/^  enum State {$/;"	g	class:cricket::Session
State	talk/xmpp/asyncsocket.h	/^  enum State {$/;"	g	class:buzz::AsyncSocket
State	talk/xmpp/xmppengine.h	/^  enum State {$/;"	g	class:buzz::XmppEngine
Status	talk/base/winping.cc	/^    ULONG   Status;             \/\/ Reply IP_STATUS$/;"	m	struct:talk_base::icmp_echo_reply	file:
Status	talk/examples/login/status.h	/^  Status() :$/;"	f	class:buzz::Status
Status	talk/examples/login/status.h	/^class Status {$/;"	c	namespace:buzz
Step	talk/base/task.cc	/^void Task::Step() {$/;"	f	class:talk_base::Task
Stop	talk/base/messagequeue.cc	/^void MessageQueue::Stop() {$/;"	f	class:talk_base::MessageQueue
Stop	talk/base/task.cc	/^void Task::Stop() {$/;"	f	class:talk_base::Task
Stop	talk/base/thread.cc	/^void Thread::Stop() {$/;"	f	class:talk_base::Thread
Stop	talk/p2p/client/basicportallocator.cc	/^void AllocationSequence::Stop() {$/;"	f	class:cricket::AllocationSequence
Stop	talk/p2p/client/socketmonitor.cc	/^void SocketMonitor::Stop() {$/;"	f	class:cricket::SocketMonitor
Stop	talk/session/phone/audiomonitor.cc	/^void AudioMonitor::Stop() {$/;"	f	class:cricket::AudioMonitor
Stop	talk/xmpp/xmpptask.cc	/^void XmppTask::Stop() {$/;"	f	class:buzz::XmppTask
StopAudioMonitor	talk/session/phone/call.cc	/^void Call::StopAudioMonitor(Session *session) {$/;"	f	class:cricket::Call
StopAudioMonitor	talk/session/phone/voicechannel.cc	/^void VoiceChannel::StopAudioMonitor() {$/;"	f	class:cricket::VoiceChannel
StopConnectionMonitor	talk/session/phone/call.cc	/^void Call::StopConnectionMonitor(Session *session) {$/;"	f	class:cricket::Call
StopConnectionMonitor	talk/session/phone/voicechannel.cc	/^void VoiceChannel::StopConnectionMonitor() {$/;"	f	class:cricket::VoiceChannel
StopGetAllPorts	talk/p2p/base/session_unittest.cc	/^  virtual void StopGetAllPorts() { running_ = false; }$/;"	f	class:TestPortAllocatorSession
StopGetAllPorts	talk/p2p/client/basicportallocator.cc	/^void BasicPortAllocatorSession::StopGetAllPorts() {$/;"	f	class:cricket::BasicPortAllocatorSession
StopImpl	talk/xmpp/xmpptask.cc	/^void XmppTask::StopImpl() {$/;"	f	class:buzz::XmppTask
StopMediaMonitor	talk/session/phone/gipslitemediaengine.h	/^  virtual void StopMediaMonitor() {}$/;"	f	class:cricket::GipsLiteMediaChannel
StopMediaMonitor	talk/session/phone/linphonemediaengine.h	/^  virtual void StopMediaMonitor() {}$/;"	f	class:cricket::LinphoneMediaChannel
StopMediaMonitor	talk/session/phone/voicechannel.cc	/^void VoiceChannel::StopMediaMonitor() {$/;"	f	class:cricket::VoiceChannel
StopSession	talk/base/network.cc	/^void Network::StopSession(NetworkSession* session) {$/;"	f	class:talk_base::Network
Str	talk/xmllite/xmlelement.cc	/^XmlElement::Str() const {$/;"	f	class:buzz::XmlElement
Str	talk/xmpp/jid.cc	/^std::string Jid::Str() const {$/;"	f	class:buzz::Jid
StrMap	talk/base/network.cc	/^typedef std::map<std::string,std::string> StrMap;$/;"	t	namespace:__anon24	file:
StreamAdapterInterface	talk/base/stream.h	/^  explicit StreamAdapterInterface(StreamInterface* stream) {$/;"	f	class:talk_base::StreamAdapterInterface
StreamAdapterInterface	talk/base/stream.h	/^class StreamAdapterInterface : public StreamInterface,$/;"	c	namespace:talk_base
StreamCache	talk/base/socketpool.cc	/^StreamCache::StreamCache(StreamPool* pool) : pool_(pool) {$/;"	f	class:talk_base::StreamCache
StreamCache	talk/base/socketpool.h	/^class StreamCache : public StreamPool, public sigslot::has_slots<> {$/;"	c	namespace:talk_base
StreamCounter	talk/base/streamutils.cc	/^StreamCounter::StreamCounter(talk_base::StreamInterface* stream)$/;"	f	class:StreamCounter
StreamCounter	talk/base/streamutils.h	/^class StreamCounter : public talk_base::StreamAdapterInterface {$/;"	c
StreamEvent	talk/base/stream.h	/^enum StreamEvent { SE_OPEN = 1, SE_READ = 2, SE_WRITE = 4, SE_CLOSE = 8 };$/;"	g	namespace:talk_base
StreamInterface	talk/base/stream.h	/^  StreamInterface() { }$/;"	f	class:talk_base::StreamInterface
StreamInterface	talk/base/stream.h	/^class StreamInterface {$/;"	c	namespace:talk_base
StreamList	talk/base/socketpool.h	/^  typedef std::deque<LoggingAdapter*> StreamList;$/;"	t	class:talk_base::LoggingPoolAdapter
StreamPool	talk/base/socketpool.h	/^class StreamPool {$/;"	c	namespace:talk_base
StreamRelay	talk/base/streamutils.cc	/^StreamRelay::StreamRelay(talk_base::StreamInterface* s1, $/;"	f	class:StreamRelay
StreamRelay	talk/base/streamutils.h	/^class StreamRelay : public sigslot::has_slots<> {$/;"	c
StreamResult	talk/base/stream.h	/^enum StreamResult { SR_ERROR, SR_SUCCESS, SR_BLOCK, SR_EOS };$/;"	g	namespace:talk_base
StreamState	talk/base/stream.h	/^enum StreamState { SS_CLOSED, SS_OPENING, SS_OPEN };$/;"	g	namespace:talk_base
StreamTap	talk/base/stream.cc	/^StreamTap::StreamTap(StreamInterface* stream, StreamInterface* tap)$/;"	f	class:talk_base::StreamTap
StreamTap	talk/base/stream.h	/^class StreamTap : public StreamAdapterInterface {$/;"	c	namespace:talk_base
StringMap	talk/base/proxydetect.cc	/^struct StringMap {$/;"	s	file:
StringMap	talk/p2p/client/httpportallocator.cc	/^typedef std::map<std::string,std::string> StringMap;$/;"	t	namespace:__anon13	file:
StringStream	talk/base/stream.cc	/^StringStream::StringStream(const std::string& str)$/;"	f	class:talk_base::StringStream
StringStream	talk/base/stream.cc	/^StringStream::StringStream(std::string& str)$/;"	f	class:talk_base::StringStream
StringStream	talk/base/stream.h	/^class StringStream : public StreamInterface {$/;"	c	namespace:talk_base
StringToIP	talk/base/socketaddress.cc	/^uint32 SocketAddress::StringToIP(const std::string& hostname, bool use_dns) {$/;"	f	class:talk_base::SocketAddress
StringToProto	talk/p2p/base/port.cc	/^bool StringToProto(const char * value, ProtocolType& proto) {$/;"	f	namespace:cricket
StunAddressAttribute	talk/p2p/base/stun.cc	/^StunAddressAttribute::StunAddressAttribute(uint16 type)$/;"	f	class:cricket::StunAddressAttribute
StunAddressAttribute	talk/p2p/base/stun.h	/^class StunAddressAttribute : public StunAttribute {$/;"	c	namespace:cricket
StunAttribute	talk/p2p/base/stun.cc	/^StunAttribute::StunAttribute(uint16 type, uint16 length)$/;"	f	class:cricket::StunAttribute
StunAttribute	talk/p2p/base/stun.h	/^class StunAttribute {$/;"	c	namespace:cricket
StunAttributeType	talk/p2p/base/stun.h	/^enum StunAttributeType {$/;"	g	namespace:cricket
StunByteStringAttribute	talk/p2p/base/stun.cc	/^StunByteStringAttribute::StunByteStringAttribute(uint16 type, uint16 length)$/;"	f	class:cricket::StunByteStringAttribute
StunByteStringAttribute	talk/p2p/base/stun.h	/^class StunByteStringAttribute : public StunAttribute {$/;"	c	namespace:cricket
StunErrorCodeAttribute	talk/p2p/base/stun.cc	/^StunErrorCodeAttribute::StunErrorCodeAttribute(uint16 type, uint16 length)$/;"	f	class:cricket::StunErrorCodeAttribute
StunErrorCodeAttribute	talk/p2p/base/stun.h	/^class StunErrorCodeAttribute : public StunAttribute {$/;"	c	namespace:cricket
StunErrorCodes	talk/p2p/base/stun.h	/^enum StunErrorCodes {$/;"	g	namespace:cricket
StunMessage	talk/p2p/base/stun.cc	/^StunMessage::StunMessage() : type_(0), length_(0),$/;"	f	class:cricket::StunMessage
StunMessage	talk/p2p/base/stun.h	/^class StunMessage {$/;"	c	namespace:cricket
StunMessageType	talk/p2p/base/stun.h	/^enum StunMessageType {$/;"	g	namespace:cricket
StunPort	talk/p2p/base/stunport.cc	/^StunPort::StunPort(talk_base::Thread* thread, talk_base::SocketFactory* factory, $/;"	f	class:cricket::StunPort
StunPort	talk/p2p/base/stunport.h	/^class StunPort : public UDPPort {$/;"	c	namespace:cricket
StunPortBindingRequest	talk/p2p/base/stunport.cc	/^  StunPortBindingRequest(StunPort* port, bool keep_alive,$/;"	f	class:cricket::StunPortBindingRequest
StunPortBindingRequest	talk/p2p/base/stunport.cc	/^class StunPortBindingRequest : public StunRequest {$/;"	c	namespace:cricket	file:
StunRequest	talk/p2p/base/stunrequest.cc	/^StunRequest::StunRequest()$/;"	f	class:cricket::StunRequest
StunRequest	talk/p2p/base/stunrequest.cc	/^StunRequest::StunRequest(StunMessage* request)$/;"	f	class:cricket::StunRequest
StunRequest	talk/p2p/base/stunrequest.h	/^class StunRequest : public talk_base::MessageHandler {$/;"	c	namespace:cricket
StunRequestManager	talk/p2p/base/stunrequest.cc	/^StunRequestManager::StunRequestManager(talk_base::Thread* thread) $/;"	f	class:cricket::StunRequestManager
StunRequestManager	talk/p2p/base/stunrequest.h	/^class StunRequestManager {$/;"	c	namespace:cricket
StunServer	talk/p2p/base/stunserver.cc	/^StunServer::StunServer(talk_base::AsyncUDPSocket* socket) : socket_(socket) {$/;"	f	class:cricket::StunServer
StunServer	talk/p2p/base/stunserver.h	/^class StunServer : public sigslot::has_slots<> {$/;"	c	namespace:cricket
StunTransportPrefsAttribute	talk/p2p/base/stun.cc	/^StunTransportPrefsAttribute::StunTransportPrefsAttribute($/;"	f	class:cricket::StunTransportPrefsAttribute
StunTransportPrefsAttribute	talk/p2p/base/stun.h	/^class StunTransportPrefsAttribute : public StunAttribute {$/;"	c	namespace:cricket
StunUInt16ListAttribute	talk/p2p/base/stun.cc	/^StunUInt16ListAttribute::StunUInt16ListAttribute(uint16 type, uint16 length)$/;"	f	class:cricket::StunUInt16ListAttribute
StunUInt16ListAttribute	talk/p2p/base/stun.h	/^class StunUInt16ListAttribute : public StunAttribute {$/;"	c	namespace:cricket
StunUInt32Attribute	talk/p2p/base/stun.cc	/^StunUInt32Attribute::StunUInt32Attribute(uint16 type)$/;"	f	class:cricket::StunUInt32Attribute
StunUInt32Attribute	talk/p2p/base/stun.h	/^class StunUInt32Attribute : public StunAttribute {$/;"	c	namespace:cricket
SuggestPrefix	talk/xmllite/xmlnsstack.cc	/^static std::string SuggestPrefix(const std::string & ns) {$/;"	f	namespace:buzz	file:
SupportsProtocol	talk/p2p/client/basicportallocator.cc	/^bool PortConfiguration::SupportsProtocol($/;"	f	class:cricket::PortConfiguration
SuspendTimeout	talk/base/task.cc	/^void Task::SuspendTimeout() {$/;"	f	class:talk_base::Task
SwitchBestConnectionTo	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::SwitchBestConnectionTo(Connection* conn) {$/;"	f	class:cricket::P2PTransportChannel
SymmetricNAT	talk/base/nattypes.cc	/^class SymmetricNAT : public NAT {$/;"	c	namespace:talk_base	file:
TAKL_BASE_BASICDEFS_H__	talk/base/basicdefs.h	29;"	d
TALK_APP_STREAMUTILS_H__	talk/base/streamutils.h	29;"	d
TALK_APP_WIN32_FILESHARE_H__	talk/session/fileshare/fileshare.h	2;"	d
TALK_APP_WIN32_TARSTREAM_H__	talk/base/tarstream.h	2;"	d
TALK_BASE_ASYNCFILE_H__	talk/base/asyncfile.h	29;"	d
TALK_BASE_ASYNCPACKETSOCKET_H__	talk/base/asyncpacketsocket.h	29;"	d
TALK_BASE_ASYNCSOCKET_H__	talk/base/asyncsocket.h	29;"	d
TALK_BASE_ASYNCTCPSOCKET_H__	talk/base/asynctcpsocket.h	29;"	d
TALK_BASE_ASYNCUDPSOCKET_H__	talk/base/asyncudpsocket.h	29;"	d
TALK_BASE_BASE64_H__	talk/base/base64.h	13;"	d
TALK_BASE_BASICTYPES_H__	talk/base/basictypes.h	29;"	d
TALK_BASE_BYTEBUFFER_H__	talk/base/bytebuffer.h	29;"	d
TALK_BASE_BYTEORDER_H__	talk/base/byteorder.h	29;"	d
TALK_BASE_COMMON_H__	talk/base/common.h	29;"	d
TALK_BASE_CRITICALSECTION_H__	talk/base/criticalsection.h	29;"	d
TALK_BASE_DISKCACHESTD_H__	talk/base/diskcachestd.h	11;"	d
TALK_BASE_DISKCACHEWIN32_H__	talk/base/diskcache_win32.h	11;"	d
TALK_BASE_DISKCACHE_H__	talk/base/diskcache.h	29;"	d
TALK_BASE_EVENT_H__	talk/base/event.h	29;"	d
TALK_BASE_FILEUTILS_H__	talk/base/fileutils.h	29;"	d
TALK_BASE_FIREWALLSOCKETSERVER_H__	talk/base/firewallsocketserver.h	29;"	d
TALK_BASE_HOST_H__	talk/base/host.h	29;"	d
TALK_BASE_HTTPBASE_H__	talk/base/httpbase.h	29;"	d
TALK_BASE_HTTPCLIENT_H__	talk/base/httpclient.h	29;"	d
TALK_BASE_HTTPCOMMON_H__	talk/base/httpcommon.h	29;"	d
TALK_BASE_HTTPCOMMON_INL_H__	talk/base/httpcommon-inl.h	29;"	d
TALK_BASE_HTTPSERVER_H__	talk/base/httpserver.h	29;"	d
TALK_BASE_LINKED_PTR_H__	talk/base/linked_ptr.h	11;"	d
TALK_BASE_LOGGING_H__	talk/base/logging.h	39;"	d
TALK_BASE_MD5_H__	talk/base/md5.h	19;"	d
TALK_BASE_MESSAGEQUEUE_H__	talk/base/messagequeue.h	29;"	d
TALK_BASE_NATSERVER_H__	talk/base/natserver.h	29;"	d
TALK_BASE_NATSOCKETFACTORY_H__	talk/base/natsocketfactory.h	29;"	d
TALK_BASE_NATTYPE_H__	talk/base/nattypes.h	29;"	d
TALK_BASE_NETWORK_H__	talk/base/network.h	29;"	d
TALK_BASE_OPENSSLADAPTER_H__	talk/base/openssladapter.h	29;"	d
TALK_BASE_PATHUTILS_H__	talk/base/pathutils.h	29;"	d
TALK_BASE_PHYSICALSOCKETSERVER_H__	talk/base/physicalsocketserver.h	29;"	d
TALK_BASE_PROXYINFO_H__	talk/base/proxyinfo.h	29;"	d
TALK_BASE_SCHANNELADAPTER_H__	talk/base/schanneladapter.h	29;"	d
TALK_BASE_SCOPED_PTR_H__	talk/base/scoped_ptr.h	26;"	d
TALK_BASE_SEC_BUFFER_H__	talk/base/sec_buffer.h	31;"	d
TALK_BASE_SIGSLOT_H__	talk/base/sigslot.h	79;"	d
TALK_BASE_SOCKETADAPTERS_H__	talk/base/socketadapters.h	29;"	d
TALK_BASE_SOCKETADDRESSPAIR_H__	talk/base/socketaddresspair.h	29;"	d
TALK_BASE_SOCKETADDRESS_H__	talk/base/socketaddress.h	29;"	d
TALK_BASE_SOCKETFACTORY_H__	talk/base/socketfactory.h	29;"	d
TALK_BASE_SOCKETPOOL_H__	talk/base/socketpool.h	29;"	d
TALK_BASE_SOCKETSERVER_H__	talk/base/socketserver.h	29;"	d
TALK_BASE_SOCKET_H__	talk/base/socket.h	29;"	d
TALK_BASE_SOCKET_STREAM_H__	talk/base/socketstream.h	29;"	d
TALK_BASE_SSLADAPTER_H__	talk/base/ssladapter.h	29;"	d
TALK_BASE_STL_DECL_H__	talk/base/stl_decl.h	29;"	d
TALK_BASE_STREAM_H__	talk/base/stream.h	29;"	d
TALK_BASE_STRINGDIGEST_H__	talk/base/stringdigest.h	30;"	d
TALK_BASE_STRINGENCODE_H__	talk/base/stringencode.h	29;"	d
TALK_BASE_STRINGUTILS_H__	talk/base/stringutils.h	29;"	d
TALK_BASE_TASKRUNNER_H__	talk/base/taskrunner.h	29;"	d
TALK_BASE_TASK_H__	talk/base/task.h	29;"	d
TALK_BASE_TESTCLIENT_H__	talk/base/testclient.h	29;"	d
TALK_BASE_THREAD_H__	talk/base/thread.h	29;"	d
TALK_BASE_TIME_H__	talk/base/time.h	29;"	d
TALK_BASE_VIRTUALSOCKETSERVER_H__	talk/base/virtualsocketserver.h	29;"	d
TALK_BASE_WIN32SOCKETSERVER_H__	talk/base/win32socketserver.h	29;"	d
TALK_BASE_WIN32WINDOW_H__	talk/base/win32window.h	29;"	d
TALK_BASE_WIN32_H__	talk/base/win32.h	29;"	d
TALK_BASE_WINFIREWALL_H__	talk/base/winfirewall.h	29;"	d
TALK_BASE_WINPING_H__	talk/base/winping.h	29;"	d
TALK_SESSION_PHONE_GIPSLITEMEDIAENGINE_H_	talk/session/phone/gipslitemediaengine.h	31;"	d
TALK_SESSION_PHONE_LINPHONEMEDIAENGINE_H_	talk/session/phone/linphonemediaengine.h	23;"	d
TALK_SESSION_PHONE_MEDIACHANNEL_H_	talk/session/phone/mediachannel.h	29;"	d
TALK_SESSION_PHONE_MEDIAENGINE_H_	talk/session/phone/mediaengine.h	32;"	d
TALK_XMLLITE_CONSTANTS_H_	talk/xmllite/xmlconstants.h	35;"	d
TAR	Makefile	/^TAR      = tar -cf$/;"	m
TARGET	Makefile	/^TARGET   = libjingle.a$/;"	m
TCPConnection	talk/p2p/base/tcpport.cc	/^TCPConnection::TCPConnection(TCPPort* port, const Candidate& candidate, $/;"	f	class:cricket::TCPConnection
TCPConnection	talk/p2p/base/tcpport.h	/^class TCPConnection : public Connection {$/;"	c	namespace:cricket
TCPPort	talk/p2p/base/tcpport.cc	/^TCPPort::TCPPort(talk_base::Thread* thread, talk_base::SocketFactory* factory, $/;"	f	class:cricket::TCPPort
TCPPort	talk/p2p/base/tcpport.h	/^class TCPPort : public Port {$/;"	c	namespace:cricket
TCP_CLOSED	talk/p2p/base/pseudotcp.h	/^  enum TcpState { TCP_LISTEN, TCP_SYN_SENT, TCP_SYN_RECEIVED, TCP_ESTABLISHED, TCP_CLOSED };$/;"	e	enum:cricket::PseudoTcp::TcpState
TCP_ESTABLISHED	talk/p2p/base/pseudotcp.h	/^  enum TcpState { TCP_LISTEN, TCP_SYN_SENT, TCP_SYN_RECEIVED, TCP_ESTABLISHED, TCP_CLOSED };$/;"	e	enum:cricket::PseudoTcp::TcpState
TCP_LISTEN	talk/p2p/base/pseudotcp.h	/^  enum TcpState { TCP_LISTEN, TCP_SYN_SENT, TCP_SYN_RECEIVED, TCP_ESTABLISHED, TCP_CLOSED };$/;"	e	enum:cricket::PseudoTcp::TcpState
TCP_SYN_RECEIVED	talk/p2p/base/pseudotcp.h	/^  enum TcpState { TCP_LISTEN, TCP_SYN_SENT, TCP_SYN_RECEIVED, TCP_ESTABLISHED, TCP_CLOSED };$/;"	e	enum:cricket::PseudoTcp::TcpState
TCP_SYN_SENT	talk/p2p/base/pseudotcp.h	/^  enum TcpState { TCP_LISTEN, TCP_SYN_SENT, TCP_SYN_RECEIVED, TCP_ESTABLISHED, TCP_CLOSED };$/;"	e	enum:cricket::PseudoTcp::TcpState
TEMPLATE_FUNCTION	talk/base/linked_ptr.h	24;"	d
TESTLIBS	talk/p2p/base/Makefile	/^TESTLIBS = ..\/..\/base\/libcrickettest.la$/;"	m
TEST_DIGEST	talk/base/httpcommon.cc	570;"	d	file:
TEST_ORDER	talk/base/autodetectproxy.cc	/^const talk_base::ProxyType TEST_ORDER[] = {$/;"	v
THREADNAME_INFO	talk/base/thread.cc	/^} THREADNAME_INFO;$/;"	t	namespace:talk_base	typeref:struct:talk_base::tagTHREADNAME_INFO	file:
THREAD_ID	talk/base/ssladapter.cc	59;"	d	file:
THREAD_ID	talk/base/ssladapter.cc	68;"	d	file:
TIMEOUT	talk/p2p/client/httpportallocator.cc	/^const int TIMEOUT = 5 * 1000; \/\/ 5 seconds$/;"	v
TLABEL	talk/base/logging.h	69;"	d
TRACK	talk/session/phone/gipslitemediaengine.cc	42;"	d	file:
TRACK_ARRAY_ALLOC_PROBLEM	talk/xmpp/xmppengineimpl.cc	28;"	d	file:
TRACK_OWNER	talk/base/criticalsection.h	44;"	d
TRACK_OWNER	talk/base/criticalsection.h	46;"	d
TRANSPARENT_CACHE_NAMES	talk/base/diskcache.cc	44;"	d	file:
TRANSPARENT_CACHE_NAMES	talk/base/diskcache.cc	46;"	d	file:
TRUESPEECH_DLL	talk/third_party/mediastreamer/mstruespeechencoder.h	30;"	d
TRUESPEECH_FORMAT_TAG	talk/third_party/mediastreamer/mstruespeechencoder.h	29;"	d
T_FILE	talk/session/fileshare/fileshare.h	/^  enum Type { T_FILE, T_IMAGE, T_FOLDER };$/;"	e	enum:cricket::FileShareManifest::Type
T_FOLDER	talk/session/fileshare/fileshare.h	/^  enum Type { T_FILE, T_IMAGE, T_FOLDER };$/;"	e	enum:cricket::FileShareManifest::Type
T_IMAGE	talk/session/fileshare/fileshare.h	/^  enum Type { T_FILE, T_IMAGE, T_FOLDER };$/;"	e	enum:cricket::FileShareManifest::Type
TarStream	talk/base/tarstream.cc	/^TarStream::TarStream() : mode_(M_NONE), next_block_(NB_NONE), block_pos_(0),$/;"	f	class:TarStream
TarStream	talk/base/tarstream.h	/^class TarStream : public StreamInterface {$/;"	c	namespace:talk_base
Task	talk/base/task.cc	/^Task::Task(Task *parent)$/;"	f	class:talk_base::Task
Task	talk/base/task.h	/^class Task {$/;"	c	namespace:talk_base
TaskRunner	talk/base/taskrunner.cc	/^TaskRunner::TaskRunner()$/;"	f	class:talk_base::TaskRunner
TaskRunner	talk/base/taskrunner.h	/^class TaskRunner : public Task, public sigslot::has_slots<> {$/;"	c	namespace:talk_base
TcpState	talk/p2p/base/pseudotcp.h	/^  enum TcpState { TCP_LISTEN, TCP_SYN_SENT, TCP_SYN_RECEIVED, TCP_ESTABLISHED, TCP_CLOSED };$/;"	g	class:cricket::PseudoTcp
TcpWritePacket	talk/session/tunnel/pseudotcpchannel.cc	/^IPseudoTcpNotify::WriteResult PseudoTcpChannel::TcpWritePacket($/;"	f	class:cricket::PseudoTcpChannel
TempFilename	talk/base/fileutils.cc	/^std::string Filesystem::TempFilename(const Pathname &dir, const std::string &prefix)$/;"	f	class:talk_base::Filesystem
TempFilenameI	talk/base/unixfilesystem.cc	/^std::string UnixFilesystem::TempFilenameI(const Pathname &dir, const std::string &prefix) {$/;"	f	class:talk_base::UnixFilesystem
TempFilenameI	talk/base/win32filesystem.cc	/^std::string Win32Filesystem::TempFilenameI(const Pathname &dir, const std::string &prefix) {$/;"	f	class:talk_base::Win32Filesystem
Terminate	talk/p2p/base/session.cc	/^bool Session::Terminate() {$/;"	f	class:cricket::Session
Terminate	talk/session/phone/call.cc	/^void Call::Terminate() {$/;"	f	class:cricket::Call
Terminate	talk/session/phone/gipslitemediaengine.cc	/^void GipsLiteMediaEngine::Terminate() {$/;"	f	class:GipsLiteMediaEngine
Terminate	talk/session/phone/linphonemediaengine.cc	/^void LinphoneMediaEngine::Terminate() {$/;"	f	class:LinphoneMediaEngine
TerminateAll	talk/p2p/base/sessionmanager.cc	/^void SessionManager::TerminateAll() {$/;"	f	class:cricket::SessionManager
TerminateSession	talk/session/phone/call.cc	/^void Call::TerminateSession(Session *session) {$/;"	f	class:cricket::Call
TestAccept	talk/p2p/base/session_unittest.cc	/^void TestAccept(talk_base::Thread* signaling_thread,$/;"	f
TestClient	talk/base/testclient.cc	/^TestClient::TestClient(AsyncPacketSocket* socket, Thread* thread)$/;"	f	class:talk_base::TestClient
TestClient	talk/base/testclient.h	/^class TestClient : public MessageHandler, public sigslot::has_slots<> {$/;"	c	namespace:talk_base
TestFilters	talk/base/nat_unittest.cc	/^void TestFilters($/;"	f
TestNATFilters	talk/base/nat_unittest.cc	/^void TestNATFilters($/;"	f
TestNATPorts	talk/base/nat_unittest.cc	/^void TestNATPorts($/;"	f
TestP2P	talk/p2p/base/session_unittest.cc	/^void TestP2P(const std::string& test_name, bool raw1, bool raw2) {$/;"	f
TestP2PCompatibility	talk/p2p/base/session_unittest.cc	/^void TestP2PCompatibility(const std::string& test_name, bool old1, bool old2) {$/;"	f
TestPortAllocator	talk/p2p/base/session_unittest.cc	/^  TestPortAllocator(talk_base::Thread* worker_thread, talk_base::SocketFactory* factory)$/;"	f	class:TestPortAllocator
TestPortAllocator	talk/p2p/base/session_unittest.cc	/^class TestPortAllocator : public PortAllocator {$/;"	c	file:
TestPortAllocatorSession	talk/p2p/base/session_unittest.cc	/^  TestPortAllocatorSession(talk_base::Thread* worker_thread, talk_base::SocketFactory* factory,$/;"	f	class:TestPortAllocatorSession
TestPortAllocatorSession	talk/p2p/base/session_unittest.cc	/^class TestPortAllocatorSession : public PortAllocatorSession {$/;"	c	file:
TestPorts	talk/base/nat_unittest.cc	/^void TestPorts($/;"	f
TestSendRecv	talk/p2p/base/session_unittest.cc	/^void TestSendRecv(ChannelHandler* chanhandler1a, ChannelHandler* chanhandler1b,$/;"	f
Text	talk/xmllite/xmlelement.h	/^  const std::string & Text() const { return text_; }$/;"	f	class:buzz::XmlText
TextNamed	talk/xmllite/xmlelement.cc	/^XmlElement::TextNamed(const QName & name) const {$/;"	f	class:buzz::XmlElement
Thread	talk/base/thread.cc	/^Thread::Thread(SocketServer* ss) : MessageQueue(ss), priority_(PRIORITY_NORMAL) {$/;"	f	class:talk_base::Thread
Thread	talk/base/thread.h	/^class Thread : public MessageQueue {$/;"	c	namespace:talk_base
ThreadManager	talk/base/thread.cc	/^ThreadManager::ThreadManager() {$/;"	f	class:talk_base::ThreadManager
ThreadManager	talk/base/thread.h	/^class ThreadManager {$/;"	c	namespace:talk_base
ThreadPriority	talk/base/thread.h	/^enum ThreadPriority {$/;"	g	namespace:talk_base
Time	talk/base/time.cc	/^uint32 Time() {$/;"	f	namespace:talk_base
TimeDiff	talk/base/time.cc	/^int32 TimeDiff(uint32 later, uint32 earlier) {$/;"	f	namespace:talk_base
TimeIsBetween	talk/base/time.cc	/^bool TimeIsBetween(uint32 later, uint32 middle, uint32 earlier) {$/;"	f	namespace:talk_base
TimedOut	talk/base/task.cc	/^bool Task::TimedOut() {$/;"	f	class:talk_base::Task
ToSockAddr	talk/base/socketaddress.cc	/^void SocketAddress::ToSockAddr(sockaddr_in* saddr) const {$/;"	f	class:talk_base::SocketAddress
ToString	talk/base/httpcommon.cc	/^const char* ToString(HttpHeader header) {$/;"	f	namespace:talk_base
ToString	talk/base/httpcommon.cc	/^const char* ToString(HttpVerb verb) {$/;"	f	namespace:talk_base
ToString	talk/base/httpcommon.cc	/^const char* ToString(HttpVersion version) {$/;"	f	namespace:talk_base
ToString	talk/base/network.cc	/^std::string Network::ToString() const {$/;"	f	class:talk_base::Network
ToString	talk/base/socketaddress.cc	/^std::string SocketAddress::ToString() const {$/;"	f	class:talk_base::SocketAddress
ToString	talk/base/stringencode.h	/^static bool ToString(const T &t, std::string* s) {$/;"	f	namespace:talk_base
ToString	talk/base/stringencode.h	/^static inline std::string ToString(T val) {$/;"	f	namespace:talk_base
ToString	talk/p2p/base/port.cc	/^std::string Connection::ToString() const {$/;"	f	class:cricket::Connection
ToString	talk/p2p/base/port.cc	/^std::string Port::ToString() const {$/;"	f	class:cricket::Port
ToString	talk/p2p/base/transportchannel.cc	/^std::string TransportChannel::ToString() const {$/;"	f	class:cricket::TransportChannel
ToUtf16	talk/base/win32.h	/^inline std::wstring ToUtf16(const std::string& str) {$/;"	f	namespace:talk_base
ToUtf8	talk/base/win32.h	/^inline std::string ToUtf8(const std::wstring& wstr) {$/;"	f	namespace:talk_base
TooLongWithoutResponse	talk/p2p/base/port.cc	/^inline bool TooLongWithoutResponse($/;"	f	namespace:__anon11
TooManyFailures	talk/p2p/base/port.cc	/^inline bool TooManyFailures($/;"	f	namespace:__anon11
Tos	talk/base/winping.h	/^    UCHAR   Tos;                \/\/ Type Of Service$/;"	m	struct:talk_base::ip_option_information
Traits	talk/base/stringutils.h	/^struct Traits {$/;"	s	namespace:talk_base
Traits	talk/base/stringutils.h	/^struct Traits<char> {$/;"	s	namespace:talk_base
Traits	talk/base/stringutils.h	/^struct Traits<wchar_t> {$/;"	s	namespace:talk_base
TransEntry	talk/base/natserver.cc	/^NATServer::TransEntry::TransEntry($/;"	f	class:talk_base::NATServer::TransEntry
TransEntry	talk/base/natserver.h	/^  struct TransEntry {$/;"	s	class:talk_base::NATServer
TransactionList	talk/session/fileshare/fileshare.h	/^  typedef std::list<talk_base::HttpTransaction*> TransactionList;$/;"	t	class:cricket::FileShareSession
Transform	talk/base/stringencode.h	/^typedef size_t (*Transform)(char * buffer, size_t buflen,$/;"	t	namespace:talk_base
Translate	talk/base/natserver.cc	/^void NATServer::Translate(const SocketAddressPair& route) {$/;"	f	class:talk_base::NATServer
TranslateCandidate	talk/p2p/base/p2ptransport.cc	/^buzz::XmlElement* P2PTransport::TranslateCandidate(const Candidate& c) {$/;"	f	class:cricket::P2PTransport
TranslateSessionDescription	talk/p2p/base/session_unittest.cc	/^  XmlElement* TranslateSessionDescription($/;"	f	struct:MySessionClient
TranslateSessionDescription	talk/session/fileshare/fileshare.cc	/^buzz::XmlElement* FileShareSessionClient::TranslateSessionDescription($/;"	f	class:cricket::FileShareSessionClient
TranslateSessionDescription	talk/session/phone/phonesessionclient.cc	/^buzz::XmlElement *PhoneSessionClient::TranslateSessionDescription(const SessionDescription *_session_desc) {$/;"	f	class:cricket::PhoneSessionClient
TranslateSessionDescription	talk/session/tunnel/tunnelsessionclient.cc	/^buzz::XmlElement* TunnelSessionClient::TranslateSessionDescription($/;"	f	class:cricket::TunnelSessionClient
TranslateStatus	talk/examples/login/presenceouttask.cc	/^PresenceOutTask::TranslateStatus(const Status & s) {$/;"	f	class:buzz::PresenceOutTask
Transport	talk/p2p/base/transport.cc	/^Transport::Transport(SessionManager* session_manager, const std::string& name)$/;"	f	class:cricket::Transport
Transport	talk/p2p/base/transport.h	/^class Transport : public talk_base::MessageHandler, public sigslot::has_slots<> {$/;"	c	namespace:cricket
TransportChannel	talk/p2p/base/transportchannel.h	/^  TransportChannel(const std::string& name, const std::string &session_type)$/;"	f	class:cricket::TransportChannel
TransportChannel	talk/p2p/base/transportchannel.h	/^class TransportChannel: public sigslot::has_slots<> {$/;"	c	namespace:cricket
TransportChannelFunc	talk/p2p/base/transport.h	/^  typedef void (TransportChannelImpl::* TransportChannelFunc)();$/;"	t	class:cricket::Transport
TransportChannelImpl	talk/p2p/base/transportchannelimpl.h	/^  TransportChannelImpl(const std::string& name, const std::string& session_type)$/;"	f	class:cricket::TransportChannelImpl
TransportChannelImpl	talk/p2p/base/transportchannelimpl.h	/^class TransportChannelImpl: public TransportChannel {$/;"	c	namespace:cricket
TransportChannelProxy	talk/p2p/base/transportchannelproxy.cc	/^TransportChannelProxy::TransportChannelProxy(const std::string& name, const std::string &session_type)$/;"	f	class:cricket::TransportChannelProxy
TransportChannelProxy	talk/p2p/base/transportchannelproxy.h	/^class TransportChannelProxy: public TransportChannel {$/;"	c	namespace:cricket
TransportList	talk/p2p/base/session.h	/^  typedef std::list<Transport*> TransportList;$/;"	t	class:cricket::Session
Trim	talk/p2p/client/httpportallocator.cc	/^void Trim(std::string& str) {$/;"	f	namespace:__anon13
TrimStatus	talk/examples/login/status.h	/^  static std::string TrimStatus(const std::string & st) {$/;"	f	class:buzz::Status
Ttl	talk/base/winping.h	/^    UCHAR   Ttl;                \/\/ Time To Live$/;"	m	struct:talk_base::ip_option_information
TunnelSession	talk/session/tunnel/tunnelsessionclient.cc	/^TunnelSession::TunnelSession(TunnelSessionClient* client, Session* session,$/;"	f	class:cricket::TunnelSession
TunnelSession	talk/session/tunnel/tunnelsessionclient.h	/^class TunnelSession : public sigslot::has_slots<> {$/;"	c	namespace:cricket
TunnelSessionClient	talk/session/tunnel/tunnelsessionclient.cc	/^TunnelSessionClient::TunnelSessionClient(const buzz::Jid& jid,$/;"	f	class:cricket::TunnelSessionClient
TunnelSessionClient	talk/session/tunnel/tunnelsessionclient.h	/^class TunnelSessionClient$/;"	c	namespace:cricket
TunnelSessionDescription	talk/session/tunnel/tunnelsessionclient.cc	/^  TunnelSessionDescription(const std::string& desc) : description(desc) { }$/;"	f	struct:cricket::TunnelSessionDescription
TunnelSessionDescription	talk/session/tunnel/tunnelsessionclient.cc	/^struct TunnelSessionDescription : public SessionDescription {$/;"	s	namespace:cricket	file:
Type	talk/session/fileshare/fileshare.h	/^  enum Type { T_FILE, T_IMAGE, T_FOLDER };$/;"	g	class:cricket::FileShareManifest
TypedMessageData	talk/base/messagequeue.h	/^  TypedMessageData(const T& data) : data_(data) { }$/;"	f	class:talk_base::TypedMessageData
TypedMessageData	talk/base/messagequeue.h	/^class TypedMessageData : public MessageData {$/;"	c	namespace:talk_base
UDPPort	talk/p2p/base/udpport.cc	/^UDPPort::UDPPort(talk_base::Thread* thread, const std::string &type,$/;"	f	class:cricket::UDPPort
UDPPort	talk/p2p/base/udpport.cc	/^UDPPort::UDPPort(talk_base::Thread* thread, talk_base::SocketFactory* factory, $/;"	f	class:cricket::UDPPort
UDPPort	talk/p2p/base/udpport.h	/^class UDPPort : public Port {$/;"	c	namespace:cricket
UDP_HDR_SZ	talk/third_party/mediastreamer/mscodec.c	33;"	d	file:
UDP_HEADER_SIZE	talk/p2p/base/pseudotcp.cc	/^const uint32 UDP_HEADER_SIZE = 8;$/;"	v
UIC	Makefile	/^UIC      = $(QTDIR)\/bin\/uic$/;"	m
UICDECLS	Makefile	/^UICDECLS = $/;"	m
UICIMPLS	Makefile	/^UICIMPLS = $/;"	m
UNUSED	talk/base/basictypes.h	77;"	d
UNUSED	talk/base/common.h	41;"	d
UNUSED2	talk/base/basictypes.h	78;"	d
UNUSED2	talk/base/common.h	42;"	d
UNUSED3	talk/base/basictypes.h	79;"	d
UNUSED3	talk/base/common.h	43;"	d
UNUSED4	talk/base/basictypes.h	80;"	d
UNUSED4	talk/base/common.h	44;"	d
UNUSED5	talk/base/basictypes.h	81;"	d
UNUSED5	talk/base/common.h	45;"	d
UNWRITABLE_DELAY	talk/p2p/base/p2ptransportchannel.cc	/^static const uint32 UNWRITABLE_DELAY = 1000 * PING_PACKET_SIZE \/ 10000;\/\/ 50ms$/;"	v	file:
URL_UNSAFE	talk/base/stringencode.cc	/^const unsigned char URL_UNSAFE  = 0x1; \/\/ 0-33 "#$%&+,\/:;<=>?@[\\]^`{|} 127$/;"	v
USERNAME_LENGTH	talk/p2p/base/relayserver.cc	/^const uint32 USERNAME_LENGTH = 16;$/;"	v
USE_FIREFOX_PROFILES_INI	talk/base/proxydetect.cc	352;"	d	file:
Unbind	talk/base/virtualsocketserver.cc	/^int VirtualSocketServer::Unbind($/;"	f	class:talk_base::VirtualSocketServer
UnixFilesystem	talk/base/unixfilesystem.h	/^class UnixFilesystem : public Filesystem{$/;"	c	namespace:talk_base
Unlock	talk/p2p/base/relayserver.cc	/^void RelayServerConnection::Unlock() {$/;"	f	class:cricket::RelayServerConnection
UnlockResource	talk/base/diskcache.cc	/^bool DiskCache::UnlockResource(const std::string& id) {$/;"	f	class:talk_base::DiskCache
UnlockResource	talk/base/diskcache.h	35;"	d
UnmuteMedia_w	talk/session/phone/voicechannel.cc	/^void VoiceChannel::UnmuteMedia_w() {$/;"	f	class:cricket::VoiceChannel
UnpauseMedia_w	talk/session/phone/voicechannel.cc	/^void VoiceChannel::UnpauseMedia_w() {$/;"	f	class:cricket::VoiceChannel
Unused	talk/base/basictypes.h	/^inline void Unused(const void *) { }$/;"	f
Unused	talk/base/common.h	/^inline void Unused(const void *) { }$/;"	f
UpdateChannelState	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::UpdateChannelState() {$/;"	f	class:cricket::P2PTransportChannel
UpdateConnectionStates	talk/p2p/base/p2ptransportchannel.cc	/^void P2PTransportChannel::UpdateConnectionStates() {$/;"	f	class:cricket::P2PTransportChannel
UpdateDelayDistribution	talk/base/virtualsocketserver.cc	/^void VirtualSocketServer::UpdateDelayDistribution() {$/;"	f	class:talk_base::VirtualSocketServer
UpdateLastError	talk/base/physicalsocketserver.cc	/^  void UpdateLastError() {$/;"	f	class:talk_base::PhysicalSocket
UpdateLastError	talk/base/win32socketserver.cc	/^Win32Socket::UpdateLastError() {$/;"	f	class:talk_base::Win32Socket
UpdateRateLimit	talk/xmpp/ratelimitmanager.cc	/^void RateLimitManager::UpdateRateLimit(const std::string event_name, $/;"	f	class:buzz::RateLimitManager
UpdateRateLimit	talk/xmpp/ratelimitmanager.h	/^    void UpdateRateLimit() {$/;"	f	class:buzz::RateLimitManager::RateLimit
UpdateState	talk/p2p/base/port.cc	/^void Connection::UpdateState(uint32 now) {$/;"	f	class:cricket::Connection
UpdateTaskTimeout	talk/base/taskrunner.cc	/^void TaskRunner::UpdateTaskTimeout(Task *task) {$/;"	f	class:talk_base::TaskRunner
UpdateWith	talk/examples/login/status.h	/^  void UpdateWith(const Status & new_value) {$/;"	f	class:buzz::Status
Url	talk/base/httpcommon-inl.h	/^Url<CTYPE>::Url(const string& url) {$/;"	f	class:talk_base::Url
Url	talk/base/httpcommon.h	/^  Url(const string& path, const string& server, uint16 port = HTTP_DEFAULT_PORT)$/;"	f	class:talk_base::Url
Url	talk/base/httpcommon.h	/^class Url {$/;"	c	namespace:talk_base
UrlDecode	talk/base/urlencode.cc	/^int UrlDecode(const char *source, char *dest)$/;"	f
UrlDecodeString	talk/base/urlencode.cc	/^UrlDecodeString(const std::string & encoded) {$/;"	f
UrlDefaultPort	talk/base/httpcommon.h	/^inline const uint16 UrlDefaultPort(bool secure) {$/;"	f	namespace:talk_base
UrlEncode	talk/base/cryptstring.h	/^  std::string UrlEncode() const { return impl_->UrlEncode(); }$/;"	f	class:talk_base::CryptString
UrlEncode	talk/base/cryptstring.h	/^  virtual std::string UrlEncode() const { return ""; }$/;"	f	class:talk_base::EmptyCryptStringImpl
UrlEncode	talk/base/cryptstring.h	/^  virtual std::string UrlEncode() const { return password_; }$/;"	f	class:talk_base::InsecureCryptStringImpl
UrlEncode	talk/base/urlencode.cc	/^int UrlEncode(const char *source, char *dest, unsigned max)  $/;"	f
UrlEncodeString	talk/base/urlencode.cc	/^UrlEncodeString(const std::string & decoded) {$/;"	f
UseMessageData	talk/base/messagequeue.h	/^inline const T& UseMessageData(MessageData* data) {$/;"	f	namespace:talk_base
UseSSL	talk/base/asynchttprequest.h	/^  void UseSSL(const char * hostname) { hostname_ = hostname; }$/;"	f	class:talk_base::SslSocketFactory
Utf16	talk/base/convert.h	/^  explicit Utf16(const std::string & str) {$/;"	f	class:Utf16
Utf16	talk/base/convert.h	/^class Utf16 {$/;"	c
Utf8	talk/base/convert.h	/^	explicit Utf8(const CString & str) {$/;"	f	class:Utf8
Utf8	talk/base/convert.h	/^  explicit Utf8() {}$/;"	f	class:Utf8
Utf8	talk/base/convert.h	/^class Utf8 {$/;"	c
Utf8String	talk/base/proxydetect.cc	/^std::string Utf8String(const tstring& str) { return ToUtf8(str); }$/;"	f
VERIFY	talk/base/common.h	102;"	d
VERIFY	talk/base/common.h	92;"	d
VERSION	config.h	110;"	d
VERSION	talk/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/base/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/examples/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/examples/call/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/examples/login/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/examples/pcp/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/p2p/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/p2p/base/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/p2p/client/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/session/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/session/fileshare/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/session/phone/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/session/tunnel/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/third_party/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/third_party/gips/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/third_party/mediastreamer/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/third_party/mediastreamer/msfilter.h	31;"	d
VERSION	talk/third_party/mediastreamer/msrtprecv.h	30;"	d
VERSION	talk/third_party/mediastreamer/msrtpsend.h	29;"	d
VERSION	talk/third_party/mediastreamer/sndcard.h	27;"	d
VERSION	talk/third_party/mediastreamer/sndcard.h	30;"	d
VERSION	talk/xmllite/Makefile	/^VERSION = 0.4.0$/;"	m
VERSION	talk/xmpp/Makefile	/^VERSION = 0.4.0$/;"	m
VIDEO_SIZE_4CIF_H	talk/third_party/mediastreamer/msutils.h	56;"	d
VIDEO_SIZE_4CIF_W	talk/third_party/mediastreamer/msutils.h	55;"	d
VIDEO_SIZE_CIF_H	talk/third_party/mediastreamer/msutils.h	52;"	d
VIDEO_SIZE_CIF_W	talk/third_party/mediastreamer/msutils.h	51;"	d
VIDEO_SIZE_MAX_H	talk/third_party/mediastreamer/msutils.h	58;"	d
VIDEO_SIZE_MAX_W	talk/third_party/mediastreamer/msutils.h	57;"	d
VIDEO_SIZE_QCIF_H	talk/third_party/mediastreamer/msutils.h	54;"	d
VIDEO_SIZE_QCIF_W	talk/third_party/mediastreamer/msutils.h	53;"	d
Value	talk/xmllite/xmlelement.h	/^  const std::string & Value() const { return value_; }$/;"	f	class:buzz::XmlAttr
VerifyRateLimit	talk/xmpp/ratelimitmanager.cc	/^bool RateLimitManager::VerifyRateLimit(const std::string event_name, $/;"	f	class:buzz::RateLimitManager
VerifyTaskRateLimit	talk/xmpp/xmpptask.cc	/^bool XmppTask::VerifyTaskRateLimit(const std::string task_name, int max_count, $/;"	f	class:buzz::XmppTask
VideoStream	talk/third_party/mediastreamer/mediastream.h	/^typedef struct _VideoStream VideoStream;$/;"	t	typeref:struct:_VideoStream
VirtualSocket	talk/base/virtualsocketserver.cc	/^  VirtualSocket($/;"	f	class:talk_base::VirtualSocket
VirtualSocket	talk/base/virtualsocketserver.cc	/^class VirtualSocket : public AsyncSocket, public MessageHandler {$/;"	c	namespace:talk_base	file:
VirtualSocketServer	talk/base/virtualsocketserver.cc	/^VirtualSocketServer::VirtualSocketServer()$/;"	f	class:talk_base::VirtualSocketServer
VirtualSocketServer	talk/base/virtualsocketserver.h	/^class VirtualSocketServer : public SocketServer, public MessageHandler {$/;"	c	namespace:talk_base
VoiceChannel	talk/session/phone/voicechannel.cc	/^VoiceChannel::VoiceChannel(ChannelManager *manager, Session *session, $/;"	f	class:cricket::VoiceChannel
VoiceChannel	talk/session/phone/voicechannel.h	/^class VoiceChannel$/;"	c	namespace:cricket
VoiceChannels	talk/session/phone/channelmanager.h	/^  typedef std::vector<VoiceChannel*> VoiceChannels;$/;"	t	class:cricket::ChannelManager
WARNING	talk/base/logging.h	/^                       WARNING = LS_WARNING,$/;"	e	enum:talk_base::LoggingSeverity
WAVE_HEADER_OFFSET	talk/third_party/mediastreamer/msringplayer.c	31;"	d	file:
WINHTTP	talk/base/proxydetect.cc	/^const char WINHTTP[] = "winhttp";$/;"	v
WINHTTP_ACCESS_TYPE_DEFAULT_PROXY	talk/base/proxydetect.cc	84;"	d	file:
WINHTTP_ACCESS_TYPE_NAMED_PROXY	talk/base/proxydetect.cc	86;"	d	file:
WINHTTP_ACCESS_TYPE_NO_PROXY	talk/base/proxydetect.cc	85;"	d	file:
WINHTTP_AUTOPROXY_AUTO_DETECT	talk/base/proxydetect.cc	78;"	d	file:
WINHTTP_AUTOPROXY_CONFIG_URL	talk/base/proxydetect.cc	79;"	d	file:
WINHTTP_AUTOPROXY_OPTIONS	talk/base/proxydetect.cc	/^} WINHTTP_AUTOPROXY_OPTIONS;$/;"	t	typeref:struct:__anon18	file:
WINHTTP_AUTOPROXY_RUN_INPROCESS	talk/base/proxydetect.cc	80;"	d	file:
WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY	talk/base/proxydetect.cc	81;"	d	file:
WINHTTP_AUTO_DETECT_TYPE_DHCP	talk/base/proxydetect.cc	82;"	d	file:
WINHTTP_AUTO_DETECT_TYPE_DNS_A	talk/base/proxydetect.cc	83;"	d	file:
WINHTTP_CURRENT_USER_IE_PROXY_CONFIG	talk/base/proxydetect.cc	/^} WINHTTP_CURRENT_USER_IE_PROXY_CONFIG;$/;"	t	typeref:struct:__anon19	file:
WINHTTP_NO_PROXY_BYPASS	talk/base/proxydetect.cc	88;"	d	file:
WINHTTP_NO_PROXY_NAME	talk/base/proxydetect.cc	87;"	d	file:
WINHTTP_PROXY_INFO	talk/base/proxydetect.cc	/^} WINHTTP_PROXY_INFO, * LPWINHTTP_PROXY_INFO;$/;"	t	typeref:struct:__anon17	file:
WM_DNSNOTIFY	talk/base/win32socketserver.cc	157;"	d	file:
WM_SOCKETNOTIFY	talk/base/win32socketserver.cc	156;"	d	file:
WRITABLE_DELAY	talk/p2p/base/p2ptransportchannel.cc	/^static const uint32 WRITABLE_DELAY = 1000 * PING_PACKET_SIZE \/ 1000;   \/\/ 480ms$/;"	v	file:
WRITEBUFFERSIZE	talk/third_party/mediastreamer/jackcard.c	34;"	d	file:
WR_FAIL	talk/p2p/base/pseudotcp.h	/^  enum WriteResult { WR_SUCCESS, WR_TOO_LARGE, WR_FAIL };$/;"	e	enum:cricket::IPseudoTcpNotify::WriteResult
WR_SUCCESS	talk/p2p/base/pseudotcp.h	/^  enum WriteResult { WR_SUCCESS, WR_TOO_LARGE, WR_FAIL };$/;"	e	enum:cricket::IPseudoTcpNotify::WriteResult
WR_TOO_LARGE	talk/p2p/base/pseudotcp.h	/^  enum WriteResult { WR_SUCCESS, WR_TOO_LARGE, WR_FAIL };$/;"	e	enum:cricket::IPseudoTcpNotify::WriteResult
WSAErrorToString	talk/base/win32socketserver.cc	/^LPCSTR WSAErrorToString(int error, LPCSTR *description_result) {$/;"	f	namespace:talk_base
Wait	talk/base/event.h	/^  void Wait() {$/;"	f	class:talk_base::Event
Wait	talk/base/firewallsocketserver.h	/^  virtual bool Wait(int cms, bool process_io) { return server_->Wait(cms, process_io); }$/;"	f	class:talk_base::FirewallSocketServer
Wait	talk/base/physicalsocketserver.cc	/^bool PhysicalSocketServer::Wait(int cmsWait, bool process_io) {$/;"	f	class:talk_base::PhysicalSocketServer
Wait	talk/base/physicalsocketserver.cc	/^bool PhysicalSocketServer::Wait(int cmsWait, bool process_io)$/;"	f	class:talk_base::PhysicalSocketServer
Wait	talk/base/virtualsocketserver.cc	/^bool VirtualSocketServer::Wait(int cmsWait, bool process_io) {$/;"	f	class:talk_base::VirtualSocketServer
Wait	talk/base/win32socketserver.cc	/^bool Win32SocketServer::Wait(int cms, bool process_io) {$/;"	f	class:talk_base::Win32SocketServer
Wake	talk/base/task.cc	/^void Task::Wake() {$/;"	f	class:talk_base::Task
WakeTasks	talk/examples/login/xmpppump.cc	/^void XmppPump::WakeTasks() {$/;"	f	class:XmppPump
WakeUp	talk/base/firewallsocketserver.h	/^  virtual void WakeUp() { return server_->WakeUp(); }$/;"	f	class:talk_base::FirewallSocketServer
WakeUp	talk/base/physicalsocketserver.cc	/^void PhysicalSocketServer::WakeUp() {$/;"	f	class:talk_base::PhysicalSocketServer
WakeUp	talk/base/virtualsocketserver.cc	/^void VirtualSocketServer::WakeUp() {$/;"	f	class:talk_base::VirtualSocketServer
WakeUp	talk/base/win32socketserver.cc	/^void Win32SocketServer::WakeUp() {$/;"	f	class:talk_base::Win32SocketServer
WakeUpMessage	talk/base/virtualsocketserver.cc	/^  WakeUpMessage(uint32 ver) : wait_version(ver) {}$/;"	f	struct:talk_base::WakeUpMessage
WakeUpMessage	talk/base/virtualsocketserver.cc	/^struct WakeUpMessage : public MessageData {$/;"	s	namespace:talk_base	file:
WildMatch	talk/base/proxydetect.cc	/^bool WildMatch(const char * target, const char * pattern) {$/;"	f
Win32Filesystem	talk/base/win32filesystem.h	/^class Win32Filesystem : public Filesystem{$/;"	c	namespace:talk_base
Win32Socket	talk/base/win32socketserver.cc	/^Win32Socket::Win32Socket()$/;"	f	class:talk_base::Win32Socket
Win32Socket	talk/base/win32socketserver.h	/^class Win32Socket : public talk_base::AsyncSocket {$/;"	c	namespace:talk_base
Win32SocketServer	talk/base/win32socketserver.cc	/^Win32SocketServer::Win32SocketServer(MessageQueue *message_queue) {$/;"	f	class:talk_base::Win32SocketServer
Win32SocketServer	talk/base/win32socketserver.h	/^class Win32SocketServer : public SocketServer {$/;"	c	namespace:talk_base
Win32Window	talk/base/win32window.h	/^class Win32Window {$/;"	c	namespace:talk_base
WinFirewall	talk/base/winfirewall.cc	/^WinFirewall::WinFirewall() : mgr_(NULL), policy_(NULL), profile_(NULL) {$/;"	f	class:talk_base::WinFirewall
WinFirewall	talk/base/winfirewall.h	/^class WinFirewall {$/;"	c	namespace:talk_base
WinPing	talk/base/winping.cc	/^WinPing::WinPing()$/;"	f	class:talk_base::WinPing
WinPing	talk/base/winping.h	/^class WinPing {$/;"	c	namespace:talk_base
WinsockInitializer	talk/base/physicalsocketserver.cc	/^  WinsockInitializer() {$/;"	f	class:WinsockInitializer
WinsockInitializer	talk/base/physicalsocketserver.cc	/^class WinsockInitializer {$/;"	c	file:
Worker	talk/base/signalthread.h	/^  class Worker : public Thread {$/;"	c	class:talk_base::SignalThread
WrapMessageData	talk/base/messagequeue.h	/^inline MessageData* WrapMessageData(const T& data) {$/;"	f	namespace:talk_base
WrapSocket	talk/base/firewallsocketserver.cc	/^AsyncSocket * FirewallSocketServer::WrapSocket(AsyncSocket * sock, int type) {$/;"	f	class:talk_base::FirewallSocketServer
WrapSocket	talk/base/firewallsocketserver.cc	/^Socket * FirewallSocketServer::WrapSocket(Socket * sock, int type) {$/;"	f	class:talk_base::FirewallSocketServer
WrapSocket	talk/base/physicalsocketserver.cc	/^AsyncSocket* PhysicalSocketServer::WrapSocket(SOCKET s) {$/;"	f	class:talk_base::PhysicalSocketServer
Write	talk/base/socketstream.h	/^  virtual StreamResult Write(const void* data, size_t data_len,$/;"	f	class:talk_base::SocketStream
Write	talk/base/stream.cc	/^StreamResult FileStream::Write(const void* data, size_t data_len,$/;"	f	class:talk_base::FileStream
Write	talk/base/stream.cc	/^StreamResult LoggingAdapter::Write(const void* data, size_t data_len,$/;"	f	class:talk_base::LoggingAdapter
Write	talk/base/stream.cc	/^StreamResult MemoryStream::Write(const void *buffer,$/;"	f	class:talk_base::MemoryStream
Write	talk/base/stream.cc	/^StreamResult NullStream::Write(const void* data, size_t data_len,$/;"	f	class:talk_base::NullStream
Write	talk/base/stream.cc	/^StreamResult StreamTap::Write(const void* data, size_t data_len,$/;"	f	class:talk_base::StreamTap
Write	talk/base/stream.cc	/^StreamResult StringStream::Write(const void* data, size_t data_len,$/;"	f	class:talk_base::StringStream
Write	talk/base/stream.h	/^  virtual StreamResult Write(const void* data, size_t data_len,$/;"	f	class:talk_base::StreamAdapterInterface
Write	talk/base/streamutils.cc	/^talk_base::StreamResult StreamCounter::Write($/;"	f	class:StreamCounter
Write	talk/base/tarstream.cc	/^StreamResult TarStream::Write(const void* data, size_t data_len,$/;"	f	class:TarStream
Write	talk/examples/login/xmppsocket.cc	/^bool XmppSocket::Write(const char * data, size_t len) {$/;"	f	class:XmppSocket
Write	talk/p2p/base/stun.cc	/^void StunAddressAttribute::Write(ByteBuffer* buf) const {$/;"	f	class:cricket::StunAddressAttribute
Write	talk/p2p/base/stun.cc	/^void StunByteStringAttribute::Write(ByteBuffer* buf) const {$/;"	f	class:cricket::StunByteStringAttribute
Write	talk/p2p/base/stun.cc	/^void StunErrorCodeAttribute::Write(ByteBuffer* buf) const {$/;"	f	class:cricket::StunErrorCodeAttribute
Write	talk/p2p/base/stun.cc	/^void StunMessage::Write(ByteBuffer* buf) const {$/;"	f	class:cricket::StunMessage
Write	talk/p2p/base/stun.cc	/^void StunTransportPrefsAttribute::Write(ByteBuffer* buf) const {$/;"	f	class:cricket::StunTransportPrefsAttribute
Write	talk/p2p/base/stun.cc	/^void StunUInt16ListAttribute::Write(ByteBuffer* buf) const {$/;"	f	class:cricket::StunUInt16ListAttribute
Write	talk/p2p/base/stun.cc	/^void StunUInt32Attribute::Write(ByteBuffer* buf) const {$/;"	f	class:cricket::StunUInt32Attribute
Write	talk/session/tunnel/pseudotcpchannel.cc	/^StreamResult PseudoTcpChannel::InternalStream::Write($/;"	f	class:cricket::PseudoTcpChannel::InternalStream
Write	talk/session/tunnel/pseudotcpchannel.cc	/^StreamResult PseudoTcpChannel::Write(const void* data, size_t data_len,$/;"	f	class:cricket::PseudoTcpChannel
WriteAll	talk/base/stream.cc	/^StreamResult StreamInterface::WriteAll(const void* data, size_t data_len,$/;"	f	class:talk_base::StreamInterface
WriteBytes	talk/base/bytebuffer.cc	/^void ByteBuffer::WriteBytes(const char* val, size_t len) {$/;"	f	class:talk_base::ByteBuffer
WriteCacheHeaders	talk/base/httpclient.cc	/^HttpError HttpClient::WriteCacheHeaders(const std::string& id) {$/;"	f	class:talk_base::HttpClient
WriteChecksum	talk/base/tarstream.cc	/^void TarStream::WriteChecksum() {$/;"	f	class:TarStream
WriteFieldF	talk/base/tarstream.cc	/^void TarStream::WriteFieldF(size_t& pos, size_t max_len,$/;"	f	class:TarStream
WriteFieldN	talk/base/tarstream.cc	/^void TarStream::WriteFieldN(size_t& pos, size_t max_len, size_t numeric_field) {$/;"	f	class:TarStream
WriteFieldS	talk/base/tarstream.cc	/^void TarStream::WriteFieldS(size_t& pos, size_t max_len,$/;"	f	class:TarStream
WriteNextFile	talk/base/tarstream.cc	/^StreamResult TarStream::WriteNextFile(int* error) {$/;"	f	class:TarStream
WriteOutput	talk/xmpp/xmppclient.cc	/^XmppClient::Private::WriteOutput(const char * bytes, size_t len) {$/;"	f	class:buzz::XmppClient::Private
WriteResource	talk/base/diskcache.cc	/^StreamInterface* DiskCache::WriteResource(const std::string& id, size_t index) {$/;"	f	class:talk_base::DiskCache
WriteResult	talk/p2p/base/pseudotcp.h	/^  enum WriteResult { WR_SUCCESS, WR_TOO_LARGE, WR_FAIL };$/;"	g	class:cricket::IPseudoTcpNotify
WriteState	talk/p2p/base/port.h	/^  enum WriteState {$/;"	g	class:cricket::Connection
WriteString	talk/base/bytebuffer.cc	/^void ByteBuffer::WriteString(const std::string& val) {$/;"	f	class:talk_base::ByteBuffer
WriteUInt16	talk/base/bytebuffer.cc	/^void ByteBuffer::WriteUInt16(uint16 val) {$/;"	f	class:talk_base::ByteBuffer
WriteUInt32	talk/base/bytebuffer.cc	/^void ByteBuffer::WriteUInt32(uint32 val) {$/;"	f	class:talk_base::ByteBuffer
WriteUInt8	talk/base/bytebuffer.cc	/^void ByteBuffer::WriteUInt8(uint8 val) {$/;"	f	class:talk_base::ByteBuffer
Write_	talk/base/socketaddress.cc	/^void SocketAddress::Write_(char* buf, int len) const {$/;"	f	class:talk_base::SocketAddress
X509_STORE_CTX	talk/base/openssladapter.h	/^typedef struct x509_store_ctx_st X509_STORE_CTX;$/;"	t	typeref:struct:x509_store_ctx_st
XMLLIBS	talk/p2p/base/Makefile	/^XMLLIBS = ..\/..\/xmllite\/libcricketxmllite.la ..\/..\/xmpp\/libcricketxmpp.la $(EXPAT_LIBS)$/;"	m
XML_Parser	talk/xmllite/xmlparser.h	/^typedef struct XML_ParserStruct* XML_Parser;$/;"	t	typeref:struct:XML_ParserStruct
XML_ParserCreate	configure	/^XML_ParserCreate ();$/;"	f
XML_UNSAFE	talk/base/stringencode.cc	/^const unsigned char XML_UNSAFE  = 0x2; \/\/ "&'<>$/;"	v
XMPP_CLIENT_NAMESPACES	talk/xmpp/xmppengineimpl.cc	/^static const std::string XMPP_CLIENT_NAMESPACES[] = {$/;"	v	file:
XMPP_CLIENT_NAMESPACES_LEN	talk/xmpp/xmppengineimpl.cc	/^static const size_t XMPP_CLIENT_NAMESPACES_LEN = 4;$/;"	v	file:
XMPP_CLIENT_TASK_CODE	talk/xmpp/xmppclient.h	46;"	d
XMPP_FAILED	talk/xmpp/xmppengine.h	313;"	d
XMPP_RETURN_BADARGUMENT	talk/xmpp/xmppengine.h	/^  XMPP_RETURN_BADARGUMENT,$/;"	e	enum:buzz::XmppReturnStatus
XMPP_RETURN_BADSTATE	talk/xmpp/xmppengine.h	/^  XMPP_RETURN_BADSTATE,$/;"	e	enum:buzz::XmppReturnStatus
XMPP_RETURN_NOTYETIMPLEMENTED	talk/xmpp/xmppengine.h	/^  XMPP_RETURN_NOTYETIMPLEMENTED,$/;"	e	enum:buzz::XmppReturnStatus
XMPP_RETURN_OK	talk/xmpp/xmppengine.h	/^  XMPP_RETURN_OK,$/;"	e	enum:buzz::XmppReturnStatus
XMPP_RETURN_PENDING	talk/xmpp/xmppengine.h	/^  XMPP_RETURN_PENDING,$/;"	e	enum:buzz::XmppReturnStatus
XMPP_RETURN_UNEXPECTED	talk/xmpp/xmppengine.h	/^  XMPP_RETURN_UNEXPECTED,$/;"	e	enum:buzz::XmppReturnStatus
XMPP_SUCCEEDED	talk/xmpp/xmppengine.h	317;"	d
XSE_BAD_REQUEST	talk/xmpp/xmppengine.h	/^  XSE_BAD_REQUEST,$/;"	e	enum:buzz::XmppStanzaError
XSE_CONFLICT	talk/xmpp/xmppengine.h	/^  XSE_CONFLICT,$/;"	e	enum:buzz::XmppStanzaError
XSE_FEATURE_NOT_IMPLEMENTED	talk/xmpp/xmppengine.h	/^  XSE_FEATURE_NOT_IMPLEMENTED,$/;"	e	enum:buzz::XmppStanzaError
XSE_FORBIDDEN	talk/xmpp/xmppengine.h	/^  XSE_FORBIDDEN,$/;"	e	enum:buzz::XmppStanzaError
XSE_GONE	talk/xmpp/xmppengine.h	/^  XSE_GONE,$/;"	e	enum:buzz::XmppStanzaError
XSE_INTERNAL_SERVER_ERROR	talk/xmpp/xmppengine.h	/^  XSE_INTERNAL_SERVER_ERROR,$/;"	e	enum:buzz::XmppStanzaError
XSE_ITEM_NOT_FOUND	talk/xmpp/xmppengine.h	/^  XSE_ITEM_NOT_FOUND,$/;"	e	enum:buzz::XmppStanzaError
XSE_JID_MALFORMED	talk/xmpp/xmppengine.h	/^  XSE_JID_MALFORMED,$/;"	e	enum:buzz::XmppStanzaError
XSE_NOT_ACCEPTABLE	talk/xmpp/xmppengine.h	/^  XSE_NOT_ACCEPTABLE,$/;"	e	enum:buzz::XmppStanzaError
XSE_NOT_ALLOWED	talk/xmpp/xmppengine.h	/^  XSE_NOT_ALLOWED,$/;"	e	enum:buzz::XmppStanzaError
XSE_PAYMENT_REQUIRED	talk/xmpp/xmppengine.h	/^  XSE_PAYMENT_REQUIRED,$/;"	e	enum:buzz::XmppStanzaError
XSE_RECIPIENT_UNAVAILABLE	talk/xmpp/xmppengine.h	/^  XSE_RECIPIENT_UNAVAILABLE,$/;"	e	enum:buzz::XmppStanzaError
XSE_REDIRECT	talk/xmpp/xmppengine.h	/^  XSE_REDIRECT,$/;"	e	enum:buzz::XmppStanzaError
XSE_REGISTRATION_REQUIRED	talk/xmpp/xmppengine.h	/^  XSE_REGISTRATION_REQUIRED,$/;"	e	enum:buzz::XmppStanzaError
XSE_RESOURCE_CONSTRAINT	talk/xmpp/xmppengine.h	/^  XSE_RESOURCE_CONSTRAINT,$/;"	e	enum:buzz::XmppStanzaError
XSE_SERVER_NOT_FOUND	talk/xmpp/xmppengine.h	/^  XSE_SERVER_NOT_FOUND,$/;"	e	enum:buzz::XmppStanzaError
XSE_SERVER_TIMEOUT	talk/xmpp/xmppengine.h	/^  XSE_SERVER_TIMEOUT,$/;"	e	enum:buzz::XmppStanzaError
XSE_SERVICE_UNAVAILABLE	talk/xmpp/xmppengine.h	/^  XSE_SERVICE_UNAVAILABLE,$/;"	e	enum:buzz::XmppStanzaError
XSE_SUBSCRIPTION_REQUIRED	talk/xmpp/xmppengine.h	/^  XSE_SUBSCRIPTION_REQUIRED,$/;"	e	enum:buzz::XmppStanzaError
XSE_UNDEFINED_CONDITION	talk/xmpp/xmppengine.h	/^  XSE_UNDEFINED_CONDITION,$/;"	e	enum:buzz::XmppStanzaError
XSE_UNEXPECTED_REQUEST	talk/xmpp/xmppengine.h	/^  XSE_UNEXPECTED_REQUEST,$/;"	e	enum:buzz::XmppStanzaError
XmlAttr	talk/xmllite/xmlelement.h	/^  explicit XmlAttr(const QName & name, const std::string & value) :$/;"	f	class:buzz::XmlAttr
XmlAttr	talk/xmllite/xmlelement.h	/^  explicit XmlAttr(const XmlAttr & att) :$/;"	f	class:buzz::XmlAttr
XmlAttr	talk/xmllite/xmlelement.h	/^class XmlAttr {$/;"	c	namespace:buzz
XmlBuilder	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::XmlBuilder() :$/;"	f	class:buzz::XmlBuilder
XmlBuilder	talk/xmllite/xmlbuilder.h	/^class XmlBuilder : public XmlParseHandler {$/;"	c	namespace:buzz
XmlChild	talk/xmllite/xmlelement.h	/^  XmlChild() :$/;"	f	class:buzz::XmlChild
XmlChild	talk/xmllite/xmlelement.h	/^class XmlChild {$/;"	c	namespace:buzz
XmlConstants	talk/xmllite/xmlconstants.h	/^class XmlConstants {$/;"	c	namespace:buzz
XmlDeclCallback	talk/xmllite/xmlparser.cc	/^XmlDeclCallback(void * userData, const char * ver, const char * enc, int st) {$/;"	f	namespace:buzz	file:
XmlElement	talk/xmllite/xmlelement.cc	/^XmlElement::XmlElement(const QName & name) :$/;"	f	class:buzz::XmlElement
XmlElement	talk/xmllite/xmlelement.cc	/^XmlElement::XmlElement(const QName & name, bool useDefaultNs) :$/;"	f	class:buzz::XmlElement
XmlElement	talk/xmllite/xmlelement.cc	/^XmlElement::XmlElement(const XmlElement & elt) :$/;"	f	class:buzz::XmlElement
XmlElement	talk/xmllite/xmlelement.h	/^class XmlElement : public XmlChild {$/;"	c	namespace:buzz
XmlElementList	talk/p2p/base/transport.h	/^  typedef std::vector<buzz::XmlElement*> XmlElementList;$/;"	t	class:cricket::Transport
XmlElements	talk/p2p/base/session.h	/^  typedef std::vector<buzz::XmlElement*> XmlElements;$/;"	t	class:cricket::Session
XmlError	talk/xmpp/xmppengineimpl.h	/^    virtual void XmlError()$/;"	f	class:buzz::XmppEngineImpl::StanzaParseHandler
XmlParseContext	talk/xmllite/xmlparser.h	/^class XmlParseContext {$/;"	c	namespace:buzz
XmlParseHandler	talk/xmllite/xmlparser.h	/^class XmlParseHandler {$/;"	c	namespace:buzz
XmlParser	talk/xmllite/xmlparser.cc	/^XmlParser::XmlParser(XmlParseHandler *pxph) :$/;"	f	class:buzz::XmlParser
XmlParser	talk/xmllite/xmlparser.h	/^class XmlParser {$/;"	c	namespace:buzz
XmlParser_StartsWithXmlns	talk/xmllite/xmlparser.cc	/^XmlParser_StartsWithXmlns(const char *name) {$/;"	f	namespace:buzz	file:
XmlPrinter	talk/xmllite/xmlprinter.h	/^class XmlPrinter {$/;"	c	namespace:buzz
XmlPrinterImpl	talk/xmllite/xmlprinter.cc	/^XmlPrinterImpl::XmlPrinterImpl(std::ostream * pout,$/;"	f	class:buzz::XmlPrinterImpl
XmlPrinterImpl	talk/xmllite/xmlprinter.cc	/^class XmlPrinterImpl {$/;"	c	namespace:buzz	file:
XmlText	talk/xmllite/xmlelement.h	/^  explicit XmlText(const XmlText & t) :$/;"	f	class:buzz::XmlText
XmlText	talk/xmllite/xmlelement.h	/^  explicit XmlText(const char * cstr, size_t len) :$/;"	f	class:buzz::XmlText
XmlText	talk/xmllite/xmlelement.h	/^  explicit XmlText(const std::string & text) :$/;"	f	class:buzz::XmlText
XmlText	talk/xmllite/xmlelement.h	/^class XmlText : public XmlChild {$/;"	c	namespace:buzz
XmlnsStack	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::XmlnsStack() :$/;"	f	class:buzz::XmlnsStack
XmlnsStack	talk/xmllite/xmlnsstack.h	/^class XmlnsStack {$/;"	c	namespace:buzz
XmppAuth	talk/examples/login/xmppauth.cc	/^XmppAuth::XmppAuth() : done_(false), error_(false) {$/;"	f	class:XmppAuth
XmppAuth	talk/examples/login/xmppauth.h	/^class XmppAuth: public buzz::PreXmppAuth {$/;"	c
XmppClient	talk/xmpp/xmppclient.cc	/^XmppClient::XmppClient(Task * parent) $/;"	f	class:buzz::XmppClient
XmppClient	talk/xmpp/xmppclient.h	/^class XmppClient : public talk_base::Task, public sigslot::has_slots<>$/;"	c	namespace:buzz
XmppClientSettings	talk/xmpp/xmppclientsettings.h	/^  XmppClientSettings() :$/;"	f	class:buzz::XmppClientSettings
XmppClientSettings	talk/xmpp/xmppclientsettings.h	/^class XmppClientSettings {$/;"	c	namespace:buzz
XmppEngine	talk/xmpp/xmppengine.h	/^class XmppEngine {$/;"	c	namespace:buzz
XmppEngineImpl	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::XmppEngineImpl() :$/;"	f	class:buzz::XmppEngineImpl
XmppEngineImpl	talk/xmpp/xmppengineimpl.h	/^class XmppEngineImpl : public XmppEngine {$/;"	c	namespace:buzz
XmppIqCookie	talk/xmpp/xmppengine.h	/^typedef void * XmppIqCookie;$/;"	t	namespace:buzz
XmppIqEntry	talk/xmpp/xmppengineimpl_iq.cc	/^  XmppIqEntry(const std::string & id, const std::string & to,$/;"	f	class:buzz::XmppIqEntry	file:
XmppIqEntry	talk/xmpp/xmppengineimpl_iq.cc	/^class XmppIqEntry {$/;"	c	namespace:buzz	file:
XmppIqHandler	talk/xmpp/xmppengine.h	/^class XmppIqHandler {$/;"	c	namespace:buzz
XmppLoginTask	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::XmppLoginTask(XmppEngineImpl * pctx) :$/;"	f	class:buzz::XmppLoginTask
XmppLoginTask	talk/xmpp/xmpplogintask.h	/^class XmppLoginTask {$/;"	c	namespace:buzz
XmppOutputHandler	talk/xmpp/xmppengine.h	/^class XmppOutputHandler {$/;"	c	namespace:buzz
XmppPump	talk/examples/login/xmpppump.cc	/^XmppPump::XmppPump(XmppPumpNotify * notify) {$/;"	f	class:XmppPump
XmppPump	talk/examples/login/xmpppump.h	/^class XmppPump : public talk_base::MessageHandler, public talk_base::TaskRunner {$/;"	c
XmppPumpNotify	talk/examples/login/xmpppump.h	/^class XmppPumpNotify {$/;"	c
XmppReturnStatus	talk/xmpp/xmppengine.h	/^enum XmppReturnStatus {$/;"	g	namespace:buzz
XmppSessionHandler	talk/xmpp/xmppengine.h	/^class XmppSessionHandler {$/;"	c	namespace:buzz
XmppSocket	talk/examples/login/xmppsocket.cc	/^XmppSocket::XmppSocket(bool tls) : tls_(tls) {$/;"	f	class:XmppSocket
XmppSocket	talk/examples/login/xmppsocket.h	/^class XmppSocket : public buzz::AsyncSocket, public sigslot::has_slots<> {$/;"	c
XmppStanzaError	talk/xmpp/xmppengine.h	/^enum XmppStanzaError {$/;"	g	namespace:buzz
XmppStanzaHandler	talk/xmpp/xmppengine.h	/^class XmppStanzaHandler {$/;"	c	namespace:buzz
XmppStanzaParseHandler	talk/xmpp/xmppstanzaparser.h	/^class XmppStanzaParseHandler {$/;"	c	namespace:buzz
XmppStanzaParser	talk/xmpp/xmppstanzaparser.cc	/^XmppStanzaParser::XmppStanzaParser(XmppStanzaParseHandler *psph) :$/;"	f	class:buzz::XmppStanzaParser
XmppStanzaParser	talk/xmpp/xmppstanzaparser.h	/^class XmppStanzaParser {$/;"	c	namespace:buzz
XmppTask	talk/xmpp/xmpptask.cc	/^XmppTask::XmppTask(Task* parent, XmppEngine::HandlerLevel level)$/;"	f	class:buzz::XmppTask
XmppTask	talk/xmpp/xmpptask.h	/^class XmppTask :$/;"	c	namespace:buzz
XmppThread	talk/examples/login/xmppthread.cc	/^XmppThread::XmppThread() {$/;"	f	class:XmppThread
XmppThread	talk/examples/login/xmppthread.h	/^class XmppThread:$/;"	c
YACC	Makefile	/^YACC     = yacc$/;"	m
YACCFLAGS	Makefile	/^YACCFLAGS= -d$/;"	m
_AFFINE_H	talk/third_party/mediastreamer/affine.h	22;"	d
_ASYNCHTTPREQUEST_H_	talk/base/asynchttprequest.h	2;"	d
_ASYNCSOCKET_H_	talk/xmpp/asyncsocket.h	29;"	d
_AUTODETECTPROXY_H_	talk/base/autodetectproxy.h	2;"	d
_AlsaCard	talk/third_party/mediastreamer/alsacard.h	/^struct _AlsaCard$/;"	s
_AudioStream	talk/third_party/mediastreamer/mediastream.h	/^struct _AudioStream$/;"	s
_BASICPORTALLOCATOR_H_	talk/p2p/client/basicportallocator.h	29;"	d
_CALL_H_	talk/session/phone/call.h	29;"	d
_CANDIDATE_H_	talk/p2p/base/candidate.h	29;"	d
_CHANNELMANAGER_H_	talk/session/phone/channelmanager.h	29;"	d
_CODEC_H_	talk/session/phone/codec.h	30;"	d
_CONVERT_H_	talk/base/convert.h	29;"	d
_CRICKET_P2P_BASE_CONSTANTS_H_	talk/p2p/base/constants.h	29;"	d
_CRICKET_P2P_BASE_P2PTRANSPORTCHANNEL_H_	talk/p2p/base/p2ptransportchannel.h	38;"	d
_CRICKET_P2P_BASE_P2PTRANSPORT_H_	talk/p2p/base/p2ptransport.h	29;"	d
_CRICKET_P2P_BASE_RAWTRANSPORTCHANNEL_H_	talk/p2p/base/rawtransportchannel.h	29;"	d
_CRICKET_P2P_BASE_RAWTRANSPORT_H_	talk/p2p/base/rawtransport.h	29;"	d
_CRICKET_P2P_BASE_SESSIONCLIENT_H_	talk/p2p/base/sessionclient.h	29;"	d
_CRICKET_P2P_BASE_TRANSPORTCHANNELIMPL_H_	talk/p2p/base/transportchannelimpl.h	29;"	d
_CRICKET_P2P_BASE_TRANSPORTCHANNELPROXY_H_	talk/p2p/base/transportchannelproxy.h	29;"	d
_CRICKET_P2P_BASE_TRANSPORTCHANNEL_H_	talk/p2p/base/transportchannel.h	29;"	d
_CRICKET_P2P_BASE_TRANSPORT_H_	talk/p2p/base/transport.h	47;"	d
_CRICKET_P2P_CLIENT_SESSIONSENDTASK_H_	talk/p2p/client/sessionsendtask.h	29;"	d
_CRICKET_PHONE_AUDIOMONITOR_H_	talk/session/phone/audiomonitor.h	29;"	d
_CRICKET_XMPP_XMPPLIB_BUZZ_CONSTANTS_H_	talk/xmpp/constants.h	29;"	d
_CRT_SECURE_NO_DEPRECATE	talk/examples/call/console.cc	20;"	d	file:
_DBG_NONE	talk/p2p/base/pseudotcp.cc	45;"	d	file:
_DBG_NORMAL	talk/p2p/base/pseudotcp.cc	46;"	d	file:
_DBG_VERBOSE	talk/p2p/base/pseudotcp.cc	47;"	d	file:
_DEBUGMSG	talk/p2p/base/pseudotcp.cc	48;"	d	file:
_HTTPPORTALLOCATOR_H_	talk/p2p/client/httpportallocator.h	2;"	d
_JINGLEINFOTASK_H_	talk/examples/login/jingleinfotask.h	2;"	d
_JackCard	talk/third_party/mediastreamer/jackcard.h	/^struct _JackCard$/;"	s
_MSALAWDecoder	talk/third_party/mediastreamer/msAlawdec.h	/^typedef struct _MSALAWDecoder$/;"	s
_MSALAWDecoderClass	talk/third_party/mediastreamer/msAlawdec.h	/^typedef struct _MSALAWDecoderClass$/;"	s
_MSALAWEncoder	talk/third_party/mediastreamer/msAlawenc.h	/^typedef struct _MSALAWEncoder$/;"	s
_MSALAWEncoderClass	talk/third_party/mediastreamer/msAlawenc.h	/^typedef struct _MSALAWEncoderClass$/;"	s
_MSAVDecoder	talk/third_party/mediastreamer/msavdecoder.h	/^struct _MSAVDecoder$/;"	s
_MSAVDecoderClass	talk/third_party/mediastreamer/msavdecoder.h	/^struct _MSAVDecoderClass$/;"	s
_MSAVEncoder	talk/third_party/mediastreamer/msavencoder.h	/^struct _MSAVEncoder$/;"	s
_MSAVEncoderClass	talk/third_party/mediastreamer/msavencoder.h	/^struct _MSAVEncoderClass$/;"	s
_MSBuffer	talk/third_party/mediastreamer/msbuffer.h	/^typedef struct _MSBuffer$/;"	s
_MSCodecInfo	talk/third_party/mediastreamer/mscodec.h	/^struct _MSCodecInfo$/;"	s
_MSCopy	talk/third_party/mediastreamer/mscopy.h	/^typedef struct _MSCopy$/;"	s
_MSCopyClass	talk/third_party/mediastreamer/mscopy.h	/^typedef struct _MSCopyClass$/;"	s
_MSFdispatcher	talk/third_party/mediastreamer/msfdispatcher.h	/^typedef struct _MSFdispatcher$/;"	s
_MSFdispatcherClass	talk/third_party/mediastreamer/msfdispatcher.h	/^typedef struct _MSFdispatcherClass$/;"	s
_MSFifo	talk/third_party/mediastreamer/msfifo.h	/^typedef struct _MSFifo$/;"	s
_MSFilter	talk/third_party/mediastreamer/msfilter.h	/^struct _MSFilter$/;"	s
_MSFilterClass	talk/third_party/mediastreamer/msfilter.h	/^typedef struct _MSFilterClass$/;"	s
_MSFilterInfo	talk/third_party/mediastreamer/msfilter.h	/^struct _MSFilterInfo$/;"	s
_MSFilterType	talk/third_party/mediastreamer/msfilter.h	/^enum _MSFilterType$/;"	g
_MSGSMDecoder	talk/third_party/mediastreamer/msGSMdecoder.h	/^typedef struct _MSGSMDecoder$/;"	s
_MSGSMDecoderClass	talk/third_party/mediastreamer/msGSMdecoder.h	/^typedef struct _MSGSMDecoderClass$/;"	s
_MSGSMEncoder	talk/third_party/mediastreamer/msGSMencoder.h	/^typedef struct _MSGSMEncoder$/;"	s
_MSGSMEncoderClass	talk/third_party/mediastreamer/msGSMencoder.h	/^typedef struct _MSGSMEncoderClass$/;"	s
_MSILBCDecoder	talk/third_party/mediastreamer/msilbcdec.h	/^typedef struct _MSILBCDecoder$/;"	s
_MSILBCDecoderClass	talk/third_party/mediastreamer/msilbcdec.h	/^typedef struct _MSILBCDecoderClass$/;"	s
_MSILBCEncoder	talk/third_party/mediastreamer/msilbcenc.h	/^typedef struct _MSILBCEncoder$/;"	s
_MSILBCEncoderClass	talk/third_party/mediastreamer/msilbcenc.h	/^typedef struct _MSILBCEncoderClass$/;"	s
_MSLPC10Decoder	talk/third_party/mediastreamer/msLPC10decoder.h	/^typedef struct _MSLPC10Decoder$/;"	s
_MSLPC10DecoderClass	talk/third_party/mediastreamer/msLPC10decoder.h	/^typedef struct _MSLPC10DecoderClass$/;"	s
_MSLPC10Encoder	talk/third_party/mediastreamer/msLPC10encoder.h	/^typedef struct _MSLPC10Encoder$/;"	s
_MSLPC10EncoderClass	talk/third_party/mediastreamer/msLPC10encoder.h	/^typedef struct _MSLPC10EncoderClass$/;"	s
_MSMULAWDecoder	talk/third_party/mediastreamer/msMUlawdec.h	/^typedef struct _MSMULAWDecoder$/;"	s
_MSMULAWDecoderClass	talk/third_party/mediastreamer/msMUlawdec.h	/^typedef struct _MSMULAWDecoderClass$/;"	s
_MSMULAWEncoder	talk/third_party/mediastreamer/msMUlawenc.h	/^typedef struct _MSMULAWEncoder$/;"	s
_MSMULAWEncoderClass	talk/third_party/mediastreamer/msMUlawenc.h	/^typedef struct _MSMULAWEncoderClass$/;"	s
_MSMessage	talk/third_party/mediastreamer/msbuffer.h	/^struct _MSMessage$/;"	s
_MSNoSync	talk/third_party/mediastreamer/msnosync.h	/^typedef struct _MSNoSync$/;"	s
_MSNoSyncClass	talk/third_party/mediastreamer/msnosync.h	/^typedef struct _MSNoSyncClass$/;"	s
_MSOssRead	talk/third_party/mediastreamer/msossread.h	/^struct _MSOssRead$/;"	s
_MSOssReadClass	talk/third_party/mediastreamer/msossread.h	/^struct _MSOssReadClass$/;"	s
_MSOssWrite	talk/third_party/mediastreamer/msosswrite.h	/^struct _MSOssWrite$/;"	s
_MSOssWriteClass	talk/third_party/mediastreamer/msosswrite.h	/^struct _MSOssWriteClass$/;"	s
_MSQdispatcher	talk/third_party/mediastreamer/msqdispatcher.h	/^typedef struct _MSQdispatcher$/;"	s
_MSQdispatcherClass	talk/third_party/mediastreamer/msqdispatcher.h	/^typedef struct _MSQdispatcherClass$/;"	s
_MSQueue	talk/third_party/mediastreamer/msqueue.h	/^typedef struct _MSQueue$/;"	s
_MSRead	talk/third_party/mediastreamer/msread.h	/^typedef struct _MSRead$/;"	s
_MSReadClass	talk/third_party/mediastreamer/msread.h	/^typedef struct _MSReadClass$/;"	s
_MSRingPlayer	talk/third_party/mediastreamer/msringplayer.h	/^struct _MSRingPlayer$/;"	s
_MSRingPlayerClass	talk/third_party/mediastreamer/msringplayer.h	/^struct _MSRingPlayerClass$/;"	s
_MSRtpRecv	talk/third_party/mediastreamer/msrtprecv.h	/^struct _MSRtpRecv$/;"	s
_MSRtpRecvClass	talk/third_party/mediastreamer/msrtprecv.h	/^struct _MSRtpRecvClass$/;"	s
_MSRtpSend	talk/third_party/mediastreamer/msrtpsend.h	/^struct _MSRtpSend$/;"	s
_MSRtpSendClass	talk/third_party/mediastreamer/msrtpsend.h	/^struct _MSRtpSendClass$/;"	s
_MSSdlOut	talk/third_party/mediastreamer/mssdlout.h	/^struct _MSSdlOut$/;"	s
_MSSdlOutClass	talk/third_party/mediastreamer/mssdlout.h	/^struct _MSSdlOutClass$/;"	s
_MSSoundRead	talk/third_party/mediastreamer/mssoundread.h	/^struct _MSSoundRead$/;"	s
_MSSoundReadClass	talk/third_party/mediastreamer/mssoundread.h	/^struct _MSSoundReadClass$/;"	s
_MSSoundWrite	talk/third_party/mediastreamer/mssoundwrite.h	/^struct _MSSoundWrite$/;"	s
_MSSoundWriteClass	talk/third_party/mediastreamer/mssoundwrite.h	/^struct _MSSoundWriteClass$/;"	s
_MSSpeexDec	talk/third_party/mediastreamer/msspeexdec.h	/^struct _MSSpeexDec$/;"	s
_MSSpeexDecClass	talk/third_party/mediastreamer/msspeexdec.h	/^struct _MSSpeexDecClass$/;"	s
_MSSpeexEnc	talk/third_party/mediastreamer/msspeexenc.h	/^struct _MSSpeexEnc$/;"	s
_MSSpeexEncClass	talk/third_party/mediastreamer/msspeexenc.h	/^struct _MSSpeexEncClass$/;"	s
_MSSync	talk/third_party/mediastreamer/mssync.h	/^struct _MSSync$/;"	s
_MSSyncClass	talk/third_party/mediastreamer/mssync.h	/^typedef struct _MSSyncClass$/;"	s
_MSTimer	talk/third_party/mediastreamer/mstimer.h	/^typedef struct _MSTimer$/;"	s
_MSTimerClass	talk/third_party/mediastreamer/mstimer.h	/^typedef struct _MSTimerClass$/;"	s
_MSTrueSpeechDecoder	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^typedef struct _MSTrueSpeechDecoder$/;"	s
_MSTrueSpeechDecoderClass	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^typedef struct _MSTrueSpeechDecoderClass$/;"	s
_MSTrueSpeechEncoder	talk/third_party/mediastreamer/mstruespeechencoder.h	/^typedef struct _MSTrueSpeechEncoder$/;"	s
_MSTrueSpeechEncoderClass	talk/third_party/mediastreamer/mstruespeechencoder.h	/^typedef struct _MSTrueSpeechEncoderClass$/;"	s
_MSV4l	talk/third_party/mediastreamer/msv4l.h	/^struct _MSV4l$/;"	s
_MSV4lClass	talk/third_party/mediastreamer/msv4l.h	/^struct _MSV4lClass$/;"	s
_MSVideoSource	talk/third_party/mediastreamer/msvideosource.h	/^typedef struct _MSVideoSource$/;"	s
_MSVideoSourceClass	talk/third_party/mediastreamer/msvideosource.h	/^typedef struct _MSVideoSourceClass$/;"	s
_MSWrite	talk/third_party/mediastreamer/mswrite.h	/^typedef struct _MSWrite$/;"	s
_MSWriteClass	talk/third_party/mediastreamer/mswrite.h	/^typedef struct _MSWriteClass$/;"	s
_OssCard	talk/third_party/mediastreamer/osscard.h	/^struct _OssCard$/;"	s
_PHONESESSIONCLIENT_H_	talk/session/phone/phonesessionclient.h	29;"	d
_PLAINSASLHANDLER_H_	talk/xmpp/plainsaslhandler.h	29;"	d
_PORTALLOCATOR_H_	talk/p2p/base/portallocator.h	29;"	d
_PRESENCEOUTTASK_H_	talk/examples/login/presenceouttask.h	21;"	d
_PRESENCEPUSHTASK_H_	talk/examples/login/presencepushtask.h	21;"	d
_PREXMPPAUTH_H_	talk/xmpp/prexmppauth.h	29;"	d
_PROXYDETECT_H_	talk/base/proxydetect.h	2;"	d
_RATELIMITMANAGER_H_	talk/xmpp/ratelimitmanager.h	29;"	d
_Raise_handler	talk/examples/call/call_main.cc	/^std::_Prhand std::_Raise_handler = 0;$/;"	m	class:std	file:
_Raise_handler	talk/examples/pcp/pcp_main.cc	/^std::_Prhand std::_Raise_handler = 0;$/;"	m	class:std	file:
_RingStream	talk/third_party/mediastreamer/mediastream.h	/^struct _RingStream$/;"	s
_SASLCOOKIEMECHANISM_H_	talk/xmpp/saslcookiemechanism.h	29;"	d
_SASLHANDLER_H_	talk/xmpp/saslhandler.h	29;"	d
_SASLMECHANISM_H_	talk/xmpp/saslmechanism.h	29;"	d
_SASLPLAINMECHANISM_H_	talk/xmpp/saslplainmechanism.h	29;"	d
_SESSIONDESCRIPTION_H_	talk/p2p/base/sessiondescription.h	29;"	d
_SESSIONID_H_	talk/p2p/base/sessionid.h	29;"	d
_SESSIONMANAGERTASK_H_	talk/p2p/client/sessionmanagertask.h	29;"	d
_SESSIONMANAGER_H_	talk/p2p/base/sessionmanager.h	29;"	d
_SESSION_H_	talk/p2p/base/session.h	29;"	d
_SIGNALTHREAD_H_	talk/base/signalthread.h	2;"	d
_SIGSLOT_HAS_POSIX_THREADS	talk/base/sigslot.h	93;"	d
_SIGSLOT_HAS_WIN32_THREADS	talk/base/sigslot.h	90;"	d
_SIGSLOT_SINGLE_THREADED	talk/base/sigslot.h	88;"	d
_SIGSLOT_SINGLE_THREADED	talk/base/sigslot.h	96;"	d
_SOCKETMONITOR_H_	talk/p2p/client/socketmonitor.h	29;"	d
_STATUS_H_	talk/examples/login/status.h	20;"	d
_SendMessage	talk/base/thread.h	/^  _SendMessage() {}$/;"	f	struct:talk_base::_SendMessage
_SendMessage	talk/base/thread.h	/^struct _SendMessage {$/;"	s	namespace:talk_base
_SndCard	talk/third_party/mediastreamer/sndcard.h	/^struct _SndCard$/;"	s
_SndCardManager	talk/third_party/mediastreamer/sndcard.h	/^struct _SndCardManager$/;"	s
_TALK_BASE_CRYPTSTRING_H_	talk/base/cryptstring.h	29;"	d
_TALK_BASE_UNIXFILESYSTEM_H__	talk/base/unixfilesystem.h	29;"	d
_TALK_BASE_WIN32FILESYSTEM_H__	talk/base/win32filesystem.h	29;"	d
_TRY_FIREFOX	talk/base/proxydetect.cc	15;"	d	file:
_TRY_IE_LAN_SETTINGS	talk/base/proxydetect.cc	19;"	d	file:
_TRY_JSPROXY	talk/base/proxydetect.cc	17;"	d	file:
_TRY_WINHTTP	talk/base/proxydetect.cc	16;"	d	file:
_TRY_WM_FINDPROXY	talk/base/proxydetect.cc	18;"	d	file:
_Throw	talk/examples/call/call_main.cc	/^void __cdecl std::_Throw(const std::exception &) {}$/;"	f	class:std
_Throw	talk/examples/pcp/pcp_main.cc	/^void __cdecl std::_Throw(const std::exception &) {}$/;"	f	class:std
_URLENCODE_H_	talk/base/urlencode.h	2;"	d
_VOICECHANNEL_H_	talk/session/phone/voicechannel.h	29;"	d
_VideoStream	talk/third_party/mediastreamer/mediastream.h	/^struct _VideoStream$/;"	s
_WINSOCKAPI_	talk/base/httpcommon.cc	33;"	d	file:
_WINSOCKAPI_	talk/base/physicalsocketserver.cc	47;"	d	file:
_WINSOCKAPI_	talk/base/socketadapters.cc	38;"	d	file:
_WINSOCKAPI_	talk/base/winping.h	38;"	d
_XMPPAUTH_H_	talk/examples/login/xmppauth.h	29;"	d
_XMPPCLIENTSETTINGS_H_	talk/xmpp/xmppclientsettings.h	29;"	d
_XMPPCLIENT_H_	talk/xmpp/xmppclient.h	29;"	d
_XMPPPUMP_H_	talk/examples/login/xmpppump.h	29;"	d
_XMPPSOCKET_H_	talk/examples/login/xmppsocket.h	29;"	d
_XMPPTASK_H_	talk/xmpp/xmpptask.h	29;"	d
_XMPPTHREAD_H_	talk/examples/login/xmppthread.h	29;"	d
__ALSA_ENABLED__	config.h	113;"	d
__FUNCTION__	talk/base/common.h	84;"	d
__HELPERS_H__	talk/base/helpers.h	29;"	d
__PORT_H__	talk/p2p/base/port.h	29;"	d
__PSEUDOTCPCHANNEL_H__	talk/session/tunnel/pseudotcpchannel.h	29;"	d
__PSEUDOTCP_H__	talk/p2p/base/pseudotcp.h	29;"	d
__RELAYPORT_H__	talk/p2p/base/relayport.h	29;"	d
__RELAYSERVER_H__	talk/p2p/base/relayserver.h	29;"	d
__STUNPORT_H__	talk/p2p/base/stunport.h	29;"	d
__STUNREQUESTMANAGER_H__	talk/p2p/base/stunrequest.h	29;"	d
__STUNSERVER_H__	talk/p2p/base/stunserver.h	29;"	d
__STUN_H__	talk/p2p/base/stun.h	29;"	d
__TCPPORT_H__	talk/p2p/base/tcpport.h	29;"	d
__TUNNELSESSIONCLIENT_H__	talk/session/tunnel/tunnelsessionclient.h	29;"	d
__UDPPORT_H__	talk/p2p/base/udpport.h	29;"	d
__alsa_card_read	talk/third_party/mediastreamer/alsacard.c	/^int __alsa_card_read(AlsaCard *obj,char *buf,int bsize)$/;"	f
__alsa_card_write	talk/third_party/mediastreamer/alsacard.c	/^int __alsa_card_write(AlsaCard *obj,char *buf,int size)$/;"	f
_alloca	talk/base/stringencode.cc	33;"	d	file:
_can_read	talk/third_party/mediastreamer/sndcard.h	/^	SndCardPollFunc _can_read;$/;"	m	struct:_SndCard
_close_r	talk/third_party/mediastreamer/sndcard.h	/^	SndCardCloseFunc _close_r;$/;"	m	struct:_SndCard
_close_w	talk/third_party/mediastreamer/sndcard.h	/^	SndCardCloseFunc _close_w;$/;"	m	struct:_SndCard
_connection0	talk/base/sigslot.h	/^		_connection0()$/;"	f	class:sigslot::_connection0
_connection0	talk/base/sigslot.h	/^		_connection0(dest_type* pobject, void (dest_type::*pmemfun)())$/;"	f	class:sigslot::_connection0
_connection0	talk/base/sigslot.h	/^	class _connection0 : public _connection_base0<mt_policy>$/;"	c	namespace:sigslot
_connection1	talk/base/sigslot.h	/^		_connection1()$/;"	f	class:sigslot::_connection1
_connection1	talk/base/sigslot.h	/^		_connection1(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type))$/;"	f	class:sigslot::_connection1
_connection1	talk/base/sigslot.h	/^	class _connection1 : public _connection_base1<arg1_type, mt_policy>$/;"	c	namespace:sigslot
_connection2	talk/base/sigslot.h	/^		_connection2()$/;"	f	class:sigslot::_connection2
_connection2	talk/base/sigslot.h	/^		_connection2(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection2
_connection2	talk/base/sigslot.h	/^	class _connection2 : public _connection_base2<arg1_type, arg2_type, mt_policy>$/;"	c	namespace:sigslot
_connection3	talk/base/sigslot.h	/^		_connection3()$/;"	f	class:sigslot::_connection3
_connection3	talk/base/sigslot.h	/^		_connection3(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection3
_connection3	talk/base/sigslot.h	/^	class _connection3 : public _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>$/;"	c	namespace:sigslot
_connection4	talk/base/sigslot.h	/^		_connection4()$/;"	f	class:sigslot::_connection4
_connection4	talk/base/sigslot.h	/^		_connection4(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection4
_connection4	talk/base/sigslot.h	/^	class _connection4 : public _connection_base4<arg1_type, arg2_type,$/;"	c	namespace:sigslot
_connection5	talk/base/sigslot.h	/^		_connection5()$/;"	f	class:sigslot::_connection5
_connection5	talk/base/sigslot.h	/^		_connection5(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection5
_connection5	talk/base/sigslot.h	/^	class _connection5 : public _connection_base5<arg1_type, arg2_type,$/;"	c	namespace:sigslot
_connection6	talk/base/sigslot.h	/^		_connection6()$/;"	f	class:sigslot::_connection6
_connection6	talk/base/sigslot.h	/^		_connection6(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection6
_connection6	talk/base/sigslot.h	/^	class _connection6 : public _connection_base6<arg1_type, arg2_type,$/;"	c	namespace:sigslot
_connection7	talk/base/sigslot.h	/^		_connection7()$/;"	f	class:sigslot::_connection7
_connection7	talk/base/sigslot.h	/^		_connection7(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection7
_connection7	talk/base/sigslot.h	/^	class _connection7 : public _connection_base7<arg1_type, arg2_type,$/;"	c	namespace:sigslot
_connection8	talk/base/sigslot.h	/^		_connection8()$/;"	f	class:sigslot::_connection8
_connection8	talk/base/sigslot.h	/^		_connection8(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection8
_connection8	talk/base/sigslot.h	/^	class _connection8 : public _connection_base8<arg1_type, arg2_type,$/;"	c	namespace:sigslot
_connection_base0	talk/base/sigslot.h	/^	class _connection_base0$/;"	c	namespace:sigslot
_connection_base1	talk/base/sigslot.h	/^	class _connection_base1$/;"	c	namespace:sigslot
_connection_base2	talk/base/sigslot.h	/^	class _connection_base2$/;"	c	namespace:sigslot
_connection_base3	talk/base/sigslot.h	/^	class _connection_base3$/;"	c	namespace:sigslot
_connection_base4	talk/base/sigslot.h	/^	class _connection_base4$/;"	c	namespace:sigslot
_connection_base5	talk/base/sigslot.h	/^	class _connection_base5$/;"	c	namespace:sigslot
_connection_base6	talk/base/sigslot.h	/^	class _connection_base6$/;"	c	namespace:sigslot
_connection_base7	talk/base/sigslot.h	/^	class _connection_base7$/;"	c	namespace:sigslot
_connection_base8	talk/base/sigslot.h	/^	class _connection_base8$/;"	c	namespace:sigslot
_create_read_filter	talk/third_party/mediastreamer/sndcard.h	/^	SndCardCreateFilterFunc _create_read_filter;$/;"	m	struct:_SndCard
_create_write_filter	talk/third_party/mediastreamer/sndcard.h	/^	SndCardCreateFilterFunc _create_write_filter;$/;"	m	struct:_SndCard
_data_t	talk/third_party/mediastreamer/waveheader.h	/^typedef struct _data_t {$/;"	s
_destroy	talk/third_party/mediastreamer/sndcard.h	/^	SndCardDestroyFunc _destroy;$/;"	m	struct:_SndCard
_format_t	talk/third_party/mediastreamer/waveheader.h	/^typedef struct _format_t {$/;"	s
_get_level	talk/third_party/mediastreamer/sndcard.h	/^	SndCardMixerGetLevelFunc _get_level;$/;"	m	struct:_SndCard
_jid_h_	talk/xmpp/jid.h	28;"	d
_logintask_h_	talk/xmpp/xmpplogintask.h	29;"	d
_max	talk/base/basictypes.h	/^  template<class T> inline T _max(T a, T b) { return (a < b) ? b : a; }$/;"	f	namespace:talk_base
_min	talk/base/basictypes.h	/^  template<class T> inline T _min(T a, T b) { return (a > b) ? b : a; }$/;"	f	namespace:talk_base
_open_r	talk/third_party/mediastreamer/sndcard.h	/^	SndCardOpenFunc _open_r;$/;"	m	struct:_SndCard
_open_w	talk/third_party/mediastreamer/sndcard.h	/^	SndCardOpenFunc _open_w;$/;"	m	struct:_SndCard
_probe	talk/third_party/mediastreamer/sndcard.h	/^	SndCardOpenFunc _probe;$/;"	m	struct:_SndCard
_qname_h_	talk/xmllite/qname.h	29;"	d
_read	talk/third_party/mediastreamer/sndcard.h	/^	SndCardIOFunc _read;$/;"	m	struct:_SndCard
_readuint16	talk/third_party/mediastreamer/waveheader.h	/^inline guint16 _readuint16(guint16 a)$/;"	f
_readuint32	talk/third_party/mediastreamer/waveheader.h	/^inline guint32 _readuint32(guint32 a)$/;"	f
_riff_t	talk/third_party/mediastreamer/waveheader.h	/^typedef struct _riff_t {$/;"	s
_set_blocking_mode	talk/third_party/mediastreamer/sndcard.h	/^	SndCardSetBlockingModeFunc _set_blocking_mode;$/;"	m	struct:_SndCard
_set_level	talk/third_party/mediastreamer/sndcard.h	/^	SndCardMixerSetLevelFunc _set_level;$/;"	m	struct:_SndCard
_set_rec_source	talk/third_party/mediastreamer/sndcard.h	/^	SndCardMixerSetRecSourceFunc _set_rec_source;$/;"	m	struct:_SndCard
_signal_base	talk/base/sigslot.h	/^	class _signal_base : public mt_policy$/;"	c	namespace:sigslot
_signal_base0	talk/base/sigslot.h	/^		_signal_base0()$/;"	f	class:sigslot::_signal_base0
_signal_base0	talk/base/sigslot.h	/^		_signal_base0(const _signal_base0& s)$/;"	f	class:sigslot::_signal_base0
_signal_base0	talk/base/sigslot.h	/^	class _signal_base0 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot
_signal_base1	talk/base/sigslot.h	/^		_signal_base1()$/;"	f	class:sigslot::_signal_base1
_signal_base1	talk/base/sigslot.h	/^		_signal_base1(const _signal_base1<arg1_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base1
_signal_base1	talk/base/sigslot.h	/^	class _signal_base1 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot
_signal_base2	talk/base/sigslot.h	/^		_signal_base2()$/;"	f	class:sigslot::_signal_base2
_signal_base2	talk/base/sigslot.h	/^		_signal_base2(const _signal_base2<arg1_type, arg2_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base2
_signal_base2	talk/base/sigslot.h	/^	class _signal_base2 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot
_signal_base3	talk/base/sigslot.h	/^		_signal_base3()$/;"	f	class:sigslot::_signal_base3
_signal_base3	talk/base/sigslot.h	/^		_signal_base3(const _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base3
_signal_base3	talk/base/sigslot.h	/^	class _signal_base3 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot
_signal_base4	talk/base/sigslot.h	/^		_signal_base4()$/;"	f	class:sigslot::_signal_base4
_signal_base4	talk/base/sigslot.h	/^		_signal_base4(const _signal_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base4
_signal_base4	talk/base/sigslot.h	/^	class _signal_base4 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot
_signal_base5	talk/base/sigslot.h	/^		_signal_base5()$/;"	f	class:sigslot::_signal_base5
_signal_base5	talk/base/sigslot.h	/^		_signal_base5(const _signal_base5<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base5
_signal_base5	talk/base/sigslot.h	/^	class _signal_base5 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot
_signal_base6	talk/base/sigslot.h	/^		_signal_base6()$/;"	f	class:sigslot::_signal_base6
_signal_base6	talk/base/sigslot.h	/^		_signal_base6(const _signal_base6<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base6
_signal_base6	talk/base/sigslot.h	/^	class _signal_base6 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot
_signal_base7	talk/base/sigslot.h	/^		_signal_base7()$/;"	f	class:sigslot::_signal_base7
_signal_base7	talk/base/sigslot.h	/^		_signal_base7(const _signal_base7<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base7
_signal_base7	talk/base/sigslot.h	/^	class _signal_base7 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot
_signal_base8	talk/base/sigslot.h	/^		_signal_base8()$/;"	f	class:sigslot::_signal_base8
_signal_base8	talk/base/sigslot.h	/^		_signal_base8(const _signal_base8<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base8
_signal_base8	talk/base/sigslot.h	/^	class _signal_base8 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot
_snd_card_manager	talk/third_party/mediastreamer/sndcard.c	/^SndCardManager _snd_card_manager;$/;"	v
_stricmp	talk/base/stringutils.h	/^inline int _stricmp(const char* s1, const char* s2) {$/;"	f
_strnicmp	talk/base/stringutils.h	/^inline int _strnicmp(const char* s1, const char* s2, size_t n) {$/;"	f
_wave_header_t	talk/third_party/mediastreamer/waveheader.h	/^typedef struct _wave_header_t$/;"	s
_write	talk/third_party/mediastreamer/sndcard.h	/^	SndCardIOFunc _write;$/;"	m	struct:_SndCard
_xmlbuilder_h_	talk/xmllite/xmlbuilder.h	29;"	d
_xmlelement_h_	talk/xmllite/xmlelement.h	29;"	d
_xmlnsstack_h_	talk/xmllite/xmlnsstack.h	29;"	d
_xmlparser_h_	talk/xmllite/xmlparser.h	29;"	d
_xmlprinter_h_	talk/xmllite/xmlprinter.h	29;"	d
_xmppengine_h_	talk/xmpp/xmppengine.h	29;"	d
_xmppengineimpl_h_	talk/xmpp/xmppengineimpl.h	29;"	d
_xmppstanzaparser_h_	talk/xmpp/xmppstanzaparser.h	29;"	d
a	talk/p2p/base/session_unittest.cc	/^  TransportChannel* a;$/;"	m	struct:MySessionClient	file:
abort	talk/base/httpbase.cc	/^HttpBase::abort(HttpError err) {$/;"	f	class:talk_base::HttpBase
aborted_	talk/base/task.h	/^  bool aborted_;$/;"	m	class:talk_base::Task
absolute_uri	talk/base/httpclient.h	/^  bool absolute_uri() const { return absolute_uri_; }$/;"	f	class:talk_base::HttpClient
absolute_uri_	talk/base/httpclient.h	/^  bool fail_redirect_, absolute_uri_;$/;"	m	class:talk_base::HttpClient
ac_ct_AR	talk/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/base/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/examples/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/examples/call/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/examples/login/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/examples/pcp/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/p2p/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/p2p/base/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/p2p/client/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/session/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/session/fileshare/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/session/phone/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/session/tunnel/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/third_party/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/third_party/gips/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/third_party/mediastreamer/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/xmllite/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	talk/xmpp/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	talk/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/base/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/examples/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/examples/call/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/examples/login/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/examples/pcp/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/p2p/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/p2p/base/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/p2p/client/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/session/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/session/fileshare/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/session/phone/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/session/tunnel/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/third_party/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/third_party/gips/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/third_party/mediastreamer/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/xmllite/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	talk/xmpp/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	talk/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/base/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/examples/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/examples/call/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/examples/login/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/examples/pcp/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/p2p/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/p2p/base/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/p2p/client/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/session/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/session/fileshare/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/session/phone/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/session/tunnel/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/third_party/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/third_party/gips/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/third_party/mediastreamer/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/xmllite/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	talk/xmpp/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_F77	talk/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/base/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/examples/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/examples/call/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/examples/login/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/examples/pcp/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/p2p/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/p2p/base/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/p2p/client/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/session/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/session/fileshare/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/session/phone/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/session/tunnel/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/third_party/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/third_party/gips/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/third_party/mediastreamer/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/xmllite/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_F77	talk/xmpp/Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_RANLIB	talk/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/base/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/examples/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/examples/call/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/examples/login/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/examples/pcp/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/p2p/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/p2p/base/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/p2p/client/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/session/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/session/fileshare/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/session/phone/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/session/tunnel/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/third_party/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/third_party/gips/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/third_party/mediastreamer/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/xmllite/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_RANLIB	talk/xmpp/Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_STRIP	talk/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/base/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/examples/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/examples/call/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/examples/login/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/examples/pcp/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/p2p/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/p2p/base/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/p2p/client/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/session/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/session/fileshare/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/session/phone/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/session/tunnel/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/third_party/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/third_party/gips/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/third_party/mediastreamer/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/xmllite/Makefile	/^ac_ct_STRIP = strip$/;"	m
ac_ct_STRIP	talk/xmpp/Makefile	/^ac_ct_STRIP = strip$/;"	m
accept	talk/base/scoped_ptr.h	/^  T** accept() {$/;"	f	class:talk_base::scoped_array
accept	talk/base/scoped_ptr.h	/^  T** accept() {$/;"	f	class:talk_base::scoped_ptr
accept	talk/base/scoped_ptr.h	/^  T** accept() {$/;"	f	class:talk_base::scoped_ptr_malloc
accessors	talk/base/diskcache.h	/^    mutable size_t accessors;$/;"	m	struct:talk_base::DiskCache::Entry
ack	talk/p2p/base/pseudotcp.h	/^    uint32 conv, seq, ack;$/;"	m	struct:cricket::PseudoTcp::Segment
acquire	talk/base/linked_ptr.h	/^    template <class Y> void acquire(const linked_ptr<Y>& r) throw()$/;"	f	class:talk_base::linked_ptr
acquire	talk/base/linked_ptr.h	/^    void acquire(const linked_ptr& r) throw()$/;"	f	class:talk_base::linked_ptr
active_	talk/base/messagequeue.h	/^  bool active_;$/;"	m	class:talk_base::MessageQueue
active_	talk/base/socketpool.h	/^  ConnectedList active_;$/;"	m	class:talk_base::StreamCache
addHeader	talk/base/httpcommon.h	/^  inline void addHeader(HttpHeader header, const std::string& value,$/;"	f	struct:talk_base::HttpData
addHeader	talk/base/httpcommon.h	/^  inline void addHeader(const std::string& name, const std::string& value,$/;"	f	struct:talk_base::HttpData
addr	talk/base/firewallsocketserver.h	/^    SocketAddress addr;$/;"	m	struct:talk_base::FirewallSocketServer::Rule
addr	talk/base/testclient.h	/^    SocketAddress addr;$/;"	m	struct:talk_base::TestClient::Packet
addr	talk/p2p/base/tcpport.h	/^    talk_base::SocketAddress addr;$/;"	m	struct:cricket::TCPPort::Incoming
addr_	talk/base/win32socketserver.h	/^  sockaddr_in addr_;         \/\/ address that we connected to (see DoConnect)$/;"	m	class:talk_base::Win32Socket
addr_	talk/p2p/base/stun.h	/^  StunAddressAttribute* addr_;$/;"	m	class:cricket::StunTransportPrefsAttribute
addr_pair	talk/p2p/base/relayserver.h	/^  const talk_base::SocketAddressPair& addr_pair() { return addr_pair_; }$/;"	f	class:cricket::RelayServerConnection
addr_pair_	talk/p2p/base/relayserver.h	/^  talk_base::SocketAddressPair addr_pair_;$/;"	m	class:cricket::RelayServerConnection
address	talk/base/proxyinfo.h	/^  SocketAddress address;$/;"	m	struct:talk_base::ProxyInfo
address	talk/p2p/base/candidate.h	/^  const talk_base::SocketAddress & address() const { return address_; }$/;"	f	class:cricket::Candidate
address	talk/p2p/base/port.h	/^  talk_base::SocketAddress address;$/;"	m	struct:cricket::ProtocolAddress
address	talk/p2p/base/port_unittest.cc	/^  talk_base::SocketAddress address;$/;"	m	struct:Foo	file:
address	talk/p2p/base/relayport.cc	/^  const talk_base::SocketAddress& address() const { return ext_addr_; }$/;"	f	class:cricket::RelayEntry
address	talk/p2p/base/stun.h	/^  const StunAddressAttribute* address() const { return addr_; }$/;"	f	class:cricket::StunTransportPrefsAttribute
address_	talk/p2p/base/candidate.h	/^  talk_base::SocketAddress address_;$/;"	m	class:cricket::Candidate
address_	talk/p2p/base/session_unittest.cc	/^  talk_base::SocketAddress address_;$/;"	m	class:TestPortAllocatorSession	file:
address_	talk/p2p/base/tcpport.h	/^  talk_base::SocketAddress address_;$/;"	m	class:cricket::TCPPort
adjustMTU	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::adjustMTU() {$/;"	f	class:cricket::PseudoTcp
afd_	talk/base/physicalsocketserver.cc	/^  int afd_[2];$/;"	m	class:talk_base::EventDispatcher	file:
affine_transform_t	talk/third_party/mediastreamer/affine.h	/^} affine_transform_t;$/;"	t	typeref:struct:__anon44
agent	talk/base/httpclient.h	/^  const std::string& agent() const { return agent_; }$/;"	f	class:talk_base::HttpClient
agent_	talk/base/asynchttprequest.h	/^  std::string agent_;$/;"	m	class:talk_base::SslSocketFactory
agent_	talk/base/autodetectproxy.h	/^  std::string agent_, server_url_;$/;"	m	class:talk_base::AutoDetectProxy
agent_	talk/base/httpclient.h	/^  std::string agent_;$/;"	m	class:talk_base::HttpClient
agent_	talk/base/socketadapters.h	/^  std::string agent_, user_, headers_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
agent_	talk/p2p/base/port.cc	/^std::string Port::agent_;$/;"	m	class:cricket::Port	file:
agent_	talk/p2p/base/port.h	/^  static std::string agent_;$/;"	m	class:cricket::Port
agent_	talk/p2p/base/portallocator.h	/^  std::string agent_;$/;"	m	class:cricket::PortAllocator
agent_	talk/p2p/client/httpportallocator.h	/^  std::string agent_;$/;"	m	class:cricket::HttpPortAllocator
agent_	talk/p2p/client/httpportallocator.h	/^  std::string agent_;$/;"	m	class:cricket::HttpPortAllocatorSession
alaw_to_s16	talk/third_party/mediastreamer/g711common.h	/^static inline int alaw_to_s16(unsigned char a_val)$/;"	f
allocated_length_	talk/base/stream.h	/^  size_t   allocated_length_;$/;"	m	class:talk_base::MemoryStream
allocation_started_	talk/p2p/client/basicportallocator.h	/^  bool allocation_started_;$/;"	m	class:cricket::BasicPortAllocatorSession
allocator	talk/p2p/client/basicportallocator.h	/^  BasicPortAllocator* allocator() { return allocator_; }$/;"	f	class:cricket::BasicPortAllocatorSession
allocator_	talk/p2p/base/p2ptransportchannel.h	/^  PortAllocator *allocator_;$/;"	m	class:cricket::P2PTransportChannel
allocator_	talk/p2p/base/rawtransportchannel.h	/^  PortAllocator* allocator_;$/;"	m	class:cricket::RawTransportChannel
allocator_	talk/p2p/base/sessionmanager.h	/^  PortAllocator *allocator_;$/;"	m	class:cricket::SessionManager
allocator_	talk/p2p/client/basicportallocator.h	/^  BasicPortAllocator *allocator_;$/;"	m	class:cricket::BasicPortAllocatorSession
allocator_session	talk/p2p/base/p2ptransportchannel.h	/^  PortAllocatorSession* allocator_session() {$/;"	f	class:cricket::P2PTransportChannel
allocator_session_	talk/p2p/base/rawtransportchannel.h	/^  PortAllocatorSession* allocator_session_;$/;"	m	class:cricket::RawTransportChannel
allocator_sessions_	talk/p2p/base/p2ptransportchannel.h	/^  std::vector<PortAllocatorSession*> allocator_sessions_;$/;"	m	class:cricket::P2PTransportChannel
allocdbuf	talk/third_party/mediastreamer/msv4l.h	/^	MSBuffer *allocdbuf; \/* the buffer allocated for read() and mire *\/$/;"	m	struct:_MSV4l
allow	talk/base/firewallsocketserver.h	/^    bool allow;$/;"	m	struct:talk_base::FirewallSocketServer::Rule
allow_local_ips	talk/p2p/base/transport.h	/^  bool allow_local_ips() const { return allow_local_ips_; }$/;"	f	class:cricket::Transport
allow_local_ips_	talk/p2p/base/transport.h	/^  bool allow_local_ips_;$/;"	m	class:cricket::Transport
allow_plain	talk/xmpp/xmppclientsettings.h	/^  bool allow_plain() const { return allow_plain_; }$/;"	f	class:buzz::XmppClientSettings
allow_plain_	talk/xmpp/plainsaslhandler.h	/^  bool allow_plain_;$/;"	m	class:buzz::PlainSaslHandler
allow_plain_	talk/xmpp/xmppclient.cc	/^  bool allow_plain_;$/;"	m	class:buzz::XmppClient::Private	file:
allow_plain_	talk/xmpp/xmppclientsettings.h	/^  bool allow_plain_;$/;"	m	class:buzz::XmppClientSettings
alsa_card_can_read	talk/third_party/mediastreamer/alsacard.c	/^gboolean alsa_card_can_read(AlsaCard *obj)$/;"	f
alsa_card_close_r	talk/third_party/mediastreamer/alsacard.c	/^void alsa_card_close_r(AlsaCard *obj)$/;"	f
alsa_card_close_w	talk/third_party/mediastreamer/alsacard.c	/^void alsa_card_close_w(AlsaCard *obj)$/;"	f
alsa_card_create_read_filter	talk/third_party/mediastreamer/alsacard.c	/^MSFilter *alsa_card_create_read_filter(AlsaCard *card)$/;"	f
alsa_card_create_write_filter	talk/third_party/mediastreamer/alsacard.c	/^MSFilter *alsa_card_create_write_filter(AlsaCard *card)$/;"	f
alsa_card_destroy	talk/third_party/mediastreamer/alsacard.c	/^void alsa_card_destroy(AlsaCard *obj)$/;"	f
alsa_card_get_level	talk/third_party/mediastreamer/alsacard.c	/^gint alsa_card_get_level(AlsaCard *obj,gint way)$/;"	f
alsa_card_manager_init	talk/third_party/mediastreamer/alsacard.c	/^gint alsa_card_manager_init(SndCardManager *m, gint index)$/;"	f
alsa_card_manager_set_default_pcm_device	talk/third_party/mediastreamer/alsacard.c	/^void alsa_card_manager_set_default_pcm_device(const gchar *pcmdev){$/;"	f
alsa_card_new	talk/third_party/mediastreamer/alsacard.c	/^SndCard * alsa_card_new(gint devid)$/;"	f
alsa_card_open_r	talk/third_party/mediastreamer/alsacard.c	/^int alsa_card_open_r(AlsaCard *obj,int bits,int stereo,int rate)$/;"	f
alsa_card_open_w	talk/third_party/mediastreamer/alsacard.c	/^int alsa_card_open_w(AlsaCard *obj,int bits,int stereo,int rate)$/;"	f
alsa_card_probe	talk/third_party/mediastreamer/alsacard.c	/^int alsa_card_probe(AlsaCard *obj,int bits,int stereo,int rate)$/;"	f
alsa_card_read	talk/third_party/mediastreamer/alsacard.c	/^int alsa_card_read(AlsaCard *obj,char *buf,int size)$/;"	f
alsa_card_set_blocking_mode	talk/third_party/mediastreamer/alsacard.c	/^void alsa_card_set_blocking_mode(AlsaCard *obj, gboolean yesno){$/;"	f
alsa_card_set_level	talk/third_party/mediastreamer/alsacard.c	/^void alsa_card_set_level(AlsaCard *obj,gint way,gint a)$/;"	f
alsa_card_set_source	talk/third_party/mediastreamer/alsacard.c	/^void alsa_card_set_source(AlsaCard *obj,int source)$/;"	f
alsa_card_write	talk/third_party/mediastreamer/alsacard.c	/^int alsa_card_write(AlsaCard *obj,char *buf,int size)$/;"	f
alsa_mixer_close	talk/third_party/mediastreamer/alsacard.c	/^void alsa_mixer_close(AlsaCard *obj){$/;"	f
alsa_mixer_open	talk/third_party/mediastreamer/alsacard.c	/^snd_mixer_t *alsa_mixer_open(AlsaCard *obj){$/;"	f
alsa_set_params	talk/third_party/mediastreamer/alsacard.c	/^int alsa_set_params(AlsaCard *obj, int rw, int bits, int stereo, int rate)$/;"	f
am__DEPENDENCIES_1	talk/examples/call/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_1	talk/examples/login/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_1	talk/examples/pcp/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_1	talk/p2p/base/Makefile	/^am__DEPENDENCIES_1 = libcricketp2pbase.la ..\/..\/base\/libcricketbase.la$/;"	m
am__DEPENDENCIES_1	talk/third_party/mediastreamer/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_2	talk/p2p/base/Makefile	/^am__DEPENDENCIES_2 = ..\/..\/base\/libcrickettest.la$/;"	m
am__DEPENDENCIES_3	talk/p2p/base/Makefile	/^am__DEPENDENCIES_3 =$/;"	m
am__DEPENDENCIES_4	talk/p2p/base/Makefile	/^am__DEPENDENCIES_4 = ..\/..\/xmllite\/libcricketxmllite.la \\$/;"	m
am__aclocal_m4_deps	talk/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/base/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/examples/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/examples/call/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/examples/login/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/examples/pcp/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/p2p/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/p2p/base/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/p2p/client/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/session/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/session/fileshare/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/session/phone/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/session/tunnel/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/third_party/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/third_party/gips/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/third_party/mediastreamer/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/xmllite/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__aclocal_m4_deps	talk/xmpp/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/talk\/pkg.m4 \\$/;"	m
am__cd	talk/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/base/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/examples/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/examples/call/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/examples/login/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/examples/pcp/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/p2p/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/p2p/base/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/p2p/client/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/session/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/session/fileshare/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/session/phone/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/session/tunnel/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/third_party/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/third_party/gips/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/third_party/mediastreamer/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/xmllite/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	talk/xmpp/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	talk/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/base/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/examples/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/examples/call/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/examples/login/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/examples/pcp/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/p2p/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/p2p/base/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/p2p/client/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/session/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/session/fileshare/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/session/phone/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/session/tunnel/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/third_party/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/third_party/gips/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/third_party/mediastreamer/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/xmllite/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	talk/xmpp/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	talk/base/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/examples/call/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/examples/login/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/examples/pcp/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/p2p/base/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/p2p/client/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/session/fileshare/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/session/phone/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/session/tunnel/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/third_party/mediastreamer/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/xmllite/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	talk/xmpp/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dist_libcricketsessionphone_la_SOURCES_DIST	talk/session/phone/Makefile	/^am__dist_libcricketsessionphone_la_SOURCES_DIST =  \\$/;"	m
am__fastdepCC_FALSE	talk/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/base/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/examples/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/examples/call/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/examples/login/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/examples/pcp/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/p2p/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/p2p/base/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/p2p/client/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/session/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/session/fileshare/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/session/phone/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/session/tunnel/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/third_party/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/third_party/gips/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/third_party/mediastreamer/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/xmllite/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_FALSE	talk/xmpp/Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_TRUE	talk/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/base/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/examples/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/examples/call/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/examples/login/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/examples/pcp/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/p2p/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/p2p/base/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/p2p/client/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/session/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/session/fileshare/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/session/phone/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/session/tunnel/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/third_party/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/third_party/gips/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/third_party/mediastreamer/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/xmllite/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCC_TRUE	talk/xmpp/Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCXX_FALSE	talk/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/base/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/examples/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/examples/call/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/examples/login/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/examples/pcp/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/p2p/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/p2p/base/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/p2p/client/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/session/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/session/fileshare/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/session/phone/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/session/tunnel/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/third_party/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/third_party/gips/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/third_party/mediastreamer/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/xmllite/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_FALSE	talk/xmpp/Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_TRUE	talk/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/base/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/examples/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/examples/call/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/examples/login/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/examples/pcp/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/p2p/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/p2p/base/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/p2p/client/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/session/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/session/fileshare/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/session/phone/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/session/tunnel/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/third_party/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/third_party/gips/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/third_party/mediastreamer/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/xmllite/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__fastdepCXX_TRUE	talk/xmpp/Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__include	talk/Makefile	/^am__include = include$/;"	m
am__include	talk/base/Makefile	/^am__include = include$/;"	m
am__include	talk/examples/Makefile	/^am__include = include$/;"	m
am__include	talk/examples/call/Makefile	/^am__include = include$/;"	m
am__include	talk/examples/login/Makefile	/^am__include = include$/;"	m
am__include	talk/examples/pcp/Makefile	/^am__include = include$/;"	m
am__include	talk/p2p/Makefile	/^am__include = include$/;"	m
am__include	talk/p2p/base/Makefile	/^am__include = include$/;"	m
am__include	talk/p2p/client/Makefile	/^am__include = include$/;"	m
am__include	talk/session/Makefile	/^am__include = include$/;"	m
am__include	talk/session/fileshare/Makefile	/^am__include = include$/;"	m
am__include	talk/session/phone/Makefile	/^am__include = include$/;"	m
am__include	talk/session/tunnel/Makefile	/^am__include = include$/;"	m
am__include	talk/third_party/Makefile	/^am__include = include$/;"	m
am__include	talk/third_party/gips/Makefile	/^am__include = include$/;"	m
am__include	talk/third_party/mediastreamer/Makefile	/^am__include = include$/;"	m
am__include	talk/xmllite/Makefile	/^am__include = include$/;"	m
am__include	talk/xmpp/Makefile	/^am__include = include$/;"	m
am__installdirs	talk/examples/call/Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__installdirs	talk/examples/login/Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__installdirs	talk/examples/pcp/Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__installdirs	talk/p2p/base/Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__leading_dot	talk/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/base/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/examples/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/examples/call/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/examples/login/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/examples/pcp/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/p2p/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/p2p/base/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/p2p/client/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/session/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/session/fileshare/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/session/phone/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/session/tunnel/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/third_party/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/third_party/gips/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/third_party/mediastreamer/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/xmllite/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	talk/xmpp/Makefile	/^am__leading_dot = .$/;"	m
am__quote	talk/Makefile	/^am__quote = $/;"	m
am__quote	talk/base/Makefile	/^am__quote = $/;"	m
am__quote	talk/examples/Makefile	/^am__quote = $/;"	m
am__quote	talk/examples/call/Makefile	/^am__quote = $/;"	m
am__quote	talk/examples/login/Makefile	/^am__quote = $/;"	m
am__quote	talk/examples/pcp/Makefile	/^am__quote = $/;"	m
am__quote	talk/p2p/Makefile	/^am__quote = $/;"	m
am__quote	talk/p2p/base/Makefile	/^am__quote = $/;"	m
am__quote	talk/p2p/client/Makefile	/^am__quote = $/;"	m
am__quote	talk/session/Makefile	/^am__quote = $/;"	m
am__quote	talk/session/fileshare/Makefile	/^am__quote = $/;"	m
am__quote	talk/session/phone/Makefile	/^am__quote = $/;"	m
am__quote	talk/session/tunnel/Makefile	/^am__quote = $/;"	m
am__quote	talk/third_party/Makefile	/^am__quote = $/;"	m
am__quote	talk/third_party/gips/Makefile	/^am__quote = $/;"	m
am__quote	talk/third_party/mediastreamer/Makefile	/^am__quote = $/;"	m
am__quote	talk/xmllite/Makefile	/^am__quote = $/;"	m
am__quote	talk/xmpp/Makefile	/^am__quote = $/;"	m
am__tar	talk/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/base/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/examples/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/examples/call/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/examples/login/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/examples/pcp/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/p2p/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/p2p/base/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/p2p/client/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/session/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/session/fileshare/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/session/phone/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/session/tunnel/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/third_party/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/third_party/gips/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/third_party/mediastreamer/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/xmllite/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	talk/xmpp/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__untar	talk/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/base/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/examples/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/examples/call/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/examples/login/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/examples/pcp/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/p2p/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/p2p/base/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/p2p/client/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/session/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/session/fileshare/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/session/phone/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/session/tunnel/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/third_party/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/third_party/gips/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/third_party/mediastreamer/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/xmllite/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	talk/xmpp/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am_call_OBJECTS	talk/examples/call/Makefile	/^am_call_OBJECTS = call-call_main.$(OBJEXT) call-callclient.$(OBJEXT) \\$/;"	m
am_libcricketbase_la_OBJECTS	talk/base/Makefile	/^am_libcricketbase_la_OBJECTS = socketaddress.lo time.lo \\$/;"	m
am_libcricketexampleslogin_la_OBJECTS	talk/examples/login/Makefile	/^am_libcricketexampleslogin_la_OBJECTS = xmppsocket.lo xmppauth.lo \\$/;"	m
am_libcricketp2pbase_la_OBJECTS	talk/p2p/base/Makefile	/^am_libcricketp2pbase_la_OBJECTS = stun.lo port.lo udpport.lo \\$/;"	m
am_libcricketp2pclient_la_OBJECTS	talk/p2p/client/Makefile	/^am_libcricketp2pclient_la_OBJECTS = basicportallocator.lo \\$/;"	m
am_libcricketsessionfileshare_la_OBJECTS	talk/session/fileshare/Makefile	/^am_libcricketsessionfileshare_la_OBJECTS = fileshare.lo$/;"	m
am_libcricketsessionphone_la_OBJECTS	talk/session/phone/Makefile	/^am_libcricketsessionphone_la_OBJECTS = audiomonitor.lo \\$/;"	m
am_libcricketsessiontunnel_la_OBJECTS	talk/session/tunnel/Makefile	/^am_libcricketsessiontunnel_la_OBJECTS = tunnelsessionclient.lo \\$/;"	m
am_libcrickettest_la_OBJECTS	talk/base/Makefile	/^am_libcrickettest_la_OBJECTS = testclient.lo natserver.lo \\$/;"	m
am_libcricketxmllite_la_OBJECTS	talk/xmllite/Makefile	/^am_libcricketxmllite_la_OBJECTS = qname.lo xmlbuilder.lo \\$/;"	m
am_libcricketxmpp_la_OBJECTS	talk/xmpp/Makefile	/^am_libcricketxmpp_la_OBJECTS = constants.lo jid.lo saslmechanism.lo \\$/;"	m
am_libmediastreamer_la_OBJECTS	talk/third_party/mediastreamer/Makefile	/^am_libmediastreamer_la_OBJECTS = msfilter.lo mscodec.lo mssoundread.lo \\$/;"	m
am_login_OBJECTS	talk/examples/login/Makefile	/^am_login_OBJECTS = login-login_main.$(OBJEXT) \\$/;"	m
am_nat_unittest_OBJECTS	talk/base/Makefile	/^am_nat_unittest_OBJECTS = nat_unittest.$(OBJEXT)$/;"	m
am_natserver_OBJECTS	talk/base/Makefile	/^am_natserver_OBJECTS = natserver_main.$(OBJEXT)$/;"	m
am_pcp_OBJECTS	talk/examples/pcp/Makefile	/^am_pcp_OBJECTS = pcp-pcp_main.$(OBJEXT)$/;"	m
am_port_unittest_OBJECTS	talk/p2p/base/Makefile	/^am_port_unittest_OBJECTS = port_unittest.$(OBJEXT) \\$/;"	m
am_relayserver_OBJECTS	talk/p2p/base/Makefile	/^am_relayserver_OBJECTS = relayserver.$(OBJEXT) \\$/;"	m
am_session_unittest_OBJECTS	talk/p2p/base/Makefile	/^am_session_unittest_OBJECTS = session_unittest.$(OBJEXT) \\$/;"	m
am_stunserver_OBJECTS	talk/p2p/base/Makefile	/^am_stunserver_OBJECTS = stunserver.$(OBJEXT) stunserver_main.$(OBJEXT)$/;"	m
am_stunserver_unittest_OBJECTS	talk/p2p/base/Makefile	/^am_stunserver_unittest_OBJECTS = stunserver_unittest.$(OBJEXT) \\$/;"	m
am_virtualsocket_unittest_OBJECTS	talk/base/Makefile	/^am_virtualsocket_unittest_OBJECTS = virtualsocket_unittest.$(OBJEXT)$/;"	m
asccmp	talk/base/stringutils.h	/^inline int asccmp(const char* s1, const char* s2) {$/;"	f	namespace:talk_base
asccmp	talk/base/stringutils.h	/^inline int asccmp(const wchar_t* s1, const char* s2) {$/;"	f	namespace:talk_base
asccpyn	talk/base/stringutils.cc	/^size_t asccpyn(wchar_t* buffer, size_t buflen,$/;"	f	namespace:talk_base
asccpyn	talk/base/stringutils.h	/^inline size_t asccpyn(char* buffer, size_t buflen,$/;"	f	namespace:talk_base
ascicmp	talk/base/stringutils.h	/^inline int ascicmp(const char* s1, const char* s2) {$/;"	f	namespace:talk_base
ascicmp	talk/base/stringutils.h	/^inline int ascicmp(const wchar_t* s1, const char* s2) {$/;"	f	namespace:talk_base
ascii_string_compare	talk/base/stringutils.cc	/^int ascii_string_compare(const wchar_t* s1, const char* s2, size_t n,$/;"	f	namespace:talk_base
ascncmp	talk/base/stringutils.h	/^inline int ascncmp(const char* s1, const char* s2, size_t n) {$/;"	f	namespace:talk_base
ascncmp	talk/base/stringutils.h	/^inline int ascncmp(const wchar_t* s1, const char* s2, size_t n) {$/;"	f	namespace:talk_base
ascnicmp	talk/base/stringutils.h	/^inline int ascnicmp(const char* s1, const char* s2, size_t n) {$/;"	f	namespace:talk_base
ascnicmp	talk/base/stringutils.h	/^inline int ascnicmp(const wchar_t* s1, const char* s2, size_t n) {$/;"	f	namespace:talk_base
assign	talk/base/httpcommon.cc	/^  inline bool assign(const std::string& name) { return Parse(val, name); }$/;"	f	struct:talk_base::Enum
async_	talk/base/natsocketfactory.cc	/^  bool async_;$/;"	m	class:talk_base::NATSocket	file:
async_	talk/base/virtualsocketserver.cc	/^  bool async_;$/;"	m	class:talk_base::VirtualSocket	file:
asyncsocket	talk/base/natsocketfactory.cc	/^  AsyncSocket* asyncsocket() {$/;"	f	class:talk_base::NATSocket
attach	talk/base/httpbase.cc	/^HttpBase::attach(StreamInterface* stream) {$/;"	f	class:talk_base::HttpBase
attach	talk/third_party/mediastreamer/mssync.h	/^	MSSyncAttachFunc attach;$/;"	m	struct:_MSSyncClass
attached_filters	talk/third_party/mediastreamer/mssync.h	/^	MSFilter **attached_filters; \/* pointer to a table of pointer of filters*\/$/;"	m	struct:_MSSync
attemptSend	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::attemptSend(SendFlags sflags) {$/;"	f	class:cricket::PseudoTcp
attempts_	talk/p2p/client/httpportallocator.h	/^  int attempts_;$/;"	m	class:cricket::HttpPortAllocatorSession
attr_types_	talk/p2p/base/stun.h	/^  std::vector<uint16>* attr_types_;$/;"	m	class:cricket::StunUInt16ListAttribute
attributes	talk/third_party/mediastreamer/msfilter.h	/^	guint attributes;$/;"	m	struct:_MSFilterClass
attrs_	talk/p2p/base/stun.h	/^  std::vector<StunAttribute*>* attrs_;$/;"	m	class:cricket::StunMessage
audio_info_	talk/session/phone/audiomonitor.h	/^  AudioInfo audio_info_;$/;"	m	class:cricket::AudioMonitor
audio_monitor_	talk/session/phone/voicechannel.h	/^  AudioMonitor *audio_monitor_;$/;"	m	class:cricket::VoiceChannel
audio_stream_	talk/session/phone/linphonemediaengine.h	/^  AudioStream *audio_stream_;$/;"	m	class:cricket::LinphoneMediaChannel
audio_stream_free	talk/third_party/mediastreamer/audiostream.c	/^void audio_stream_free(AudioStream *stream)$/;"	f
audio_stream_send_dtmf	talk/third_party/mediastreamer/audiostream.c	/^gint audio_stream_send_dtmf(AudioStream *stream, gchar dtmf)$/;"	f
audio_stream_set_default_card	talk/third_party/mediastreamer/audiostream.c	/^void audio_stream_set_default_card(int cardindex){$/;"	f
audio_stream_set_rtcp_information	talk/third_party/mediastreamer/audiostream.c	/^void audio_stream_set_rtcp_information(AudioStream *st, const char *cname){$/;"	f
audio_stream_start	talk/third_party/mediastreamer/audiostream.c	/^AudioStream * audio_stream_start(RtpProfile *prof,int locport,char *remip,int remport,int profile,int jitt_comp)$/;"	f
audio_stream_start_full	talk/third_party/mediastreamer/audiostream.c	/^AudioStream * audio_stream_start_full(RtpProfile *profile, int locport,char *remip,int remport,$/;"	f
audio_stream_start_with_files	talk/third_party/mediastreamer/audiostream.c	/^AudioStream * audio_stream_start_with_files(RtpProfile *prof,int locport,char *remip,$/;"	f
audio_stream_start_with_sndcards	talk/third_party/mediastreamer/audiostream.c	/^AudioStream *audio_stream_start_with_sndcards(RtpProfile *prof,int locport,char *remip,int remport,int profile,int jitt_comp,SndCard *playcard, SndCard *captcard)$/;"	f
audio_stream_stop	talk/third_party/mediastreamer/audiostream.c	/^void audio_stream_stop(AudioStream * stream)$/;"	f
authNeeded_	talk/xmpp/xmpplogintask.h	/^  bool authNeeded_;$/;"	m	class:buzz::XmppLoginTask
auth_cookie	talk/xmpp/xmppclientsettings.h	/^  const std::string & auth_cookie() const { return auth_cookie_; }$/;"	f	class:buzz::XmppClientSettings
auth_cookie_	talk/examples/login/xmppauth.h	/^  std::string auth_cookie_;$/;"	m	class:XmppAuth
auth_cookie_	talk/xmpp/xmppclient.cc	/^  std::string auth_cookie_;$/;"	m	class:buzz::XmppClient::Private	file:
auth_cookie_	talk/xmpp/xmppclientsettings.h	/^  std::string auth_cookie_;$/;"	m	class:buzz::XmppClientSettings
auth_method	talk/base/httpcommon.h	/^  std::string auth_method;$/;"	m	struct:talk_base::HttpAuthContext
auto_gain_control	talk/session/phone/channelmanager.h	/^    bool auto_gain_control;$/;"	m	struct:cricket::ChannelManager::AudioOptions
av_codec	talk/third_party/mediastreamer/msavdecoder.h	/^	AVCodec *av_codec;  \/*the AVCodec from which this MSFilter is related *\/$/;"	m	struct:_MSAVDecoder
av_codec	talk/third_party/mediastreamer/msavencoder.h	/^	AVCodec *av_codec;  \/*the AVCodec from which this MSFilter is related *\/$/;"	m	struct:_MSAVEncoder
av_context	talk/third_party/mediastreamer/msavdecoder.h	/^	AVCodecContext av_context;  \/* the context of the AVCodec *\/$/;"	m	struct:_MSAVDecoder
av_context	talk/third_party/mediastreamer/msavencoder.h	/^	AVCodecContext av_context;  \/* the context of the AVCodec *\/$/;"	m	struct:_MSAVEncoder
av_opened	talk/third_party/mediastreamer/msavdecoder.h	/^	gint av_opened;$/;"	m	struct:_MSAVDecoder
av_opened	talk/third_party/mediastreamer/msavencoder.h	/^	gint av_opened;$/;"	m	struct:_MSAVEncoder
available	talk/examples/login/status.h	/^  bool available() const { return available_ ; }$/;"	f	class:buzz::Status
available_	talk/examples/login/status.h	/^  bool available_;$/;"	m	class:buzz::Status
b	talk/p2p/base/session_unittest.cc	/^  TransportChannel* b;$/;"	m	struct:MySessionClient	file:
bCtrl	talk/p2p/base/pseudotcp.h	/^    bool bCtrl;$/;"	m	struct:cricket::PseudoTcp::SSegment
bandwidth	talk/base/virtualsocket_unittest.cc	/^  uint32 bandwidth;$/;"	m	struct:Receiver	file:
bandwidth	talk/base/virtualsocketserver.h	/^  uint32 bandwidth() { return bandwidth_; }$/;"	f	class:talk_base::VirtualSocketServer
bandwidth_	talk/base/virtualsocketserver.h	/^  uint32 bandwidth_;$/;"	m	class:talk_base::VirtualSocketServer
base	talk/base/sigslot.h	/^			arg5_type, arg6_type, arg7_type, arg8_type, mt_policy> base;$/;"	t	class:sigslot::signal8
base	talk/base/sigslot.h	/^			arg5_type, arg6_type, arg7_type, mt_policy> base;$/;"	t	class:sigslot::signal7
base	talk/base/sigslot.h	/^		typedef _signal_base0<mt_policy> base;$/;"	t	class:sigslot::signal0
base	talk/base/sigslot.h	/^		typedef _signal_base1<arg1_type, mt_policy> base;$/;"	t	class:sigslot::signal1
base	talk/base/sigslot.h	/^		typedef _signal_base2<arg1_type, arg2_type, mt_policy> base;$/;"	t	class:sigslot::signal2
base	talk/base/sigslot.h	/^		typedef _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy> base;$/;"	t	class:sigslot::signal3
base	talk/base/sigslot.h	/^		typedef _signal_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy> base;$/;"	t	class:sigslot::signal4
base	talk/base/sigslot.h	/^		typedef _signal_base5<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, mt_policy> base;$/;"	t	class:sigslot::signal5
base	talk/base/sigslot.h	/^		typedef _signal_base6<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, mt_policy> base;$/;"	t	class:sigslot::signal6
base_	talk/base/httpclient.h	/^  HttpBase base_;$/;"	m	class:talk_base::HttpClient
base_	talk/base/httpserver.h	/^    HttpBase base_;$/;"	m	class:talk_base::HttpServer::Connection
basename	talk/base/pathutils.cc	/^std::string Pathname::basename() const {$/;"	f	class:talk_base::Pathname
basename_	talk/base/pathutils.h	/^  std::string folder_, basename_, extension_;$/;"	m	class:talk_base::Pathname
begin	talk/base/httpcommon.h	/^  inline const_iterator begin() const {$/;"	f	struct:talk_base::HttpData
begin	talk/base/httpcommon.h	/^  inline const_iterator begin(HttpHeader header) const {$/;"	f	struct:talk_base::HttpData
begin	talk/base/httpcommon.h	/^  inline const_iterator begin(const std::string& name) const {$/;"	f	struct:talk_base::HttpData
begin	talk/third_party/mediastreamer/msfifo.h	/^	gchar * begin;  \/* rd_ptr et wr_ptr must all be >=begin*\/$/;"	m	struct:_MSFifo
best_connection	talk/p2p/base/p2ptransportchannel.h	/^  Connection* best_connection() const { return best_connection_; }$/;"	f	class:cricket::P2PTransportChannel
best_connection	talk/p2p/client/socketmonitor.h	/^  bool best_connection;$/;"	m	struct:cricket::ConnectionInfo
best_connection_	talk/p2p/base/p2ptransportchannel.h	/^  Connection *best_connection_;$/;"	m	class:cricket::P2PTransportChannel
best_writable_phase	talk/p2p/client/basicportallocator.cc	/^int BasicPortAllocator::best_writable_phase() const {$/;"	f	class:cricket::BasicPortAllocator
best_writable_phase_	talk/p2p/client/basicportallocator.h	/^  int best_writable_phase_;$/;"	m	class:cricket::BasicPortAllocator
binPROGRAMS_INSTALL	talk/examples/call/Makefile	/^binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)$/;"	m
binPROGRAMS_INSTALL	talk/examples/login/Makefile	/^binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)$/;"	m
binPROGRAMS_INSTALL	talk/examples/pcp/Makefile	/^binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)$/;"	m
binPROGRAMS_INSTALL	talk/p2p/base/Makefile	/^binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)$/;"	m
bin_PROGRAMS	talk/examples/call/Makefile	/^bin_PROGRAMS = call$(EXEEXT)$/;"	m
bin_PROGRAMS	talk/examples/login/Makefile	/^bin_PROGRAMS = login$(EXEEXT)$/;"	m
bin_PROGRAMS	talk/examples/pcp/Makefile	/^bin_PROGRAMS = pcp$(EXEEXT)$/;"	m
bin_PROGRAMS	talk/p2p/base/Makefile	/^bin_PROGRAMS = relayserver$(EXEEXT) stunserver$(EXEEXT)$/;"	m
binary_mode_	talk/base/asynchttprequest.h	/^  bool binary_mode_;$/;"	m	class:talk_base::SslSocketFactory
binary_mode_	talk/base/socketpool.h	/^  bool binary_mode_;$/;"	m	class:talk_base::LoggingPoolAdapter
binding	talk/p2p/base/relayserver.h	/^  RelayServerBinding* binding() { return binding_; }$/;"	f	class:cricket::RelayServerConnection
binding_	talk/p2p/base/relayserver.h	/^  RelayServerBinding* binding_;$/;"	m	class:cricket::RelayServerConnection
bindings_	talk/base/virtualsocketserver.h	/^  AddressMap* bindings_;$/;"	m	class:talk_base::VirtualSocketServer
bindings_	talk/p2p/base/relayserver.h	/^  BindingMap bindings_;$/;"	m	class:cricket::RelayServer
bindir	talk/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/base/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/examples/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/examples/call/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/examples/login/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/examples/pcp/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/p2p/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/p2p/base/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/p2p/client/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/session/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/session/fileshare/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/session/phone/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/session/tunnel/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/third_party/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/third_party/gips/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/third_party/mediastreamer/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/xmllite/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	talk/xmpp/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bitpspl	talk/third_party/mediastreamer/waveheader.h	/^	guint16 bitpspl ;	\/* bits per sample *\/$/;"	m	struct:_format_t
bitrate	talk/session/phone/codec.h	/^  int bitrate;$/;"	m	struct:Codec
bitrate	talk/third_party/mediastreamer/mscodec.h	/^	gint bitrate;  \/* the minimum bit rate in bits\/second *\/$/;"	m	struct:_MSCodecInfo
bitrate	talk/third_party/mediastreamer/msilbcdec.h	/^     int bitrate;$/;"	m	struct:_MSILBCDecoder
bitrate	talk/third_party/mediastreamer/msilbcenc.h	/^     int bitrate;$/;"	m	struct:_MSILBCEncoder
bitrate	talk/third_party/mediastreamer/msspeexenc.h	/^	int bitrate;$/;"	m	struct:_MSSpeexEnc
bits	talk/base/md5.h	/^  uint32 bits[2];$/;"	m	struct:MD5Context
bits	talk/third_party/mediastreamer/msspeexdec.h	/^	SpeexBits bits;$/;"	m	struct:_MSSpeexDec
bits	talk/third_party/mediastreamer/msspeexenc.h	/^	SpeexBits bits;$/;"	m	struct:_MSSpeexEnc
bits	talk/third_party/mediastreamer/sndcard.h	/^	gint bits;$/;"	m	struct:_SndCard
bits	talk/xmllite/qname.cc	/^static const int bits = 9;$/;"	v	file:
bits_	talk/p2p/base/stun.h	/^  uint32 bits_;$/;"	m	class:cricket::StunUInt32Attribute
block_	talk/base/tarstream.h	/^  char block_[BLOCK_SIZE];$/;"	m	class:talk_base::TarStream
block_pos_	talk/base/tarstream.h	/^  size_t block_pos_;$/;"	m	class:talk_base::TarStream
blocked_	talk/base/task.h	/^  bool blocked_;$/;"	m	class:talk_base::Task
bound	talk/p2p/base/pseudotcp.cc	/^uint32 bound(uint32 lower, uint32 middle, uint32 upper) {$/;"	f	namespace:cricket
bound_jid_	talk/xmpp/xmppengineimpl.h	/^  Jid bound_jid_;$/;"	m	class:buzz::XmppEngineImpl
bps	talk/third_party/mediastreamer/waveheader.h	/^	guint32   bps ;	\/* Bytes Per Second *\/$/;"	m	struct:_format_t
bpsmpl	talk/third_party/mediastreamer/waveheader.h	/^	guint16 bpsmpl ;	\/* bytes per sample: 1 = 8 bit Mono,$/;"	m	struct:_format_t
bsize	talk/third_party/mediastreamer/msosswrite.h	/^	gint bsize;$/;"	m	struct:_MSOssWrite
bsize	talk/third_party/mediastreamer/msv4l.h	/^	gint bsize;$/;"	m	struct:_MSV4l
bsize	talk/third_party/mediastreamer/sndcard.h	/^	gint bsize;$/;"	m	struct:_SndCard
buf	talk/base/md5.h	/^  uint32 buf[4];$/;"	m	struct:MD5Context
buf	talk/base/testclient.h	/^    char*  buf;$/;"	m	struct:talk_base::TestClient::Packet
buf_	talk/base/asyncudpsocket.h	/^  char* buf_;$/;"	m	class:talk_base::AsyncUDPSocket
buf_	talk/base/natsocketfactory.cc	/^  char* buf_;$/;"	m	class:talk_base::NATSocket	file:
buf_compressed	talk/third_party/mediastreamer/msavdecoder.h	/^	unsigned char buf_compressed[100000];$/;"	m	struct:_MSAVDecoder
buf_size	talk/third_party/mediastreamer/msavdecoder.h	/^	int buf_size;$/;"	m	struct:_MSAVDecoder
buffer	talk/base/streamutils.h	/^    char* buffer;$/;"	m	struct:StreamRelay::Direction
buffer	talk/base/win32socketserver.cc	/^  char buffer[MAXGETHOSTSTRUCT];$/;"	m	struct:talk_base::Win32Socket::DnsLookup	file:
buffer	talk/third_party/mediastreamer/jackcard.h	/^  jack_ringbuffer_t *buffer;$/;"	m	struct:__anon42
buffer	talk/third_party/mediastreamer/msbuffer.h	/^    gchar *buffer;$/;"	m	struct:_MSBuffer
buffer	talk/third_party/mediastreamer/msbuffer.h	/^   MSBuffer *buffer; \/* points to a MSBuffer *\/$/;"	m	struct:_MSMessage
buffer	talk/third_party/mediastreamer/msfifo.h	/^	MSBuffer *buffer;$/;"	m	struct:_MSFifo
buffer_	talk/base/httpbase.h	/^  char buffer_[kBufferSize];$/;"	m	class:talk_base::HttpBase
buffer_	talk/base/socketadapters.h	/^  char * buffer_;$/;"	m	class:talk_base::BufferedReadAdapter
buffer_	talk/base/stream.h	/^  char*    buffer_;$/;"	m	class:talk_base::MemoryStream
buffer_	talk/examples/login/xmppsocket.h	/^  talk_base::ByteBuffer buffer_;$/;"	m	class:XmppSocket
buffer_size	talk/third_party/mediastreamer/jackcard.h	/^  jack_nframes_t buffer_size;$/;"	m	struct:_JackCard
buffer_size_	talk/base/socketadapters.h	/^  size_t buffer_size_, data_len_;$/;"	m	class:talk_base::BufferedReadAdapter
buffer_size_	talk/base/streamutils.h	/^  size_t buffer_size_;$/;"	m	class:StreamRelay
buffering_	talk/base/socketadapters.h	/^  bool buffering_;$/;"	m	class:talk_base::BufferedReadAdapter
buffers_	talk/base/sec_buffer.h	/^  CSecBuffer<pfnFreeBuffer>   buffers_[num_buffers];$/;"	m	class:talk_base::CSecBufferBundle
build	talk/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/base/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/examples/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/examples/call/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/examples/login/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/examples/pcp/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/p2p/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/p2p/base/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/p2p/client/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/session/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/session/fileshare/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/session/phone/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/session/tunnel/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/third_party/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/third_party/gips/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/third_party/mediastreamer/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/xmllite/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	talk/xmpp/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build_alias	talk/Makefile	/^build_alias = $/;"	m
build_alias	talk/base/Makefile	/^build_alias = $/;"	m
build_alias	talk/examples/Makefile	/^build_alias = $/;"	m
build_alias	talk/examples/call/Makefile	/^build_alias = $/;"	m
build_alias	talk/examples/login/Makefile	/^build_alias = $/;"	m
build_alias	talk/examples/pcp/Makefile	/^build_alias = $/;"	m
build_alias	talk/p2p/Makefile	/^build_alias = $/;"	m
build_alias	talk/p2p/base/Makefile	/^build_alias = $/;"	m
build_alias	talk/p2p/client/Makefile	/^build_alias = $/;"	m
build_alias	talk/session/Makefile	/^build_alias = $/;"	m
build_alias	talk/session/fileshare/Makefile	/^build_alias = $/;"	m
build_alias	talk/session/phone/Makefile	/^build_alias = $/;"	m
build_alias	talk/session/tunnel/Makefile	/^build_alias = $/;"	m
build_alias	talk/third_party/Makefile	/^build_alias = $/;"	m
build_alias	talk/third_party/gips/Makefile	/^build_alias = $/;"	m
build_alias	talk/third_party/mediastreamer/Makefile	/^build_alias = $/;"	m
build_alias	talk/xmllite/Makefile	/^build_alias = $/;"	m
build_alias	talk/xmpp/Makefile	/^build_alias = $/;"	m
build_cpu	talk/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/base/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/examples/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/examples/call/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/examples/login/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/examples/pcp/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/p2p/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/p2p/base/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/p2p/client/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/session/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/session/fileshare/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/session/phone/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/session/tunnel/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/third_party/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/third_party/gips/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/third_party/mediastreamer/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/xmllite/Makefile	/^build_cpu = i686$/;"	m
build_cpu	talk/xmpp/Makefile	/^build_cpu = i686$/;"	m
build_os	talk/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/base/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/examples/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/examples/call/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/examples/login/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/examples/pcp/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/p2p/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/p2p/base/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/p2p/client/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/session/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/session/fileshare/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/session/phone/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/session/tunnel/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/third_party/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/third_party/gips/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/third_party/mediastreamer/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/xmllite/Makefile	/^build_os = linux-gnu$/;"	m
build_os	talk/xmpp/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	talk/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/base/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/examples/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/examples/call/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/examples/login/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/examples/pcp/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/p2p/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/p2p/base/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/p2p/client/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/session/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/session/fileshare/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/session/phone/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/session/tunnel/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/third_party/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/third_party/gips/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/third_party/mediastreamer/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/xmllite/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	talk/xmpp/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_vendor	talk/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/base/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/examples/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/examples/call/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/examples/login/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/examples/pcp/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/p2p/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/p2p/base/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/p2p/client/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/session/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/session/fileshare/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/session/phone/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/session/tunnel/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/third_party/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/third_party/gips/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/third_party/mediastreamer/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/xmllite/Makefile	/^build_vendor = pc$/;"	m
build_vendor	talk/xmpp/Makefile	/^build_vendor = pc$/;"	m
builder_	talk/xmpp/xmppstanzaparser.h	/^  XmlBuilder builder_;$/;"	m	class:buzz::XmppStanzaParser
busy_	talk/base/task.h	/^  bool busy_;$/;"	m	class:talk_base::Task
buzz	talk/base/autodetectproxy.h	/^namespace buzz { $/;"	n
buzz	talk/examples/call/callclient.h	/^namespace buzz {$/;"	n
buzz	talk/examples/login/jingleinfotask.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/examples/login/jingleinfotask.h	/^namespace buzz {$/;"	n
buzz	talk/examples/login/presenceouttask.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/examples/login/presenceouttask.h	/^namespace buzz {$/;"	n
buzz	talk/examples/login/presencepushtask.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/examples/login/presencepushtask.h	/^namespace buzz {$/;"	n
buzz	talk/examples/login/status.h	/^namespace buzz {$/;"	n
buzz	talk/p2p/base/sessionclient.h	/^namespace buzz {$/;"	n
buzz	talk/p2p/base/sessionmanager.h	/^namespace buzz {$/;"	n
buzz	talk/p2p/base/transport.h	/^namespace buzz {$/;"	n
buzz	talk/p2p/base/transportchannelimpl.h	/^namespace buzz { class XmlElement; }$/;"	n
buzz	talk/xmllite/qname.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmllite/qname.h	/^namespace buzz {$/;"	n
buzz	talk/xmllite/xmlbuilder.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmllite/xmlbuilder.h	/^namespace buzz {$/;"	n
buzz	talk/xmllite/xmlconstants.h	/^namespace buzz {$/;"	n
buzz	talk/xmllite/xmlelement.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmllite/xmlelement.h	/^namespace buzz {$/;"	n
buzz	talk/xmllite/xmlnsstack.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmllite/xmlnsstack.h	/^namespace buzz {$/;"	n
buzz	talk/xmllite/xmlparser.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmllite/xmlparser.h	/^namespace buzz {$/;"	n
buzz	talk/xmllite/xmlprinter.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmllite/xmlprinter.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/asyncsocket.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/constants.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/constants.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/jid.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/jid.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/plainsaslhandler.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/prexmppauth.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/ratelimitmanager.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/ratelimitmanager.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/saslcookiemechanism.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/saslhandler.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/saslmechanism.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/saslmechanism.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/saslplainmechanism.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/xmppclient.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/xmppclient.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/xmppclientsettings.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/xmppengine.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/xmppengineimpl.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/xmppengineimpl.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/xmppengineimpl_iq.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/xmpplogintask.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/xmpplogintask.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/xmppstanzaparser.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/xmppstanzaparser.h	/^namespace buzz {$/;"	n
buzz	talk/xmpp/xmpptask.cc	/^namespace buzz {$/;"	n	file:
buzz	talk/xmpp/xmpptask.h	/^namespace buzz {$/;"	n
byteReverse	talk/base/md5c.c	/^void byteReverse(unsigned char *buf, unsigned longs)$/;"	f
byteReverse	talk/base/md5c.c	21;"	d	file:
bytes	talk/p2p/base/stun.h	/^  const char* bytes() const { return bytes_; }$/;"	f	class:cricket::StunByteStringAttribute
bytesReceived	talk/session/phone/mediachannel.h	/^	int bytesReceived;$/;"	m	struct:cricket::MediaInfo
bytesSent	talk/session/phone/mediachannel.h	/^	int bytesSent;$/;"	m	struct:cricket::MediaInfo
bytes_	talk/base/bytebuffer.h	/^  char* bytes_;$/;"	m	class:talk_base::ByteBuffer
bytes_	talk/p2p/base/stun.h	/^  char* bytes_;$/;"	m	class:cricket::StunByteStringAttribute
bytes_per_compressed_frame	talk/third_party/mediastreamer/msilbcdec.h	/^     int bytes_per_compressed_frame;$/;"	m	struct:_MSILBCDecoder
bytes_per_compressed_frame	talk/third_party/mediastreamer/msilbcenc.h	/^     int bytes_per_compressed_frame;$/;"	m	struct:_MSILBCEncoder
bytes_to_long	talk/p2p/base/pseudotcp.cc	/^inline uint32 bytes_to_long(const void* buf) {$/;"	f	namespace:cricket
bytes_to_short	talk/p2p/base/pseudotcp.cc	/^inline uint16 bytes_to_short(const void* buf) {$/;"	f	namespace:cricket
bytes_transferred_	talk/session/fileshare/fileshare.h	/^  size_t bytes_transferred_;$/;"	m	class:cricket::FileShareSession
cache_	talk/base/diskcache.cc	/^  const DiskCache* cache_;$/;"	m	class:talk_base::DiskCacheAdapter	file:
cache_	talk/base/diskcache.h	/^  DiskCache* cache_;$/;"	m	class:talk_base::CacheLock
cache_	talk/base/httpclient.h	/^  DiskCache* cache_;$/;"	m	class:talk_base::HttpClient
cache_enabled	talk/base/httpclient.h	/^  bool cache_enabled() const { return (NULL != cache_); }$/;"	f	class:talk_base::HttpClient
cache_state_	talk/base/httpclient.h	/^  CacheState cache_state_;$/;"	m	class:talk_base::HttpClient
cached_	talk/base/socketpool.h	/^  ConnectedList cached_;$/;"	m	class:talk_base::StreamCache
call_	talk/examples/call/callclient.h	/^  cricket::Call* call_; $/;"	m	class:CallClient
call_CXXFLAGS	talk/examples/call/Makefile	/^call_CXXFLAGS = $(AM_CXXFLAGS)$/;"	m
call_DEPENDENCIES	talk/examples/call/Makefile	/^call_DEPENDENCIES =  \\$/;"	m
call_LDADD	talk/examples/call/Makefile	/^call_LDADD = \\$/;"	m
call_OBJECTS	talk/examples/call/Makefile	/^call_OBJECTS = $(am_call_OBJECTS)$/;"	m
call_SOURCES	talk/examples/call/Makefile	/^call_SOURCES = call_main.cc callclient.cc console.cc $/;"	m
calls_	talk/session/phone/phonesessionclient.h	/^  std::map<uint32, Call *> calls_;$/;"	m	class:cricket::PhoneSessionClient
can_process	talk/third_party/mediastreamer/jackcard.h	/^  gboolean can_process;$/;"	m	struct:_JackCard
can_process	talk/third_party/mediastreamer/jackcard.h	/^  gboolean can_process;$/;"	m	struct:__anon42
candidates	talk/p2p/base/port.h	/^  const std::vector<Candidate>& candidates() const { return candidates_; }$/;"	f	class:cricket::Port
candidates_	talk/p2p/base/port.h	/^  std::vector<Candidate> candidates_;$/;"	m	class:cricket::Port
candidates_	talk/p2p/base/session.h	/^  XmlElements candidates_;  \/\/ holds candidates sent in case of compat-mode$/;"	m	class:cricket::Session
cap	talk/third_party/mediastreamer/msv4l.h	/^	struct video_capability cap;$/;"	m	struct:_MSV4l	typeref:struct:_MSV4l::video_capability
capacity_	talk/base/cryptstring.h	/^  size_t capacity_;$/;"	m	class:talk_base::FormatCryptString
captcha_challenge_	talk/xmpp/xmppclient.cc	/^  CaptchaChallenge captcha_challenge_;$/;"	m	class:buzz::XmppClient::Private	file:
captcha_image_url	talk/xmpp/prexmppauth.h	/^  const std::string& captcha_image_url() const { return captcha_image_url_; }$/;"	f	class:buzz::CaptchaChallenge
captcha_image_url_	talk/xmpp/prexmppauth.h	/^  std::string captcha_image_url_;$/;"	m	class:buzz::CaptchaChallenge
captcha_needed	talk/xmpp/prexmppauth.h	/^  bool captcha_needed() const { return captcha_needed_; }$/;"	f	class:buzz::CaptchaChallenge
captcha_needed_	talk/xmpp/prexmppauth.h	/^  bool captcha_needed_;$/;"	m	class:buzz::CaptchaChallenge
captcha_token	talk/xmpp/prexmppauth.h	/^  const std::string& captcha_token() const { return captcha_token_; }$/;"	f	class:buzz::CaptchaChallenge
captcha_token_	talk/xmpp/prexmppauth.h	/^  std::string captcha_token_;$/;"	m	class:buzz::CaptchaChallenge
card_name	talk/third_party/mediastreamer/sndcard.h	/^	gchar *card_name;          \/* SB16 PCI for example *\/$/;"	m	struct:_SndCard
cards	talk/third_party/mediastreamer/sndcard.h	/^	SndCard *cards[MAX_SND_CARDS];$/;"	m	struct:_SndCardManager
censor_password_	talk/examples/call/call_main.cc	/^  bool censor_password_;$/;"	m	class:DebugLog	file:
censor_password_	talk/examples/pcp/pcp_main.cc	/^  bool censor_password_;$/;"	m	class:DebugLog	file:
changeHeader	talk/base/httpcommon.cc	/^HttpData::changeHeader(const std::string& name, const std::string& value,$/;"	f	class:talk_base::HttpData
changeHeader	talk/base/httpcommon.h	/^  inline void changeHeader(HttpHeader header, const std::string& value,$/;"	f	struct:talk_base::HttpData
channel	talk/p2p/base/session_unittest.cc	/^  TransportChannel* channel;$/;"	m	struct:ChannelHandler	file:
channel	talk/p2p/base/transport.cc	/^  cricket::TransportChannelImpl* channel;$/;"	m	struct:__anon3::ChannelParams	file:
channel	talk/session/phone/channelmanager.cc	/^  VoiceChannel *channel;$/;"	m	struct:cricket::CreateParams	file:
channel	talk/session/phone/voicechannel.cc	/^MediaChannel * VoiceChannel::channel() {$/;"	f	class:cricket::VoiceChannel
channel	talk/third_party/mediastreamer/msringplayer.h	/^	gint channel;	\/* number of interleaved channels *\/$/;"	m	struct:_MSRingPlayer
channel	talk/third_party/mediastreamer/msv4l.h	/^	struct video_channel channel;$/;"	m	struct:_MSV4l	typeref:struct:_MSV4l::video_channel
channel	talk/third_party/mediastreamer/waveheader.h	/^	guint16 channel ;	\/* Channel numbers (0x01 = mono, 0x02 = stereo) *\/$/;"	m	struct:_format_t
channel_	talk/p2p/client/socketmonitor.h	/^  TransportChannel* channel_;$/;"	m	class:cricket::SocketMonitor
channel_	talk/session/tunnel/pseudotcpchannel.h	/^  TransportChannel* channel_;$/;"	m	class:cricket::PseudoTcpChannel
channel_	talk/session/tunnel/tunnelsessionclient.h	/^  PseudoTcpChannel* channel_;$/;"	m	class:cricket::TunnelSession
channel_manager	talk/session/phone/phonesessionclient.h	/^  ChannelManager* channel_manager() const { return channel_manager_; }$/;"	f	class:cricket::PhoneSessionClient
channel_manager_	talk/session/phone/phonesessionclient.h	/^  ChannelManager *channel_manager_;$/;"	m	class:cricket::PhoneSessionClient
channel_manager_	talk/session/phone/voicechannel.h	/^  ChannelManager *channel_manager_;$/;"	m	class:cricket::VoiceChannel
channel_map_	talk/session/phone/call.h	/^  std::map<SessionID, VoiceChannel *> channel_map_;$/;"	m	class:cricket::Call
channel_name_	talk/session/tunnel/pseudotcpchannel.h	/^  std::string channel_name_;$/;"	m	class:cricket::PseudoTcpChannel
channel_thread_	talk/p2p/client/socketmonitor.h	/^  talk_base::Thread* channel_thread_;$/;"	m	class:cricket::SocketMonitor
channels	talk/session/phone/codec.h	/^  int channels;$/;"	m	struct:Codec
channels	talk/third_party/mediastreamer/jackcard.h	/^  gint channels;$/;"	m	struct:__anon42
channels	talk/third_party/mediastreamer/msosswrite.h	/^	gint channels;$/;"	m	struct:_MSOssWrite
channels_	talk/p2p/base/session.h	/^  ChannelMap channels_;$/;"	m	class:cricket::Session
channels_	talk/p2p/base/transport.h	/^  ChannelMap channels_;$/;"	m	class:cricket::Transport
channels_	talk/session/phone/channelmanager.h	/^  VoiceChannels channels_;$/;"	m	class:cricket::ChannelManager
child_error_	talk/base/task.h	/^  bool child_error_;$/;"	m	class:talk_base::Task
children_	talk/base/task.h	/^  scoped_ptr<ChildSet> children_;$/;"	m	class:talk_base::Task
chunk_data_	talk/base/httpbase.h	/^  bool ignore_data_, chunk_data_;$/;"	m	class:talk_base::HttpBase
chunked_	talk/base/httpbase.h	/^  bool chunked_;$/;"	m	class:talk_base::HttpParser
class_	talk/p2p/base/stun.h	/^  uint8 class_;$/;"	m	class:cricket::StunErrorCodeAttribute
clear	talk/base/httpcommon.cc	/^HttpData::clear(bool release_document) {$/;"	f	class:talk_base::HttpData
clear	talk/base/httpcommon.cc	/^HttpRequestData::clear(bool release_document) {$/;"	f	class:talk_base::HttpRequestData
clear	talk/base/httpcommon.cc	/^HttpResponseData::clear(bool release_document) {$/;"	f	class:talk_base::HttpResponseData
clear	talk/base/pathutils.cc	/^void Pathname::clear() {$/;"	f	class:talk_base::Pathname
clear	talk/third_party/mediastreamer/jackcard.h	/^  gboolean clear;$/;"	m	struct:_JackCard
clearHeader	talk/base/httpcommon.cc	/^HttpData::clearHeader(const std::string& name) {$/;"	f	class:talk_base::HttpData
clearHeader	talk/base/httpcommon.h	/^  inline void clearHeader(HttpHeader header) {$/;"	f	struct:talk_base::HttpData
client	talk/examples/login/xmpppump.h	/^  buzz::XmppClient *client() { return client_; }$/;"	f	class:XmppPump
client	talk/examples/login/xmppthread.h	/^  buzz::XmppClient* client() { return pump_->client(); }$/;"	f	class:XmppThread
client	talk/p2p/base/session.h	/^  SessionClient* client() const { return client_; }$/;"	f	class:cricket::Session
client	talk/third_party/mediastreamer/jackcard.h	/^  jack_client_t *client;$/;"	m	struct:_JackCard
client_	talk/base/asynchttprequest.h	/^  HttpClient client_;$/;"	m	class:talk_base::AsyncHttpRequest
client_	talk/examples/call/console.h	/^  CallClient *client_;$/;"	m	class:Console
client_	talk/examples/login/xmpppump.h	/^  buzz::XmppClient *client_;$/;"	m	class:XmppPump
client_	talk/p2p/base/session.h	/^  SessionClient* client_;$/;"	m	class:cricket::Session
client_	talk/session/tunnel/tunnelsessionclient.h	/^  TunnelSessionClient* client_;$/;"	m	class:cricket::TunnelSession
client_	talk/xmpp/xmppclient.cc	/^  XmppClient * const client_;$/;"	m	class:buzz::XmppClient::Private	file:
client_	talk/xmpp/xmpptask.h	/^  XmppClient* client_;$/;"	m	class:buzz::XmppTask
client_map_	talk/p2p/base/sessionmanager.h	/^  ClientMap client_map_;$/;"	m	class:cricket::SessionManager
client_thread_	talk/examples/call/console.h	/^  talk_base::Thread *client_thread_;$/;"	m	class:Console
clock_check	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::clock_check(uint32 now, long& nTimeout) {$/;"	f	class:cricket::PseudoTcp
clockrate	talk/session/phone/codec.h	/^  int clockrate;$/;"	m	struct:Codec
clockrate	talk/session/phone/gipslitemediaengine.cc	/^struct CodecPref { const char* name; int clockrate; int pref; };$/;"	m	struct:__anon31::CodecPref	file:
clone	talk/base/sigslot.h	/^			arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection8
clone	talk/base/sigslot.h	/^			arg5_type, arg6_type, arg7_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection7
clone	talk/base/sigslot.h	/^			arg5_type, arg6_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection6
clone	talk/base/sigslot.h	/^			arg5_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection5
clone	talk/base/sigslot.h	/^		virtual _connection_base0<mt_policy>* clone()$/;"	f	class:sigslot::_connection0
clone	talk/base/sigslot.h	/^		virtual _connection_base1<arg1_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection1
clone	talk/base/sigslot.h	/^		virtual _connection_base2<arg1_type, arg2_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection2
clone	talk/base/sigslot.h	/^		virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection3
clone	talk/base/sigslot.h	/^		virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection4
close_	talk/base/httpserver.h	/^    bool signalling_, close_;$/;"	m	class:talk_base::HttpServer::Connection
close_	talk/base/winping.h	/^    PIcmpCloseHandle close_;$/;"	m	class:talk_base::WinPing
closedown	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::closedown(uint32 err) {$/;"	f	class:cricket::PseudoTcp
closesocket	talk/base/socket.h	99;"	d
cmsDelay_	talk/base/messagequeue.h	/^  int cmsDelay_; \/\/ for debugging$/;"	m	class:talk_base::DelayedMessage
codec	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^    Win32Codec* codec;$/;"	m	struct:_MSTrueSpeechDecoder
codec	talk/third_party/mediastreamer/mstruespeechencoder.h	/^    Win32Codec* codec;$/;"	m	struct:_MSTrueSpeechEncoder
codecs	talk/session/phone/gipslitemediaengine.cc	/^std::vector<Codec> GipsLiteMediaEngine::codecs()$/;"	f	class:GipsLiteMediaEngine
codecs	talk/session/phone/linphonemediaengine.h	/^  virtual std::vector<Codec, std::allocator<Codec> > codecs() {return codecs_;}$/;"	f	class:cricket::LinphoneMediaEngine
codecs	talk/session/phone/phonesessionclient.h	/^  const std::vector<Codec>& codecs() const { return codecs_; }$/;"	f	class:cricket::PhoneSessionDescription
codecs_	talk/session/phone/gipslitemediaengine.h	/^  std::vector<Codec> codecs_;$/;"	m	class:cricket::GipsLiteMediaEngine
codecs_	talk/session/phone/linphonemediaengine.h	/^  std::vector<Codec, std::allocator<Codec> > codecs_;$/;"	m	class:cricket::LinphoneMediaEngine
codecs_	talk/session/phone/phonesessionclient.h	/^  std::vector<Codec> codecs_;$/;"	m	class:cricket::PhoneSessionDescription
comp_buf	talk/third_party/mediastreamer/msavencoder.h	/^	MSBuffer *comp_buf;$/;"	m	struct:_MSAVEncoder
compare	talk/third_party/mediastreamer/ms.c	/^static gint compare(gconstpointer a, gconstpointer b)$/;"	f	file:
compare_names	talk/third_party/mediastreamer/msfilter.c	/^static gint compare_names(gpointer info, gpointer name)$/;"	f	file:
compatibility_mode_	talk/p2p/base/session.h	/^  bool compatibility_mode_;  \/\/ indicates talking to an old client$/;"	m	class:cricket::Session
complete	talk/base/httpbase.cc	/^HttpParser::complete(HttpError err) {$/;"	f	class:talk_base::HttpParser
complete_	talk/base/asynchttprequest.h	/^  bool complete_;$/;"	m	class:talk_base::HttpMonitor
cond	talk/third_party/mediastreamer/msv4l.h	/^	GCond *cond;$/;"	m	struct:_MSV4l
config_	talk/p2p/client/basicportallocator.cc	/^  PortConfiguration* config_;$/;"	m	class:cricket::AllocationSequence	file:
configs_	talk/p2p/client/basicportallocator.h	/^  std::vector<PortConfiguration*> configs_;$/;"	m	class:cricket::BasicPortAllocatorSession
configuration_done_	talk/p2p/client/basicportallocator.h	/^  bool configuration_done_;$/;"	m	class:cricket::BasicPortAllocatorSession
conn	talk/p2p/base/port_unittest.cc	/^  Connection* conn;$/;"	m	struct:Foo	file:
connect	talk/base/sigslot.h	/^			void connect(desttype* pclass, void (desttype::*pmemfun)())$/;"	f	class:sigslot::signal0
connect	talk/base/sigslot.h	/^			void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type))$/;"	f	class:sigslot::signal1
connect	talk/base/sigslot.h	/^			void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal2
connect	talk/base/sigslot.h	/^			void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal3
connect	talk/base/sigslot.h	/^			void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal4
connect	talk/base/sigslot.h	/^			void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal5
connect	talk/base/sigslot.h	/^			void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal6
connect	talk/base/sigslot.h	/^			void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal7
connect	talk/base/sigslot.h	/^			void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal8
connect_requested	talk/p2p/base/transport.h	/^  bool connect_requested() const { return connect_requested_; }$/;"	f	class:cricket::Transport
connect_requested_	talk/p2p/base/transport.h	/^  bool connect_requested_;$/;"	m	class:cricket::Transport
connect_time_	talk/base/win32socketserver.h	/^  uint32 connect_time_;$/;"	m	class:talk_base::Win32Socket
connected	talk/base/sigslot.h	/^			bool connected(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base0
connected	talk/base/sigslot.h	/^			bool connected(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base1
connected	talk/base/sigslot.h	/^			bool connected(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base2
connected	talk/base/sigslot.h	/^			bool connected(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base3
connected	talk/base/sigslot.h	/^			bool connected(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base4
connected	talk/base/sigslot.h	/^			bool connected(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base5
connected	talk/base/sigslot.h	/^			bool connected(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base6
connected	talk/base/sigslot.h	/^			bool connected(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base7
connected	talk/base/sigslot.h	/^			bool connected(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base8
connected	talk/p2p/base/port.h	/^  bool connected() const { return connected_; }$/;"	f	class:cricket::Connection
connected	talk/p2p/base/relayport.cc	/^  bool connected() const { return connected_; }$/;"	f	class:cricket::RelayEntry
connected_	talk/base/natsocketfactory.cc	/^  bool connected_;$/;"	m	class:talk_base::NATSocket	file:
connected_	talk/base/virtualsocketserver.cc	/^  bool connected_;$/;"	m	class:talk_base::VirtualSocket	file:
connected_	talk/p2p/base/port.h	/^  bool connected_;$/;"	m	class:cricket::Connection
connected_	talk/p2p/base/relayport.cc	/^  bool connected_;$/;"	m	class:cricket::RelayEntry	file:
connection_	talk/p2p/base/port.cc	/^  Connection* connection_;$/;"	m	class:cricket::ConnectionRequest	file:
connection_id	talk/base/httpserver.h	/^  int connection_id() const { return connection_id_; }$/;"	f	class:talk_base::HttpTransaction
connection_id_	talk/base/httpserver.h	/^    int connection_id_;$/;"	m	class:talk_base::HttpServer::Connection
connection_id_	talk/base/httpserver.h	/^  int connection_id_;$/;"	m	class:talk_base::HttpTransaction
connection_infos_	talk/p2p/client/socketmonitor.h	/^  std::vector<ConnectionInfo> connection_infos_;$/;"	m	class:cricket::SocketMonitor
connections	talk/p2p/base/p2ptransportchannel.h	/^  const std::vector<Connection *>& connections() const { return connections_; }$/;"	f	class:cricket::P2PTransportChannel
connections	talk/p2p/base/port.h	/^  const AddressMap& connections() { return connections_; }  $/;"	f	class:cricket::Port
connections_	talk/base/httpserver.h	/^  ConnectionMap connections_;$/;"	m	class:talk_base::HttpServer
connections_	talk/p2p/base/p2ptransportchannel.h	/^  std::vector<Connection *> connections_;$/;"	m	class:cricket::P2PTransportChannel
connections_	talk/p2p/base/port.h	/^  AddressMap connections_;$/;"	m	class:cricket::Port
connections_	talk/p2p/base/relayserver.h	/^  ConnectionMap connections_;$/;"	m	class:cricket::RelayServer
connections_list	talk/base/sigslot.h	/^			arg4_type, arg5_type, arg6_type, arg7_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base7
connections_list	talk/base/sigslot.h	/^			arg4_type, arg5_type, arg6_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base6
connections_list	talk/base/sigslot.h	/^			arg4_type, arg5_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base5
connections_list	talk/base/sigslot.h	/^			arg4_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base4
connections_list	talk/base/sigslot.h	/^			connections_list;$/;"	t	class:sigslot::_signal_base2
connections_list	talk/base/sigslot.h	/^			connections_list;$/;"	t	class:sigslot::_signal_base3
connections_list	talk/base/sigslot.h	/^			connections_list;$/;"	t	class:sigslot::_signal_base8
connections_list	talk/base/sigslot.h	/^		typedef std::list<_connection_base0<mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base0
connections_list	talk/base/sigslot.h	/^		typedef std::list<_connection_base1<arg1_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base1
connections_list	talk/base/sigslot.h	/^		typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal0
connections_list	talk/base/sigslot.h	/^		typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal1
connections_list	talk/base/sigslot.h	/^		typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal2
connections_list	talk/base/sigslot.h	/^		typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal3
connections_list	talk/base/sigslot.h	/^		typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal4
connections_list	talk/base/sigslot.h	/^		typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal5
connections_list	talk/base/sigslot.h	/^		typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal6
connections_list	talk/base/sigslot.h	/^		typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal7
connections_list	talk/base/sigslot.h	/^		typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal8
console_	talk/examples/call/callclient.h	/^  Console *console_;$/;"	m	class:CallClient
const_iterator	talk/base/httpcommon.h	/^  typedef HeaderMap::const_iterator const_iterator;$/;"	t	struct:talk_base::HttpData
const_iterator	talk/base/sigslot.h	/^		typedef typename sender_set::const_iterator const_iterator;$/;"	t	class:sigslot::has_slots
constructor	talk/third_party/mediastreamer/msfilter.h	/^	MSFilterNewFunc constructor;$/;"	m	struct:_MSFilterInfo
content_length_	talk/base/socketadapters.h	/^  size_t content_length_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
context_	talk/base/httpclient.h	/^  scoped_ptr<HttpAuthContext> context_;$/;"	m	class:talk_base::HttpClient
context_	talk/base/socketadapters.h	/^  HttpAuthContext * context_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
context_	talk/xmllite/xmlparser.h	/^  ParseContext context_;$/;"	m	class:buzz::XmlParser
conv	talk/p2p/base/pseudotcp.h	/^    uint32 conv, seq, ack;$/;"	m	struct:cricket::PseudoTcp::Segment
cookie_	talk/xmpp/saslcookiemechanism.h	/^  std::string cookie_;$/;"	m	class:buzz::SaslCookieMechanism
count	talk/base/virtualsocket_unittest.cc	/^  uint32 count;$/;"	m	struct:Receiver	file:
count	talk/base/virtualsocket_unittest.cc	/^  uint32 count;$/;"	m	struct:Sender	file:
count	talk/p2p/base/port_unittest.cc	/^  int count;$/;"	m	struct:Foo	file:
count	talk/third_party/mediastreamer/msv4l.h	/^	gint count;$/;"	m	struct:_MSV4l
count_	talk/base/streamutils.h	/^  size_t count_;$/;"	m	class:StreamCounter
count_	talk/p2p/base/stunrequest.h	/^  int count_;$/;"	m	class:cricket::StunRequest
counter_	talk/session/fileshare/fileshare.h	/^  const StreamCounter* counter_;$/;"	m	class:cricket::FileShareSession
counter_	talk/xmpp/ratelimitmanager.h	/^    int counter_; \/\/ count modulo max_count of the current event$/;"	m	class:buzz::RateLimitManager::RateLimit
create_	talk/base/winping.h	/^    PIcmpCreateFile create_;$/;"	m	class:talk_base::WinPing
create_count	talk/p2p/base/session_unittest.cc	/^  int create_count;$/;"	m	struct:MySessionClient	file:
create_count	talk/p2p/base/session_unittest.cc	/^  uint32 create_count;$/;"	m	struct:SessionManagerHandler	file:
create_duplex_rtpsession	talk/third_party/mediastreamer/audiostream.c	/^void create_duplex_rtpsession(RtpProfile *profile, int locport,char *remip,int remport,$/;"	f
create_rtp_sessions	talk/third_party/mediastreamer/audiostream.c	/^void create_rtp_sessions(RtpProfile *profile, int locport,char *remip,int remport,$/;"	f
cred	talk/base/httpcommon.cc	/^  CredHandle cred;$/;"	m	struct:talk_base::NegotiateAuthContext	file:
cred	talk/base/schanneladapter.cc	/^  CredHandle cred;$/;"	m	struct:talk_base::SChannelAdapter::SSLImpl	file:
cred_init	talk/base/schanneladapter.cc	/^  bool cred_init, ctx_init;$/;"	m	struct:talk_base::SChannelAdapter::SSLImpl	file:
cricket	talk/base/helpers.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/base/helpers.h	/^namespace cricket {$/;"	n
cricket	talk/examples/call/callclient.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/candidate.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/constants.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/constants.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/p2ptransport.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/p2ptransport.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/p2ptransportchannel.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/p2ptransportchannel.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/port.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/port.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/portallocator.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/pseudotcp.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/pseudotcp.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/rawtransport.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/rawtransport.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/rawtransportchannel.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/rawtransportchannel.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/relayport.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/relayport.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/relayserver.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/relayserver.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/session.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/session.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/sessionclient.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/sessiondescription.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/sessionid.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/sessionmanager.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/sessionmanager.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/stun.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/stun.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/stunport.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/stunport.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/stunrequest.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/stunrequest.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/stunserver.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/stunserver.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/tcpport.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/tcpport.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/transport.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/transport.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/transportchannel.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/transportchannel.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/transportchannelimpl.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/transportchannelproxy.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/transportchannelproxy.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/base/udpport.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/base/udpport.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/client/basicportallocator.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/client/basicportallocator.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/client/httpportallocator.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/client/httpportallocator.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/client/sessionmanagertask.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/client/sessionsendtask.h	/^namespace cricket {$/;"	n
cricket	talk/p2p/client/socketmonitor.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/p2p/client/socketmonitor.h	/^namespace cricket {$/;"	n
cricket	talk/session/fileshare/fileshare.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/session/fileshare/fileshare.h	/^namespace cricket {$/;"	n
cricket	talk/session/phone/audiomonitor.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/session/phone/audiomonitor.h	/^namespace cricket {$/;"	n
cricket	talk/session/phone/call.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/session/phone/call.h	/^namespace cricket {$/;"	n
cricket	talk/session/phone/channelmanager.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/session/phone/channelmanager.h	/^namespace cricket {$/;"	n
cricket	talk/session/phone/gipslitemediaengine.h	/^namespace cricket {$/;"	n
cricket	talk/session/phone/linphonemediaengine.h	/^namespace cricket {$/;"	n
cricket	talk/session/phone/mediachannel.h	/^namespace cricket {$/;"	n
cricket	talk/session/phone/mediaengine.h	/^namespace cricket {$/;"	n
cricket	talk/session/phone/phonesessionclient.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/session/phone/phonesessionclient.h	/^namespace cricket {$/;"	n
cricket	talk/session/phone/voicechannel.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/session/phone/voicechannel.h	/^namespace cricket {$/;"	n
cricket	talk/session/tunnel/pseudotcpchannel.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/session/tunnel/pseudotcpchannel.h	/^namespace cricket {$/;"	n
cricket	talk/session/tunnel/tunnelsessionclient.cc	/^namespace cricket {$/;"	n	file:
cricket	talk/session/tunnel/tunnelsessionclient.h	/^namespace cricket {$/;"	n
cricket_socket_	talk/examples/login/xmppsocket.h	/^  talk_base::AsyncSocket * cricket_socket_;$/;"	m	class:XmppSocket
crit_	talk/base/criticalsection.h	/^  CRITICAL_SECTION crit_;$/;"	m	class:talk_base::CriticalSection
crit_	talk/base/firewallsocketserver.h	/^  CriticalSection crit_;$/;"	m	class:talk_base::FirewallManager
crit_	talk/base/firewallsocketserver.h	/^  CriticalSection crit_;$/;"	m	class:talk_base::FirewallSocketServer
crit_	talk/base/messagequeue.h	/^  CriticalSection crit_;$/;"	m	class:talk_base::MessageQueue
crit_	talk/base/messagequeue.h	/^  CriticalSection crit_;$/;"	m	class:talk_base::MessageQueueManager
crit_	talk/base/physicalsocketserver.cc	/^  CriticalSection crit_;$/;"	m	class:talk_base::EventDispatcher	file:
crit_	talk/base/physicalsocketserver.h	/^  CriticalSection crit_;$/;"	m	class:talk_base::PhysicalSocketServer
crit_	talk/base/thread.h	/^  CriticalSection crit_;$/;"	m	class:talk_base::ThreadManager
crit_	talk/p2p/base/transport.h	/^  talk_base::CriticalSection crit_; \/\/ Protects changes to channels and messages$/;"	m	class:cricket::Transport
crit_	talk/p2p/client/socketmonitor.h	/^  talk_base::CriticalSection crit_;$/;"	m	class:cricket::SocketMonitor
crit_	talk/session/phone/audiomonitor.h	/^  talk_base::CriticalSection crit_;$/;"	m	class:cricket::AudioMonitor
crit_	talk/session/phone/channelmanager.h	/^  talk_base::CriticalSection crit_;$/;"	m	class:cricket::ChannelManager
cs_	talk/session/tunnel/pseudotcpchannel.h	/^  mutable talk_base::CriticalSection cs_;$/;"	m	class:cricket::PseudoTcpChannel
cstr_	talk/base/convert.h	/^  CString cstr_;$/;"	m	class:Utf16
ctx	talk/base/httpcommon.cc	/^  CtxtHandle ctx;$/;"	m	struct:talk_base::NegotiateAuthContext	file:
ctx	talk/base/schanneladapter.cc	/^  CtxtHandle ctx;$/;"	m	struct:talk_base::SChannelAdapter::SSLImpl	file:
ctx_init	talk/base/schanneladapter.cc	/^  bool cred_init, ctx_init;$/;"	m	struct:talk_base::SChannelAdapter::SSLImpl	file:
ctx_sev_	talk/base/logging.cc	/^int LogMessage::ctx_sev_ = LS_WARNING;$/;"	m	class:talk_base::LogMessage	file:
ctx_sev_	talk/base/logging.h	/^  static int min_sev_, dbg_sev_, stream_sev_, ctx_sev_;$/;"	m	class:talk_base::LogMessage
cum_lost	talk/session/phone/mediachannel.h	/^	unsigned long cum_lost;$/;"	m	struct:cricket::MediaInfo
current	talk/third_party/mediastreamer/msnosync.h	/^	struct timeval start,current;$/;"	m	struct:_MSNoSync	typeref:struct:_MSNoSync::
current_	talk/base/httpserver.h	/^    HttpTransaction* current_;$/;"	m	class:talk_base::HttpServer::Connection
current_	talk/base/tarstream.h	/^  talk_base::FileStream* current_;$/;"	m	class:talk_base::TarStream
current_bytes_	talk/base/tarstream.h	/^  size_t current_bytes_;$/;"	m	class:talk_base::TarStream
current_pos	talk/third_party/mediastreamer/msringplayer.h	/^	gint current_pos;$/;"	m	struct:_MSRingPlayer
d	talk/base/firewallsocketserver.h	/^    FirewallDirection d;$/;"	m	struct:talk_base::FirewallSocketServer::Rule
d_	talk/xmpp/xmppclient.h	/^  scoped_ptr<Private> d_;$/;"	m	class:buzz::XmppClient
data	talk/base/messagequeue.h	/^  T& data() { return data_; }$/;"	f	class:talk_base::TypedMessageData
data	talk/base/messagequeue.h	/^  const T& data() const { return data_; }$/;"	f	class:talk_base::TypedMessageData
data	talk/base/virtualsocketserver.cc	/^  const char* data() const { return data_; }$/;"	f	class:talk_base::Packet
data	talk/p2p/base/pseudotcp.h	/^    const char * data;$/;"	m	struct:cricket::PseudoTcp::Segment
data	talk/third_party/mediastreamer/jackcard.h	/^  SRC_DATA data;$/;"	m	struct:__anon42
data	talk/third_party/mediastreamer/msbuffer.h	/^   void *data;          \/*points to buffer->buffer  *\/$/;"	m	struct:_MSMessage
data	talk/third_party/mediastreamer/waveheader.h	/^	char data[4] ;	\/* "data" (ASCII characters) *\/$/;"	m	struct:_data_t
data_	talk/base/fileutils.h	/^  WIN32_FIND_DATA data_;$/;"	m	class:talk_base::DirectoryIterator
data_	talk/base/httpbase.h	/^  HttpData* data_;$/;"	m	class:talk_base::HttpBase
data_	talk/base/messagequeue.h	/^  T data_;$/;"	m	class:talk_base::TypedMessageData
data_	talk/base/messagequeue.h	/^  T* data_;$/;"	m	class:talk_base::DisposeData
data_	talk/base/virtualsocketserver.cc	/^  char* data_;$/;"	m	class:talk_base::Packet	file:
data_	talk/base/winping.h	/^    char* data_;$/;"	m	class:talk_base::WinPing
data_	talk/xmllite/qname.h	/^  Data * data_;$/;"	m	class:buzz::QName
data_	talk/xmpp/jid.h	/^  Data * data_;$/;"	m	class:buzz::Jid
data_chunk	talk/third_party/mediastreamer/waveheader.h	/^	data_t data_chunk;$/;"	m	struct:_wave_header_t
data_count	talk/p2p/base/session_unittest.cc	/^  int data_count;$/;"	m	struct:ChannelHandler	file:
data_len	talk/base/streamutils.h	/^    size_t data_len;$/;"	m	struct:StreamRelay::Direction
data_len_	talk/base/socketadapters.h	/^  size_t buffer_size_, data_len_;$/;"	m	class:talk_base::BufferedReadAdapter
data_length_	talk/base/stream.h	/^  size_t   data_length_;$/;"	m	class:talk_base::MemoryStream
data_size_	talk/base/httpbase.h	/^  size_t data_size_;$/;"	m	class:talk_base::HttpParser
data_t	talk/third_party/mediastreamer/waveheader.h	/^} data_t;$/;"	t	typeref:struct:_data_t
datadir	talk/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/base/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/examples/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/examples/call/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/examples/login/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/examples/pcp/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/p2p/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/p2p/base/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/p2p/client/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/session/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/session/fileshare/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/session/phone/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/session/tunnel/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/third_party/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/third_party/gips/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/third_party/mediastreamer/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/xmllite/Makefile	/^datadir = ${prefix}\/share$/;"	m
datadir	talk/xmpp/Makefile	/^datadir = ${prefix}\/share$/;"	m
dbg_sev_	talk/base/logging.cc	/^int LogMessage::dbg_sev_ = LOG_DEFAULT;$/;"	m	class:talk_base::LogMessage	file:
dbg_sev_	talk/base/logging.h	/^  static int min_sev_, dbg_sev_, stream_sev_, ctx_sev_;$/;"	m	class:talk_base::LogMessage
debug_force_timeout_	talk/xmpp/xmpptask.h	/^  bool debug_force_timeout_;$/;"	m	class:buzz::XmppTask
debug_input_alloc_	talk/examples/call/call_main.cc	/^  int debug_input_alloc_;$/;"	m	class:DebugLog	file:
debug_input_alloc_	talk/examples/pcp/pcp_main.cc	/^  int debug_input_alloc_;$/;"	m	class:DebugLog	file:
debug_input_buf_	talk/examples/call/call_main.cc	/^  char * debug_input_buf_;$/;"	m	class:DebugLog	file:
debug_input_buf_	talk/examples/pcp/pcp_main.cc	/^  char * debug_input_buf_;$/;"	m	class:DebugLog	file:
debug_input_len_	talk/examples/call/call_main.cc	/^  int debug_input_len_;$/;"	m	class:DebugLog	file:
debug_input_len_	talk/examples/pcp/pcp_main.cc	/^  int debug_input_len_;$/;"	m	class:DebugLog	file:
debug_log_	talk/examples/call/call_main.cc	/^static DebugLog debug_log_;$/;"	v	file:
debug_log_	talk/examples/pcp/pcp_main.cc	/^static DebugLog debug_log_;$/;"	v	file:
debug_output_alloc_	talk/examples/call/call_main.cc	/^  int debug_output_alloc_;$/;"	m	class:DebugLog	file:
debug_output_alloc_	talk/examples/pcp/pcp_main.cc	/^  int debug_output_alloc_;$/;"	m	class:DebugLog	file:
debug_output_buf_	talk/examples/call/call_main.cc	/^  char * debug_output_buf_;$/;"	m	class:DebugLog	file:
debug_output_buf_	talk/examples/pcp/pcp_main.cc	/^  char * debug_output_buf_;$/;"	m	class:DebugLog	file:
debug_output_len_	talk/examples/call/call_main.cc	/^  int debug_output_len_;$/;"	m	class:DebugLog	file:
debug_output_len_	talk/examples/pcp/pcp_main.cc	/^  int debug_output_len_;$/;"	m	class:DebugLog	file:
decode	talk/base/base64.cc	/^string Base64::decode(const string& data) {$/;"	f	class:talk_base::Base64
decode	talk/base/stringencode.cc	/^size_t decode(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
decoder	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *decoder;$/;"	m	struct:_AudioStream
decoder	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *decoder;$/;"	m	struct:_VideoStream
decoder	talk/third_party/mediastreamer/mscodec.h	/^	MSFilterNewFunc decoder;$/;"	m	struct:_MSCodecInfo
def_	talk/base/proxydetect.cc	/^  mutable std::string def_;$/;"	m	struct:StringMap	file:
default_dest_	talk/p2p/base/relayserver.h	/^  talk_base::SocketAddress default_dest_;$/;"	m	class:cricket::RelayServerConnection
default_destination	talk/p2p/base/relayserver.h	/^  const talk_base::SocketAddress& default_destination() const { return default_dest_; }$/;"	f	class:cricket::RelayServerConnection
default_filesystem	talk/base/fileutils.h	/^  static Filesystem *default_filesystem(void) { ASSERT(default_filesystem_!=NULL); return default_filesystem_; }$/;"	f	class:talk_base::Filesystem
default_filesystem_	talk/base/fileutils.cc	/^Filesystem *Filesystem::default_filesystem_ = 0;$/;"	m	class:talk_base::Filesystem	file:
default_filesystem_	talk/base/fileutils.h	/^  static Filesystem *default_filesystem_;$/;"	m	class:talk_base::Filesystem
defcard	talk/third_party/mediastreamer/audiostream.c	/^static int defcard=0;$/;"	v	file:
defer_error_	talk/base/socketadapters.h	/^  int defer_error_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
delay	talk/third_party/mediastreamer/msrtpsend.h	/^        guint delay; \/* number of _proccess call which must be skipped *\/$/;"	m	struct:_MSRtpSend
delay_crit_	talk/base/virtualsocketserver.h	/^  CriticalSection delay_crit_;$/;"	m	class:talk_base::VirtualSocketServer
delay_dist_	talk/base/virtualsocketserver.h	/^  Function* delay_dist_;$/;"	m	class:talk_base::VirtualSocketServer
delay_mean	talk/base/virtualsocketserver.h	/^  uint32 delay_mean() { return delay_mean_; }$/;"	f	class:talk_base::VirtualSocketServer
delay_mean_	talk/base/virtualsocketserver.h	/^  uint32 delay_mean_;$/;"	m	class:talk_base::VirtualSocketServer
delay_stddev	talk/base/virtualsocketserver.h	/^  uint32 delay_stddev() { return delay_stddev_; }$/;"	f	class:talk_base::VirtualSocketServer
delay_stddev_	talk/base/virtualsocketserver.h	/^  uint32 delay_stddev_;$/;"	m	class:talk_base::VirtualSocketServer
delivering_signal_	talk/xmpp/xmppclient.h	/^  bool delivering_signal_;$/;"	m	class:buzz::XmppClient
depcomp	talk/base/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/examples/call/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/examples/login/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/examples/pcp/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/p2p/base/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/p2p/client/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/session/fileshare/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/session/phone/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/session/tunnel/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/third_party/mediastreamer/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/xmllite/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	talk/xmpp/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depth_	talk/xmpp/xmppstanzaparser.h	/^  int depth_;$/;"	m	class:buzz::XmppStanzaParser
desc	talk/base/sec_buffer.h	/^  PSecBufferDesc desc() {$/;"	f	class:talk_base::CSecBufferBundle
desc	talk/base/sec_buffer.h	/^  const PSecBufferDesc desc() const {$/;"	f	class:talk_base::CSecBufferBundle
desc_	talk/base/sec_buffer.h	/^  SecBufferDesc               desc_;$/;"	m	class:talk_base::CSecBufferBundle
description	talk/p2p/base/session.h	/^  const SessionDescription *description() const { return description_; }$/;"	f	class:cricket::Session
description	talk/session/fileshare/fileshare.cc	/^const FileShareSession::FileShareDescription* FileShareSession::description()$/;"	f	class:cricket::FileShareSession
description	talk/session/tunnel/tunnelsessionclient.cc	/^  std::string description;$/;"	m	struct:cricket::CreateTunnelData	file:
description	talk/session/tunnel/tunnelsessionclient.cc	/^  std::string description;$/;"	m	struct:cricket::TunnelSessionDescription	file:
description	talk/third_party/mediastreamer/mscodec.h	/^	gchar *description;		\/* a rtpmap field to describe the codec *\/$/;"	m	struct:_MSCodecInfo
description	talk/third_party/mediastreamer/msfilter.h	/^	char *description;  \/*some textual information*\/$/;"	m	struct:_MSFilterInfo
description_	talk/p2p/base/session.h	/^  const SessionDescription *description_;$/;"	m	class:cricket::Session
dest_	talk/base/socketadapters.h	/^  SocketAddress proxy_, dest_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
dest_	talk/base/socketadapters.h	/^  SocketAddress proxy_, dest_;$/;"	m	class:talk_base::AsyncSocksProxySocket
dest_	talk/base/socketaddresspair.h	/^  SocketAddress dest_;$/;"	m	class:talk_base::SocketAddressPair
destination	talk/base/socketaddresspair.h	/^  const SocketAddress& destination() const { return dest_; }$/;"	f	class:talk_base::SocketAddressPair
destroy	talk/third_party/mediastreamer/msfilter.h	/^	void (*destroy)(MSFilter *filter);$/;"	m	struct:_MSFilterClass
destroy	talk/third_party/mediastreamer/mssync.h	/^	MSSyncDestroyFunc destroy;$/;"	m	struct:_MSSyncClass
destroy_count	talk/p2p/base/session_unittest.cc	/^  uint32 destroy_count;$/;"	m	struct:SessionManagerHandler	file:
destroyed_	talk/p2p/base/transport.h	/^  bool destroyed_;$/;"	m	class:cricket::Transport
detach	talk/base/httpbase.cc	/^HttpBase::detach() {$/;"	f	class:talk_base::HttpBase
detach	talk/third_party/mediastreamer/mssync.h	/^	MSSyncDetachFunc detach;$/;"	m	struct:_MSSyncClass
dev_name	talk/third_party/mediastreamer/msvideosource.h	/^    gchar *dev_name;$/;"	m	struct:_MSVideoSource
dev_name	talk/third_party/mediastreamer/osscard.h	/^	gchar *dev_name;            \/* \/dev\/dsp0 for example *\/$/;"	m	struct:_OssCard
device	talk/third_party/mediastreamer/msv4l.h	/^	char *device;$/;"	m	struct:_MSV4l
devid	talk/third_party/mediastreamer/msossread.h	/^	gint devid;  \/* the sound device id it depends on*\/$/;"	m	struct:_MSOssRead
devid	talk/third_party/mediastreamer/msosswrite.h	/^	gint devid;  \/* the sound device id it depends on*\/$/;"	m	struct:_MSOssWrite
dir_	talk/base/fileutils.h	/^  DIR *dir_;$/;"	m	class:talk_base::DirectoryIterator
dir_	talk/base/streamutils.h	/^  Direction dir_[2];$/;"	m	class:StreamRelay
directory_	talk/base/fileutils.h	/^  std::string directory_;$/;"	m	class:talk_base::DirectoryIterator
dirent_	talk/base/fileutils.h	/^  struct dirent *dirent_;$/;"	m	class:talk_base::DirectoryIterator	typeref:struct:talk_base::DirectoryIterator::dirent
disconnect	talk/base/sigslot.h	/^		void disconnect(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base0
disconnect	talk/base/sigslot.h	/^		void disconnect(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base1
disconnect	talk/base/sigslot.h	/^		void disconnect(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base2
disconnect	talk/base/sigslot.h	/^		void disconnect(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base3
disconnect	talk/base/sigslot.h	/^		void disconnect(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base4
disconnect	talk/base/sigslot.h	/^		void disconnect(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base5
disconnect	talk/base/sigslot.h	/^		void disconnect(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base6
disconnect	talk/base/sigslot.h	/^		void disconnect(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base7
disconnect	talk/base/sigslot.h	/^		void disconnect(has_slots<mt_policy>* pclass)$/;"	f	class:sigslot::_signal_base8
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::_signal_base0
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::_signal_base1
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::_signal_base2
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::_signal_base3
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::_signal_base4
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::_signal_base5
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::_signal_base6
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::_signal_base7
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::_signal_base8
disconnect_all	talk/base/sigslot.h	/^		void disconnect_all()$/;"	f	class:sigslot::has_slots
dispatchers_	talk/base/physicalsocketserver.h	/^  std::vector<Dispatcher*> dispatchers_;$/;"	m	class:talk_base::PhysicalSocketServer
dist_libcricketsessionphone_la_OBJECTS	talk/session/phone/Makefile	/^dist_libcricketsessionphone_la_OBJECTS =  \\$/;"	m
dist_libcricketsessionphone_la_SOURCES	talk/session/phone/Makefile	/^dist_libcricketsessionphone_la_SOURCES = linphonemediaengine.cc$/;"	m
dld_link	configure	/^dld_link ();$/;"	f
dlen_	talk/base/winping.h	/^    uint32 dlen_;$/;"	m	class:talk_base::WinPing
dll_	talk/base/winping.h	/^    HMODULE dll_;$/;"	m	class:talk_base::WinPing
dlopen	configure	/^dlopen ();$/;"	f
dmsgq_	talk/base/messagequeue.h	/^  std::priority_queue<DelayedMessage> dmsgq_;$/;"	m	class:talk_base::MessageQueue
dns_	talk/base/win32socketserver.h	/^  DnsLookup * dns_;$/;"	m	class:talk_base::Win32Socket
do_complete	talk/base/httpbase.cc	/^HttpBase::do_complete(HttpError err) {$/;"	f	class:talk_base::HttpBase
document	talk/base/httpcommon.h	/^  scoped_ptr<StreamInterface> document;$/;"	m	struct:talk_base::HttpData
domain	talk/xmpp/jid.h	/^  const std::string & domain() const { return !data_ ? STR_EMPTY : data_->domain_name_; }$/;"	f	class:buzz::Jid
domain_name_	talk/xmpp/jid.h	/^    const std::string domain_name_;$/;"	m	class:buzz::Jid::Data
done	talk/base/asynchttprequest.h	/^  bool done() const { return complete_; }$/;"	f	class:talk_base::HttpMonitor
done	talk/base/virtualsocket_unittest.cc	/^  bool done;$/;"	m	struct:Receiver	file:
done	talk/base/virtualsocket_unittest.cc	/^  bool done;$/;"	m	struct:Sender	file:
done_	talk/base/task.h	/^  bool done_;$/;"	m	class:talk_base::Task
done_	talk/examples/login/jingleinfotask.cc	/^  bool done_;$/;"	m	class:buzz::JingleInfoTask::JingleInfoGetTask	file:
done_	talk/examples/login/xmppauth.h	/^  bool done_, error_;$/;"	m	class:XmppAuth
done_time	talk/base/virtualsocketserver.cc	/^    uint32 done_time;$/;"	m	struct:talk_base::VirtualSocket::QueueEntry	file:
driver	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^  Win32CodecDriver* driver;$/;"	m	struct:_MSTrueSpeechDecoderClass
driver	talk/third_party/mediastreamer/mstruespeechencoder.h	/^  Win32CodecDriver* driver;$/;"	m	struct:_MSTrueSpeechEncoderClass
drop_prob_	talk/base/virtualsocketserver.h	/^  double drop_prob_;$/;"	m	class:talk_base::VirtualSocketServer
drop_probability	talk/base/virtualsocketserver.h	/^  double drop_probability() { return drop_prob_; }$/;"	f	class:talk_base::VirtualSocketServer
dt_size	talk/third_party/mediastreamer/mscodec.h	/^	gint dt_size;	\/* size in char of the compressed frame *\/$/;"	m	struct:_MSCodecInfo
dtmf_duration	talk/third_party/mediastreamer/msosswrite.h	/^	gint dtmf_duration;$/;"	m	struct:_MSOssWrite
dtmf_tab	talk/third_party/mediastreamer/audiostream.c	/^static int dtmf_tab[16]={'0','1','2','3','4','5','6','7','8','9','*','#','A','B','C','D'};$/;"	v	file:
dtmf_time	talk/third_party/mediastreamer/msosswrite.h	/^	gint dtmf_time;$/;"	m	struct:_MSOssWrite
dummy	talk/base/virtualsocket_unittest.cc	/^  char dummy[4096];$/;"	m	struct:Sender	file:
duplicate	talk/base/sigslot.h	/^			arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* duplicate(has_slots<mt_policy>* pnewdest)$/;"	f	class:sigslot::_connection8
duplicate	talk/base/sigslot.h	/^			arg5_type, arg6_type, arg7_type, mt_policy>* duplicate(has_slots<mt_policy>* pnewdest)$/;"	f	class:sigslot::_connection7
duplicate	talk/base/sigslot.h	/^			arg5_type, arg6_type, mt_policy>* duplicate(has_slots<mt_policy>* pnewdest)$/;"	f	class:sigslot::_connection6
duplicate	talk/base/sigslot.h	/^			arg5_type, mt_policy>* duplicate(has_slots<mt_policy>* pnewdest)$/;"	f	class:sigslot::_connection5
duplicate	talk/base/sigslot.h	/^		virtual _connection_base0<mt_policy>* duplicate(has_slots<mt_policy>* pnewdest)$/;"	f	class:sigslot::_connection0
duplicate	talk/base/sigslot.h	/^		virtual _connection_base1<arg1_type, mt_policy>* duplicate(has_slots<mt_policy>* pnewdest)$/;"	f	class:sigslot::_connection1
duplicate	talk/base/sigslot.h	/^		virtual _connection_base2<arg1_type, arg2_type, mt_policy>* duplicate(has_slots<mt_policy>* pnewdest)$/;"	f	class:sigslot::_connection2
duplicate	talk/base/sigslot.h	/^		virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* duplicate(has_slots<mt_policy>* pnewdest)$/;"	f	class:sigslot::_connection3
duplicate	talk/base/sigslot.h	/^		virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* duplicate(has_slots<mt_policy>* pnewdest)$/;"	f	class:sigslot::_connection4
dwAccessType	talk/base/proxydetect.cc	/^    DWORD  dwAccessType;      \/\/ see WINHTTP_ACCESS_* types below$/;"	m	struct:__anon17	file:
dwAutoDetectFlags	talk/base/proxydetect.cc	/^    DWORD   dwAutoDetectFlags;$/;"	m	struct:__anon18	file:
dwFlags	talk/base/proxydetect.cc	/^    DWORD   dwFlags;$/;"	m	struct:__anon18	file:
dwFlags	talk/base/thread.cc	/^  DWORD dwFlags;$/;"	m	struct:talk_base::tagTHREADNAME_INFO	file:
dwReserved	talk/base/proxydetect.cc	/^    DWORD   dwReserved;$/;"	m	struct:__anon18	file:
dwThreadID	talk/base/thread.cc	/^  DWORD dwThreadID;$/;"	m	struct:talk_base::tagTHREADNAME_INFO	file:
dwType	talk/base/thread.cc	/^  DWORD dwType;$/;"	m	struct:talk_base::tagTHREADNAME_INFO	file:
dyn_create_function	talk/base/ssladapter.cc	/^static CRYPTO_dynlock_value* dyn_create_function(const char* file, int line) {$/;"	f	namespace:talk_base	file:
dyn_destroy_function	talk/base/ssladapter.cc	/^static void dyn_destroy_function(CRYPTO_dynlock_value* l,$/;"	f	namespace:talk_base	file:
dyn_lock_function	talk/base/ssladapter.cc	/^static void dyn_lock_function(int mode, CRYPTO_dynlock_value* l,$/;"	f	namespace:talk_base	file:
e_code_	talk/examples/login/status.h	/^  int e_code_;$/;"	m	class:buzz::Status
e_str_	talk/examples/login/status.h	/^  std::string e_str_;$/;"	m	class:buzz::Status
elem	talk/p2p/base/transport.cc	/^  buzz::XmlElement* elem;$/;"	m	struct:__anon3::ChannelParams	file:
element_type	talk/base/linked_ptr.h	/^    typedef X element_type;$/;"	t	class:talk_base::linked_ptr
element_type	talk/base/scoped_ptr.h	/^  typedef T element_type;$/;"	t	class:talk_base::scoped_array
element_type	talk/base/scoped_ptr.h	/^  typedef T element_type;$/;"	t	class:talk_base::scoped_ptr
element_type	talk/base/scoped_ptr.h	/^  typedef T element_type;$/;"	t	class:talk_base::scoped_ptr_malloc
emit	talk/base/sigslot.h	/^		virtual void emit()$/;"	f	class:sigslot::_connection0
emit	talk/base/sigslot.h	/^		virtual void emit(arg1_type a1)$/;"	f	class:sigslot::_connection1
emit	talk/base/sigslot.h	/^		virtual void emit(arg1_type a1, arg2_type a2)$/;"	f	class:sigslot::_connection2
emit	talk/base/sigslot.h	/^		virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:sigslot::_connection3
emit	talk/base/sigslot.h	/^		virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, $/;"	f	class:sigslot::_connection4
emit	talk/base/sigslot.h	/^		virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection5
emit	talk/base/sigslot.h	/^		virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection6
emit	talk/base/sigslot.h	/^		virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection7
emit	talk/base/sigslot.h	/^		virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection8
emit	talk/base/sigslot.h	/^		void emit()$/;"	f	class:sigslot::signal0
emit	talk/base/sigslot.h	/^		void emit(arg1_type a1)$/;"	f	class:sigslot::signal1
emit	talk/base/sigslot.h	/^		void emit(arg1_type a1, arg2_type a2)$/;"	f	class:sigslot::signal2
emit	talk/base/sigslot.h	/^		void emit(arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:sigslot::signal3
emit	talk/base/sigslot.h	/^		void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)$/;"	f	class:sigslot::signal4
emit	talk/base/sigslot.h	/^		void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal5
emit	talk/base/sigslot.h	/^		void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal6
emit	talk/base/sigslot.h	/^		void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal7
emit	talk/base/sigslot.h	/^		void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal8
empty	talk/session/fileshare/fileshare.h	/^  inline bool empty() const { return items_.empty(); }$/;"	f	class:cricket::FileShareManifest
empty_str	talk/base/stringutils.h	/^  inline static const char* empty_str() { return ""; }$/;"	f	struct:talk_base::Traits
empty_str	talk/base/stringutils.h	/^  inline static const wchar_t* Traits<wchar_t>::empty_str() { return L""; }$/;"	f	class:talk_base::Traits::Traits
enable_port_packets_	talk/p2p/base/port.h	/^  bool enable_port_packets_;$/;"	m	class:cricket::Port
enabled_	talk/session/phone/voicechannel.h	/^  bool enabled_;$/;"	m	class:cricket::VoiceChannel
enabled_events_	talk/base/physicalsocketserver.cc	/^  uint32 enabled_events_;$/;"	m	class:talk_base::PhysicalSocket	file:
encode	talk/base/base64.cc	/^string Base64::encode(const string& data) {$/;"	f	class:talk_base::Base64
encode	talk/base/stringencode.cc	/^size_t encode(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
encodeFromArray	talk/base/base64.cc	/^string Base64::encodeFromArray(const char * data, size_t len) {$/;"	f	class:talk_base::Base64
encoder	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *encoder;$/;"	m	struct:_AudioStream
encoder	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *encoder;$/;"	m	struct:_VideoStream
encoder	talk/third_party/mediastreamer/mscodec.h	/^	MSFilterNewFunc encoder;$/;"	m	struct:_MSCodecInfo
encrypted_	talk/xmpp/xmppengineimpl.h	/^  bool encrypted_;$/;"	m	class:buzz::XmppEngineImpl
end	talk/base/httpcommon.h	/^  inline const_iterator end() const {$/;"	f	struct:talk_base::HttpData
end	talk/base/httpcommon.h	/^  inline const_iterator end(HttpHeader header) const {$/;"	f	struct:talk_base::HttpData
end	talk/base/httpcommon.h	/^  inline const_iterator end(const std::string& name) const {$/;"	f	struct:talk_base::HttpData
end_	talk/base/bytebuffer.h	/^  size_t end_;$/;"	m	class:talk_base::ByteBuffer
end_of_input	talk/base/httpbase.cc	/^HttpParser::end_of_input() {$/;"	f	class:talk_base::HttpParser
engine	talk/xmpp/xmppclient.cc	/^XmppClient::engine() {$/;"	f	class:buzz::XmppClient
engine_	talk/session/phone/gipslitemediaengine.h	/^  GipsLiteMediaEngine *engine_;$/;"	m	class:cricket::GipsLiteMediaChannel
engine_	talk/session/phone/linphonemediaengine.h	/^  LinphoneMediaEngine *engine_;$/;"	m	class:cricket::LinphoneMediaChannel
engine_	talk/xmpp/xmppclient.cc	/^  scoped_ptr<XmppEngine> engine_;$/;"	m	class:buzz::XmppClient::Private	file:
engine_	talk/xmpp/xmppengineimpl.h	/^    XmppEngineImpl* engine_;$/;"	m	class:buzz::XmppEngineImpl::EnterExit
engine_	talk/xmpp/xmppengineimpl_iq.cc	/^  XmppEngine * const engine_;$/;"	m	class:buzz::XmppIqEntry	file:
engine_entered_	talk/xmpp/xmppengineimpl.h	/^  int engine_entered_;$/;"	m	class:buzz::XmppEngineImpl
entries_	talk/p2p/base/relayport.h	/^  std::vector<RelayEntry*> entries_;$/;"	m	class:cricket::RelayPort
entry_	talk/p2p/base/relayport.cc	/^  RelayEntry* entry_;$/;"	m	class:cricket::AllocateRequest	file:
err_	talk/base/asynchttprequest.h	/^  int err_;$/;"	m	class:talk_base::HttpMonitor
err_	talk/base/physicalsocketserver.cc	/^  int err_;$/;"	m	class:WinsockInitializer	file:
error	talk/base/asynchttprequest.h	/^  int error() const { return err_; }$/;"	f	class:talk_base::HttpMonitor
error	talk/base/physicalsocketserver.cc	/^  int error() {$/;"	f	class:WinsockInitializer
error	talk/examples/login/xmppsocket.cc	/^buzz::AsyncSocket::Error XmppSocket::error() {$/;"	f	class:XmppSocket
error	talk/p2p/base/session.h	/^  Error error() const { return error_; }$/;"	f	class:cricket::Session
error	talk/session/tunnel/pseudotcpchannel.cc	/^  int event, error;$/;"	m	struct:cricket::EventData	file:
error	talk/session/tunnel/tunnelsessionclient.cc	/^  int event, error;$/;"	m	struct:cricket::EventData	file:
error_	talk/base/physicalsocketserver.cc	/^  int error_;$/;"	m	class:talk_base::PhysicalSocket	file:
error_	talk/base/task.h	/^  bool error_;$/;"	m	class:talk_base::Task
error_	talk/base/virtualsocketserver.cc	/^  int error_;$/;"	m	class:talk_base::VirtualSocket	file:
error_	talk/base/win32socketserver.h	/^  int error_;$/;"	m	class:talk_base::Win32Socket
error_	talk/examples/login/xmppauth.h	/^  bool done_, error_;$/;"	m	class:XmppAuth
error_	talk/p2p/base/p2ptransportchannel.h	/^  int error_;$/;"	m	class:cricket::P2PTransportChannel
error_	talk/p2p/base/port.h	/^  int error_;$/;"	m	class:cricket::ProxyConnection
error_	talk/p2p/base/relayport.h	/^  int error_;$/;"	m	class:cricket::RelayPort
error_	talk/p2p/base/session.h	/^  Error error_;$/;"	m	class:cricket::Session
error_	talk/p2p/base/stunport.h	/^  int error_;$/;"	m	class:cricket::StunPort
error_	talk/p2p/base/tcpport.h	/^  int error_;$/;"	m	class:cricket::TCPConnection
error_	talk/p2p/base/tcpport.h	/^  int error_;$/;"	m	class:cricket::TCPPort
error_	talk/p2p/base/udpport.h	/^  int error_;$/;"	m	class:cricket::UDPPort
error_	talk/xmpp/xmppengineimpl.h	/^    Error error_;  $/;"	m	class:buzz::XmppEngineImpl::EnterExit
error_class	talk/p2p/base/stun.h	/^  uint8 error_class() const { return class_; }$/;"	f	class:cricket::StunErrorCodeAttribute
error_code	talk/examples/login/status.h	/^  int error_code() const { return e_code_; }$/;"	f	class:buzz::Status
error_code	talk/p2p/base/stun.h	/^  uint32 error_code() const { return (class_ << 8) | number_; }$/;"	f	class:cricket::StunErrorCodeAttribute
error_code_	talk/xmpp/xmppengineimpl.h	/^  Error error_code_;$/;"	m	class:buzz::XmppEngineImpl
error_string	talk/examples/login/status.h	/^  const std::string & error_string() const { return e_str_; }$/;"	f	class:buzz::Status
escape	talk/base/stringencode.cc	/^size_t escape(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
est_quality	talk/p2p/client/socketmonitor.h	/^  double est_quality;$/;"	m	struct:cricket::ConnectionInfo
event	talk/session/tunnel/pseudotcpchannel.cc	/^  int event, error;$/;"	m	struct:cricket::EventData	file:
event	talk/session/tunnel/tunnelsessionclient.cc	/^  int event, error;$/;"	m	struct:cricket::EventData	file:
event_	talk/base/event.h	/^  HANDLE event_;$/;"	m	class:talk_base::Event
event_times_	talk/xmpp/ratelimitmanager.h	/^    uint32* event_times_; \/\/ buffer of previous max_count event$/;"	m	class:buzz::RateLimitManager::RateLimit
exec_prefix	talk/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/base/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/examples/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/examples/call/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/examples/login/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/examples/pcp/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/p2p/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/p2p/base/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/p2p/client/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/session/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/session/fileshare/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/session/phone/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/session/tunnel/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/third_party/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/third_party/gips/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/third_party/mediastreamer/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/xmllite/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	talk/xmpp/Makefile	/^exec_prefix = ${prefix}$/;"	m
execution_list	talk/third_party/mediastreamer/mssync.h	/^	GList *execution_list;     \/* the list of filters to be executed. This is filled with compilation *\/$/;"	m	struct:_MSSync
expat_	talk/xmllite/xmlparser.h	/^  XML_Parser expat_;$/;"	m	class:buzz::XmlParser
expect_close_	talk/base/socketadapters.h	/^  bool expect_close_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
exponential_denominator_	talk/base/network.h	/^  double exponential_denominator_;$/;"	m	class:talk_base::Network
exponential_numerator_	talk/base/network.h	/^  double exponential_numerator_;$/;"	m	class:talk_base::Network
ext_addr_	talk/p2p/base/relayport.cc	/^  talk_base::SocketAddress ext_addr_, local_addr_;$/;"	m	class:cricket::RelayEntry	file:
ext_map_	talk/base/natserver.h	/^  ExternalMap* ext_map_;$/;"	m	class:talk_base::NATServer
ext_max	talk/session/phone/mediachannel.h	/^	unsigned long ext_max;$/;"	m	struct:cricket::MediaInfo
extension	talk/base/pathutils.cc	/^std::string Pathname::extension() const {$/;"	f	class:talk_base::Pathname
extension_	talk/base/pathutils.h	/^  std::string folder_, basename_, extension_;$/;"	m	class:talk_base::Pathname
external_	talk/base/natserver.h	/^  SocketFactory* external_;$/;"	m	class:talk_base::NATServer
external_connections_	talk/p2p/base/relayserver.h	/^  std::vector<RelayServerConnection*> external_connections_;$/;"	m	class:cricket::RelayServerBinding
external_ip_	talk/base/natserver.h	/^  SocketAddress external_ip_;$/;"	m	class:talk_base::NATServer
external_sockets_	talk/p2p/base/relayserver.h	/^  SocketList external_sockets_;$/;"	m	class:cricket::RelayServer
extra_	talk/base/logging.h	/^  std::string extra_;$/;"	m	class:talk_base::LogMessage
fAutoDetect	talk/base/proxydetect.cc	/^    BOOL    fAutoDetect;$/;"	m	struct:__anon19	file:
fAutoLogonIfChallenged	talk/base/proxydetect.cc	/^    BOOL    fAutoLogonIfChallenged;$/;"	m	struct:__anon18	file:
fPeekKeep_	talk/base/messagequeue.h	/^  bool fPeekKeep_;$/;"	m	class:talk_base::MessageQueue
fSignaled_	talk/base/physicalsocketserver.cc	/^  bool fSignaled_;$/;"	m	class:talk_base::EventDispatcher	file:
fStop_	talk/base/messagequeue.h	/^  bool fStop_;$/;"	m	class:talk_base::MessageQueue
fWait_	talk/base/physicalsocketserver.h	/^  bool fWait_;$/;"	m	class:talk_base::PhysicalSocketServer
fWait_	talk/base/virtualsocketserver.h	/^  bool fWait_;$/;"	m	class:talk_base::VirtualSocketServer
f_inputs	talk/third_party/mediastreamer/msAlawdec.h	/^    MSFifo *f_inputs[MSALAWDECODER_MAX_INPUTS];$/;"	m	struct:_MSALAWDecoder
f_inputs	talk/third_party/mediastreamer/msAlawenc.h	/^    MSFifo *f_inputs[MSALAWENCODER_MAX_INPUTS];$/;"	m	struct:_MSALAWEncoder
f_inputs	talk/third_party/mediastreamer/msGSMdecoder.h	/^    MSFifo *f_inputs[MSGSMDECODER_MAX_INPUTS];$/;"	m	struct:_MSGSMDecoder
f_inputs	talk/third_party/mediastreamer/msGSMencoder.h	/^    MSFifo *f_inputs[MSGSMENCODER_MAX_INPUTS];$/;"	m	struct:_MSGSMEncoder
f_inputs	talk/third_party/mediastreamer/msLPC10decoder.h	/^    MSFifo *f_inputs[MSLPC10DECODER_MAX_INPUTS];$/;"	m	struct:_MSLPC10Decoder
f_inputs	talk/third_party/mediastreamer/msLPC10encoder.h	/^    MSFifo *f_inputs[MSLPC10ENCODER_MAX_INPUTS];$/;"	m	struct:_MSLPC10Encoder
f_inputs	talk/third_party/mediastreamer/msMUlawdec.h	/^    MSFifo *f_inputs[MSMULAWDECODER_MAX_INPUTS];$/;"	m	struct:_MSMULAWDecoder
f_inputs	talk/third_party/mediastreamer/msMUlawenc.h	/^    MSFifo *f_inputs[MSMULAWENCODER_MAX_INPUTS];$/;"	m	struct:_MSMULAWEncoder
f_inputs	talk/third_party/mediastreamer/mscopy.h	/^    MSFifo *f_inputs[MSCOPY_MAX_INPUTS];$/;"	m	struct:_MSCopy
f_inputs	talk/third_party/mediastreamer/msfdispatcher.h	/^    MSFifo *f_inputs[MS_FDISPATCHER_MAX_INPUTS];$/;"	m	struct:_MSFdispatcher
f_inputs	talk/third_party/mediastreamer/msilbcenc.h	/^     MSFifo *f_inputs[MSILBCENCODER_MAX_INPUTS];$/;"	m	struct:_MSILBCEncoder
f_inputs	talk/third_party/mediastreamer/msosswrite.h	/^	MSFifo *f_inputs[MS_OSS_WRITE_MAX_INPUTS];$/;"	m	struct:_MSOssWrite
f_inputs	talk/third_party/mediastreamer/msrtpsend.h	/^    MSFifo *f_inputs[MSRTPSEND_MAX_INPUTS];$/;"	m	struct:_MSRtpSend
f_inputs	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^    MSFifo *f_inputs[MS_TRUESPEECH_CODEC_MAX_IN_OUT];$/;"	m	struct:_MSTrueSpeechDecoder
f_inputs	talk/third_party/mediastreamer/mstruespeechencoder.h	/^    MSFifo *f_inputs[MS_TRUESPEECH_CODEC_MAX_IN_OUT];$/;"	m	struct:_MSTrueSpeechEncoder
f_inputs	talk/third_party/mediastreamer/mswrite.h	/^    MSFifo *f_inputs[MSWRITE_MAX_INPUTS];$/;"	m	struct:_MSWrite
f_outputs	talk/third_party/mediastreamer/msAlawdec.h	/^    MSFifo *f_outputs[MSALAWDECODER_MAX_INPUTS];$/;"	m	struct:_MSALAWDecoder
f_outputs	talk/third_party/mediastreamer/msAlawenc.h	/^    MSFifo *f_outputs[MSALAWENCODER_MAX_INPUTS];$/;"	m	struct:_MSALAWEncoder
f_outputs	talk/third_party/mediastreamer/msGSMdecoder.h	/^    MSFifo *f_outputs[MSGSMDECODER_MAX_INPUTS];$/;"	m	struct:_MSGSMDecoder
f_outputs	talk/third_party/mediastreamer/msGSMencoder.h	/^    MSFifo *f_outputs[MSGSMENCODER_MAX_INPUTS];$/;"	m	struct:_MSGSMEncoder
f_outputs	talk/third_party/mediastreamer/msLPC10decoder.h	/^    MSFifo *f_outputs[MSLPC10DECODER_MAX_INPUTS];$/;"	m	struct:_MSLPC10Decoder
f_outputs	talk/third_party/mediastreamer/msLPC10encoder.h	/^    MSFifo *f_outputs[MSLPC10ENCODER_MAX_INPUTS];$/;"	m	struct:_MSLPC10Encoder
f_outputs	talk/third_party/mediastreamer/msMUlawdec.h	/^    MSFifo *f_outputs[MSMULAWDECODER_MAX_INPUTS];$/;"	m	struct:_MSMULAWDecoder
f_outputs	talk/third_party/mediastreamer/msMUlawenc.h	/^    MSFifo *f_outputs[MSMULAWENCODER_MAX_INPUTS];$/;"	m	struct:_MSMULAWEncoder
f_outputs	talk/third_party/mediastreamer/mscopy.h	/^    MSFifo *f_outputs[MSCOPY_MAX_INPUTS];$/;"	m	struct:_MSCopy
f_outputs	talk/third_party/mediastreamer/msfdispatcher.h	/^    MSFifo *f_outputs[MS_FDISPATCHER_MAX_OUTPUTS];$/;"	m	struct:_MSFdispatcher
f_outputs	talk/third_party/mediastreamer/msilbcdec.h	/^     MSFifo *f_outputs[MSILBCDECODER_MAX_INPUTS];$/;"	m	struct:_MSILBCDecoder
f_outputs	talk/third_party/mediastreamer/msossread.h	/^	MSFifo *f_outputs[MS_OSS_READ_MAX_INPUTS];$/;"	m	struct:_MSOssRead
f_outputs	talk/third_party/mediastreamer/msrtprecv.h	/^    MSFifo *f_outputs[MSRTPRECV_MAX_OUTPUTS];$/;"	m	struct:_MSRtpRecv
f_outputs	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^    MSFifo *f_outputs[MS_TRUESPEECH_CODEC_MAX_IN_OUT];$/;"	m	struct:_MSTrueSpeechDecoder
f_outputs	talk/third_party/mediastreamer/mstruespeechencoder.h	/^    MSFifo *f_outputs[MS_TRUESPEECH_CODEC_MAX_IN_OUT];$/;"	m	struct:_MSTrueSpeechEncoder
factory_	talk/base/asynchttprequest.h	/^  talk_base::SocketFactory * factory_;$/;"	m	class:talk_base::SslSocketFactory
factory_	talk/base/natsocketfactory.h	/^  SocketFactory* factory_;$/;"	m	class:talk_base::NATSocketFactory
factory_	talk/base/socketpool.h	/^  SocketFactory* factory_;$/;"	m	class:talk_base::NewSocketPool
factory_	talk/base/socketpool.h	/^  SocketFactory* factory_;$/;"	m	class:talk_base::ReuseSocketPool
factory_	talk/p2p/base/port.h	/^  talk_base::SocketFactory* factory_;$/;"	m	class:cricket::Port
factory_	talk/p2p/base/session_unittest.cc	/^  talk_base::SocketFactory* factory_;$/;"	m	class:TestPortAllocator	file:
factory_	talk/p2p/base/session_unittest.cc	/^  talk_base::SocketFactory* factory_;$/;"	m	class:TestPortAllocatorSession	file:
fail_redirect	talk/base/asynchttprequest.h	/^  bool fail_redirect() const { return fail_redirect_; }$/;"	f	class:talk_base::AsyncHttpRequest
fail_redirect	talk/base/httpclient.h	/^  bool fail_redirect() const { return fail_redirect_; }$/;"	f	class:talk_base::HttpClient
fail_redirect_	talk/base/asynchttprequest.h	/^  bool fail_redirect_;$/;"	m	class:talk_base::AsyncHttpRequest
fail_redirect_	talk/base/httpclient.h	/^  bool fail_redirect_, absolute_uri_;$/;"	m	class:talk_base::HttpClient
family	talk/p2p/base/stun.h	/^  uint8 family() const { return family_; }$/;"	f	class:cricket::StunAddressAttribute
family_	talk/p2p/base/stun.h	/^  uint8 family_;$/;"	m	class:cricket::StunAddressAttribute
fd	talk/third_party/mediastreamer/msread.h	/^    gint fd;  \/* the file descriptor of the file being read*\/$/;"	m	struct:_MSRead
fd	talk/third_party/mediastreamer/msringplayer.h	/^	gint fd;  \/* the file descriptor of the file being read*\/$/;"	m	struct:_MSRingPlayer
fd	talk/third_party/mediastreamer/msv4l.h	/^	int fd;$/;"	m	struct:_MSV4l
fd	talk/third_party/mediastreamer/mswrite.h	/^    gint fd;  \/* the file descriptor of the file being written*\/$/;"	m	struct:_MSWrite
fd	talk/third_party/mediastreamer/osscard.h	/^	gint fd;   \/* the file descriptor of the open soundcard, 0 if not open*\/$/;"	m	struct:_OssCard
fd_	talk/base/physicalsocketserver.cc	/^  int fd_;$/;"	m	class:talk_base::FileDispatcher	file:
feedback_probation	talk/examples/login/status.h	/^  bool feedback_probation() const { return feedback_probation_; }$/;"	f	class:buzz::Status
feedback_probation_	talk/examples/login/status.h	/^  bool feedback_probation_;$/;"	m	class:buzz::Status
file_	talk/base/stream.h	/^  FILE* file_;$/;"	m	class:talk_base::FileStream
file_share_session_client_	talk/examples/pcp/pcp_main.cc	/^  talk_base::scoped_ptr<cricket::FileShareSessionClient> file_share_session_client_;$/;"	m	class:FileShareClient	file:
filename	talk/base/pathutils.cc	/^std::string Pathname::filename() const {$/;"	f	class:talk_base::Pathname
fileno	talk/base/stream.cc	39;"	d	file:
fileshare_capability	talk/examples/login/status.h	/^  bool fileshare_capability() const { return fileshare_capability_; }$/;"	f	class:buzz::Status
fileshare_capability_	talk/examples/login/status.h	/^  bool fileshare_capability_;$/;"	m	class:buzz::Status
filesize_to_string	talk/examples/pcp/pcp_main.cc	/^  std::string filesize_to_string(unsigned int size) {$/;"	f	class:FileShareClient	file:
fillchar	talk/base/base64.cc	/^static const char fillchar = '=';$/;"	v	file:
filter	talk/third_party/mediastreamer/msAlawdec.h	/^    MSFilter filter;$/;"	m	struct:_MSALAWDecoder
filter	talk/third_party/mediastreamer/msAlawenc.h	/^    MSFilter filter;$/;"	m	struct:_MSALAWEncoder
filter	talk/third_party/mediastreamer/msGSMdecoder.h	/^    MSFilter filter;$/;"	m	struct:_MSGSMDecoder
filter	talk/third_party/mediastreamer/msGSMencoder.h	/^    MSFilter filter;$/;"	m	struct:_MSGSMEncoder
filter	talk/third_party/mediastreamer/msLPC10decoder.h	/^    MSFilter filter;$/;"	m	struct:_MSLPC10Decoder
filter	talk/third_party/mediastreamer/msLPC10encoder.h	/^    MSFilter filter;$/;"	m	struct:_MSLPC10Encoder
filter	talk/third_party/mediastreamer/msMUlawdec.h	/^    MSFilter filter;$/;"	m	struct:_MSMULAWDecoder
filter	talk/third_party/mediastreamer/msMUlawenc.h	/^    MSFilter filter;$/;"	m	struct:_MSMULAWEncoder
filter	talk/third_party/mediastreamer/msavdecoder.h	/^    MSFilter filter;$/;"	m	struct:_MSAVDecoder
filter	talk/third_party/mediastreamer/msavencoder.h	/^    MSFilter filter;$/;"	m	struct:_MSAVEncoder
filter	talk/third_party/mediastreamer/mscopy.h	/^    MSFilter filter;$/;"	m	struct:_MSCopy
filter	talk/third_party/mediastreamer/msfdispatcher.h	/^    MSFilter filter;$/;"	m	struct:_MSFdispatcher
filter	talk/third_party/mediastreamer/msilbcdec.h	/^     MSFilter filter;$/;"	m	struct:_MSILBCDecoder
filter	talk/third_party/mediastreamer/msilbcenc.h	/^     MSFilter filter;$/;"	m	struct:_MSILBCEncoder
filter	talk/third_party/mediastreamer/msossread.h	/^	MSSoundRead filter;$/;"	m	struct:_MSOssRead
filter	talk/third_party/mediastreamer/msosswrite.h	/^	MSSoundWrite filter;$/;"	m	struct:_MSOssWrite
filter	talk/third_party/mediastreamer/msqdispatcher.h	/^    MSFilter filter;$/;"	m	struct:_MSQdispatcher
filter	talk/third_party/mediastreamer/msread.h	/^    MSFilter filter;$/;"	m	struct:_MSRead
filter	talk/third_party/mediastreamer/msringplayer.h	/^	MSFilter filter;$/;"	m	struct:_MSRingPlayer
filter	talk/third_party/mediastreamer/msrtprecv.h	/^    MSFilter filter;$/;"	m	struct:_MSRtpRecv
filter	talk/third_party/mediastreamer/msrtpsend.h	/^    MSFilter filter;$/;"	m	struct:_MSRtpSend
filter	talk/third_party/mediastreamer/mssoundread.h	/^	MSFilter filter;$/;"	m	struct:_MSSoundRead
filter	talk/third_party/mediastreamer/mssoundwrite.h	/^	MSFilter filter;$/;"	m	struct:_MSSoundWrite
filter	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^    MSFilter filter;$/;"	m	struct:_MSTrueSpeechDecoder
filter	talk/third_party/mediastreamer/mstruespeechencoder.h	/^    MSFilter filter;$/;"	m	struct:_MSTrueSpeechEncoder
filter	talk/third_party/mediastreamer/msvideosource.h	/^    MSFilter filter;$/;"	m	struct:_MSVideoSource
filter	talk/third_party/mediastreamer/mswrite.h	/^    MSFilter filter;$/;"	m	struct:_MSWrite
filter_list	talk/third_party/mediastreamer/msfilter.c	/^GList *filter_list=NULL;$/;"	v
filters	talk/third_party/mediastreamer/msnosync.h	/^	MSFilter *filters[MSNOSYNC_MAX_FILTERS];$/;"	m	struct:_MSNoSync
filters	talk/third_party/mediastreamer/mssync.h	/^	gint filters;   \/*number of filters attached to the sync *\/$/;"	m	struct:_MSSync
filters	talk/third_party/mediastreamer/mstimer.h	/^	MSFilter *filters[MSTIMER_MAX_FILTERS];$/;"	m	struct:_MSTimer
filters_	talk/base/tarstream.h	/^  std::vector<std::string> filters_;$/;"	m	class:talk_base::TarStream
find_	talk/base/tarstream.h	/^  DirectoryList find_;$/;"	m	class:talk_base::TarStream
find_free_if	talk/third_party/mediastreamer/msfilter.c	116;"	d	file:
find_free_iq	talk/third_party/mediastreamer/msfilter.c	114;"	d	file:
find_free_of	talk/third_party/mediastreamer/msfilter.c	117;"	d	file:
find_free_oq	talk/third_party/mediastreamer/msfilter.c	115;"	d	file:
find_if	talk/third_party/mediastreamer/msfilter.c	/^gint find_if(MSFilter *m1,MSFifo *inf)$/;"	f
find_iq	talk/third_party/mediastreamer/msfilter.c	/^gint find_iq(MSFilter *m1,MSQueue *iq)$/;"	f
find_of	talk/third_party/mediastreamer/msfilter.c	/^gint find_of(MSFilter *m1,MSFifo *of)$/;"	f
find_oq	talk/third_party/mediastreamer/msfilter.c	/^gint find_oq(MSFilter *m1,MSQueue *oq)$/;"	f
find_string	talk/base/httpcommon.cc	/^bool find_string(size_t& index, const std::string& needle,$/;"	f	namespace:talk_base
finputs	talk/third_party/mediastreamer/msfilter.h	/^	guchar finputs;   \/* number of connected fifo inputs*\/$/;"	m	struct:_MSFilter
firewall_	talk/base/asynchttprequest.h	/^  talk_base::FirewallManager * firewall_;$/;"	m	class:talk_base::AsyncHttpRequest
first	talk/third_party/mediastreamer/msqueue.h	/^	MSMessage *first;$/;"	m	struct:_MSQueue
flags	talk/p2p/base/portallocator.h	/^  uint32 flags() const { return flags_; }$/;"	f	class:cricket::PortAllocator
flags	talk/p2p/base/portallocator.h	/^  uint32 flags() const { return flags_; }$/;"	f	class:cricket::PortAllocatorSession
flags	talk/p2p/base/pseudotcp.h	/^    uint8 flags;$/;"	m	struct:cricket::PseudoTcp::Segment
flags	talk/third_party/mediastreamer/msbuffer.h	/^    guint16 flags;$/;"	m	struct:_MSBuffer
flags	talk/third_party/mediastreamer/msossread.h	/^	gint flags;$/;"	m	struct:_MSOssRead
flags	talk/third_party/mediastreamer/msrtpsend.h	/^	guint flags;$/;"	m	struct:_MSRtpSend
flags	talk/third_party/mediastreamer/mssync.h	/^	guint32 flags;$/;"	m	struct:_MSSync
flags	talk/third_party/mediastreamer/sndcard.h	/^	gint flags;$/;"	m	struct:_SndCard
flags_	talk/base/physicalsocketserver.cc	/^  int flags_;$/;"	m	class:talk_base::FileDispatcher	file:
flags_	talk/p2p/base/portallocator.h	/^  uint32 flags_;$/;"	m	class:cricket::PortAllocator
flags_	talk/p2p/base/portallocator.h	/^  uint32 flags_;$/;"	m	class:cricket::PortAllocatorSession
flush_data	talk/base/httpbase.cc	/^HttpBase::flush_data() {$/;"	f	class:talk_base::HttpBase
fmt	talk/third_party/mediastreamer/waveheader.h	/^	char  fmt[4] ;	\/* "fmt_" (ASCII characters) *\/$/;"	m	struct:_format_t
focus_call_	talk/session/phone/phonesessionclient.h	/^  Call *focus_call_;$/;"	m	class:cricket::PhoneSessionClient
folder	talk/base/pathutils.cc	/^std::string Pathname::folder() const {$/;"	f	class:talk_base::Pathname
folder_	talk/base/diskcache.h	/^  std::string folder_;$/;"	m	class:talk_base::DiskCache
folder_	talk/base/pathutils.h	/^  std::string folder_, basename_, extension_;$/;"	m	class:talk_base::Pathname
folder_delimiter	talk/base/pathutils.h	/^  char folder_delimiter() const { return folder_delimiter_; }$/;"	f	class:talk_base::Pathname
folder_delimiter_	talk/base/pathutils.h	/^  char folder_delimiter_;$/;"	m	class:talk_base::Pathname
folder_name	talk/base/pathutils.cc	/^std::string Pathname::folder_name() const {$/;"	f	class:talk_base::Pathname
format	talk/third_party/mediastreamer/mssdlout.h	/^	const gchar *format;$/;"	m	struct:_MSSdlOut
format	talk/third_party/mediastreamer/msvideosource.h	/^	gchar *format;$/;"	m	struct:_MSVideoSource
formatLeader	talk/base/httpcommon.cc	/^HttpRequestData::formatLeader(char* buffer, size_t size) {$/;"	f	class:talk_base::HttpRequestData
formatLeader	talk/base/httpcommon.cc	/^HttpResponseData::formatLeader(char* buffer, size_t size) {$/;"	f	class:talk_base::HttpResponseData
format_chunk	talk/third_party/mediastreamer/waveheader.h	/^	format_t format_chunk;$/;"	m	struct:_wave_header_t
format_t	talk/third_party/mediastreamer/waveheader.h	/^} format_t;$/;"	t	typeref:struct:_format_t
foutputs	talk/third_party/mediastreamer/msfilter.h	/^	guchar foutputs;  \/* number of connected fifo outputs*\/$/;"	m	struct:_MSFilter
foutputs	talk/third_party/mediastreamer/msread.h	/^    MSFifo *foutputs[MSREAD_MAX_OUTPUTS];$/;"	m	struct:_MSRead
foutputs	talk/third_party/mediastreamer/msringplayer.h	/^	MSFifo *foutputs[MS_RING_PLAYER_MAX_OUTPUTS];$/;"	m	struct:_MSRingPlayer
fr_size	talk/third_party/mediastreamer/mscodec.h	/^	gint fr_size; \/* size in char of the uncompressed frame *\/$/;"	m	struct:_MSCodecInfo
fraction_lost	talk/session/phone/mediachannel.h	/^	unsigned short fraction_lost;$/;"	m	struct:cricket::MediaInfo
frame	talk/third_party/mediastreamer/msv4l.h	/^	gint frame;$/;"	m	struct:_MSV4l
frame_rate	talk/third_party/mediastreamer/msvideosource.h	/^	gint frame_rate;$/;"	m	struct:_MSVideoSource
frame_rate_base	talk/third_party/mediastreamer/msvideosource.h	/^	gint frame_rate_base;$/;"	m	struct:_MSVideoSource
frame_size	talk/third_party/mediastreamer/alsacard.h	/^	gint frame_size;$/;"	m	struct:_AlsaCard
frame_size	talk/third_party/mediastreamer/jackcard.h	/^  gint frame_size;$/;"	m	struct:_JackCard
frame_size	talk/third_party/mediastreamer/msspeexdec.h	/^	int frame_size;$/;"	m	struct:_MSSpeexDec
frames	talk/third_party/mediastreamer/alsacard.h	/^	gint frames;$/;"	m	struct:_AlsaCard
frames	talk/third_party/mediastreamer/jackcard.h	/^  size_t frames;$/;"	m	struct:__anon42
freq	talk/third_party/mediastreamer/msossread.h	/^	gint freq;$/;"	m	struct:_MSOssRead
freq	talk/third_party/mediastreamer/msosswrite.h	/^	gint freq;$/;"	m	struct:_MSOssWrite
freq	talk/third_party/mediastreamer/msringplayer.h	/^	gint freq;$/;"	m	struct:_MSRingPlayer
freq_is_supported	talk/third_party/mediastreamer/msringplayer.c	/^gint freq_is_supported(gint freq){$/;"	f
frequency	talk/third_party/mediastreamer/msspeexdec.h	/^	int frequency;$/;"	m	struct:_MSSpeexDec
frequency	talk/third_party/mediastreamer/msspeexenc.h	/^	int frequency;$/;"	m	struct:_MSSpeexEnc
from	talk/base/virtualsocketserver.cc	/^  const SocketAddress& from() const { return from_; }$/;"	f	class:talk_base::Packet
from_	talk/base/virtualsocketserver.cc	/^  SocketAddress from_;$/;"	m	class:talk_base::Packet	file:
fullJid_	talk/xmpp/xmpplogintask.h	/^  Jid fullJid_;$/;"	m	class:buzz::XmppLoginTask
full_path	talk/base/httpcommon-inl.h	/^typename Traits<CTYPE>::string Url<CTYPE>::full_path() {$/;"	f	class:talk_base::Url
func_extract_an_archive	libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_infer_tag	libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_mktempdir	libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_win32_libid	libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
gDefaultTransports	talk/p2p/base/session.cc	/^std::string* gDefaultTransports = NULL;$/;"	v
gID	talk/p2p/base/session_unittest.cc	/^int gID = 0;$/;"	v
gLocalHost	talk/base/host.cc	/^Host* gLocalHost = 0;$/;"	v
gNumDefaultTransports	talk/p2p/base/session.cc	/^size_t gNumDefaultTransports = 0;$/;"	v
gPort	talk/p2p/base/session_unittest.cc	/^int gPort = 28653;$/;"	v
g_application_name	talk/base/pathutils.cc	/^std::string g_application_name;$/;"	v
g_list_append_if_new	talk/third_party/mediastreamer/ms.c	/^static GList *g_list_append_if_new(GList *l,gpointer data)$/;"	f	file:
g_module_check_init	talk/third_party/mediastreamer/msspeexdec.c	/^gchar * g_module_check_init()$/;"	f
g_module_check_init	talk/third_party/mediastreamer/msspeexdec.c	/^gchar * g_module_check_init(GModule *module)$/;"	f
g_organization_name	talk/base/pathutils.cc	/^std::string g_organization_name;$/;"	v
g_seed	talk/base/helpers.cc	/^static long g_seed = 1L;$/;"	v	file:
g_thmgr	talk/base/thread.cc	/^ThreadManager g_thmgr;$/;"	v
g_winsockinit	talk/base/physicalsocketserver.cc	/^WinsockInitializer g_winsockinit;$/;"	v
generation	talk/p2p/base/candidate.h	/^  uint32 generation() const { return generation_; }$/;"	f	class:cricket::Candidate
generation	talk/p2p/base/port.h	/^  uint32 generation() { return generation_; }$/;"	f	class:cricket::Port
generation	talk/p2p/base/portallocator.h	/^  uint32 generation() { return generation_; }$/;"	f	class:cricket::PortAllocatorSession
generation_	talk/p2p/base/candidate.h	/^  uint32 generation_;$/;"	m	class:cricket::Candidate
generation_	talk/p2p/base/port.h	/^  uint32 generation_;$/;"	m	class:cricket::Port
generation_	talk/p2p/base/portallocator.h	/^  uint32 generation_;$/;"	m	class:cricket::PortAllocatorSession
generation_str	talk/p2p/base/candidate.h	/^  const std::string generation_str() const {$/;"	f	class:cricket::Candidate
get	talk/base/linked_ptr.h	/^    X* get()        const throw()   {return itsPtr;}$/;"	f	class:talk_base::linked_ptr
get	talk/base/scoped_ptr.h	/^  T* get() const  {$/;"	f	class:talk_base::scoped_ptr
get	talk/base/scoped_ptr.h	/^  T* get() const {$/;"	f	class:talk_base::scoped_array
get	talk/base/scoped_ptr.h	/^  T* get() const {$/;"	f	class:talk_base::scoped_ptr_malloc
get_critsec	talk/base/sigslot.h	/^		CRITICAL_SECTION* get_critsec()$/;"	f	class:sigslot::multi_threaded_global
get_dir_size	talk/examples/pcp/pcp_main.cc	/^static unsigned int get_dir_size(const char *directory) {$/;"	f	file:
get_local_addr_for	talk/third_party/mediastreamer/audiostream.c	/^const char *get_local_addr_for(const char *remote)$/;"	f
get_mixer_element	talk/third_party/mediastreamer/alsacard.c	/^static gint get_mixer_element(snd_mixer_t *mixer,const char *name, MixerAction action){$/;"	f	file:
get_mutex	talk/base/sigslot.h	/^		pthread_mutex_t* get_mutex()$/;"	f	class:sigslot::multi_threaded_global
get_new_timestamp	talk/third_party/mediastreamer/msrtpsend.c	/^guint32 get_new_timestamp(MSRtpSend *r,guint32 synctime)$/;"	f
get_nexts	talk/third_party/mediastreamer/ms.c	/^static GList *get_nexts(MSFilter *f,GList *l)$/;"	f	file:
get_property	talk/third_party/mediastreamer/msfilter.h	/^	MSFilterPropertyFunc get_property;$/;"	m	struct:_MSFilterClass
get_qname_table	talk/xmllite/qname.cc	/^static QName::Data * get_qname_table() {$/;"	f	namespace:buzz	file:
get_timeout_time	talk/base/task.h	/^  int64 get_timeout_time() { return timeout_time_; }$/;"	f	class:talk_base::Task
get_unique_id	talk/base/task.h	/^  int32 get_unique_id() { return unique_id_; }$/;"	f	class:talk_base::Task
getdest	talk/base/sigslot.h	/^		virtual has_slots<mt_policy>* getdest() const$/;"	f	class:sigslot::_connection0
getdest	talk/base/sigslot.h	/^		virtual has_slots<mt_policy>* getdest() const$/;"	f	class:sigslot::_connection1
getdest	talk/base/sigslot.h	/^		virtual has_slots<mt_policy>* getdest() const$/;"	f	class:sigslot::_connection2
getdest	talk/base/sigslot.h	/^		virtual has_slots<mt_policy>* getdest() const$/;"	f	class:sigslot::_connection3
getdest	talk/base/sigslot.h	/^		virtual has_slots<mt_policy>* getdest() const$/;"	f	class:sigslot::_connection4
getdest	talk/base/sigslot.h	/^		virtual has_slots<mt_policy>* getdest() const$/;"	f	class:sigslot::_connection5
getdest	talk/base/sigslot.h	/^		virtual has_slots<mt_policy>* getdest() const$/;"	f	class:sigslot::_connection6
getdest	talk/base/sigslot.h	/^		virtual has_slots<mt_policy>* getdest() const$/;"	f	class:sigslot::_connection7
getdest	talk/base/sigslot.h	/^		virtual has_slots<mt_policy>* getdest() const$/;"	f	class:sigslot::_connection8
gips	talk/session/phone/gipslitemediaengine.h	/^  GipsVoiceEngineLite &gips() {return gips_;};$/;"	f	class:cricket::GipsLiteMediaEngine
gips_	talk/session/phone/gipslitemediaengine.h	/^  GipsVoiceEngineLite & gips_;$/;"	m	class:cricket::GipsLiteMediaEngine
gips_channel_	talk/session/phone/gipslitemediaengine.h	/^  int gips_channel_;$/;"	m	class:cricket::GipsLiteMediaChannel
grab_image	talk/third_party/mediastreamer/msv4l.h	/^	gboolean grab_image;$/;"	m	struct:_MSV4l
gran	talk/third_party/mediastreamer/msossread.h	/^	gint gran;$/;"	m	struct:_MSOssRead
gran	talk/third_party/mediastreamer/msread.h	/^    gint gran;  \/*granularity*\/  \/* for use with queues *\/$/;"	m	struct:_MSRead
gran	talk/third_party/mediastreamer/msringplayer.h	/^	gint gran;$/;"	m	struct:_MSRingPlayer
gsm_handle	talk/third_party/mediastreamer/msGSMdecoder.h	/^    gsm gsm_handle;$/;"	m	struct:_MSGSMDecoder
gsm_handle	talk/third_party/mediastreamer/msGSMencoder.h	/^    gsm gsm_handle;$/;"	m	struct:_MSGSMEncoder
handle	talk/base/win32socketserver.cc	/^  HANDLE handle;$/;"	m	struct:talk_base::Win32Socket::DnsLookup	file:
handle	talk/base/win32window.h	/^  HWND handle() { return wnd_; }$/;"	f	class:talk_base::Win32Window
handle_	talk/base/fileutils.h	/^  HANDLE handle_;$/;"	m	class:talk_base::DirectoryIterator
hasHeader	talk/base/httpcommon.cc	/^HttpData::hasHeader(const std::string& name, std::string* value) const {$/;"	f	class:talk_base::HttpData
hasHeader	talk/base/httpcommon.h	/^  inline bool hasHeader(HttpHeader header, std::string* value) const {$/;"	f	struct:talk_base::HttpData
has_sends_	talk/base/thread.h	/^  bool has_sends_;$/;"	m	class:talk_base::Thread
has_slots	talk/base/sigslot.h	/^		has_slots()$/;"	f	class:sigslot::has_slots
has_slots	talk/base/sigslot.h	/^		has_slots(const has_slots& hs)$/;"	f	class:sigslot::has_slots
has_slots	talk/base/sigslot.h	/^	class has_slots : public mt_policy $/;"	c	namespace:sigslot
header_	talk/base/httpbase.h	/^  HttpData::const_iterator header_;$/;"	m	class:talk_base::HttpBase
headers_	talk/base/socketadapters.h	/^  std::string agent_, user_, headers_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
height	talk/session/fileshare/fileshare.h	/^    size_t size, width, height;$/;"	m	struct:cricket::FileShareManifest::Item
height	talk/third_party/mediastreamer/msavdecoder.h	/^	int height;$/;"	m	struct:_MSAVDecoder
height	talk/third_party/mediastreamer/mssdlout.h	/^	gint width,height;$/;"	m	struct:_MSSdlOut
height	talk/third_party/mediastreamer/msv4l.h	/^	gint height;$/;"	m	struct:_MSV4l
height	talk/third_party/mediastreamer/msvideosource.h	/^	gint width, height;$/;"	m	struct:_MSVideoSource
hev_	talk/base/physicalsocketserver.cc	/^  WSAEVENT hev_;$/;"	m	class:talk_base::EventDispatcher	file:
hex_decode	talk/base/stringencode.cc	/^size_t hex_decode(char * cbuffer, size_t buflen,$/;"	f	namespace:talk_base
hex_decode	talk/base/stringencode.cc	/^unsigned char hex_decode(char ch) {$/;"	f	namespace:talk_base
hex_encode	talk/base/stringencode.cc	/^char hex_encode(unsigned char val) {$/;"	f	namespace:talk_base
hex_encode	talk/base/stringencode.cc	/^size_t hex_encode(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
hex_mode_	talk/base/socketadapters.h	/^  bool hex_mode_;$/;"	m	class:talk_base::LoggingSocketAdapter
hex_mode_	talk/base/stream.h	/^  bool hex_mode_;$/;"	m	class:talk_base::LoggingAdapter
hi_byte	talk/third_party/mediastreamer/waveheader.h	/^    unsigned char hi_byte;$/;"	m	struct:uint16scheme
hi_int	talk/third_party/mediastreamer/waveheader.h	/^    guint16 hi_int;$/;"	m	struct:uint32scheme
highfreq	talk/third_party/mediastreamer/msosswrite.h	/^	gdouble highfreq;$/;"	m	struct:_MSOssWrite
host	talk/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/base/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/base/asynchttprequest.h	/^  const std::string& host() { return host_; }$/;"	f	class:talk_base::AsyncHttpRequest
host	talk/examples/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/examples/call/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/examples/login/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/examples/pcp/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/p2p/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/p2p/base/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/p2p/client/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/session/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/session/fileshare/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/session/phone/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/session/tunnel/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/third_party/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/third_party/gips/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/third_party/mediastreamer/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/xmllite/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/xmpp/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	talk/xmpp/xmppclientsettings.h	/^  const std::string & host() const { return host_; }$/;"	f	class:buzz::XmppClientSettings
host_	talk/base/asynchttprequest.h	/^  std::string host_;$/;"	m	class:talk_base::AsyncHttpRequest
host_	talk/xmpp/xmppclientsettings.h	/^  std::string host_;$/;"	m	class:buzz::XmppClientSettings
host_alias	talk/Makefile	/^host_alias = $/;"	m
host_alias	talk/base/Makefile	/^host_alias = $/;"	m
host_alias	talk/examples/Makefile	/^host_alias = $/;"	m
host_alias	talk/examples/call/Makefile	/^host_alias = $/;"	m
host_alias	talk/examples/login/Makefile	/^host_alias = $/;"	m
host_alias	talk/examples/pcp/Makefile	/^host_alias = $/;"	m
host_alias	talk/p2p/Makefile	/^host_alias = $/;"	m
host_alias	talk/p2p/base/Makefile	/^host_alias = $/;"	m
host_alias	talk/p2p/client/Makefile	/^host_alias = $/;"	m
host_alias	talk/session/Makefile	/^host_alias = $/;"	m
host_alias	talk/session/fileshare/Makefile	/^host_alias = $/;"	m
host_alias	talk/session/phone/Makefile	/^host_alias = $/;"	m
host_alias	talk/session/tunnel/Makefile	/^host_alias = $/;"	m
host_alias	talk/third_party/Makefile	/^host_alias = $/;"	m
host_alias	talk/third_party/gips/Makefile	/^host_alias = $/;"	m
host_alias	talk/third_party/mediastreamer/Makefile	/^host_alias = $/;"	m
host_alias	talk/xmllite/Makefile	/^host_alias = $/;"	m
host_alias	talk/xmpp/Makefile	/^host_alias = $/;"	m
host_cpu	talk/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/base/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/examples/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/examples/call/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/examples/login/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/examples/pcp/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/p2p/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/p2p/base/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/p2p/client/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/session/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/session/fileshare/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/session/phone/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/session/tunnel/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/third_party/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/third_party/gips/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/third_party/mediastreamer/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/xmllite/Makefile	/^host_cpu = i686$/;"	m
host_cpu	talk/xmpp/Makefile	/^host_cpu = i686$/;"	m
host_os	talk/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/base/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/examples/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/examples/call/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/examples/login/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/examples/pcp/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/p2p/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/p2p/base/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/p2p/client/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/session/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/session/fileshare/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/session/phone/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/session/tunnel/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/third_party/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/third_party/gips/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/third_party/mediastreamer/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/xmllite/Makefile	/^host_os = linux-gnu$/;"	m
host_os	talk/xmpp/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	talk/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/base/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/examples/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/examples/call/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/examples/login/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/examples/pcp/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/p2p/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/p2p/base/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/p2p/client/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/session/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/session/fileshare/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/session/phone/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/session/tunnel/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/third_party/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/third_party/gips/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/third_party/mediastreamer/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/xmllite/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	talk/xmpp/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_vendor	talk/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/base/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/examples/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/examples/call/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/examples/login/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/examples/pcp/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/p2p/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/p2p/base/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/p2p/client/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/session/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/session/fileshare/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/session/phone/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/session/tunnel/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/third_party/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/third_party/gips/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/third_party/mediastreamer/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/xmllite/Makefile	/^host_vendor = pc$/;"	m
host_vendor	talk/xmpp/Makefile	/^host_vendor = pc$/;"	m
hostname	talk/base/socketaddress.h	/^  const std::string& hostname() const { return hostname_; };$/;"	f	class:talk_base::SocketAddress
hostname_	talk/base/asynchttprequest.h	/^  std::string hostname_, logging_label_;$/;"	m	class:talk_base::SslSocketFactory
hostname_	talk/base/socketaddress.h	/^  std::string hostname_;$/;"	m	class:talk_base::SocketAddress
hping_	talk/base/winping.h	/^    HANDLE hping_;$/;"	m	class:talk_base::WinPing
hpux_snd_card_can_read	talk/third_party/mediastreamer/hpuxsndcard.c	/^gboolean hpux_snd_card_can_read(HpuxSndCard *obj)$/;"	f
hpux_snd_card_close	talk/third_party/mediastreamer/hpuxsndcard.c	/^void hpux_snd_card_close(HpuxSndCard *obj)$/;"	f
hpux_snd_card_create_read_filter	talk/third_party/mediastreamer/hpuxsndcard.c	/^MSFilter *hpux_snd_card_create_read_filter(HpuxSndCard *card)$/;"	f
hpux_snd_card_create_write_filter	talk/third_party/mediastreamer/hpuxsndcard.c	/^MSFilter *hpux_snd_card_create_write_filter(HpuxSndCard *card)$/;"	f
hpux_snd_card_destroy	talk/third_party/mediastreamer/hpuxsndcard.c	/^void hpux_snd_card_destroy(HpuxSndCard *obj)$/;"	f
hpux_snd_card_get_level	talk/third_party/mediastreamer/hpuxsndcard.c	/^gint hpux_snd_card_get_level(HpuxSndCard *obj,gint way)$/;"	f
hpux_snd_card_new	talk/third_party/mediastreamer/hpuxsndcard.c	/^SndCard * hpux_snd_card_new(char *devname, char *mixdev_name)$/;"	f
hpux_snd_card_open	talk/third_party/mediastreamer/hpuxsndcard.c	/^int hpux_snd_card_open(HpuxSndCard *obj,int bits,int stereo,int rate)$/;"	f
hpux_snd_card_probe	talk/third_party/mediastreamer/hpuxsndcard.c	/^int hpux_snd_card_probe(HpuxSndCard *obj,int bits,int stereo,int rate)$/;"	f
hpux_snd_card_read	talk/third_party/mediastreamer/hpuxsndcard.c	/^int hpux_snd_card_read(HpuxSndCard *obj,char *buf,int size)$/;"	f
hpux_snd_card_set_level	talk/third_party/mediastreamer/hpuxsndcard.c	/^void hpux_snd_card_set_level(HpuxSndCard *obj,gint way,gint a)$/;"	f
hpux_snd_card_set_source	talk/third_party/mediastreamer/hpuxsndcard.c	/^void hpux_snd_card_set_source(HpuxSndCard *obj,int source)$/;"	f
hpux_snd_card_write	talk/third_party/mediastreamer/hpuxsndcard.c	/^int hpux_snd_card_write(HpuxSndCard *obj,char *buf,int size)$/;"	f
hpuxsnd_open	talk/third_party/mediastreamer/hpuxsndcard.c	/^int hpuxsnd_open(HpuxSndCard *obj, int bits,int stereo, int rate)$/;"	f
html_decode	talk/base/stringencode.cc	/^size_t html_decode(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
html_encode	talk/base/stringencode.cc	/^size_t html_encode(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
http_allocator	talk/p2p/client/httpportallocator.h	/^  HttpPortAllocator* http_allocator() {$/;"	f	class:cricket::HttpPortAllocatorSession
http_client_	talk/session/fileshare/fileshare.h	/^  talk_base::HttpClient* http_client_;$/;"	m	class:cricket::FileShareSession
http_server_	talk/session/fileshare/fileshare.h	/^  talk_base::HttpServer* http_server_;$/;"	m	class:cricket::FileShareSession
hwnd_	talk/base/win32socketserver.h	/^  HWND hwnd_;$/;"	m	class:talk_base::Win32SocketServer
iLBC_decode	configure	/^iLBC_decode ();$/;"	f
icmp_echo_reply	talk/base/winping.cc	/^typedef struct icmp_echo_reply {$/;"	s	namespace:talk_base	file:
id	talk/p2p/base/session.h	/^  const SessionID& id() const { return id_; }$/;"	f	class:cricket::Session
id	talk/p2p/base/stunrequest.h	/^  const std::string& id() { return id_; }$/;"	f	class:cricket::StunRequest
id	talk/session/phone/call.cc	/^uint32 Call::id() {$/;"	f	class:cricket::Call
id	talk/session/phone/codec.h	/^  int id;$/;"	m	struct:Codec
id_	talk/base/diskcache.cc	/^  std::string id_;$/;"	m	class:talk_base::DiskCacheAdapter	file:
id_	talk/base/diskcache.h	/^  std::string id_;$/;"	m	class:talk_base::CacheLock
id_	talk/base/physicalsocketserver.cc	/^  int id_;$/;"	m	class:talk_base::SocketDispatcher	file:
id_	talk/p2p/base/session.h	/^  SessionID id_;$/;"	m	class:cricket::Session
id_	talk/p2p/base/stunrequest.h	/^  std::string id_;$/;"	m	class:cricket::StunRequest
id_	talk/session/phone/call.h	/^  uint32 id_;$/;"	m	class:cricket::Call
id_	talk/xmpp/xmppengineimpl_iq.cc	/^  const std::string id_;$/;"	m	class:buzz::XmppIqEntry	file:
id_	talk/xmpp/xmpptask.h	/^  std::string id_;$/;"	m	class:buzz::XmppTask
id_function	talk/base/ssladapter.cc	/^static pthread_t id_function() {$/;"	f	namespace:talk_base	file:
id_str	talk/p2p/base/sessionid.h	/^  const std::string id_str() const {$/;"	f	class:cricket::SessionID
id_str_	talk/p2p/base/sessionid.h	/^  std::string id_str_;$/;"	m	class:cricket::SessionID
identity	talk/base/stringutils.h	/^inline wchar_t identity(wchar_t c) { return c; }$/;"	f	namespace:talk_base
ignore	talk/base/time.cc	/^static uint32 ignore = StartTime();$/;"	v	file:
ignore_bad_cert	talk/base/asynchttprequest.h	/^  bool ignore_bad_cert() {return ignore_bad_cert_;}$/;"	f	class:talk_base::SslSocketFactory
ignore_bad_cert	talk/base/ssladapter.h	/^  bool ignore_bad_cert() const { return ignore_bad_cert_; }$/;"	f	class:talk_base::SSLAdapter
ignore_bad_cert_	talk/base/asynchttprequest.h	/^  bool ignore_bad_cert_;$/;"	m	class:talk_base::SslSocketFactory
ignore_bad_cert_	talk/base/ssladapter.h	/^  bool ignore_bad_cert_;$/;"	m	class:talk_base::SSLAdapter
ignore_data	talk/base/httpbase.h	/^  bool ignore_data() const { return ignore_data_; }$/;"	f	class:talk_base::HttpBase
ignore_data_	talk/base/httpbase.h	/^  bool ignore_data_, chunk_data_;$/;"	m	class:talk_base::HttpBase
ilbc_dec	talk/third_party/mediastreamer/msilbcdec.h	/^     iLBC_Dec_Inst_t ilbc_dec;$/;"	m	struct:_MSILBCDecoder
ilbc_enc	talk/third_party/mediastreamer/msilbcenc.h	/^     iLBC_Enc_Inst_t ilbc_enc;$/;"	m	struct:_MSILBCEncoder
ilbc_encoded_bytes	talk/third_party/mediastreamer/msilbcenc.h	/^     int ilbc_encoded_bytes;$/;"	m	struct:_MSILBCEncoder
ilbc_info	talk/third_party/mediastreamer/msilbcdec.c	/^MSCodecInfo ilbc_info={$/;"	v
ilbc_read_16bit_samples	talk/third_party/mediastreamer/msilbcenc.c	/^ilbc_read_16bit_samples(gint16 int16samples[], float speech[], int n)$/;"	f
ilbc_read_bits	talk/third_party/mediastreamer/msilbcenc.c	/^ilbc_read_bits(unsigned char *data, unsigned char *bits, int nbytes)$/;"	f
ilbc_write_16bit_samples	talk/third_party/mediastreamer/msilbcenc.c	/^ilbc_write_16bit_samples(gint16 int16samples[], float speech[], int n)$/;"	f
ilbc_write_bits	talk/third_party/mediastreamer/msilbcenc.c	/^ilbc_write_bits(unsigned char *data, unsigned char *bits, int nbytes)$/;"	f
iless	talk/base/httpcommon.h	/^struct iless {$/;"	s	namespace:talk_base
image_grabbed	talk/third_party/mediastreamer/msv4l.h	/^	MSBuffer *image_grabbed;$/;"	m	struct:_MSV4l
img	talk/third_party/mediastreamer/msv4l.h	/^	MSBuffer img[VIDEO_MAX_FRAME];	\/* the buffer wrappers used for mmaps *\/$/;"	m	struct:_MSV4l
impl	talk/p2p/base/transportchannelproxy.h	/^  TransportChannelImpl* impl() const { return impl_; }$/;"	f	class:cricket::TransportChannelProxy
impl_	talk/base/cryptstring.h	/^  scoped_ptr<const CryptStringImpl> impl_;$/;"	m	class:talk_base::CryptString
impl_	talk/base/schanneladapter.h	/^  SSLImpl* impl_;$/;"	m	class:talk_base::SChannelAdapter
impl_	talk/p2p/base/transportchannelproxy.h	/^  TransportChannelImpl* impl_;$/;"	m	class:cricket::TransportChannelProxy
in	talk/base/md5.h	/^  uint32 in[16];$/;"	m	struct:MD5Context
inbuf	talk/base/schanneladapter.cc	/^  SChannelBuffer inbuf, outbuf, readable;$/;"	m	struct:talk_base::SChannelAdapter::SSLImpl	file:
inbuf_	talk/base/asynctcpsocket.h	/^  char* inbuf_, * outbuf_;$/;"	m	class:talk_base::AsyncTCPSocket
includedir	talk/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/base/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/examples/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/examples/call/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/examples/login/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/examples/pcp/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/p2p/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/p2p/base/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/p2p/client/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/session/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/session/fileshare/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/session/phone/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/session/tunnel/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/third_party/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/third_party/gips/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/third_party/mediastreamer/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/xmllite/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	talk/xmpp/Makefile	/^includedir = ${prefix}\/include$/;"	m
incoming_	talk/p2p/base/tcpport.h	/^  std::list<Incoming> incoming_;$/;"	m	class:cricket::TCPPort
incoming_call_	talk/examples/call/callclient.h	/^  bool incoming_call_;$/;"	m	class:CallClient
incoming_only_	talk/p2p/base/tcpport.h	/^  bool incoming_only_;$/;"	m	class:cricket::TCPPort
index	talk/third_party/mediastreamer/sndcard.h	/^	gint index;$/;"	m	struct:_SndCard
index_	talk/base/diskcache.cc	/^  size_t index_;$/;"	m	class:talk_base::DiskCacheAdapter	file:
inet_aton	talk/base/socketaddress.cc	/^int inet_aton(const char * cp, struct in_addr * inp) {$/;"	f
inf	talk/third_party/mediastreamer/msspeexenc.h	/^	MSFifo *inf[1];$/;"	m	struct:_MSSpeexEnc
infifos	talk/third_party/mediastreamer/msfilter.h	/^	MSFifo **infifos; \/*pointer to a table of pointer to input fifos*\/$/;"	m	struct:_MSFilter
info	talk/third_party/mediastreamer/mscodec.h	/^	MSFilterInfo info;$/;"	m	struct:_MSCodecInfo
info	talk/third_party/mediastreamer/msfilter.h	/^	struct _MSFilterInfo *info;	\/*pointer to a filter_info *\/$/;"	m	struct:_MSFilterClass	typeref:struct:_MSFilterClass::_MSFilterInfo
infodir	talk/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/base/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/examples/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/examples/call/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/examples/login/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/examples/pcp/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/p2p/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/p2p/base/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/p2p/client/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/session/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/session/fileshare/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/session/phone/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/session/tunnel/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/third_party/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/third_party/gips/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/third_party/mediastreamer/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/xmllite/Makefile	/^infodir = ${prefix}\/info$/;"	m
infodir	talk/xmpp/Makefile	/^infodir = ${prefix}\/info$/;"	m
init	talk/third_party/mediastreamer/jackcard.h	/^  gboolean init;$/;"	m	struct:__anon42
initialized	talk/third_party/mediastreamer/msspeexdec.h	/^	int initialized;$/;"	m	struct:_MSSpeexDec
initialized	talk/third_party/mediastreamer/msspeexenc.h	/^	int initialized;$/;"	m	struct:_MSSpeexEnc
initialized_	talk/session/phone/channelmanager.h	/^  bool initialized_;$/;"	m	class:cricket::ChannelManager
initiator	talk/p2p/base/session.h	/^  bool initiator() const { return initiator_; }$/;"	f	class:cricket::Session
initiator	talk/p2p/base/sessionid.h	/^  const std::string &initiator() const {$/;"	f	class:cricket::SessionID
initiator_	talk/p2p/base/session.h	/^  bool initiator_;$/;"	m	class:cricket::Session
initiator_	talk/p2p/base/sessionid.h	/^  std::string initiator_;$/;"	m	class:cricket::SessionID
innerHandler_	talk/xmpp/xmppstanzaparser.h	/^  ParseHandler innerHandler_;$/;"	m	class:buzz::XmppStanzaParser
inpos_	talk/base/asynctcpsocket.h	/^  size_t insize_, inpos_, outsize_, outpos_;$/;"	m	class:talk_base::AsyncTCPSocket
input	talk/third_party/mediastreamer/mssdlout.h	/^	MSQueue *input[2];$/;"	m	struct:_MSSdlOut
input_level	talk/session/phone/audiomonitor.h	/^  int input_level;$/;"	m	struct:cricket::AudioInfo
input_pix_fmt	talk/third_party/mediastreamer/msavencoder.h	/^	gint input_pix_fmt;$/;"	m	struct:_MSAVEncoder
inq	talk/third_party/mediastreamer/msspeexdec.h	/^	MSQueue *inq[1]; \/* speex has an input q because it can be variable bit rate *\/$/;"	m	struct:_MSSpeexDec
inqueues	talk/third_party/mediastreamer/msfilter.h	/^	MSQueue **inqueues;  \/*pointer to a table of pointer to input queues*\/$/;"	m	struct:_MSFilter
insize_	talk/base/asynctcpsocket.h	/^  size_t insize_, inpos_, outsize_, outpos_;$/;"	m	class:talk_base::AsyncTCPSocket
install_sh	talk/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/base/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/examples/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/examples/call/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/examples/login/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/examples/pcp/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/p2p/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/p2p/base/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/p2p/client/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/session/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/session/fileshare/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/session/phone/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/session/tunnel/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/third_party/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/third_party/gips/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/third_party/mediastreamer/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/xmllite/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh	talk/xmpp/Makefile	/^install_sh = \/home\/dima\/work\/jabber\/jabbin\/trunk\/3party\/libjingle-0.4.0\/install-sh$/;"	m
install_sh_DATA	talk/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/base/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/examples/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/examples/call/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/examples/login/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/examples/pcp/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/p2p/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/p2p/base/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/p2p/client/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/session/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/session/fileshare/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/session/phone/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/session/tunnel/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/third_party/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/third_party/gips/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/third_party/mediastreamer/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/xmllite/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	talk/xmpp/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	talk/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/base/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/examples/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/examples/call/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/examples/login/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/examples/pcp/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/p2p/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/p2p/base/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/p2p/client/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/session/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/session/fileshare/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/session/phone/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/session/tunnel/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/third_party/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/third_party/gips/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/third_party/mediastreamer/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/xmllite/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	talk/xmpp/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/base/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/examples/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/examples/call/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/examples/login/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/examples/pcp/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/p2p/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/p2p/base/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/p2p/client/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/session/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/session/fileshare/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/session/phone/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/session/tunnel/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/third_party/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/third_party/gips/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/third_party/mediastreamer/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/xmllite/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	talk/xmpp/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance_	talk/base/messagequeue.cc	/^MessageQueueManager* MessageQueueManager::instance_;$/;"	m	class:talk_base::MessageQueueManager	file:
instance_	talk/base/messagequeue.h	/^  static MessageQueueManager* instance_;$/;"	m	class:talk_base::MessageQueueManager
int16	talk/base/basictypes.h	/^typedef short int16;$/;"	t
int32	talk/base/basictypes.h	/^typedef long int32;$/;"	t
int64	talk/base/basictypes.h	/^typedef __int64 int64;$/;"	t
int64	talk/base/basictypes.h	/^typedef long long int64;$/;"	t
int8	talk/base/basictypes.h	/^typedef char int8;$/;"	t
int_map_	talk/base/natserver.h	/^  InternalMap* int_map_;$/;"	m	class:talk_base::NATServer
internal_connections_	talk/p2p/base/relayserver.h	/^  std::vector<RelayServerConnection*> internal_connections_;$/;"	m	class:cricket::RelayServerBinding
internal_sockets_	talk/p2p/base/relayserver.h	/^  SocketList internal_sockets_;$/;"	m	class:cricket::RelayServer
interval	talk/third_party/mediastreamer/mssync.h	/^	gint interval; \/* in miliseconds*\/$/;"	m	struct:_MSSync
interval	talk/third_party/mediastreamer/mstimer.h	/^	struct timeval interval;$/;"	m	struct:_MSTimer	typeref:struct:_MSTimer::timeval
ip	talk/base/network.h	/^  uint32 ip() const { return ip_; }$/;"	f	class:talk_base::Network
ip	talk/base/socketaddress.cc	/^uint32 SocketAddress::ip() const {$/;"	f	class:talk_base::SocketAddress
ip	talk/p2p/base/stun.h	/^  uint32 ip() const { return ip_; }$/;"	f	class:cricket::StunAddressAttribute
ip4local	talk/third_party/mediastreamer/audiostream.c	/^static const char *ip4local="0.0.0.0";$/;"	v	file:
ip6local	talk/third_party/mediastreamer/audiostream.c	/^static const char *ip6local="::";$/;"	v	file:
ip_	talk/base/network.h	/^  uint32 ip_;$/;"	m	class:talk_base::Network
ip_	talk/base/socketaddress.h	/^  uint32 ip_;$/;"	m	class:talk_base::SocketAddress
ip_	talk/p2p/base/stun.h	/^  uint32 ip_;$/;"	m	class:cricket::StunAddressAttribute
ip_	talk/p2p/client/basicportallocator.cc	/^  uint32 ip_;$/;"	m	class:cricket::AllocationSequence	file:
ip_option_information	talk/base/winping.h	/^typedef struct ip_option_information {$/;"	s	namespace:talk_base
iqId_	talk/xmpp/xmpplogintask.h	/^  std::string iqId_;$/;"	m	class:buzz::XmppLoginTask
iq_entries_	talk/xmpp/xmppengineimpl.h	/^  scoped_ptr<IqEntryVector> iq_entries_;$/;"	m	class:buzz::XmppEngineImpl
iq_handler_	talk/xmpp/xmppengineimpl_iq.cc	/^  XmppIqHandler * const iq_handler_;$/;"	m	class:buzz::XmppIqEntry	file:
isConnected	talk/base/httpbase.cc	/^HttpBase::isConnected() const {$/;"	f	class:talk_base::HttpBase
isStart_	talk/xmpp/xmpplogintask.h	/^  bool isStart_;$/;"	m	class:buzz::XmppLoginTask
is_closed_	talk/session/fileshare/fileshare.h	/^  bool is_closed_;$/;"	m	class:cricket::FileShareSession
is_diagnostic_mode_	talk/base/logging.cc	/^bool LogMessage::is_diagnostic_mode_ = false;$/;"	m	class:talk_base::LogMessage	file:
is_diagnostic_mode_	talk/base/logging.h	/^  static bool is_diagnostic_mode_;$/;"	m	class:talk_base::LogMessage
is_google_client	talk/examples/login/status.h	/^  bool is_google_client() const { return is_google_client_; }$/;"	f	class:buzz::Status
is_google_client_	talk/examples/login/status.h	/^  bool is_google_client_;$/;"	m	class:buzz::Status
is_selected	talk/third_party/mediastreamer/mscodec.h	/^	guint is_selected:1; \/* linphone (user) set this flag if he allows this codec to be used*\/$/;"	m	struct:_MSCodecInfo
is_sender	talk/session/fileshare/fileshare.cc	/^FileShareSession::is_sender() const {$/;"	f	class:cricket::FileShareSession
is_sender_	talk/session/fileshare/fileshare.h	/^  bool is_sender_;$/;"	m	class:cricket::FileShareSession
is_usable	talk/third_party/mediastreamer/mscodec.h	/^	guint is_usable:1; \/* linphone set this flag to remember if it can use this codec considering the total bandwidth*\/$/;"	m	struct:_MSCodecInfo
item	talk/session/fileshare/fileshare.h	/^  inline const Item& item(size_t index) const { return items_[index]; }$/;"	f	class:cricket::FileShareManifest
item_transferring_	talk/session/fileshare/fileshare.h	/^  size_t item_transferring_;$/;"	m	class:cricket::FileShareSession
items_	talk/session/fileshare/fileshare.h	/^  ItemList items_;$/;"	m	class:cricket::FileShareManifest
itsNext	talk/base/linked_ptr.h	/^    mutable const linked_ptr*   itsNext;$/;"	m	class:talk_base::linked_ptr
itsPrev	talk/base/linked_ptr.h	/^    mutable const linked_ptr*   itsPrev;$/;"	m	class:talk_base::linked_ptr
itsPtr	talk/base/linked_ptr.h	/^    X*                          itsPtr;$/;"	m	class:talk_base::linked_ptr
jack_active	talk/third_party/mediastreamer/jackcard.h	/^  gboolean jack_active;$/;"	m	struct:_JackCard
jack_card_can_read	talk/third_party/mediastreamer/jackcard.c	/^gboolean jack_card_can_read(JackCard *obj)$/;"	f
jack_card_close_r	talk/third_party/mediastreamer/jackcard.c	/^void jack_card_close_r(JackCard *obj)$/;"	f
jack_card_close_w	talk/third_party/mediastreamer/jackcard.c	/^void jack_card_close_w(JackCard *obj)$/;"	f
jack_card_create_read_filter	talk/third_party/mediastreamer/jackcard.c	/^MSFilter *jack_card_create_read_filter(JackCard *card)$/;"	f
jack_card_create_write_filter	talk/third_party/mediastreamer/jackcard.c	/^MSFilter *jack_card_create_write_filter(JackCard *card)$/;"	f
jack_card_destroy	talk/third_party/mediastreamer/jackcard.c	/^void jack_card_destroy(JackCard *obj)$/;"	f
jack_card_get_level	talk/third_party/mediastreamer/jackcard.c	/^gint jack_card_get_level(JackCard *obj,gint way)$/;"	f
jack_card_manager_init	talk/third_party/mediastreamer/jackcard.c	/^gint jack_card_manager_init(SndCardManager *m, gint index)$/;"	f
jack_card_new	talk/third_party/mediastreamer/jackcard.c	/^SndCard * jack_card_new(jack_client_t *client)$/;"	f
jack_card_open_r	talk/third_party/mediastreamer/jackcard.c	/^int jack_card_open_r(JackCard *obj,int bits,int stereo,int rate)$/;"	f
jack_card_open_w	talk/third_party/mediastreamer/jackcard.c	/^int jack_card_open_w(JackCard *obj,int bits,int stereo,int rate)$/;"	f
jack_card_probe	talk/third_party/mediastreamer/jackcard.c	/^int jack_card_probe(JackCard *obj,int bits,int stereo,int rate)$/;"	f
jack_card_read	talk/third_party/mediastreamer/jackcard.c	/^int jack_card_read(JackCard *obj,char *buf,int size)$/;"	f
jack_card_set_blocking_mode	talk/third_party/mediastreamer/jackcard.c	/^void jack_card_set_blocking_mode(JackCard *obj, gboolean yesno)$/;"	f
jack_card_set_level	talk/third_party/mediastreamer/jackcard.c	/^void jack_card_set_level(JackCard *obj,gint way,gint a)$/;"	f
jack_card_set_source	talk/third_party/mediastreamer/jackcard.c	/^void jack_card_set_source(JackCard *obj,int source)$/;"	f
jack_card_write	talk/third_party/mediastreamer/jackcard.c	/^int jack_card_write(JackCard *obj,char *buf,int size)$/;"	f
jack_init	talk/third_party/mediastreamer/jackcard.c	/^int jack_init(JackCard* obj)$/;"	f
jack_running	talk/third_party/mediastreamer/jackcard.h	/^  gboolean jack_running;$/;"	m	struct:_JackCard
jack_shutdown	talk/third_party/mediastreamer/jackcard.c	/^jack_shutdown (void *arg)$/;"	f
jackcard_mode_t	talk/third_party/mediastreamer/jackcard.h	/^} jackcard_mode_t;$/;"	t	typeref:struct:__anon42
jid	talk/examples/call/callclient.h	/^  buzz::Jid jid;$/;"	m	struct:RosterItem
jid	talk/examples/login/status.h	/^  const Jid & jid() const { return jid_; }$/;"	f	class:buzz::Status
jid	talk/session/fileshare/fileshare.cc	/^FileShareSession::jid() const {$/;"	f	class:cricket::FileShareSession
jid	talk/session/phone/phonesessionclient.h	/^  const buzz::Jid &jid() const { return jid_; }$/;"	f	class:cricket::PhoneSessionClient
jid	talk/session/tunnel/tunnelsessionclient.cc	/^  buzz::Jid jid;$/;"	m	struct:cricket::CreateTunnelData	file:
jid	talk/session/tunnel/tunnelsessionclient.h	/^  const buzz::Jid& jid() const { return jid_; }$/;"	f	class:cricket::TunnelSessionClient
jid	talk/xmpp/xmppclient.cc	/^XmppClient::jid() {$/;"	f	class:buzz::XmppClient
jid_	talk/examples/login/status.h	/^  Jid jid_;$/;"	m	class:buzz::Status
jid_	talk/examples/login/xmppauth.h	/^  buzz::Jid jid_;$/;"	m	class:XmppAuth
jid_	talk/session/fileshare/fileshare.h	/^  buzz::Jid jid_;$/;"	m	class:cricket::FileShareSession
jid_	talk/session/fileshare/fileshare.h	/^  buzz::Jid jid_;$/;"	m	class:cricket::FileShareSessionClient
jid_	talk/session/phone/phonesessionclient.h	/^  buzz::Jid jid_;$/;"	m	class:cricket::PhoneSessionClient
jid_	talk/session/tunnel/tunnelsessionclient.h	/^  buzz::Jid jid_;$/;"	m	class:cricket::TunnelSessionClient
jid_	talk/xmpp/plainsaslhandler.h	/^  Jid jid_;$/;"	m	class:buzz::PlainSaslHandler
jitter	talk/session/phone/mediachannel.h	/^	unsigned long jitter;$/;"	m	struct:cricket::MediaInfo
kAllocateDelay	talk/p2p/base/p2ptransportchannel.cc	/^static const int kAllocateDelay = 1 * 1000; \/\/ 1 second$/;"	v	file:
kAllocatePeriod	talk/p2p/base/p2ptransportchannel.cc	/^static const int kAllocatePeriod = 20 * 1000; \/\/ 20 seconds$/;"	v	file:
kAlpha	talk/base/network.cc	/^const double kAlpha = 0.5; \/\/ weight for data infinitely far in the past$/;"	v
kBufferSize	talk/base/httpbase.h	/^  enum { kBufferSize = 32 * 1024 };$/;"	e	enum:talk_base::HttpBase::__anon21
kCacheBody	talk/base/httpclient.cc	/^const size_t kCacheBody = 1;$/;"	v
kCacheHeader	talk/base/httpclient.cc	/^const size_t kCacheHeader = 0;$/;"	v
kComplete	talk/base/signalthread.h	/^  enum State { kInit, kRunning, kComplete, kStopping, kReleasing } state_;$/;"	e	enum:talk_base::SignalThread::State
kCreateSessionURL	talk/p2p/client/httpportallocator.cc	/^const std::string kCreateSessionURL = "\/create_session";$/;"	v
kDefaultHTTPTimeout	talk/base/asynchttprequest.cc	/^const int kDefaultHTTPTimeout = 30 * 1000; \/\/ 30 sec$/;"	v
kDefaultPortAllocatorFlags	talk/p2p/base/portallocator.h	/^const uint32 kDefaultPortAllocatorFlags = 0;$/;"	v
kDefaultQuality	talk/base/network.cc	/^const double kDefaultQuality = talk_base::QUALITY_FAIR;$/;"	v
kFileTransferEnableRetryMs	talk/session/fileshare/fileshare.cc	/^const uint32 kFileTransferEnableRetryMs = 1000 * 60 * 4; \/\/ 4 minutes$/;"	v
kForever	talk/base/socketserver.h	/^const int kForever = -1;$/;"	v
kGIPSCodecPrefs	talk/session/phone/gipslitemediaengine.cc	/^const CodecPref kGIPSCodecPrefs[] = {$/;"	v
kHalfLife	talk/base/network.cc	/^const double kHalfLife = 2000; \/\/ half life of exponential decay (in ms)$/;"	v
kHostPort	talk/p2p/client/httpportallocator.cc	/^const uint16 kHostPort = 80;$/;"	v
kHttpHeaders	talk/base/httpcommon.cc	/^static const char* kHttpHeaders[HH_LAST+1] = {$/;"	v	file:
kHttpVerbs	talk/base/httpcommon.cc	/^static const char* kHttpVerbs[HV_LAST+1] = {$/;"	v	file:
kHttpVersions	talk/base/httpcommon.cc	/^static const char* kHttpVersions[HVER_LAST+1] = {$/;"	v	file:
kInit	talk/base/signalthread.h	/^  enum State { kInit, kRunning, kComplete, kStopping, kReleasing } state_;$/;"	e	enum:talk_base::SignalThread::State
kLambda	talk/base/network.cc	/^const double kLambda = kLog2 \/ kHalfLife;$/;"	v
kLog2	talk/base/network.cc	/^const double kLog2 = 0.693147180559945309417;$/;"	v
kMaxImageSize	talk/session/fileshare/fileshare.cc	/^const size_t kMaxImageSize = 0x8000U; \/\/ (32k)$/;"	v
kMaxMsgLatency	talk/base/messagequeue.cc	/^const uint32 kMaxMsgLatency = 150;  \/\/ 150 ms$/;"	v
kMaxPreviewSize	talk/session/fileshare/fileshare.cc	/^const size_t kMaxPreviewSize = 1024;$/;"	v
kMaxUsernameSize	talk/p2p/base/p2ptransport.cc	/^const size_t kMaxUsernameSize = 16;$/;"	v
kMediaMonitorInterval	talk/session/phone/call.cc	/^const int kMediaMonitorInterval = 1000*15;$/;"	v
kMinImageSize	talk/session/fileshare/fileshare.cc	/^const size_t kMinImageSize = 16U;$/;"	v
kMinImprovement	talk/p2p/base/p2ptransportchannel.cc	/^static const double kMinImprovement = 10;$/;"	v	file:
kMsecTo100ns	talk/base/taskrunner.h	/^const int64 kMsecTo100ns = 10000;$/;"	v
kNoVoicemailTimeout	talk/session/phone/call.cc	/^const int kNoVoicemailTimeout = 1000*180;$/;"	v
kNumGIPSCodecs	talk/session/phone/gipslitemediaengine.cc	/^const size_t kNumGIPSCodecs = sizeof(kGIPSCodecPrefs) \/ sizeof(CodecPref);$/;"	v
kNumPhases	talk/p2p/client/basicportallocator.cc	/^const int kNumPhases = 4;$/;"	v
kNumPorts	talk/p2p/base/session_unittest.cc	/^const int kNumPorts = 2;$/;"	v
kNumRetries	talk/p2p/client/httpportallocator.cc	/^const size_t kNumRetries = 5;$/;"	v
kPortTimeoutDelay	talk/p2p/base/port.cc	/^const int kPortTimeoutDelay = 30 * 1000; \/\/ 30 seconds$/;"	v
kProxyWait	talk/session/fileshare/fileshare.cc	/^const uint32 kProxyWait = 10000; $/;"	v
kRcvBufSize	talk/p2p/base/pseudotcp.h	/^    kRcvBufSize = 1024 * 60,$/;"	e	enum:cricket::PseudoTcp::__anon4
kReleasing	talk/base/signalthread.h	/^  enum State { kInit, kRunning, kComplete, kStopping, kReleasing } state_;$/;"	e	enum:talk_base::SignalThread::State
kRunning	talk/base/signalthread.h	/^  enum State { kInit, kRunning, kComplete, kStopping, kReleasing } state_;$/;"	e	enum:talk_base::SignalThread::State
kSecTo100ns	talk/base/taskrunner.h	/^const int64 kSecTo100ns = kSecToMsec * kMsecTo100ns;$/;"	v
kSecToMsec	talk/base/taskrunner.h	/^const int64 kSecToMsec = 1000;$/;"	v
kSendToVoicemailTimeout	talk/session/phone/call.cc	/^const int kSendToVoicemailTimeout = 1000*20;$/;"	v
kSessionType	talk/p2p/base/session_unittest.cc	/^const std::string kSessionType = "http:\/\/oink.splat\/session";$/;"	v
kSndBufSize	talk/p2p/base/pseudotcp.h	/^    kSndBufSize = 1024 * 90$/;"	e	enum:cricket::PseudoTcp::__anon4
kStopping	talk/base/signalthread.h	/^  enum State { kInit, kRunning, kComplete, kStopping, kReleasing } state_;$/;"	e	enum:talk_base::SignalThread::State
keep_alive_	talk/p2p/base/stunport.cc	/^  bool keep_alive_;$/;"	m	class:cricket::StunPortBindingRequest	file:
key	talk/p2p/client/socketmonitor.h	/^  void *key;$/;"	m	struct:cricket::ConnectionInfo
key_	talk/base/thread.cc	/^DWORD ThreadManager::key_;$/;"	m	class:talk_base::ThreadManager	file:
key_	talk/base/thread.cc	/^pthread_key_t ThreadManager::key_;$/;"	m	class:talk_base::ThreadManager	file:
key_	talk/base/thread.h	/^  static DWORD key_;$/;"	m	class:talk_base::ThreadManager
key_	talk/base/thread.h	/^  static pthread_key_t key_; $/;"	m	class:talk_base::ThreadManager
kfClose	talk/base/physicalsocketserver.cc	/^const int kfClose = 0x0008;$/;"	v
kfConnect	talk/base/physicalsocketserver.cc	/^const int kfConnect = 0x0004;$/;"	v
kfRead	talk/base/physicalsocketserver.cc	/^const int kfRead  = 0x0001;$/;"	v
kfRead	talk/base/win32socketserver.cc	/^static const int kfRead  = 0x0001;$/;"	v	file:
kfWrite	talk/base/physicalsocketserver.cc	/^const int kfWrite = 0x0002;$/;"	v
kfWrite	talk/base/win32socketserver.cc	/^static const int kfWrite = 0x0002;$/;"	v	file:
klass	talk/third_party/mediastreamer/msfilter.h	/^	struct _MSFilterClass *klass;$/;"	m	struct:_MSFilter	typeref:struct:_MSFilter::_MSFilterClass
klass	talk/third_party/mediastreamer/mssync.h	/^	struct _MSSyncClass *klass;$/;"	m	struct:_MSSync	typeref:struct:_MSSync::_MSSyncClass
know_capabilities	talk/examples/login/status.h	/^  bool know_capabilities() const { return know_capabilities_; }$/;"	f	class:buzz::Status
know_capabilities_	talk/examples/login/status.h	/^  bool know_capabilities_;$/;"	m	class:buzz::Status
label	talk/base/logging.h	/^struct ConstantLabel { int value; const char * label; };$/;"	m	struct:talk_base::ConstantLabel
label_	talk/base/socketadapters.h	/^  std::string label_;$/;"	m	class:talk_base::LoggingSocketAdapter
label_	talk/base/socketpool.h	/^  std::string label_;$/;"	m	class:talk_base::LoggingPoolAdapter
label_	talk/base/stream.h	/^  std::string label_;$/;"	m	class:talk_base::LoggingAdapter
lang_	talk/session/phone/phonesessionclient.h	/^  std::string lang_;$/;"	m	class:cricket::PhoneSessionDescription
lang_	talk/xmpp/xmppengineimpl.h	/^  std::string lang_;$/;"	m	class:buzz::XmppEngineImpl
last	talk/third_party/mediastreamer/msqueue.h	/^	MSMessage *last;$/;"	m	struct:_MSQueue
last_data	talk/p2p/base/session_unittest.cc	/^  char last_data[4096];$/;"	m	struct:ChannelHandler	file:
last_data_time_	talk/base/network.h	/^  uint32 last_data_time_;$/;"	m	class:talk_base::Network
last_id	talk/p2p/base/session_unittest.cc	/^  SessionID last_id;$/;"	m	struct:SessionManagerHandler	file:
last_modified	talk/base/diskcache.h	/^    time_t last_modified;$/;"	m	struct:talk_base::DiskCache::Entry
last_ping_received_	talk/p2p/base/port.h	/^  uint32 last_ping_received_; \/\/ last time we received a ping from the other $/;"	m	class:cricket::Connection
last_ping_sent	talk/p2p/base/port.h	/^  uint32 last_ping_sent() { return last_ping_sent_; }$/;"	f	class:cricket::Connection
last_ping_sent_	talk/p2p/base/port.h	/^  uint32 last_ping_sent_;     \/\/ last time we sent a ping to the other side$/;"	m	class:cricket::Connection
last_readable	talk/p2p/base/session_unittest.cc	/^  bool last_readable, last_writable;$/;"	m	struct:ChannelHandler	file:
last_recv_bytes_second_calc_	talk/p2p/base/port.h	/^  size_t last_recv_bytes_second_calc_;$/;"	m	class:cricket::Connection
last_recv_bytes_second_time_	talk/p2p/base/port.h	/^  uint32 last_recv_bytes_second_time_;$/;"	m	class:cricket::Connection
last_send	talk/base/virtualsocket_unittest.cc	/^  uint32 last_send;$/;"	m	struct:Sender	file:
last_sent_bytes_second_calc_	talk/p2p/base/port.h	/^  size_t last_sent_bytes_second_calc_;$/;"	m	class:cricket::Connection
last_sent_bytes_second_time_	talk/p2p/base/port.h	/^  uint32 last_sent_bytes_second_time_;$/;"	m	class:cricket::Connection
last_size	talk/p2p/base/session_unittest.cc	/^  size_t last_size;$/;"	m	struct:ChannelHandler	file:
last_state	talk/p2p/base/session_unittest.cc	/^  Session::State last_state;$/;"	m	struct:SessionHandler	file:
last_tick_dispatch_count_	talk/base/physicalsocketserver.h	/^  int last_tick_dispatch_count_;$/;"	m	class:talk_base::PhysicalSocketServer
last_tick_tracked_	talk/base/physicalsocketserver.h	/^  uint32 last_tick_tracked_;$/;"	m	class:talk_base::PhysicalSocketServer
last_used_	talk/p2p/base/relayserver.h	/^  uint32 last_used_;$/;"	m	class:cricket::RelayServerBinding
last_writable	talk/p2p/base/session_unittest.cc	/^  bool last_readable, last_writable;$/;"	m	struct:ChannelHandler	file:
le_int16	talk/third_party/mediastreamer/waveheader.h	66;"	d
le_int16	talk/third_party/mediastreamer/waveheader.h	70;"	d
le_uint16	talk/third_party/mediastreamer/waveheader.h	65;"	d
le_uint16	talk/third_party/mediastreamer/waveheader.h	69;"	d
le_uint32	talk/third_party/mediastreamer/waveheader.h	64;"	d
le_uint32	talk/third_party/mediastreamer/waveheader.h	68;"	d
len	talk/p2p/base/pseudotcp.h	/^    uint32 len;$/;"	m	struct:cricket::PseudoTcp::Segment
len	talk/p2p/base/pseudotcp.h	/^    uint32 seq, len;$/;"	m	struct:cricket::PseudoTcp::RSegment
len	talk/p2p/base/pseudotcp.h	/^    uint32 seq, len;$/;"	m	struct:cricket::PseudoTcp::SSegment
len	talk/third_party/mediastreamer/waveheader.h	/^	guint32   len ;	\/* length of FORMAT chunk (always 0x10) *\/$/;"	m	struct:_format_t
len	talk/third_party/mediastreamer/waveheader.h	/^	guint32  len ;	\/* Length of package (binary, little endian) *\/$/;"	m	struct:_riff_t
len	talk/third_party/mediastreamer/waveheader.h	/^	int  len ;	\/* length of data *\/$/;"	m	struct:_data_t
len_	talk/base/httpbase.h	/^  size_t len_;$/;"	m	class:talk_base::HttpBase
length	talk/p2p/base/stun.h	/^  uint16 length() const { return length_; }$/;"	f	class:cricket::StunAttribute
length	talk/p2p/base/stun.h	/^  uint16 length() const { return length_; }$/;"	f	class:cricket::StunMessage
length_	talk/base/cryptstring.h	/^  size_t length_;$/;"	m	class:talk_base::FormatCryptString
length_	talk/p2p/base/stun.h	/^  uint16 length_;$/;"	m	class:cricket::StunAttribute
length_	talk/p2p/base/stun.h	/^  uint16 length_;$/;"	m	class:cricket::StunMessage
level	talk/third_party/mediastreamer/jackcard.h	/^  float level;$/;"	m	struct:_JackCard
level	talk/third_party/mediastreamer/jackcard.h	/^  float level;$/;"	m	struct:__anon42
level_	talk/base/socketadapters.h	/^  LoggingSeverity level_;$/;"	m	class:talk_base::LoggingSocketAdapter
level_	talk/base/socketpool.h	/^  LoggingSeverity level_;$/;"	m	class:talk_base::LoggingPoolAdapter
level_	talk/base/stream.h	/^  LoggingSeverity level_;$/;"	m	class:talk_base::LoggingAdapter
libcricketbase_la_LIBADD	talk/base/Makefile	/^libcricketbase_la_LIBADD =$/;"	m
libcricketbase_la_OBJECTS	talk/base/Makefile	/^libcricketbase_la_OBJECTS = $(am_libcricketbase_la_OBJECTS)$/;"	m
libcricketbase_la_SOURCES	talk/base/Makefile	/^libcricketbase_la_SOURCES = socketaddress.cc \\$/;"	m
libcricketexampleslogin_la_LIBADD	talk/examples/login/Makefile	/^libcricketexampleslogin_la_LIBADD =$/;"	m
libcricketexampleslogin_la_OBJECTS	talk/examples/login/Makefile	/^libcricketexampleslogin_la_OBJECTS =  \\$/;"	m
libcricketexampleslogin_la_SOURCES	talk/examples/login/Makefile	/^libcricketexampleslogin_la_SOURCES = xmppsocket.cc \\$/;"	m
libcricketp2pbase_la_LIBADD	talk/p2p/base/Makefile	/^libcricketp2pbase_la_LIBADD =$/;"	m
libcricketp2pbase_la_OBJECTS	talk/p2p/base/Makefile	/^libcricketp2pbase_la_OBJECTS = $(am_libcricketp2pbase_la_OBJECTS)$/;"	m
libcricketp2pbase_la_SOURCES	talk/p2p/base/Makefile	/^libcricketp2pbase_la_SOURCES = stun.cc \\$/;"	m
libcricketp2pclient_la_LIBADD	talk/p2p/client/Makefile	/^libcricketp2pclient_la_LIBADD =$/;"	m
libcricketp2pclient_la_OBJECTS	talk/p2p/client/Makefile	/^libcricketp2pclient_la_OBJECTS = $(am_libcricketp2pclient_la_OBJECTS)$/;"	m
libcricketp2pclient_la_SOURCES	talk/p2p/client/Makefile	/^libcricketp2pclient_la_SOURCES = basicportallocator.cc \\$/;"	m
libcricketsessionfileshare_la_LIBADD	talk/session/fileshare/Makefile	/^libcricketsessionfileshare_la_LIBADD =$/;"	m
libcricketsessionfileshare_la_OBJECTS	talk/session/fileshare/Makefile	/^libcricketsessionfileshare_la_OBJECTS =  \\$/;"	m
libcricketsessionfileshare_la_SOURCES	talk/session/fileshare/Makefile	/^libcricketsessionfileshare_la_SOURCES = fileshare.cc$/;"	m
libcricketsessionphone_la_LIBADD	talk/session/phone/Makefile	/^libcricketsessionphone_la_LIBADD =$/;"	m
libcricketsessionphone_la_OBJECTS	talk/session/phone/Makefile	/^libcricketsessionphone_la_OBJECTS =  \\$/;"	m
libcricketsessionphone_la_SOURCES	talk/session/phone/Makefile	/^libcricketsessionphone_la_SOURCES = audiomonitor.cc \\$/;"	m
libcricketsessiontunnel_la_LIBADD	talk/session/tunnel/Makefile	/^libcricketsessiontunnel_la_LIBADD =$/;"	m
libcricketsessiontunnel_la_OBJECTS	talk/session/tunnel/Makefile	/^libcricketsessiontunnel_la_OBJECTS =  \\$/;"	m
libcricketsessiontunnel_la_SOURCES	talk/session/tunnel/Makefile	/^libcricketsessiontunnel_la_SOURCES = tunnelsessionclient.cc \\$/;"	m
libcrickettest_la_LIBADD	talk/base/Makefile	/^libcrickettest_la_LIBADD =$/;"	m
libcrickettest_la_OBJECTS	talk/base/Makefile	/^libcrickettest_la_OBJECTS = $(am_libcrickettest_la_OBJECTS)$/;"	m
libcrickettest_la_SOURCES	talk/base/Makefile	/^libcrickettest_la_SOURCES = testclient.cc \\$/;"	m
libcricketxmllite_la_LIBADD	talk/xmllite/Makefile	/^libcricketxmllite_la_LIBADD =$/;"	m
libcricketxmllite_la_OBJECTS	talk/xmllite/Makefile	/^libcricketxmllite_la_OBJECTS = $(am_libcricketxmllite_la_OBJECTS)$/;"	m
libcricketxmllite_la_SOURCES	talk/xmllite/Makefile	/^libcricketxmllite_la_SOURCES = qname.cc \\$/;"	m
libcricketxmpp_la_LIBADD	talk/xmpp/Makefile	/^libcricketxmpp_la_LIBADD =$/;"	m
libcricketxmpp_la_OBJECTS	talk/xmpp/Makefile	/^libcricketxmpp_la_OBJECTS = $(am_libcricketxmpp_la_OBJECTS)$/;"	m
libcricketxmpp_la_SOURCES	talk/xmpp/Makefile	/^libcricketxmpp_la_SOURCES = constants.cc \\$/;"	m
libdir	talk/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/base/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/examples/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/examples/call/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/examples/login/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/examples/pcp/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/p2p/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/p2p/base/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/p2p/client/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/session/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/session/fileshare/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/session/phone/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/session/tunnel/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/third_party/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/third_party/gips/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/third_party/mediastreamer/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/xmllite/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	talk/xmpp/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	talk/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/base/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/examples/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/examples/call/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/examples/login/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/examples/pcp/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/p2p/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/p2p/base/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/p2p/client/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/session/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/session/fileshare/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/session/phone/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/session/tunnel/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/third_party/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/third_party/gips/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/third_party/mediastreamer/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/xmllite/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	talk/xmpp/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libmediastreamer_la_DEPENDENCIES	talk/third_party/mediastreamer/Makefile	/^libmediastreamer_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
libmediastreamer_la_LIBADD	talk/third_party/mediastreamer/Makefile	/^libmediastreamer_la_LIBADD = $(GLIB_LIBS) $(ORTP_LIBS)$/;"	m
libmediastreamer_la_OBJECTS	talk/third_party/mediastreamer/Makefile	/^libmediastreamer_la_OBJECTS = $(am_libmediastreamer_la_OBJECTS)$/;"	m
libmediastreamer_la_SOURCES	talk/third_party/mediastreamer/Makefile	/^libmediastreamer_la_SOURCES = msfilter.c msfilter.h msutils.h waveheader.h\\$/;"	m
lifetime	talk/p2p/base/relayserver.h	/^  uint32 lifetime() { return lifetime_; }$/;"	f	class:cricket::RelayServerBinding
lifetime_	talk/p2p/base/port.h	/^  enum Lifetime { LT_PRESTART, LT_PRETIMEOUT, LT_POSTTIMEOUT } lifetime_;$/;"	m	class:cricket::Port	typeref:enum:cricket::Port::Lifetime
lifetime_	talk/p2p/base/relayserver.h	/^  uint32 lifetime_;$/;"	m	class:cricket::RelayServerBinding
linked_ptr	talk/base/linked_ptr.h	/^    explicit linked_ptr(X* p = 0) throw()$/;"	f	class:talk_base::linked_ptr
linked_ptr	talk/base/linked_ptr.h	/^    linked_ptr(const linked_ptr& r) throw()$/;"	f	class:talk_base::linked_ptr
linked_ptr	talk/base/linked_ptr.h	/^    template <class Y> linked_ptr(const linked_ptr<Y>& r) throw()$/;"	f	class:talk_base::linked_ptr
linked_ptr	talk/base/linked_ptr.h	/^template <class X> class linked_ptr$/;"	c	namespace:talk_base
list	talk/Makefile	/^	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \\$/;"	m
list	talk/examples/Makefile	/^	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \\$/;"	m
list	talk/p2p/Makefile	/^	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \\$/;"	m
list	talk/session/Makefile	/^	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \\$/;"	m
list	talk/third_party/Makefile	/^	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \\$/;"	m
listener_	talk/base/httpserver.h	/^  AsyncSocket* listener_;$/;"	m	class:talk_base::HttpListenServer
lms_	talk/base/socketadapters.h	/^  LogMultilineState lms_;$/;"	m	class:talk_base::LoggingSocketAdapter
lms_	talk/base/stream.h	/^  LogMultilineState lms_;$/;"	m	class:talk_base::LoggingAdapter
lo_byte	talk/third_party/mediastreamer/waveheader.h	/^    unsigned char lo_byte;$/;"	m	struct:uint16scheme
lo_int	talk/third_party/mediastreamer/waveheader.h	/^    guint16 lo_int;$/;"	m	struct:uint32scheme
localPart_	talk/xmllite/qname.h	/^    std::string localPart_;$/;"	m	class:buzz::QName::Data
local_addr	talk/p2p/base/port_unittest.cc	/^const talk_base::SocketAddress local_addr = talk_base::SocketAddress("127.0.0.1", 0);$/;"	v
local_addr_	talk/base/virtualsocketserver.cc	/^  SocketAddress local_addr_;$/;"	m	class:talk_base::VirtualSocket	file:
local_addr_	talk/p2p/base/relayport.cc	/^  talk_base::SocketAddress ext_addr_, local_addr_;$/;"	m	class:cricket::RelayEntry	file:
local_addr_	talk/p2p/base/relayport.h	/^  talk_base::SocketAddress local_addr_;$/;"	m	class:cricket::RelayPort
local_cancel_	talk/session/fileshare/fileshare.h	/^  bool local_cancel_;$/;"	m	class:cricket::FileShareSession
local_candidate	talk/p2p/base/port.cc	/^const Candidate& Connection::local_candidate() const {$/;"	f	class:cricket::Connection
local_candidate	talk/p2p/client/socketmonitor.h	/^  Candidate local_candidate;$/;"	m	struct:cricket::ConnectionInfo
local_candidate_index_	talk/p2p/base/port.h	/^  size_t local_candidate_index_;$/;"	m	class:cricket::Connection
local_folder	talk/session/fileshare/fileshare.cc	/^FileShareSession::local_folder() const {$/;"	f	class:cricket::FileShareSession
local_folder_	talk/session/fileshare/fileshare.h	/^  std::string local_folder_;$/;"	m	class:cricket::FileShareSession
local_ip_	talk/base/virtualsocketserver.cc	/^  uint32 local_ip_;$/;"	m	class:talk_base::VirtualSocket	file:
local_listener_	talk/session/fileshare/fileshare.h	/^  talk_base::AsyncSocket* local_listener_;$/;"	m	class:cricket::FileShareSession
localstatedir	talk/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/base/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/examples/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/examples/call/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/examples/login/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/examples/pcp/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/p2p/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/p2p/base/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/p2p/client/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/session/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/session/fileshare/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/session/phone/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/session/tunnel/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/third_party/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/third_party/gips/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/third_party/mediastreamer/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/xmllite/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	talk/xmpp/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	talk/base/sigslot.h	/^		virtual void lock()$/;"	f	class:sigslot::multi_threaded_global
lock	talk/base/sigslot.h	/^		virtual void lock()$/;"	f	class:sigslot::multi_threaded_local
lock	talk/base/sigslot.h	/^		virtual void lock()$/;"	f	class:sigslot::single_threaded
lock	talk/third_party/mediastreamer/msfilter.h	/^	GMutex *lock;$/;"	m	struct:_MSFilter
lock	talk/third_party/mediastreamer/mssync.h	/^	GMutex *lock;$/;"	m	struct:_MSSync
lock_block	talk/base/sigslot.h	/^		lock_block(mt_policy *mtx)$/;"	f	class:sigslot::lock_block
lock_block	talk/base/sigslot.h	/^	class lock_block$/;"	c	namespace:sigslot
lock_state	talk/base/diskcache.h	/^    LockState lock_state;$/;"	m	struct:talk_base::DiskCache::Entry
locked	talk/p2p/base/relayport.cc	/^  bool locked() const { return locked_; }$/;"	f	class:cricket::RelayEntry
locked	talk/p2p/base/relayserver.h	/^  bool locked() const { return locked_; }$/;"	f	class:cricket::RelayServerConnection
locked_	talk/base/diskcache.h	/^  bool rollback_, locked_;$/;"	m	class:talk_base::CacheLock
locked_	talk/p2p/base/relayport.cc	/^  bool locked_;$/;"	m	class:cricket::RelayEntry	file:
locked_	talk/p2p/base/relayserver.h	/^  bool locked_;$/;"	m	class:cricket::RelayServerConnection
locking_function	talk/base/ssladapter.cc	/^static void locking_function(int mode, int n, const char * file, int line) {$/;"	f	namespace:talk_base	file:
log_bindings	talk/p2p/base/relayserver.h	/^  bool log_bindings() const { return log_bindings_; }$/;"	f	class:cricket::RelayServer
log_bindings_	talk/p2p/base/relayserver.h	/^  bool log_bindings_;$/;"	m	class:cricket::RelayServer
logging_label_	talk/base/asynchttprequest.h	/^  std::string hostname_, logging_label_;$/;"	m	class:talk_base::SslSocketFactory
logging_level_	talk/base/asynchttprequest.h	/^  talk_base::LoggingSeverity logging_level_;$/;"	m	class:talk_base::SslSocketFactory
login_CXXFLAGS	talk/examples/login/Makefile	/^login_CXXFLAGS = $(AM_CXXFLAGS)$/;"	m
login_DEPENDENCIES	talk/examples/login/Makefile	/^login_DEPENDENCIES = $(top_srcdir)\/talk\/xmpp\/libcricketxmpp.la \\$/;"	m
login_LDADD	talk/examples/login/Makefile	/^login_LDADD = $(top_srcdir)\/talk\/xmpp\/libcricketxmpp.la \\$/;"	m
login_OBJECTS	talk/examples/login/Makefile	/^login_OBJECTS = $(am_login_OBJECTS)$/;"	m
login_SOURCES	talk/examples/login/Makefile	/^login_SOURCES = login_main.cc xmppsocket.cc xmppthread.cc xmpppump.cc xmppauth.cc$/;"	m
login_task_	talk/xmpp/xmppengineimpl.h	/^  scoped_ptr<XmppLoginTask> login_task_;$/;"	m	class:buzz::XmppEngineImpl
long_to_bytes	talk/p2p/base/pseudotcp.cc	/^inline void long_to_bytes(uint32 val, void* buf) {$/;"	f	namespace:cricket
lowfreq	talk/third_party/mediastreamer/msosswrite.h	/^	gdouble lowfreq;$/;"	m	struct:_MSOssWrite
lpc10_dec	talk/third_party/mediastreamer/msLPC10decoder.h	/^    struct lpc10_decoder_state *lpc10_dec;$/;"	m	struct:_MSLPC10Decoder	typeref:struct:_MSLPC10Decoder::lpc10_decoder_state
lpc10_enc	talk/third_party/mediastreamer/msLPC10encoder.h	/^    struct lpc10_encoder_state *lpc10_enc;$/;"	m	struct:_MSLPC10Encoder	typeref:struct:_MSLPC10Encoder::lpc10_encoder_state
lpszAutoConfigUrl	talk/base/proxydetect.cc	/^    LPCWSTR lpszAutoConfigUrl;$/;"	m	struct:__anon18	file:
lpszAutoConfigUrl	talk/base/proxydetect.cc	/^    LPWSTR  lpszAutoConfigUrl;$/;"	m	struct:__anon19	file:
lpszProxy	talk/base/proxydetect.cc	/^    LPWSTR  lpszProxy;$/;"	m	struct:__anon19	file:
lpszProxy	talk/base/proxydetect.cc	/^    LPWSTR lpszProxy;         \/\/ proxy server list$/;"	m	struct:__anon17	file:
lpszProxyBypass	talk/base/proxydetect.cc	/^    LPWSTR  lpszProxyBypass;$/;"	m	struct:__anon19	file:
lpszProxyBypass	talk/base/proxydetect.cc	/^    LPWSTR lpszProxyBypass;   \/\/ proxy bypass list$/;"	m	struct:__anon17	file:
lpvReserved	talk/base/proxydetect.cc	/^    LPVOID  lpvReserved;$/;"	m	struct:__anon18	file:
m_bOutgoing	talk/p2p/base/pseudotcp.h	/^  bool m_bReadEnable, m_bWriteEnable, m_bOutgoing;$/;"	m	class:cricket::PseudoTcp
m_bReadEnable	talk/p2p/base/pseudotcp.h	/^  bool m_bReadEnable, m_bWriteEnable, m_bOutgoing;$/;"	m	class:cricket::PseudoTcp
m_bWriteEnable	talk/p2p/base/pseudotcp.h	/^  bool m_bReadEnable, m_bWriteEnable, m_bOutgoing;$/;"	m	class:cricket::PseudoTcp
m_connected_slots	talk/base/sigslot.h	/^		connections_list m_connected_slots;   $/;"	m	class:sigslot::_signal_base0
m_connected_slots	talk/base/sigslot.h	/^		connections_list m_connected_slots;   $/;"	m	class:sigslot::_signal_base1
m_connected_slots	talk/base/sigslot.h	/^		connections_list m_connected_slots;   $/;"	m	class:sigslot::_signal_base2
m_connected_slots	talk/base/sigslot.h	/^		connections_list m_connected_slots;   $/;"	m	class:sigslot::_signal_base3
m_connected_slots	talk/base/sigslot.h	/^		connections_list m_connected_slots;   $/;"	m	class:sigslot::_signal_base4
m_connected_slots	talk/base/sigslot.h	/^		connections_list m_connected_slots;   $/;"	m	class:sigslot::_signal_base5
m_connected_slots	talk/base/sigslot.h	/^		connections_list m_connected_slots;   $/;"	m	class:sigslot::_signal_base6
m_connected_slots	talk/base/sigslot.h	/^		connections_list m_connected_slots;   $/;"	m	class:sigslot::_signal_base7
m_connected_slots	talk/base/sigslot.h	/^		connections_list m_connected_slots;   $/;"	m	class:sigslot::_signal_base8
m_conv	talk/p2p/base/pseudotcp.h	/^  uint32 m_conv;$/;"	m	class:cricket::PseudoTcp
m_critsec	talk/base/sigslot.h	/^		CRITICAL_SECTION m_critsec;$/;"	m	class:sigslot::multi_threaded_local
m_cwnd	talk/p2p/base/pseudotcp.h	/^  uint32 m_ssthresh, m_cwnd;$/;"	m	class:cricket::PseudoTcp
m_dup_acks	talk/p2p/base/pseudotcp.h	/^  uint8 m_dup_acks;$/;"	m	class:cricket::PseudoTcp
m_error	talk/p2p/base/pseudotcp.h	/^  int m_error;$/;"	m	class:cricket::PseudoTcp
m_headers	talk/base/httpcommon.h	/^  HeaderMap m_headers;$/;"	m	struct:talk_base::HttpData
m_largest	talk/p2p/base/pseudotcp.h	/^  uint32 m_mss, m_msslevel, m_largest, m_mtu_advise;$/;"	m	class:cricket::PseudoTcp
m_lastrecv	talk/p2p/base/pseudotcp.h	/^  uint32 m_rcv_nxt, m_rcv_wnd, m_rlen, m_lastrecv;$/;"	m	class:cricket::PseudoTcp
m_lastsend	talk/p2p/base/pseudotcp.h	/^  uint32 m_snd_nxt, m_snd_wnd, m_slen, m_lastsend, m_snd_una;$/;"	m	class:cricket::PseudoTcp
m_lasttraffic	talk/p2p/base/pseudotcp.h	/^  uint32 m_lasttraffic;$/;"	m	class:cricket::PseudoTcp
m_mss	talk/p2p/base/pseudotcp.h	/^  uint32 m_mss, m_msslevel, m_largest, m_mtu_advise;$/;"	m	class:cricket::PseudoTcp
m_msslevel	talk/p2p/base/pseudotcp.h	/^  uint32 m_mss, m_msslevel, m_largest, m_mtu_advise;$/;"	m	class:cricket::PseudoTcp
m_mtu_advise	talk/p2p/base/pseudotcp.h	/^  uint32 m_mss, m_msslevel, m_largest, m_mtu_advise;$/;"	m	class:cricket::PseudoTcp
m_mutex	talk/base/sigslot.h	/^		mt_policy *m_mutex;$/;"	m	class:sigslot::lock_block
m_mutex	talk/base/sigslot.h	/^		pthread_mutex_t m_mutex;$/;"	m	class:sigslot::multi_threaded_local
m_notify	talk/p2p/base/pseudotcp.h	/^  IPseudoTcpNotify * m_notify;$/;"	m	class:cricket::PseudoTcp
m_path	talk/base/httpcommon.h	/^  string m_server, m_path, m_query;$/;"	m	class:talk_base::Url
m_pmemfun	talk/base/sigslot.h	/^		void (dest_type::* m_pmemfun)();$/;"	m	class:sigslot::_connection0
m_pmemfun	talk/base/sigslot.h	/^		void (dest_type::* m_pmemfun)(arg1_type);$/;"	m	class:sigslot::_connection1
m_pmemfun	talk/base/sigslot.h	/^		void (dest_type::* m_pmemfun)(arg1_type, arg2_type);$/;"	m	class:sigslot::_connection2
m_pmemfun	talk/base/sigslot.h	/^		void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type);$/;"	m	class:sigslot::_connection3
m_pmemfun	talk/base/sigslot.h	/^		void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection5
m_pmemfun	talk/base/sigslot.h	/^		void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection6
m_pmemfun	talk/base/sigslot.h	/^		void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection7
m_pmemfun	talk/base/sigslot.h	/^		void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection8
m_pmemfun	talk/base/sigslot.h	/^		void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type,$/;"	m	class:sigslot::_connection4
m_pobject	talk/base/sigslot.h	/^		dest_type* m_pobject;$/;"	m	class:sigslot::_connection0
m_pobject	talk/base/sigslot.h	/^		dest_type* m_pobject;$/;"	m	class:sigslot::_connection1
m_pobject	talk/base/sigslot.h	/^		dest_type* m_pobject;$/;"	m	class:sigslot::_connection2
m_pobject	talk/base/sigslot.h	/^		dest_type* m_pobject;$/;"	m	class:sigslot::_connection3
m_pobject	talk/base/sigslot.h	/^		dest_type* m_pobject;$/;"	m	class:sigslot::_connection4
m_pobject	talk/base/sigslot.h	/^		dest_type* m_pobject;$/;"	m	class:sigslot::_connection5
m_pobject	talk/base/sigslot.h	/^		dest_type* m_pobject;$/;"	m	class:sigslot::_connection6
m_pobject	talk/base/sigslot.h	/^		dest_type* m_pobject;$/;"	m	class:sigslot::_connection7
m_pobject	talk/base/sigslot.h	/^		dest_type* m_pobject;$/;"	m	class:sigslot::_connection8
m_port	talk/base/httpcommon.h	/^  uint16 m_port;$/;"	m	class:talk_base::Url
m_query	talk/base/httpcommon.h	/^  string m_server, m_path, m_query;$/;"	m	class:talk_base::Url
m_rbuf	talk/p2p/base/pseudotcp.h	/^  char m_rbuf[kRcvBufSize];$/;"	m	class:cricket::PseudoTcp
m_rcv_nxt	talk/p2p/base/pseudotcp.h	/^  uint32 m_rcv_nxt, m_rcv_wnd, m_rlen, m_lastrecv;$/;"	m	class:cricket::PseudoTcp
m_rcv_wnd	talk/p2p/base/pseudotcp.h	/^  uint32 m_rcv_nxt, m_rcv_wnd, m_rlen, m_lastrecv;$/;"	m	class:cricket::PseudoTcp
m_recover	talk/p2p/base/pseudotcp.h	/^  uint32 m_recover;$/;"	m	class:cricket::PseudoTcp
m_rlen	talk/p2p/base/pseudotcp.h	/^  uint32 m_rcv_nxt, m_rcv_wnd, m_rlen, m_lastrecv;$/;"	m	class:cricket::PseudoTcp
m_rlist	talk/p2p/base/pseudotcp.h	/^  RList m_rlist;$/;"	m	class:cricket::PseudoTcp
m_rto_base	talk/p2p/base/pseudotcp.h	/^  uint32 m_rto_base;$/;"	m	class:cricket::PseudoTcp
m_rx_rto	talk/p2p/base/pseudotcp.h	/^  uint32 m_rx_rttvar, m_rx_srtt, m_rx_rto;$/;"	m	class:cricket::PseudoTcp
m_rx_rttvar	talk/p2p/base/pseudotcp.h	/^  uint32 m_rx_rttvar, m_rx_srtt, m_rx_rto;$/;"	m	class:cricket::PseudoTcp
m_rx_srtt	talk/p2p/base/pseudotcp.h	/^  uint32 m_rx_rttvar, m_rx_srtt, m_rx_rto;$/;"	m	class:cricket::PseudoTcp
m_sbuf	talk/p2p/base/pseudotcp.h	/^  char m_sbuf[kSndBufSize];$/;"	m	class:cricket::PseudoTcp
m_secure	talk/base/httpcommon.h	/^  bool m_secure;$/;"	m	class:talk_base::Url
m_senders	talk/base/sigslot.h	/^		sender_set m_senders;$/;"	m	class:sigslot::has_slots
m_server	talk/base/httpcommon.h	/^  string m_server, m_path, m_query;$/;"	m	class:talk_base::Url
m_shutdown	talk/p2p/base/pseudotcp.h	/^  enum Shutdown { SD_NONE, SD_GRACEFUL, SD_FORCEFUL } m_shutdown;$/;"	m	class:cricket::PseudoTcp	typeref:enum:cricket::PseudoTcp::Shutdown
m_slen	talk/p2p/base/pseudotcp.h	/^  uint32 m_snd_nxt, m_snd_wnd, m_slen, m_lastsend, m_snd_una;$/;"	m	class:cricket::PseudoTcp
m_slist	talk/p2p/base/pseudotcp.h	/^  SList m_slist;$/;"	m	class:cricket::PseudoTcp
m_snd_nxt	talk/p2p/base/pseudotcp.h	/^  uint32 m_snd_nxt, m_snd_wnd, m_slen, m_lastsend, m_snd_una;$/;"	m	class:cricket::PseudoTcp
m_snd_una	talk/p2p/base/pseudotcp.h	/^  uint32 m_snd_nxt, m_snd_wnd, m_slen, m_lastsend, m_snd_una;$/;"	m	class:cricket::PseudoTcp
m_snd_wnd	talk/p2p/base/pseudotcp.h	/^  uint32 m_snd_nxt, m_snd_wnd, m_slen, m_lastsend, m_snd_una;$/;"	m	class:cricket::PseudoTcp
m_ssthresh	talk/p2p/base/pseudotcp.h	/^  uint32 m_ssthresh, m_cwnd;$/;"	m	class:cricket::PseudoTcp
m_state	talk/p2p/base/pseudotcp.h	/^  TcpState m_state;$/;"	m	class:cricket::PseudoTcp
m_t_ack	talk/p2p/base/pseudotcp.h	/^  uint32 m_t_ack;$/;"	m	class:cricket::PseudoTcp
m_ts_lastack	talk/p2p/base/pseudotcp.h	/^  uint32 m_ts_recent, m_ts_lastack;$/;"	m	class:cricket::PseudoTcp
m_ts_recent	talk/p2p/base/pseudotcp.h	/^  uint32 m_ts_recent, m_ts_lastack;$/;"	m	class:cricket::PseudoTcp
magic_cookie	talk/p2p/base/relayport.h	/^  const std::string& magic_cookie() const { return magic_cookie_; }$/;"	f	class:cricket::RelayPort
magic_cookie	talk/p2p/base/relayserver.h	/^  const std::string& magic_cookie() { return magic_cookie_; }$/;"	f	class:cricket::RelayServerBinding
magic_cookie	talk/p2p/client/basicportallocator.h	/^  std::string magic_cookie;$/;"	m	struct:cricket::PortConfiguration
magic_cookie_	talk/p2p/base/relayport.h	/^  std::string magic_cookie_;$/;"	m	class:cricket::RelayPort
magic_cookie_	talk/p2p/base/relayserver.h	/^  std::string magic_cookie_;$/;"	m	class:cricket::RelayServerBinding
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	config.guess	/^main ()$/;"	f
main	talk/base/nat_unittest.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	talk/base/natserver_main.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	talk/base/virtualsocket_unittest.cc	/^int main(int argc, char* argv) {$/;"	f
main	talk/examples/call/call_main.cc	/^int main(int argc, char **argv) {$/;"	f
main	talk/examples/login/login_main.cc	/^int main(int argc, char **argv) {$/;"	f
main	talk/examples/pcp/pcp_main.cc	/^int main(int argc, char **argv) {$/;"	f
main	talk/p2p/base/port_unittest.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	talk/p2p/base/relayserver_main.cc	/^int main(int argc, char **argv) {$/;"	f
main	talk/p2p/base/session_unittest.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	talk/p2p/base/stunserver_main.cc	/^int main(int argc, char* argv[]) {$/;"	f
main	talk/p2p/base/stunserver_unittest.cc	/^int main(int argc, char* argv[]) {$/;"	f
main_	talk/base/signalthread.h	/^  Thread* main_;$/;"	m	class:talk_base::SignalThread
main_thread_	talk/base/thread.h	/^  Thread *main_thread_;$/;"	m	class:talk_base::ThreadManager
make_char_safe_for_filename	talk/base/stringencode.cc	/^char make_char_safe_for_filename(char c) {$/;"	f	namespace:talk_base
manager	talk/p2p/base/session_unittest.cc	/^  SessionManager* manager;$/;"	m	struct:SessionManagerHandler	file:
manager	talk/p2p/base/stunrequest.h	/^  StunRequestManager* manager() { return manager_; }$/;"	f	class:cricket::StunRequest
manager_	talk/base/firewallsocketserver.h	/^  FirewallManager * manager_;$/;"	m	class:talk_base::FirewallSocketServer
manager_	talk/p2p/base/stunrequest.h	/^  StunRequestManager* manager_;$/;"	m	class:cricket::StunRequest
mandir	talk/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/base/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/examples/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/examples/call/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/examples/login/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/examples/pcp/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/p2p/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/p2p/base/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/p2p/client/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/session/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/session/fileshare/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/session/phone/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/session/tunnel/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/third_party/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/third_party/gips/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/third_party/mediastreamer/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/xmllite/Makefile	/^mandir = ${prefix}\/man$/;"	m
mandir	talk/xmpp/Makefile	/^mandir = ${prefix}\/man$/;"	m
manifest	talk/session/fileshare/fileshare.cc	/^FileShareSession::manifest() const {$/;"	f	class:cricket::FileShareSession
manifest	talk/session/fileshare/fileshare.h	/^    FileShareManifest manifest;$/;"	m	struct:cricket::FileShareSession::FileShareDescription
manifest_	talk/examples/pcp/pcp_main.cc	/^  const cricket::FileShareManifest *manifest_;$/;"	m	class:FileShareClient	file:
manifest_	talk/session/fileshare/fileshare.h	/^  FileShareManifest* manifest_;$/;"	m	class:cricket::FileShareSession
map_	talk/base/diskcache.h	/^  EntryMap map_;$/;"	m	class:talk_base::DiskCache
map_	talk/base/proxydetect.cc	/^  std::map<std::string, std::string> map_;$/;"	m	struct:StringMap	file:
matrix	talk/third_party/mediastreamer/affine.h	/^	double matrix[2][2];$/;"	m	struct:__anon44
max_cache_	talk/base/diskcache.h	/^  size_t max_cache_, total_size_;$/;"	m	class:talk_base::DiskCache
max_count_	talk/xmpp/ratelimitmanager.h	/^    int max_count_; \/\/ max number of events that can occur within per_x_seconds$/;"	m	class:buzz::RateLimitManager::RateLimit
max_filters	talk/third_party/mediastreamer/mssync.h	/^	gint max_filters;  \/* the maximum number of filters that can be attached to this sync*\/$/;"	m	struct:_MSSyncClass
max_finputs	talk/third_party/mediastreamer/msfilter.h	/^	guchar max_finputs;   \/* maximum number of fifo inputs*\/$/;"	m	struct:_MSFilterClass
max_foutputs	talk/third_party/mediastreamer/msfilter.h	/^	guchar max_foutputs;  \/* maximum number of fifo outputs*\/$/;"	m	struct:_MSFilterClass
max_qinputs	talk/third_party/mediastreamer/msfilter.h	/^	guchar max_qinputs;   \/* maximum number of queue inputs*\/$/;"	m	struct:_MSFilterClass
max_qoutputs	talk/third_party/mediastreamer/msfilter.h	/^	guchar max_qoutputs;  \/* maximum number of queue outputs*\/$/;"	m	struct:_MSFilterClass
md5byte	talk/base/md5.h	28;"	d
mechanism_	talk/xmpp/saslcookiemechanism.h	/^  std::string mechanism_;$/;"	m	class:buzz::SaslCookieMechanism
media_channel_	talk/session/phone/voicechannel.h	/^  MediaChannel *media_channel_;$/;"	m	class:cricket::VoiceChannel
media_engine	talk/session/phone/channelmanager.cc	/^MediaEngine *ChannelManager::media_engine() {$/;"	f	class:cricket::ChannelManager
media_engine_	talk/session/phone/channelmanager.h	/^  MediaEngine *media_engine_;$/;"	m	class:cricket::ChannelManager
memory_check	talk/base/stringutils.cc	/^bool memory_check(const void* memory, int c, size_t count) {$/;"	f	namespace:talk_base
message	talk/base/httpcommon.h	/^  std::string message;$/;"	m	struct:talk_base::HttpResponseData
message_id	talk/base/messagequeue.h	/^  uint32 message_id;$/;"	m	struct:talk_base::Message
message_pending_	talk/base/schanneladapter.h	/^  bool message_pending_;$/;"	m	class:talk_base::SChannelAdapter
message_queue_	talk/base/win32socketserver.h	/^  MessageQueue *message_queue_;$/;"	m	class:talk_base::Win32SocketServer
message_queues_	talk/base/messagequeue.h	/^  std::vector<MessageQueue *> message_queues_;$/;"	m	class:talk_base::MessageQueueManager
messages_	talk/p2p/base/transport.h	/^  XmlElementList messages_;$/;"	m	class:cricket::Transport
methods_socket	talk/base/openssladapter.cc	/^static BIO_METHOD methods_socket = {$/;"	v	file:
mgr_	talk/base/winfirewall.h	/^  INetFwMgr * mgr_;$/;"	m	class:talk_base::WinFirewall
milisec	talk/third_party/mediastreamer/mstimer.h	/^	gint milisec; \/* the interval *\/$/;"	m	struct:_MSTimer
min_fifo_size	talk/third_party/mediastreamer/msfilter.h	/^	gint min_fifo_size; \/* set when linking*\/$/;"	m	struct:_MSFilter
min_sev_	talk/base/logging.cc	/^int LogMessage::min_sev_ = LOG_DEFAULT;$/;"	m	class:talk_base::LogMessage	file:
min_sev_	talk/base/logging.h	/^  static int min_sev_, dbg_sev_, stream_sev_, ctx_sev_;$/;"	m	class:talk_base::LogMessage
mixdev	talk/third_party/mediastreamer/alsacard.h	/^	gchar *mixdev;$/;"	m	struct:_AlsaCard
mixdev_name	talk/third_party/mediastreamer/osscard.h	/^	gchar *mixdev_name;         \/* \/dev\/mixer0 for example *\/$/;"	m	struct:_OssCard
mixer	talk/third_party/mediastreamer/alsacard.h	/^	snd_mixer_t *mixer;$/;"	m	struct:_AlsaCard
mkdir_p	talk/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/base/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/examples/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/examples/call/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/examples/login/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/examples/pcp/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/p2p/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/p2p/base/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/p2p/client/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/session/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/session/fileshare/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/session/phone/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/session/tunnel/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/third_party/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/third_party/gips/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/third_party/mediastreamer/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/xmllite/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkdir_p	talk/xmpp/Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkerr	talk/base/httpcommon.h	/^inline HttpError mkerr(HttpError err, HttpError def_err = HE_DEFAULT) {$/;"	f	namespace:talk_base
mkinstalldirs	talk/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/base/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/examples/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/examples/call/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/examples/login/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/examples/pcp/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/p2p/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/p2p/base/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/p2p/client/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/session/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/session/fileshare/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/session/phone/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/session/tunnel/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/third_party/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/third_party/gips/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/third_party/mediastreamer/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/xmllite/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	talk/xmpp/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mmapdbuf	talk/third_party/mediastreamer/msv4l.h	/^	gchar *mmapdbuf; \/* the mmap'd buffer *\/$/;"	m	struct:_MSV4l
mode	talk/base/httpbase.h	/^  HttpMode mode() const { return mode_; }$/;"	f	class:talk_base::HttpBase
mode_	talk/base/httpbase.h	/^  HttpMode mode_;$/;"	m	class:talk_base::HttpBase
mode_	talk/base/tarstream.h	/^  ModeType mode_;$/;"	m	class:talk_base::TarStream
monitor_thread	talk/p2p/client/socketmonitor.h	/^  talk_base::Thread *monitor_thread() { return monitoring_thread_; }$/;"	f	class:cricket::SocketMonitor
monitor_thread	talk/session/phone/audiomonitor.cc	/^talk_base::Thread *AudioMonitor::monitor_thread() {$/;"	f	class:cricket::AudioMonitor
monitoring_	talk/p2p/client/socketmonitor.h	/^  bool monitoring_;$/;"	m	class:cricket::SocketMonitor
monitoring_	talk/session/phone/audiomonitor.h	/^  bool monitoring_;$/;"	m	class:cricket::AudioMonitor
monitoring_thread_	talk/p2p/client/socketmonitor.h	/^  talk_base::Thread* monitoring_thread_;$/;"	m	class:cricket::SocketMonitor
monitoring_thread_	talk/session/phone/audiomonitor.h	/^  talk_base::Thread* monitoring_thread_;$/;"	m	class:cricket::AudioMonitor
msTrigger_	talk/base/messagequeue.h	/^  uint32 msTrigger_;$/;"	m	class:talk_base::DelayedMessage
ms_ALAWdecoder_class	talk/third_party/mediastreamer/msAlawdec.c	/^static MSALAWDecoderClass *ms_ALAWdecoder_class=NULL;$/;"	v	file:
ms_ALAWdecoder_class_init	talk/third_party/mediastreamer/msAlawdec.c	/^void ms_ALAWdecoder_class_init(MSALAWDecoderClass *klass)$/;"	f
ms_ALAWdecoder_destroy	talk/third_party/mediastreamer/msAlawdec.c	/^void ms_ALAWdecoder_destroy( MSALAWDecoder *obj)$/;"	f
ms_ALAWdecoder_init	talk/third_party/mediastreamer/msAlawdec.c	/^void ms_ALAWdecoder_init(MSALAWDecoder *r)$/;"	f
ms_ALAWdecoder_new	talk/third_party/mediastreamer/msAlawdec.c	/^MSFilter * ms_ALAWdecoder_new(void)$/;"	f
ms_ALAWdecoder_process	talk/third_party/mediastreamer/msAlawdec.c	/^void ms_ALAWdecoder_process(MSALAWDecoder *r)$/;"	f
ms_ALAWencoder_class	talk/third_party/mediastreamer/msAlawenc.c	/^static MSALAWEncoderClass *ms_ALAWencoder_class=NULL;$/;"	v	file:
ms_ALAWencoder_class_init	talk/third_party/mediastreamer/msAlawenc.c	/^void ms_ALAWencoder_class_init(MSALAWEncoderClass *klass)$/;"	f
ms_ALAWencoder_destroy	talk/third_party/mediastreamer/msAlawenc.c	/^void ms_ALAWencoder_destroy( MSALAWEncoder *obj)$/;"	f
ms_ALAWencoder_init	talk/third_party/mediastreamer/msAlawenc.c	/^void ms_ALAWencoder_init(MSALAWEncoder *r)$/;"	f
ms_ALAWencoder_new	talk/third_party/mediastreamer/msAlawenc.c	/^MSFilter * ms_ALAWencoder_new(void)$/;"	f
ms_ALAWencoder_process	talk/third_party/mediastreamer/msAlawenc.c	/^void ms_ALAWencoder_process(MSALAWEncoder *r)$/;"	f
ms_AVencoder_set_bit_rate	talk/third_party/mediastreamer/msavencoder.h	79;"	d
ms_AVencoder_set_height	talk/third_party/mediastreamer/msavencoder.h	78;"	d
ms_AVencoder_set_width	talk/third_party/mediastreamer/msavencoder.h	77;"	d
ms_MULAWdecoder_class	talk/third_party/mediastreamer/msMUlawdec.c	/^static MSMULAWDecoderClass *ms_MULAWdecoder_class=NULL;$/;"	v	file:
ms_MULAWdecoder_class_init	talk/third_party/mediastreamer/msMUlawdec.c	/^void ms_MULAWdecoder_class_init(MSMULAWDecoderClass *klass)$/;"	f
ms_MULAWdecoder_destroy	talk/third_party/mediastreamer/msMUlawdec.c	/^void ms_MULAWdecoder_destroy( MSMULAWDecoder *obj)$/;"	f
ms_MULAWdecoder_init	talk/third_party/mediastreamer/msMUlawdec.c	/^void ms_MULAWdecoder_init(MSMULAWDecoder *r)$/;"	f
ms_MULAWdecoder_new	talk/third_party/mediastreamer/msMUlawdec.c	/^MSFilter * ms_MULAWdecoder_new(void)$/;"	f
ms_MULAWdecoder_process	talk/third_party/mediastreamer/msMUlawdec.c	/^void ms_MULAWdecoder_process(MSMULAWDecoder *r)$/;"	f
ms_MULAWencoder_class	talk/third_party/mediastreamer/msMUlawenc.c	/^static MSMULAWEncoderClass *ms_MULAWencoder_class=NULL;$/;"	v	file:
ms_MULAWencoder_class_init	talk/third_party/mediastreamer/msMUlawenc.c	/^void ms_MULAWencoder_class_init(MSMULAWEncoderClass *klass)$/;"	f
ms_MULAWencoder_destroy	talk/third_party/mediastreamer/msMUlawenc.c	/^void ms_MULAWencoder_destroy( MSMULAWEncoder *obj)$/;"	f
ms_MULAWencoder_init	talk/third_party/mediastreamer/msMUlawenc.c	/^void ms_MULAWencoder_init(MSMULAWEncoder *r)$/;"	f
ms_MULAWencoder_new	talk/third_party/mediastreamer/msMUlawenc.c	/^MSFilter * ms_MULAWencoder_new(void)$/;"	f
ms_MULAWencoder_process	talk/third_party/mediastreamer/msMUlawenc.c	/^void ms_MULAWencoder_process(MSMULAWEncoder *r)$/;"	f
ms_audio_codec_info_get	talk/third_party/mediastreamer/mscodec.c	/^MSCodecInfo * ms_audio_codec_info_get(gchar *name)$/;"	f
ms_buffer_alloc	talk/third_party/mediastreamer/msbuffer.c	/^MSBuffer *ms_buffer_alloc(gint flags)$/;"	f
ms_buffer_destroy	talk/third_party/mediastreamer/msbuffer.c	/^void ms_buffer_destroy(MSBuffer *buf)$/;"	f
ms_buffer_new	talk/third_party/mediastreamer/msbuffer.c	/^MSBuffer * ms_buffer_new(guint32 size)$/;"	f
ms_codec_get_all_audio	talk/third_party/mediastreamer/mscodec.c	/^GList * ms_codec_get_all_audio()$/;"	f
ms_codec_get_all_video	talk/third_party/mediastreamer/mscodec.c	/^GList * ms_codec_get_all_video()$/;"	f
ms_codec_is_usable	talk/third_party/mediastreamer/mscodec.c	/^int ms_codec_is_usable(MSCodecInfo *codec,double bandwidth)$/;"	f
ms_codec_register_all	talk/third_party/mediastreamer/mscodec.c	/^void ms_codec_register_all()$/;"	f
ms_compile	talk/third_party/mediastreamer/ms.c	/^int ms_compile(MSSync *sync)$/;"	f
ms_copy_class	talk/third_party/mediastreamer/mscopy.c	/^static MSCopyClass *ms_copy_class=NULL;$/;"	v	file:
ms_copy_class_init	talk/third_party/mediastreamer/mscopy.c	/^void ms_copy_class_init(MSCopyClass *klass)$/;"	f
ms_copy_destroy	talk/third_party/mediastreamer/mscopy.c	/^void ms_copy_destroy( MSCopy *obj)$/;"	f
ms_copy_init	talk/third_party/mediastreamer/mscopy.c	/^void ms_copy_init(MSCopy *r)$/;"	f
ms_copy_new	talk/third_party/mediastreamer/mscopy.c	/^MSFilter * ms_copy_new(void)$/;"	f
ms_copy_process	talk/third_party/mediastreamer/mscopy.c	/^void ms_copy_process(MSCopy *r)$/;"	f
ms_decoder_new	talk/third_party/mediastreamer/mscodec.c	/^MSFilter * ms_decoder_new(gchar *name)$/;"	f
ms_decoder_new_with_pt	talk/third_party/mediastreamer/mscodec.c	/^MSFilter * ms_decoder_new_with_pt(gint pt)$/;"	f
ms_decoder_new_with_string_id	talk/third_party/mediastreamer/mscodec.c	/^MSFilter * ms_decoder_new_with_string_id(gchar *id)$/;"	f
ms_encoder_new	talk/third_party/mediastreamer/mscodec.c	/^MSFilter * ms_encoder_new(gchar *name)$/;"	f
ms_encoder_new_with_pt	talk/third_party/mediastreamer/mscodec.c	/^MSFilter * ms_encoder_new_with_pt(gint pt)$/;"	f
ms_encoder_new_with_string_id	talk/third_party/mediastreamer/mscodec.c	/^MSFilter * ms_encoder_new_with_string_id(gchar *id)$/;"	f
ms_error	talk/third_party/mediastreamer/msutils.h	49;"	d
ms_fdispatcher_class	talk/third_party/mediastreamer/msfdispatcher.c	/^static MSFdispatcherClass *ms_fdispatcher_class=NULL;$/;"	v	file:
ms_fdispatcher_class_init	talk/third_party/mediastreamer/msfdispatcher.c	/^void ms_fdispatcher_class_init(MSFdispatcherClass *klass)$/;"	f
ms_fdispatcher_destroy	talk/third_party/mediastreamer/msfdispatcher.c	/^void ms_fdispatcher_destroy( MSFdispatcher *obj)$/;"	f
ms_fdispatcher_init	talk/third_party/mediastreamer/msfdispatcher.c	/^void ms_fdispatcher_init(MSFdispatcher *obj)$/;"	f
ms_fdispatcher_new	talk/third_party/mediastreamer/msfdispatcher.c	/^MSFilter * ms_fdispatcher_new(void)$/;"	f
ms_fdispatcher_process	talk/third_party/mediastreamer/msfdispatcher.c	/^void ms_fdispatcher_process(MSFdispatcher *obj)$/;"	f
ms_fifo_destroy	talk/third_party/mediastreamer/msfifo.c	/^void ms_fifo_destroy( MSFifo *fifo)$/;"	f
ms_fifo_destroy_with_buffer	talk/third_party/mediastreamer/msfifo.c	/^void ms_fifo_destroy_with_buffer(MSFifo *fifo)$/;"	f
ms_fifo_get_read_ptr	talk/third_party/mediastreamer/msfifo.c	/^gint ms_fifo_get_read_ptr(MSFifo *fifo, gint bsize, void **ret_ptr)$/;"	f
ms_fifo_get_rw_ptr	talk/third_party/mediastreamer/msfifo.c	/^gint ms_fifo_get_rw_ptr(MSFifo *f1,void **p1,gint minsize1,$/;"	f
ms_fifo_get_write_ptr	talk/third_party/mediastreamer/msfifo.c	/^gint ms_fifo_get_write_ptr(MSFifo *fifo, gint bsize, void **ret_ptr)$/;"	f
ms_fifo_new	talk/third_party/mediastreamer/msfifo.c	/^MSFifo * ms_fifo_new(MSBuffer *buf, gint r_gran, gint w_gran, gint r_offset, gint w_offset)$/;"	f
ms_fifo_new_with_buffer	talk/third_party/mediastreamer/msfifo.c	/^MSFifo * ms_fifo_new_with_buffer(gint r_gran, gint w_gran, gint r_offset, gint w_offset,$/;"	f
ms_fifo_update_write_ptr	talk/third_party/mediastreamer/msfifo.c	/^void ms_fifo_update_write_ptr(MSFifo *fifo, gint written){$/;"	f
ms_filter_add_link	talk/third_party/mediastreamer/msfilter.c	/^int ms_filter_add_link(MSFilter *m1, MSFilter *m2)$/;"	f
ms_filter_class_init	talk/third_party/mediastreamer/msfilter.c	/^void ms_filter_class_init(MSFilterClass *filterclass)$/;"	f
ms_filter_class_set_attr	talk/third_party/mediastreamer/msfilter.h	117;"	d
ms_filter_class_set_info	talk/third_party/mediastreamer/msfilter.h	121;"	d
ms_filter_class_set_name	talk/third_party/mediastreamer/msfilter.h	120;"	d
ms_filter_class_unset_attr	talk/third_party/mediastreamer/msfilter.h	118;"	d
ms_filter_destroy	talk/third_party/mediastreamer/msfilter.c	/^void ms_filter_destroy(MSFilter *f)$/;"	f
ms_filter_fifos_have_data	talk/third_party/mediastreamer/msfilter.c	/^gint ms_filter_fifos_have_data(MSFilter *f)$/;"	f
ms_filter_get_by_name	talk/third_party/mediastreamer/msfilter.c	/^MSFilterInfo * ms_filter_get_by_name(const gchar *name)$/;"	f
ms_filter_get_mingran	talk/third_party/mediastreamer/msfilter.h	149;"	d
ms_filter_get_property	talk/third_party/mediastreamer/msfilter.c	/^int ms_filter_get_property(MSFilter *f, MSFilterProperty prop,void *value)$/;"	f
ms_filter_init	talk/third_party/mediastreamer/msfilter.c	/^void ms_filter_init(MSFilter *filter)$/;"	f
ms_filter_link	talk/third_party/mediastreamer/msfilter.c	/^int ms_filter_link(MSFilter *m1, gint pin1, MSFilter *m2,gint pin2, int linktype)$/;"	f
ms_filter_lock	talk/third_party/mediastreamer/msfilter.h	126;"	d
ms_filter_new_with_name	talk/third_party/mediastreamer/msfilter.c	/^MSFilter * ms_filter_new_with_name(const gchar *name)$/;"	f
ms_filter_notify_event	talk/third_party/mediastreamer/msfilter.c	/^void ms_filter_notify_event(MSFilter *filter,gint event, gpointer arg)$/;"	f
ms_filter_process	talk/third_party/mediastreamer/msfilter.h	124;"	d
ms_filter_queues_have_data	talk/third_party/mediastreamer/msfilter.c	/^gint ms_filter_queues_have_data(MSFilter *f)$/;"	f
ms_filter_register	talk/third_party/mediastreamer/msfilter.c	/^void ms_filter_register(MSFilterInfo *info)$/;"	f
ms_filter_remove_links	talk/third_party/mediastreamer/msfilter.c	/^gint ms_filter_remove_links(MSFilter *m1, MSFilter *m2)$/;"	f
ms_filter_search_upstream_by_type	talk/third_party/mediastreamer/msfilter.c	/^MSFilter * ms_filter_search_upstream_by_type(MSFilter *f,MSFilterType type)$/;"	f
ms_filter_set_mingran	talk/third_party/mediastreamer/msfilter.h	150;"	d
ms_filter_set_notify_func	talk/third_party/mediastreamer/msfilter.c	/^void ms_filter_set_notify_func(MSFilter* filter,MSFilterNotifyFunc func, gpointer userdata)$/;"	f
ms_filter_set_property	talk/third_party/mediastreamer/msfilter.c	/^int ms_filter_set_property(MSFilter *f, MSFilterProperty prop,void *value)$/;"	f
ms_filter_uninit	talk/third_party/mediastreamer/msfilter.c	/^void ms_filter_uninit(MSFilter *filter)$/;"	f
ms_filter_unlink	talk/third_party/mediastreamer/msfilter.c	/^int ms_filter_unlink(MSFilter *m1, gint pin1, MSFilter *m2,gint pin2,gint linktype)$/;"	f
ms_filter_unlock	talk/third_party/mediastreamer/msfilter.h	127;"	d
ms_filter_unregister	talk/third_party/mediastreamer/msfilter.c	/^void ms_filter_unregister(MSFilterInfo *info)$/;"	f
ms_ilbc_codec_init	talk/third_party/mediastreamer/msilbcdec.c	/^void ms_ilbc_codec_init()$/;"	f
ms_ilbc_decoder_class	talk/third_party/mediastreamer/msilbcdec.c	/^static MSILBCDecoderClass *ms_ilbc_decoder_class=NULL;$/;"	v	file:
ms_ilbc_decoder_class_init	talk/third_party/mediastreamer/msilbcdec.c	/^void ms_ilbc_decoder_class_init(MSILBCDecoderClass *klass)$/;"	f
ms_ilbc_decoder_destroy	talk/third_party/mediastreamer/msilbcdec.c	/^void ms_ilbc_decoder_destroy( MSILBCDecoder *obj)$/;"	f
ms_ilbc_decoder_get_property	talk/third_party/mediastreamer/msilbcdec.c	/^int ms_ilbc_decoder_get_property(MSILBCDecoder *obj, MSFilterProperty prop, char *value)$/;"	f
ms_ilbc_decoder_init	talk/third_party/mediastreamer/msilbcdec.c	/^void ms_ilbc_decoder_init(MSILBCDecoder *r)$/;"	f
ms_ilbc_decoder_new	talk/third_party/mediastreamer/msilbcdec.c	/^MSFilter * ms_ilbc_decoder_new(void)$/;"	f
ms_ilbc_decoder_process	talk/third_party/mediastreamer/msilbcdec.c	/^void ms_ilbc_decoder_process(MSILBCDecoder *r)$/;"	f
ms_ilbc_decoder_set_property	talk/third_party/mediastreamer/msilbcdec.c	/^int ms_ilbc_decoder_set_property(MSILBCDecoder *obj, MSFilterProperty prop, char *value)$/;"	f
ms_ilbc_decoder_setup	talk/third_party/mediastreamer/msilbcdec.c	/^void ms_ilbc_decoder_setup(MSILBCDecoder *r) $/;"	f
ms_ilbc_decoder_uninit	talk/third_party/mediastreamer/msilbcdec.c	/^void ms_ilbc_decoder_uninit(MSILBCDecoder *obj)$/;"	f
ms_ilbc_encoder_class	talk/third_party/mediastreamer/msilbcenc.c	/^static MSILBCEncoderClass *ms_ilbc_encoder_class=NULL;$/;"	v	file:
ms_ilbc_encoder_class_init	talk/third_party/mediastreamer/msilbcenc.c	/^void ms_ilbc_encoder_class_init(MSILBCEncoderClass *klass)$/;"	f
ms_ilbc_encoder_destroy	talk/third_party/mediastreamer/msilbcenc.c	/^void ms_ilbc_encoder_destroy( MSILBCEncoder *obj)$/;"	f
ms_ilbc_encoder_get_property	talk/third_party/mediastreamer/msilbcenc.c	/^int ms_ilbc_encoder_get_property(MSILBCEncoder *obj, MSFilterProperty prop, char *value)$/;"	f
ms_ilbc_encoder_init	talk/third_party/mediastreamer/msilbcenc.c	/^void ms_ilbc_encoder_init(MSILBCEncoder *r)$/;"	f
ms_ilbc_encoder_new	talk/third_party/mediastreamer/msilbcenc.c	/^MSFilter * ms_ilbc_encoder_new(void)$/;"	f
ms_ilbc_encoder_process	talk/third_party/mediastreamer/msilbcenc.c	/^void ms_ilbc_encoder_process(MSILBCEncoder *r)$/;"	f
ms_ilbc_encoder_set_property	talk/third_party/mediastreamer/msilbcenc.c	/^int ms_ilbc_encoder_set_property(MSILBCEncoder *obj, MSFilterProperty prop, char *value)$/;"	f
ms_ilbc_encoder_setup	talk/third_party/mediastreamer/msilbcenc.c	/^void ms_ilbc_encoder_setup(MSILBCEncoder *r) $/;"	f
ms_ilbc_encoder_uninit	talk/third_party/mediastreamer/msilbcenc.c	/^void ms_ilbc_encoder_uninit(MSILBCEncoder *obj)$/;"	f
ms_init	talk/third_party/mediastreamer/ms.c	/^void ms_init()$/;"	f
ms_load_plugin	talk/third_party/mediastreamer/ms.c	/^gint ms_load_plugin(gchar *path)$/;"	f
ms_message_alloc	talk/third_party/mediastreamer/msbuffer.c	/^MSMessage *ms_message_alloc()$/;"	f
ms_message_destroy	talk/third_party/mediastreamer/msbuffer.c	/^void ms_message_destroy(MSMessage *m)$/;"	f
ms_message_dup	talk/third_party/mediastreamer/msbuffer.c	/^MSMessage * ms_message_dup(MSMessage *m)$/;"	f
ms_message_new	talk/third_party/mediastreamer/msbuffer.c	/^MSMessage *ms_message_new(gint size)$/;"	f
ms_message_set_buf	talk/third_party/mediastreamer/msbuffer.h	64;"	d
ms_message_size	talk/third_party/mediastreamer/msbuffer.h	67;"	d
ms_message_unset_buf	talk/third_party/mediastreamer/msbuffer.h	65;"	d
ms_nosync_class	talk/third_party/mediastreamer/msnosync.c	/^static MSNoSyncClass *ms_nosync_class=NULL;$/;"	v	file:
ms_nosync_class_init	talk/third_party/mediastreamer/msnosync.c	/^void ms_nosync_class_init(MSNoSyncClass *klass)$/;"	f
ms_nosync_destroy	talk/third_party/mediastreamer/msnosync.c	/^void ms_nosync_destroy(MSNoSync *nosync)$/;"	f
ms_nosync_init	talk/third_party/mediastreamer/msnosync.c	/^void ms_nosync_init(MSNoSync *sync)$/;"	f
ms_nosync_new	talk/third_party/mediastreamer/msnosync.c	/^MSSync *ms_nosync_new()$/;"	f
ms_nosync_synchronize	talk/third_party/mediastreamer/msnosync.c	/^void ms_nosync_synchronize(MSNoSync *nosync)$/;"	f
ms_oss_read_class_init	talk/third_party/mediastreamer/msossread.c	/^void ms_oss_read_class_init(MSOssReadClass *klass)$/;"	f
ms_oss_read_destroy	talk/third_party/mediastreamer/msossread.c	/^void ms_oss_read_destroy( MSOssRead *obj)$/;"	f
ms_oss_read_init	talk/third_party/mediastreamer/msossread.c	/^void ms_oss_read_init(MSOssRead *w)$/;"	f
ms_oss_read_new	talk/third_party/mediastreamer/msossread.c	/^MSFilter * ms_oss_read_new()$/;"	f
ms_oss_read_process	talk/third_party/mediastreamer/msossread.c	/^void ms_oss_read_process(MSOssRead *f)$/;"	f
ms_oss_read_set_device	talk/third_party/mediastreamer/msossread.c	/^gint ms_oss_read_set_device(MSOssRead *r,gint devid)$/;"	f
ms_oss_read_set_property	talk/third_party/mediastreamer/msossread.c	/^gint ms_oss_read_set_property(MSOssRead *f,MSFilterProperty prop, void *value)$/;"	f
ms_oss_read_setup	talk/third_party/mediastreamer/msossread.c	/^void ms_oss_read_setup(MSOssRead *f, MSSync *sync)$/;"	f
ms_oss_read_start	talk/third_party/mediastreamer/msossread.c	/^void ms_oss_read_start(MSOssRead *r)$/;"	f
ms_oss_read_stop	talk/third_party/mediastreamer/msossread.c	/^void ms_oss_read_stop(MSOssRead *w)$/;"	f
ms_oss_write_class_init	talk/third_party/mediastreamer/msosswrite.c	/^void ms_oss_write_class_init(MSOssWriteClass *klass)$/;"	f
ms_oss_write_destroy	talk/third_party/mediastreamer/msosswrite.c	/^void ms_oss_write_destroy( MSOssWrite *obj)$/;"	f
ms_oss_write_init	talk/third_party/mediastreamer/msosswrite.c	/^void ms_oss_write_init(MSOssWrite *w)$/;"	f
ms_oss_write_new	talk/third_party/mediastreamer/msosswrite.c	/^MSFilter * ms_oss_write_new()$/;"	f
ms_oss_write_play_dtmf	talk/third_party/mediastreamer/msosswrite.c	/^void ms_oss_write_play_dtmf(MSOssWrite *w, char dtmf){$/;"	f
ms_oss_write_process	talk/third_party/mediastreamer/msosswrite.c	/^void ms_oss_write_process(MSOssWrite *f)$/;"	f
ms_oss_write_set_device	talk/third_party/mediastreamer/msosswrite.c	/^gint ms_oss_write_set_device(MSOssWrite *w, gint devid)$/;"	f
ms_oss_write_set_level	talk/third_party/mediastreamer/msosswrite.c	/^void ms_oss_write_set_level(MSOssWrite *w,gint a)$/;"	f
ms_oss_write_set_property	talk/third_party/mediastreamer/msosswrite.c	/^gint ms_oss_write_set_property(MSOssWrite *f,MSFilterProperty prop, void *value)$/;"	f
ms_oss_write_setup	talk/third_party/mediastreamer/msosswrite.c	/^void ms_oss_write_setup(MSOssWrite *r)$/;"	f
ms_oss_write_start	talk/third_party/mediastreamer/msosswrite.c	/^void ms_oss_write_start(MSOssWrite *w)$/;"	f
ms_oss_write_stop	talk/third_party/mediastreamer/msosswrite.c	/^void ms_oss_write_stop(MSOssWrite *w)$/;"	f
ms_per_frame	talk/third_party/mediastreamer/msilbcdec.h	/^     int ms_per_frame;$/;"	m	struct:_MSILBCDecoder
ms_per_frame	talk/third_party/mediastreamer/msilbcenc.h	/^     int ms_per_frame;$/;"	m	struct:_MSILBCEncoder
ms_proc_get_param	talk/third_party/mediastreamer/ms.c	/^gchar * ms_proc_get_param(gchar *parameter)$/;"	f
ms_proc_get_speed	talk/third_party/mediastreamer/ms.c	/^gint ms_proc_get_speed()$/;"	f
ms_proc_get_type	talk/third_party/mediastreamer/ms.c	/^gint ms_proc_get_type()$/;"	f
ms_qdispatcher_class	talk/third_party/mediastreamer/msqdispatcher.c	/^static MSQdispatcherClass *ms_qdispatcher_class=NULL;$/;"	v	file:
ms_qdispatcher_class_init	talk/third_party/mediastreamer/msqdispatcher.c	/^void ms_qdispatcher_class_init(MSQdispatcherClass *klass)$/;"	f
ms_qdispatcher_destroy	talk/third_party/mediastreamer/msqdispatcher.c	/^void ms_qdispatcher_destroy( MSQdispatcher *obj)$/;"	f
ms_qdispatcher_init	talk/third_party/mediastreamer/msqdispatcher.c	/^void ms_qdispatcher_init(MSQdispatcher *obj)$/;"	f
ms_qdispatcher_new	talk/third_party/mediastreamer/msqdispatcher.c	/^MSFilter * ms_qdispatcher_new(void)$/;"	f
ms_qdispatcher_process	talk/third_party/mediastreamer/msqdispatcher.c	/^void ms_qdispatcher_process(MSQdispatcher *obj)$/;"	f
ms_queue_can_get	talk/third_party/mediastreamer/msqueue.h	44;"	d
ms_queue_destroy	talk/third_party/mediastreamer/msqueue.h	46;"	d
ms_queue_get	talk/third_party/mediastreamer/msqueue.c	/^MSMessage *ms_queue_get(MSQueue *q)$/;"	f
ms_queue_new	talk/third_party/mediastreamer/msqueue.c	/^MSQueue * ms_queue_new()$/;"	f
ms_queue_put	talk/third_party/mediastreamer/msqueue.c	/^void ms_queue_put(MSQueue *q, MSMessage *m)$/;"	f
ms_read_class	talk/third_party/mediastreamer/msread.c	/^static MSReadClass *ms_read_class=NULL;$/;"	v	file:
ms_read_class_init	talk/third_party/mediastreamer/msread.c	/^void ms_read_class_init(MSReadClass *klass)$/;"	f
ms_read_close	talk/third_party/mediastreamer/msread.c	/^gint ms_read_close(MSRead *obj)$/;"	f
ms_read_destroy	talk/third_party/mediastreamer/msread.c	/^void ms_read_destroy( MSRead *obj)$/;"	f
ms_read_init	talk/third_party/mediastreamer/msread.c	/^void ms_read_init(MSRead *r)$/;"	f
ms_read_new	talk/third_party/mediastreamer/msread.c	/^MSFilter * ms_read_new(char *name)$/;"	f
ms_read_open	talk/third_party/mediastreamer/msread.c	/^gint ms_read_open(MSRead *r, gchar *name)$/;"	f
ms_read_process	talk/third_party/mediastreamer/msread.c	/^void ms_read_process(MSRead *r)$/;"	f
ms_read_set_bufsize	talk/third_party/mediastreamer/msread.h	66;"	d
ms_read_set_property	talk/third_party/mediastreamer/msread.c	/^gint ms_read_set_property(MSRead *f,MSFilterProperty prop, void *value)$/;"	f
ms_read_setup	talk/third_party/mediastreamer/msread.c	/^void ms_read_setup(MSRead *r, MSSync *sync)$/;"	f
ms_ring_player_class	talk/third_party/mediastreamer/msringplayer.c	/^static MSRingPlayerClass *ms_ring_player_class=NULL;$/;"	v	file:
ms_ring_player_class_init	talk/third_party/mediastreamer/msringplayer.c	/^void ms_ring_player_class_init(MSRingPlayerClass *klass)$/;"	f
ms_ring_player_destroy	talk/third_party/mediastreamer/msringplayer.c	/^void ms_ring_player_destroy( MSRingPlayer *obj)$/;"	f
ms_ring_player_get_property	talk/third_party/mediastreamer/msringplayer.c	/^gint ms_ring_player_get_property(MSRingPlayer *f,MSFilterProperty prop, void *value)$/;"	f
ms_ring_player_get_sample_freq	talk/third_party/mediastreamer/msringplayer.c	/^gint ms_ring_player_get_sample_freq(MSRingPlayer *obj){$/;"	f
ms_ring_player_init	talk/third_party/mediastreamer/msringplayer.c	/^void ms_ring_player_init(MSRingPlayer *r)$/;"	f
ms_ring_player_new	talk/third_party/mediastreamer/msringplayer.c	/^MSFilter * ms_ring_player_new(char *name, gint seconds)$/;"	f
ms_ring_player_process	talk/third_party/mediastreamer/msringplayer.c	/^void ms_ring_player_process(MSRingPlayer *r)$/;"	f
ms_ring_player_set_bufsize	talk/third_party/mediastreamer/msringplayer.h	79;"	d
ms_ring_player_set_property	talk/third_party/mediastreamer/msringplayer.c	/^gint ms_ring_player_set_property(MSRingPlayer *f,MSFilterProperty prop, void *value)$/;"	f
ms_ring_player_setup	talk/third_party/mediastreamer/msringplayer.c	/^void ms_ring_player_setup(MSRingPlayer *r,MSSync *sync)$/;"	f
ms_rtp_recv_class	talk/third_party/mediastreamer/msrtprecv.c	/^static MSRtpRecvClass *ms_rtp_recv_class=NULL;$/;"	v	file:
ms_rtp_recv_class_init	talk/third_party/mediastreamer/msrtprecv.c	/^void ms_rtp_recv_class_init(MSRtpRecvClass *klass)$/;"	f
ms_rtp_recv_destroy	talk/third_party/mediastreamer/msrtprecv.c	/^void ms_rtp_recv_destroy( MSRtpRecv *obj)$/;"	f
ms_rtp_recv_get_session	talk/third_party/mediastreamer/msrtprecv.h	69;"	d
ms_rtp_recv_init	talk/third_party/mediastreamer/msrtprecv.c	/^void ms_rtp_recv_init(MSRtpRecv *r)$/;"	f
ms_rtp_recv_new	talk/third_party/mediastreamer/msrtprecv.c	/^MSFilter * ms_rtp_recv_new(void)$/;"	f
ms_rtp_recv_process	talk/third_party/mediastreamer/msrtprecv.c	/^void ms_rtp_recv_process(MSRtpRecv *r)$/;"	f
ms_rtp_recv_set_session	talk/third_party/mediastreamer/msrtprecv.c	/^RtpSession * ms_rtp_recv_set_session(MSRtpRecv *obj,RtpSession *session)$/;"	f
ms_rtp_recv_setup	talk/third_party/mediastreamer/msrtprecv.c	/^void ms_rtp_recv_setup(MSRtpRecv *r,MSSync *sync)$/;"	f
ms_rtp_recv_unset_session	talk/third_party/mediastreamer/msrtprecv.h	68;"	d
ms_rtp_send_class	talk/third_party/mediastreamer/msrtpsend.c	/^static MSRtpSendClass *ms_rtp_send_class=NULL;$/;"	v	file:
ms_rtp_send_class_init	talk/third_party/mediastreamer/msrtpsend.c	/^void ms_rtp_send_class_init(MSRtpSendClass *klass)$/;"	f
ms_rtp_send_destroy	talk/third_party/mediastreamer/msrtpsend.c	/^void ms_rtp_send_destroy( MSRtpSend *obj)$/;"	f
ms_rtp_send_dtmf	talk/third_party/mediastreamer/msrtpsend.c	/^gint ms_rtp_send_dtmf(MSRtpSend *r, gchar dtmf)$/;"	f
ms_rtp_send_get_session	talk/third_party/mediastreamer/msrtpsend.h	73;"	d
ms_rtp_send_init	talk/third_party/mediastreamer/msrtpsend.c	/^void ms_rtp_send_init(MSRtpSend *r)$/;"	f
ms_rtp_send_new	talk/third_party/mediastreamer/msrtpsend.c	/^MSFilter * ms_rtp_send_new(void)$/;"	f
ms_rtp_send_process	talk/third_party/mediastreamer/msrtpsend.c	/^void ms_rtp_send_process(MSRtpSend *r)$/;"	f
ms_rtp_send_set_session	talk/third_party/mediastreamer/msrtpsend.c	/^RtpSession * ms_rtp_send_set_session(MSRtpSend *obj,RtpSession *session)$/;"	f
ms_rtp_send_set_timing	talk/third_party/mediastreamer/msrtpsend.c	/^void ms_rtp_send_set_timing(MSRtpSend *r, guint32 ts_inc, gint payload_size)$/;"	f
ms_rtp_send_setup	talk/third_party/mediastreamer/msrtpsend.c	/^void ms_rtp_send_setup(MSRtpSend *r, MSSync *sync)$/;"	f
ms_rtp_send_unset_session	talk/third_party/mediastreamer/msrtpsend.h	72;"	d
ms_sound_read_class_init	talk/third_party/mediastreamer/mssoundread.c	/^void ms_sound_read_class_init(MSSoundReadClass *klass)$/;"	f
ms_sound_read_init	talk/third_party/mediastreamer/mssoundread.c	/^void ms_sound_read_init(MSSoundRead *w)$/;"	f
ms_sound_read_set_device	talk/third_party/mediastreamer/mssoundread.h	/^static inline int ms_sound_read_set_device(MSSoundRead *r,gint devid)$/;"	f
ms_sound_read_set_level	talk/third_party/mediastreamer/mssoundread.h	/^static inline void ms_sound_read_set_level(MSSoundRead *w,gint a)$/;"	f
ms_sound_read_start	talk/third_party/mediastreamer/mssoundread.h	/^static inline void ms_sound_read_start(MSSoundRead *r)$/;"	f
ms_sound_read_stop	talk/third_party/mediastreamer/mssoundread.h	/^static inline void ms_sound_read_stop(MSSoundRead *w)$/;"	f
ms_sound_write_class_init	talk/third_party/mediastreamer/mssoundwrite.c	/^void ms_sound_write_class_init(MSSoundWriteClass *klass)$/;"	f
ms_sound_write_init	talk/third_party/mediastreamer/mssoundwrite.c	/^void ms_sound_write_init(MSSoundWrite *w)$/;"	f
ms_sound_write_set_device	talk/third_party/mediastreamer/mssoundwrite.h	/^static inline int ms_sound_write_set_device(MSSoundWrite *r,gint devid)$/;"	f
ms_sound_write_set_level	talk/third_party/mediastreamer/mssoundwrite.h	/^static inline void ms_sound_write_set_level(MSSoundWrite *w,gint a)$/;"	f
ms_sound_write_start	talk/third_party/mediastreamer/mssoundwrite.h	/^static inline void ms_sound_write_start(MSSoundWrite *r)$/;"	f
ms_sound_write_stop	talk/third_party/mediastreamer/mssoundwrite.h	/^static inline void ms_sound_write_stop(MSSoundWrite *w)$/;"	f
ms_speex_codec_init	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_codec_init()$/;"	f
ms_speex_dec_class	talk/third_party/mediastreamer/msspeexdec.c	/^static MSSpeexDecClass * ms_speex_dec_class=NULL;$/;"	v	file:
ms_speex_dec_class_init	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_dec_class_init(MSSpeexDecClass *klass)$/;"	f
ms_speex_dec_destroy	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_dec_destroy(MSSpeexDec *obj)$/;"	f
ms_speex_dec_init	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_dec_init(MSSpeexDec *obj)$/;"	f
ms_speex_dec_init_core	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_dec_init_core(MSSpeexDec *obj,const SpeexMode *mode)$/;"	f
ms_speex_dec_new	talk/third_party/mediastreamer/msspeexdec.c	/^MSFilter * ms_speex_dec_new()$/;"	f
ms_speex_dec_process	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_dec_process(MSSpeexDec *obj)$/;"	f
ms_speex_dec_set_property	talk/third_party/mediastreamer/msspeexdec.c	/^int ms_speex_dec_set_property(MSSpeexDec *obj, MSFilterProperty prop, int *value)$/;"	f
ms_speex_dec_setup	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_dec_setup(MSSpeexDec *obj)$/;"	f
ms_speex_dec_uninit	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_dec_uninit(MSSpeexDec *obj)$/;"	f
ms_speex_dec_uninit_core	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_dec_uninit_core(MSSpeexDec *obj)$/;"	f
ms_speex_dec_unsetup	talk/third_party/mediastreamer/msspeexdec.c	/^void ms_speex_dec_unsetup(MSSpeexDec *obj)$/;"	f
ms_speex_enc_class	talk/third_party/mediastreamer/msspeexenc.c	/^static MSSpeexEncClass * ms_speex_enc_class=NULL;$/;"	v	file:
ms_speex_enc_class_init	talk/third_party/mediastreamer/msspeexenc.c	/^void ms_speex_enc_class_init(MSSpeexEncClass *klass)$/;"	f
ms_speex_enc_destroy	talk/third_party/mediastreamer/msspeexenc.c	/^void ms_speex_enc_destroy(MSSpeexEnc *obj)$/;"	f
ms_speex_enc_init	talk/third_party/mediastreamer/msspeexenc.c	/^void ms_speex_enc_init(MSSpeexEnc *obj)$/;"	f
ms_speex_enc_init_core	talk/third_party/mediastreamer/msspeexenc.c	/^void ms_speex_enc_init_core(MSSpeexEnc *obj,const SpeexMode *mode, gint bitrate)$/;"	f
ms_speex_enc_new	talk/third_party/mediastreamer/msspeexenc.c	/^MSFilter * ms_speex_enc_new()$/;"	f
ms_speex_enc_process	talk/third_party/mediastreamer/msspeexenc.c	/^void ms_speex_enc_process(MSSpeexEnc *obj)$/;"	f
ms_speex_enc_set_property	talk/third_party/mediastreamer/msspeexenc.c	/^int ms_speex_enc_set_property(MSSpeexEnc *obj,int property,int *value)$/;"	f
ms_speex_enc_setup	talk/third_party/mediastreamer/msspeexenc.c	/^void ms_speex_enc_setup(MSSpeexEnc *obj)$/;"	f
ms_speex_enc_uninit_core	talk/third_party/mediastreamer/msspeexenc.c	/^void ms_speex_enc_uninit_core(MSSpeexEnc *obj)$/;"	f
ms_speex_enc_unsetup	talk/third_party/mediastreamer/msspeexenc.c	/^void ms_speex_enc_unsetup(MSSpeexEnc *obj)$/;"	f
ms_start	talk/third_party/mediastreamer/ms.c	/^void ms_start(MSSync *sync)$/;"	f
ms_stop	talk/third_party/mediastreamer/ms.c	/^void ms_stop(MSSync *sync)$/;"	f
ms_sync_attach	talk/third_party/mediastreamer/mssync.c	/^int ms_sync_attach(MSSync *sync,MSFilter *f)$/;"	f
ms_sync_attach_generic	talk/third_party/mediastreamer/mssync.c	/^int ms_sync_attach_generic(MSSync *sync,MSFilter *f)$/;"	f
ms_sync_class_init	talk/third_party/mediastreamer/mssync.c	/^void ms_sync_class_init(MSSyncClass *klass)$/;"	f
ms_sync_destroy	talk/third_party/mediastreamer/mssync.h	133;"	d
ms_sync_detach	talk/third_party/mediastreamer/mssync.c	/^int ms_sync_detach(MSSync *sync,MSFilter *f)$/;"	f
ms_sync_detach_generic	talk/third_party/mediastreamer/mssync.c	/^int ms_sync_detach_generic(MSSync *sync,MSFilter *f)$/;"	f
ms_sync_get_samples_per_tick	talk/third_party/mediastreamer/mssync.h	89;"	d
ms_sync_get_tick_count	talk/third_party/mediastreamer/mssync.h	93;"	d
ms_sync_init	talk/third_party/mediastreamer/mssync.c	/^void ms_sync_init(MSSync *sync)$/;"	f
ms_sync_lock	talk/third_party/mediastreamer/mssync.h	97;"	d
ms_sync_set_samples_per_tick	talk/third_party/mediastreamer/mssync.c	/^void ms_sync_set_samples_per_tick(MSSync *sync,gint size)$/;"	f
ms_sync_setup	talk/third_party/mediastreamer/mssync.c	/^void ms_sync_setup(MSSync *sync)$/;"	f
ms_sync_start	talk/third_party/mediastreamer/mssync.h	128;"	d
ms_sync_stop	talk/third_party/mediastreamer/mssync.h	129;"	d
ms_sync_suspend	talk/third_party/mediastreamer/mssync.h	95;"	d
ms_sync_synchronize	talk/third_party/mediastreamer/mssync.h	75;"	d
ms_sync_trylock	talk/third_party/mediastreamer/mssync.h	101;"	d
ms_sync_uninit	talk/third_party/mediastreamer/mssync.c	/^int ms_sync_uninit(MSSync *sync)$/;"	f
ms_sync_unlock	talk/third_party/mediastreamer/mssync.h	99;"	d
ms_sync_unsetup	talk/third_party/mediastreamer/mssync.c	/^void ms_sync_unsetup(MSSync *sync)$/;"	f
ms_sync_update	talk/third_party/mediastreamer/mssync.h	87;"	d
ms_thread_run	talk/third_party/mediastreamer/ms.c	/^void *ms_thread_run(void *sync_ptr)$/;"	f
ms_thread_stop	talk/third_party/mediastreamer/ms.c	/^void ms_thread_stop(MSSync *sync)$/;"	f
ms_timer_class	talk/third_party/mediastreamer/mstimer.c	/^static MSTimerClass *ms_timer_class=NULL;$/;"	v	file:
ms_timer_class_init	talk/third_party/mediastreamer/mstimer.c	/^void ms_timer_class_init(MSTimerClass *klass)$/;"	f
ms_timer_destroy	talk/third_party/mediastreamer/mstimer.c	/^void ms_timer_destroy(MSTimer *timer)$/;"	f
ms_timer_init	talk/third_party/mediastreamer/mstimer.c	/^void ms_timer_init(MSTimer *sync)$/;"	f
ms_timer_new	talk/third_party/mediastreamer/mstimer.c	/^MSSync *ms_timer_new()$/;"	f
ms_timer_set_interval	talk/third_party/mediastreamer/mstimer.c	/^void ms_timer_set_interval(MSTimer *timer, int milisec)$/;"	f
ms_timer_synchronize	talk/third_party/mediastreamer/mstimer.c	/^void ms_timer_synchronize(MSTimer *timer)$/;"	f
ms_trace	talk/third_party/mediastreamer/msutils.h	41;"	d
ms_trace	talk/third_party/mediastreamer/msutils.h	45;"	d
ms_video_codec_info_get	talk/third_party/mediastreamer/mscodec.c	/^MSCodecInfo * ms_video_codec_info_get(gchar *name)$/;"	f
ms_warning	talk/third_party/mediastreamer/msutils.h	48;"	d
ms_write_class	talk/third_party/mediastreamer/mswrite.c	/^static MSWriteClass *ms_write_class=NULL;$/;"	v	file:
ms_write_class_init	talk/third_party/mediastreamer/mswrite.c	/^void ms_write_class_init(MSWriteClass *klass)$/;"	f
ms_write_destroy	talk/third_party/mediastreamer/mswrite.c	/^void ms_write_destroy( MSWrite *obj)$/;"	f
ms_write_init	talk/third_party/mediastreamer/mswrite.c	/^void ms_write_init(MSWrite *r)$/;"	f
ms_write_new	talk/third_party/mediastreamer/mswrite.c	/^MSFilter * ms_write_new(char *name)$/;"	f
ms_write_process	talk/third_party/mediastreamer/mswrite.c	/^void ms_write_process(MSWrite *r)$/;"	f
msg	talk/base/thread.h	/^  Message msg;$/;"	m	struct:talk_base::_SendMessage
msgPeek_	talk/base/messagequeue.h	/^  Message msgPeek_;$/;"	m	class:talk_base::MessageQueue
msg_	talk/base/messagequeue.h	/^  Message msg_;$/;"	m	class:talk_base::DelayedMessage
msg_	talk/p2p/base/stunrequest.h	/^  StunMessage* msg_;$/;"	m	class:cricket::StunRequest
msg_queue_	talk/base/virtualsocketserver.h	/^  MessageQueue* msg_queue_;$/;"	m	class:talk_base::VirtualSocketServer
msgb_2_ms_message	talk/third_party/mediastreamer/msrtprecv.c	/^MSMessage *msgb_2_ms_message(mblk_t* mp){$/;"	f
msgq_	talk/base/messagequeue.h	/^  std::queue<Message> msgq_;$/;"	m	class:talk_base::MessageQueue
msossreadclass	talk/third_party/mediastreamer/msossread.c	/^static MSOssReadClass *msossreadclass=NULL;$/;"	v	file:
msosswriteclass	talk/third_party/mediastreamer/msosswrite.c	/^static MSOssWriteClass *msosswriteclass=NULL;$/;"	v	file:
mssdlout_h	talk/third_party/mediastreamer/mssdlout.h	30;"	d
multi_threaded_global	talk/base/sigslot.h	/^		multi_threaded_global()$/;"	f	class:sigslot::multi_threaded_global
multi_threaded_global	talk/base/sigslot.h	/^		multi_threaded_global(const multi_threaded_global&)$/;"	f	class:sigslot::multi_threaded_global
multi_threaded_global	talk/base/sigslot.h	/^	class multi_threaded_global$/;"	c	namespace:sigslot
multi_threaded_local	talk/base/sigslot.h	/^		multi_threaded_local()$/;"	f	class:sigslot::multi_threaded_local
multi_threaded_local	talk/base/sigslot.h	/^		multi_threaded_local(const multi_threaded_local&)$/;"	f	class:sigslot::multi_threaded_local
multi_threaded_local	talk/base/sigslot.h	/^	class multi_threaded_local$/;"	c	namespace:sigslot
mute	talk/session/phone/linphonemediaengine.h	/^  bool mute() {return mute_;}$/;"	f	class:cricket::LinphoneMediaChannel
mute_	talk/session/phone/linphonemediaengine.h	/^  bool mute_;$/;"	m	class:cricket::LinphoneMediaChannel
muted	talk/session/phone/call.h	/^  bool muted() const { return muted_; }$/;"	f	class:cricket::Call
muted_	talk/session/phone/call.h	/^  bool muted_;$/;"	m	class:cricket::Call
muted_	talk/session/phone/voicechannel.h	/^  bool muted_;$/;"	m	class:cricket::VoiceChannel
mutex	talk/base/ssladapter.cc	/^  MUTEX_TYPE mutex;$/;"	m	struct:CRYPTO_dynlock_value	file:
mutex_	talk/base/criticalsection.h	/^  pthread_mutex_t mutex_;$/;"	m	class:talk_base::CriticalSection
mutex_buf	talk/base/ssladapter.cc	/^static MUTEX_TYPE* mutex_buf = NULL;$/;"	v	file:
name	talk/base/host.h	/^  const std::string& name() const { return name_; }$/;"	f	class:talk_base::Host
name	talk/base/httpcommon.cc	/^  inline const char* name() const { return Name(val); }$/;"	f	struct:talk_base::Enum
name	talk/base/network.h	/^  const std::string& name() const { return name_; }$/;"	f	class:talk_base::Network
name	talk/p2p/base/candidate.h	/^  const std::string & name() const { return name_; }$/;"	f	class:cricket::Candidate
name	talk/p2p/base/port.h	/^  const std::string& name() const { return name_; }$/;"	f	class:cricket::Port
name	talk/p2p/base/session.h	/^  const std::string &name() const { return name_; }$/;"	f	class:cricket::Session
name	talk/p2p/base/transport.cc	/^  std::string name;$/;"	m	struct:__anon3::ChannelParams	file:
name	talk/p2p/base/transport.h	/^  const std::string& name() const { return name_; }$/;"	f	class:cricket::Transport
name	talk/p2p/base/transportchannel.h	/^  const std::string& name() const { return name_; }$/;"	f	class:cricket::TransportChannel
name	talk/p2p/client/basicportallocator.h	/^  const std::string& name() const { return name_; }$/;"	f	class:cricket::BasicPortAllocatorSession
name	talk/session/fileshare/fileshare.h	/^    std::string name;$/;"	m	struct:cricket::FileShareManifest::Item
name	talk/session/phone/codec.h	/^  std::string name;$/;"	m	struct:Codec
name	talk/session/phone/gipslitemediaengine.cc	/^struct CodecPref { const char* name; int clockrate; int pref; };$/;"	m	struct:__anon31::CodecPref	file:
name	talk/third_party/mediastreamer/msfilter.h	/^	gchar *name;$/;"	m	struct:_MSFilterClass
name	talk/third_party/mediastreamer/msfilter.h	/^	gchar *name;$/;"	m	struct:_MSFilterInfo
name_	talk/base/host.h	/^  std::string name_;$/;"	m	class:talk_base::Host
name_	talk/base/network.h	/^  std::string name_;$/;"	m	class:talk_base::Network
name_	talk/p2p/base/candidate.h	/^  std::string name_;$/;"	m	class:cricket::Candidate
name_	talk/p2p/base/port.h	/^  std::string name_;$/;"	m	class:cricket::Port
name_	talk/p2p/base/session.h	/^  std::string name_;$/;"	m	class:cricket::Session
name_	talk/p2p/base/session_unittest.cc	/^  std::string name_;$/;"	m	class:TestPortAllocatorSession	file:
name_	talk/p2p/base/transport.h	/^  std::string name_;$/;"	m	class:cricket::Transport
name_	talk/p2p/base/transportchannel.h	/^  std::string name_;$/;"	m	class:cricket::TransportChannel
name_	talk/p2p/client/basicportallocator.h	/^  std::string name_;$/;"	m	class:cricket::BasicPortAllocatorSession
name_	talk/xmllite/xmlelement.h	/^  QName name_;$/;"	m	class:buzz::XmlAttr
name_	talk/xmllite/xmlelement.h	/^  QName name_;$/;"	m	class:buzz::XmlElement
namespace_	talk/xmllite/qname.h	/^    std::string namespace_;$/;"	m	class:buzz::QName::Data
nat_	talk/base/natserver.h	/^  NAT* nat_;$/;"	m	class:talk_base::NATServer
nat_addr	talk/p2p/base/port_unittest.cc	/^const talk_base::SocketAddress nat_addr = talk_base::SocketAddress("127.0.0.1", talk_base::NAT_SERVER_PORT);$/;"	v
nat_addr_	talk/base/natsocketfactory.h	/^  SocketAddress nat_addr_;$/;"	m	class:talk_base::NATSocketFactory
nat_unittest_DEPENDENCIES	talk/base/Makefile	/^nat_unittest_DEPENDENCIES = libcrickettest.la libcricketbase.la$/;"	m
nat_unittest_LDADD	talk/base/Makefile	/^nat_unittest_LDADD = libcrickettest.la libcricketbase.la -lpthread$/;"	m
nat_unittest_OBJECTS	talk/base/Makefile	/^nat_unittest_OBJECTS = $(am_nat_unittest_OBJECTS)$/;"	m
nat_unittest_SOURCES	talk/base/Makefile	/^nat_unittest_SOURCES = nat_unittest.cc$/;"	m
natserver_DEPENDENCIES	talk/base/Makefile	/^natserver_DEPENDENCIES = libcrickettest.la libcricketbase.la$/;"	m
natserver_LDADD	talk/base/Makefile	/^natserver_LDADD = libcrickettest.la libcricketbase.la -lpthread$/;"	m
natserver_OBJECTS	talk/base/Makefile	/^natserver_OBJECTS = $(am_natserver_OBJECTS)$/;"	m
natserver_SOURCES	talk/base/Makefile	/^natserver_SOURCES = natserver_main.cc$/;"	m
need_swap	talk/third_party/mediastreamer/msread.h	/^	gint need_swap;$/;"	m	struct:_MSRead
need_swap	talk/third_party/mediastreamer/msringplayer.h	/^	gint need_swap;$/;"	m	struct:_MSRingPlayer
network	talk/p2p/base/port.h	/^  talk_base::Network* network() { return network_; }$/;"	f	class:cricket::Port
network_	talk/p2p/base/port.h	/^  talk_base::Network* network_;$/;"	m	class:cricket::Port
network_	talk/p2p/base/session_unittest.cc	/^  talk_base::Network network_;$/;"	m	class:TestPortAllocatorSession	file:
network_	talk/p2p/client/basicportallocator.cc	/^  talk_base::Network* network_;$/;"	m	class:cricket::AllocationSequence	file:
network_interface	talk/session/phone/mediachannel.h	/^  NetworkInterface *network_interface() {return network_interface_;}$/;"	f	class:cricket::MediaChannel
network_interface_	talk/session/phone/mediachannel.h	/^  NetworkInterface *network_interface_;$/;"	m	class:cricket::MediaChannel
network_manager	talk/p2p/client/basicportallocator.h	/^  talk_base::NetworkManager* network_manager() { return network_manager_; }$/;"	f	class:cricket::BasicPortAllocator
network_manager_	talk/examples/call/callclient.h	/^  talk_base::NetworkManager network_manager_;$/;"	m	class:CallClient
network_manager_	talk/examples/pcp/pcp_main.cc	/^  talk_base::NetworkManager network_manager_;$/;"	m	class:FileShareClient	file:
network_manager_	talk/p2p/client/basicportallocator.h	/^  talk_base::NetworkManager* network_manager_;$/;"	m	class:cricket::BasicPortAllocator
network_name	talk/p2p/base/candidate.h	/^  const std::string & network_name() const { return network_name_; }$/;"	f	class:cricket::Candidate
network_name_	talk/p2p/base/candidate.h	/^  std::string network_name_;$/;"	m	class:cricket::Candidate
network_thread	talk/p2p/client/basicportallocator.h	/^  talk_base::Thread* network_thread() { return network_thread_; }$/;"	f	class:cricket::BasicPortAllocatorSession
network_thread_	talk/p2p/client/basicportallocator.h	/^  talk_base::Thread* network_thread_;$/;"	m	class:cricket::BasicPortAllocatorSession
networks	talk/base/host.h	/^  const std::vector<Network*>& networks() const { return *networks_; }$/;"	f	class:talk_base::Host
networks_	talk/base/host.h	/^  std::vector<Network*>* networks_;$/;"	m	class:talk_base::Host
networks_	talk/base/network.h	/^  NetworkMap networks_;$/;"	m	class:talk_base::NetworkManager
new	talk/xmllite/xmlparser.cc	42;"	d	file:
new	talk/xmpp/xmppstanzaparser.cc	34;"	d	file:
new_connection	talk/p2p/client/socketmonitor.h	/^  bool new_connection;$/;"	m	struct:cricket::ConnectionInfo
new_ss	talk/base/messagequeue.h	/^  bool new_ss;$/;"	m	class:talk_base::MessageQueue
next	talk/third_party/mediastreamer/msbuffer.h	/^   struct _MSMessage *next;$/;"	m	struct:_MSMessage	typeref:struct:_MSMessage::_MSMessage
next_	talk/base/autodetectproxy.h	/^  int next_;$/;"	m	class:talk_base::AutoDetectProxy
next_block_	talk/base/tarstream.h	/^  NextBlockType next_block_;$/;"	m	class:talk_base::TarStream
next_channel_id_	talk/session/fileshare/fileshare.h	/^  size_t next_channel_id_;$/;"	m	class:cricket::FileShareSession
next_connection_id_	talk/base/httpserver.h	/^  int next_connection_id_;$/;"	m	class:talk_base::HttpServer
next_data	talk/third_party/mediastreamer/msfifo.h	/^	void *next_data;   \/* user data, usually the reading MSFilter *\/$/;"	m	struct:_MSFifo
next_data	talk/third_party/mediastreamer/msqueue.h	/^	void *next_data; \/* user data, usually the reading filter*\/$/;"	m	struct:_MSQueue
next_id_	talk/base/physicalsocketserver.cc	/^  static int next_id_;$/;"	m	class:talk_base::SocketDispatcher	file:
next_id_	talk/base/physicalsocketserver.cc	/^int SocketDispatcher::next_id_ = 0;$/;"	m	class:talk_base::SocketDispatcher	file:
next_id_	talk/xmpp/xmppengineimpl.h	/^  int next_id_;$/;"	m	class:buzz::XmppEngineImpl
next_ip_	talk/base/virtualsocketserver.h	/^  uint32 next_ip_;$/;"	m	class:talk_base::VirtualSocketServer
next_port_	talk/base/virtualsocketserver.h	/^  uint16 next_port_;$/;"	m	class:talk_base::VirtualSocketServer
next_stanza_	talk/xmpp/xmpptask.h	/^  scoped_ptr<XmlElement> next_stanza_;$/;"	m	class:buzz::XmppTask
next_timeout_task_	talk/base/taskrunner.h	/^  Task *next_timeout_task_;$/;"	m	class:talk_base::TaskRunner
node	talk/xmpp/jid.h	/^  const std::string & node() const { return !data_ ? STR_EMPTY : data_->node_name_; }$/;"	f	class:buzz::Jid
node_name_	talk/xmpp/jid.h	/^    const std::string node_name_;$/;"	m	class:buzz::Jid::Data
noinst_HEADERS	talk/base/Makefile	/^noinst_HEADERS = asyncfile.h \\$/;"	m
noinst_HEADERS	talk/examples/call/Makefile	/^noinst_HEADERS = callclient.h  console.h $/;"	m
noinst_HEADERS	talk/examples/login/Makefile	/^noinst_HEADERS = xmppauth.h \\$/;"	m
noinst_HEADERS	talk/p2p/base/Makefile	/^noinst_HEADERS = candidate.h \\$/;"	m
noinst_HEADERS	talk/p2p/client/Makefile	/^noinst_HEADERS = basicportallocator.h \\$/;"	m
noinst_HEADERS	talk/session/fileshare/Makefile	/^noinst_HEADERS = fileshare.h $/;"	m
noinst_HEADERS	talk/session/phone/Makefile	/^noinst_HEADERS = audiomonitor.h \\$/;"	m
noinst_HEADERS	talk/session/tunnel/Makefile	/^noinst_HEADERS = tunnelsessionclient.h \\$/;"	m
noinst_HEADERS	talk/third_party/mediastreamer/Makefile	/^noinst_HEADERS = affine.h \\$/;"	m
noinst_HEADERS	talk/xmllite/Makefile	/^noinst_HEADERS = qname.h \\$/;"	m
noinst_HEADERS	talk/xmpp/Makefile	/^noinst_HEADERS = asyncsocket.h \\$/;"	m
noinst_LTLIBRARIES	talk/base/Makefile	/^noinst_LTLIBRARIES = libcricketbase.la libcrickettest.la$/;"	m
noinst_LTLIBRARIES	talk/examples/login/Makefile	/^noinst_LTLIBRARIES = libcricketexampleslogin.la$/;"	m
noinst_LTLIBRARIES	talk/p2p/base/Makefile	/^noinst_LTLIBRARIES = libcricketp2pbase.la$/;"	m
noinst_LTLIBRARIES	talk/p2p/client/Makefile	/^noinst_LTLIBRARIES = libcricketp2pclient.la$/;"	m
noinst_LTLIBRARIES	talk/session/fileshare/Makefile	/^noinst_LTLIBRARIES = libcricketsessionfileshare.la$/;"	m
noinst_LTLIBRARIES	talk/session/phone/Makefile	/^noinst_LTLIBRARIES = libcricketsessionphone.la$/;"	m
noinst_LTLIBRARIES	talk/session/tunnel/Makefile	/^noinst_LTLIBRARIES = libcricketsessiontunnel.la$/;"	m
noinst_LTLIBRARIES	talk/third_party/mediastreamer/Makefile	/^noinst_LTLIBRARIES = libmediastreamer.la$/;"	m
noinst_LTLIBRARIES	talk/xmllite/Makefile	/^noinst_LTLIBRARIES = libcricketxmllite.la$/;"	m
noinst_LTLIBRARIES	talk/xmpp/Makefile	/^noinst_LTLIBRARIES = libcricketxmpp.la$/;"	m
noinst_PROGRAMS	talk/base/Makefile	/^noinst_PROGRAMS = natserver$(EXEEXT) nat_unittest$(EXEEXT) \\$/;"	m
noinst_PROGRAMS	talk/p2p/base/Makefile	/^noinst_PROGRAMS = stunserver_unittest$(EXEEXT) \\$/;"	m
nonnull	talk/base/stringutils.h	/^inline const CTYPE* nonnull(const CTYPE* str, const CTYPE* def_str = NULL) {$/;"	f	namespace:talk_base
notify	talk/base/httpbase.h	/^  void notify(IHttpNotify* notify) { notify_ = notify; }$/;"	f	class:talk_base::HttpBase
notify_	talk/base/httpbase.h	/^  IHttpNotify* notify_;$/;"	m	class:talk_base::HttpBase
notify_	talk/examples/login/xmpppump.h	/^  XmppPumpNotify *notify_;$/;"	m	class:XmppPump
notify_event	talk/third_party/mediastreamer/msfilter.h	/^	MSFilterNotifyFunc notify_event;$/;"	m	struct:_MSFilter
np	talk/base/base64.cc	/^static const string::size_type np = string::npos;$/;"	v	file:
ns_avatar_hash	talk/xmpp/constants.cc	/^const std::string & Constants::ns_avatar_hash() {$/;"	f	class:buzz::Constants
ns_bind	talk/xmpp/constants.cc	/^const std::string & Constants::ns_bind() {$/;"	f	class:buzz::Constants
ns_client	talk/xmpp/constants.cc	/^const std::string & Constants::ns_client() {$/;"	f	class:buzz::Constants
ns_dialback	talk/xmpp/constants.cc	/^const std::string & Constants::ns_dialback() {$/;"	f	class:buzz::Constants
ns_privacy	talk/xmpp/constants.cc	/^const std::string & Constants::ns_privacy() {$/;"	f	class:buzz::Constants
ns_roster	talk/xmpp/constants.cc	/^const std::string & Constants::ns_roster() {$/;"	f	class:buzz::Constants
ns_sasl	talk/xmpp/constants.cc	/^const std::string & Constants::ns_sasl() {$/;"	f	class:buzz::Constants
ns_server	talk/xmpp/constants.cc	/^const std::string & Constants::ns_server() {$/;"	f	class:buzz::Constants
ns_session	talk/xmpp/constants.cc	/^const std::string & Constants::ns_session() {$/;"	f	class:buzz::Constants
ns_stanza	talk/xmpp/constants.cc	/^const std::string & Constants::ns_stanza() {$/;"	f	class:buzz::Constants
ns_stream	talk/xmpp/constants.cc	/^const std::string & Constants::ns_stream() {$/;"	f	class:buzz::Constants
ns_tls	talk/xmpp/constants.cc	/^const std::string & Constants::ns_tls() {$/;"	f	class:buzz::Constants
ns_vcard	talk/xmpp/constants.cc	/^const std::string & Constants::ns_vcard() {$/;"	f	class:buzz::Constants
ns_vcard_update	talk/xmpp/constants.cc	/^const std::string & Constants::ns_vcard_update() {$/;"	f	class:buzz::Constants
ns_xml	talk/xmllite/xmlconstants.cc	/^const std::string & XmlConstants::ns_xml() {$/;"	f	class:XmlConstants
ns_xmlns	talk/xmllite/xmlconstants.cc	/^const std::string & XmlConstants::ns_xmlns() {$/;"	f	class:XmlConstants
ns_xstream	talk/xmpp/constants.cc	/^const std::string & Constants::ns_xstream() {$/;"	f	class:buzz::Constants
null_log_handler	talk/session/phone/linphonemediaengine.cc	/^static void null_log_handler(const gchar *log_domain,$/;"	f	file:
number	talk/p2p/base/stun.h	/^  uint8 number() const { return number_; }$/;"	f	class:cricket::StunErrorCodeAttribute
number_	talk/p2p/base/stun.h	/^  uint8 number_;$/;"	m	class:cricket::StunErrorCodeAttribute
obufwrap	talk/third_party/mediastreamer/msavdecoder.h	/^	MSBuffer *obufwrap;		\/* alternate buffer, when format change is needed*\/$/;"	m	struct:_MSAVDecoder
oldincludedir	talk/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/base/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/examples/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/examples/call/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/examples/login/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/examples/pcp/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/p2p/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/p2p/base/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/p2p/client/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/session/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/session/fileshare/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/session/phone/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/session/tunnel/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/third_party/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/third_party/gips/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/third_party/mediastreamer/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/xmllite/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	talk/xmpp/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldinm1	talk/third_party/mediastreamer/mssdlout.h	/^	MSMessage *oldinm1;$/;"	m	struct:_MSSdlOut
onHttpClosed	talk/base/httpclient.cc	/^void HttpClient::onHttpClosed(HttpError err) {$/;"	f	class:talk_base::HttpClient
onHttpClosed	talk/base/httpserver.cc	/^HttpServer::Connection::onHttpClosed(HttpError err) {$/;"	f	class:talk_base::HttpServer::Connection
onHttpComplete	talk/base/httpclient.cc	/^void HttpClient::onHttpComplete(HttpMode mode, HttpError err) {$/;"	f	class:talk_base::HttpClient
onHttpComplete	talk/base/httpserver.cc	/^HttpServer::Connection::onHttpComplete(HttpMode mode, HttpError err) {$/;"	f	class:talk_base::HttpServer::Connection
onHttpHeaderComplete	talk/base/httpclient.cc	/^HttpError HttpClient::onHttpHeaderComplete(bool chunked, size_t& data_size) {$/;"	f	class:talk_base::HttpClient
onHttpHeaderComplete	talk/base/httpserver.cc	/^HttpServer::Connection::onHttpHeaderComplete(bool chunked, size_t& data_size) {$/;"	f	class:talk_base::HttpServer::Connection
onHttpRecvComplete	talk/base/httpbase.cc	/^HttpBase::onHttpRecvComplete(HttpError err) {$/;"	f	class:talk_base::HttpBase
onHttpRecvData	talk/base/httpbase.cc	/^HttpBase::onHttpRecvData(const char* data, size_t len, size_t& read) {$/;"	f	class:talk_base::HttpBase
onHttpRecvHeader	talk/base/httpbase.cc	/^HttpBase::onHttpRecvHeader(const char* name, size_t nlen, const char* value,$/;"	f	class:talk_base::HttpBase
onHttpRecvHeaderComplete	talk/base/httpbase.cc	/^HttpBase::onHttpRecvHeaderComplete(bool chunked, size_t& data_size) {$/;"	f	class:talk_base::HttpBase
onHttpRecvLeader	talk/base/httpbase.cc	/^HttpBase::onHttpRecvLeader(const char* line, size_t len) {$/;"	f	class:talk_base::HttpBase
on_dtmf_received	talk/third_party/mediastreamer/audiostream.c	/^static void on_dtmf_received(RtpSession *s,gint dtmf,gpointer user_data)$/;"	f	file:
on_timestamp_jump	talk/third_party/mediastreamer/audiostream.c	/^static void on_timestamp_jump(RtpSession *s,guint32* ts, gpointer user_data)$/;"	f	file:
open	talk/third_party/mediastreamer/jackcard.h	/^  gboolean open;$/;"	m	struct:__anon42
operator !=	talk/base/socketaddress.h	/^  inline bool operator !=(const SocketAddress& addr) const {$/;"	f	class:talk_base::SocketAddress
operator !=	talk/xmllite/qname.h	/^  bool operator!=(const QName & other) const { return !operator==(other); }$/;"	f	class:buzz::QName
operator !=	talk/xmpp/jid.h	/^  bool operator!=(const Jid & other) const { return !operator==(other); }$/;"	f	class:buzz::Jid
operator ()	talk/base/httpcommon.h	/^  bool operator()(const std::string& lhs, const std::string& rhs) const {$/;"	f	struct:talk_base::iless
operator ()	talk/base/natserver.cc	/^bool AddrCmp::operator()($/;"	f	class:talk_base::AddrCmp
operator ()	talk/base/natserver.cc	/^bool RouteCmp::operator()($/;"	f	class:talk_base::RouteCmp
operator ()	talk/base/natserver.cc	/^size_t AddrCmp::operator()(const SocketAddress& a) const {$/;"	f	class:talk_base::AddrCmp
operator ()	talk/base/natserver.cc	/^size_t RouteCmp::operator()(const SocketAddressPair& r) const {$/;"	f	class:talk_base::RouteCmp
operator ()	talk/base/sigslot.h	/^		void operator()()$/;"	f	class:sigslot::signal0
operator ()	talk/base/sigslot.h	/^		void operator()(arg1_type a1)$/;"	f	class:sigslot::signal1
operator ()	talk/base/sigslot.h	/^		void operator()(arg1_type a1, arg2_type a2)$/;"	f	class:sigslot::signal2
operator ()	talk/base/sigslot.h	/^		void operator()(arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:sigslot::signal3
operator ()	talk/base/sigslot.h	/^		void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)$/;"	f	class:sigslot::signal4
operator ()	talk/base/sigslot.h	/^		void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal5
operator ()	talk/base/sigslot.h	/^		void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal6
operator ()	talk/base/sigslot.h	/^		void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal7
operator ()	talk/base/sigslot.h	/^		void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal8
operator ()	talk/base/virtualsocketserver.cc	/^  bool operator ()(const VirtualSocketServer::Point& p1, const VirtualSocketServer::Point& p2) {$/;"	f	struct:talk_base::FunctionDomainCmp
operator ()	talk/base/virtualsocketserver.cc	/^  bool operator ()(const VirtualSocketServer::Point& p1, double v2) {$/;"	f	struct:talk_base::FunctionDomainCmp
operator ()	talk/base/virtualsocketserver.cc	/^  bool operator ()(double v1, const VirtualSocketServer::Point& p2) {$/;"	f	struct:talk_base::FunctionDomainCmp
operator ()	talk/p2p/base/p2ptransportchannel.cc	/^  bool operator()(const cricket::Connection *ca, $/;"	f	class:__anon1::ConnectionCompare
operator ()	talk/session/phone/phonesessionclient.h	/^    bool operator()(Codec a, Codec b) {$/;"	f	struct:cricket::PhoneSessionDescription::PreferenceSort
operator *	talk/base/linked_ptr.h	/^    X& operator*()  const throw()   {return *itsPtr;}$/;"	f	class:talk_base::linked_ptr
operator *	talk/base/scoped_ptr.h	/^  T& operator*() const {$/;"	f	class:talk_base::scoped_ptr
operator *	talk/base/scoped_ptr.h	/^  T& operator*() const {$/;"	f	class:talk_base::scoped_ptr_malloc
operator ->	talk/base/linked_ptr.h	/^    X* operator->() const throw()   {return itsPtr;}$/;"	f	class:talk_base::linked_ptr
operator ->	talk/base/scoped_ptr.h	/^  T* operator->() const  {$/;"	f	class:talk_base::scoped_ptr
operator ->	talk/base/scoped_ptr.h	/^  T* operator->() const {$/;"	f	class:talk_base::scoped_ptr_malloc
operator <	talk/base/messagequeue.h	/^  bool operator< (const DelayedMessage& dmsg) const {$/;"	f	class:talk_base::DelayedMessage
operator <	talk/base/socketaddress.cc	/^bool SocketAddress::operator <(const SocketAddress& addr) const {$/;"	f	class:talk_base::SocketAddress
operator <	talk/base/socketaddresspair.cc	/^bool SocketAddressPair::operator <(const SocketAddressPair& p) const {$/;"	f	class:talk_base::SocketAddressPair
operator <	talk/p2p/base/sessionid.h	/^  bool operator <(const SessionID& sid) const {$/;"	f	class:cricket::SessionID
operator <	talk/xmllite/qname.h	/^  bool operator<(const QName & other) const { return Compare(other) < 0; }$/;"	f	class:buzz::QName
operator <	talk/xmpp/jid.h	/^  bool operator<(const Jid & other) const { return Compare(other) < 0; };$/;"	f	class:buzz::Jid
operator =	talk/base/convert.h	/^  inline Utf8& operator =(const CString & str) {$/;"	f	class:Utf8
operator =	talk/base/convert.h	/^inline Utf8& operator =(const wchar_t *str) {$/;"	f	class:Utf8
operator =	talk/base/cryptstring.h	/^  CryptString & operator=(const CryptString & other) {$/;"	f	class:talk_base::CryptString
operator =	talk/base/httpcommon.cc	/^  inline Enum& operator=(E rhs) { val = rhs; return *this; }$/;"	f	struct:talk_base::Enum
operator =	talk/base/httpcommon.cc	/^  inline Enum& operator=(const std::string& rhs) { assign(rhs); return *this; }$/;"	f	struct:talk_base::Enum
operator =	talk/base/linked_ptr.h	/^    linked_ptr& operator=(const linked_ptr& r)$/;"	f	class:talk_base::linked_ptr
operator =	talk/base/linked_ptr.h	/^    template <class Y> linked_ptr& operator=(const linked_ptr<Y>& r)$/;"	f	class:talk_base::linked_ptr
operator =	talk/base/socketaddress.cc	/^SocketAddress& SocketAddress::operator=(const SocketAddress& addr) {$/;"	f	class:talk_base::SocketAddress
operator =	talk/p2p/base/sessionid.h	/^  SessionID& operator =(const SessionID& sid) {$/;"	f	class:cricket::SessionID
operator =	talk/xmllite/qname.h	/^  QName & operator=(const QName & qn) {$/;"	f	class:buzz::QName
operator =	talk/xmpp/jid.h	/^  Jid & operator=(const Jid & jid) {$/;"	f	class:buzz::Jid
operator ==	talk/base/socketaddress.cc	/^bool SocketAddress::operator ==(const SocketAddress& addr) const {$/;"	f	class:talk_base::SocketAddress
operator ==	talk/base/socketaddresspair.cc	/^bool SocketAddressPair::operator ==(const SocketAddressPair& p) const {$/;"	f	class:talk_base::SocketAddressPair
operator ==	talk/p2p/base/sessionid.h	/^  bool operator ==(const SessionID& sid) const {$/;"	f	class:cricket::SessionID
operator ==	talk/p2p/client/basicportallocator.h	/^    bool operator==(Port * rhs) const { return (port == rhs); }$/;"	f	struct:cricket::BasicPortAllocatorSession::PortData
operator ==	talk/xmllite/qname.cc	/^QName::operator==(const QName & other) const {$/;"	f	class:buzz::QName
operator ==	talk/xmpp/jid.cc	/^Jid::operator==(const Jid & other) const {$/;"	f	class:buzz::Jid
operator >	talk/xmpp/jid.h	/^  bool operator>(const Jid & other) const { return Compare(other) > 0; };$/;"	f	class:buzz::Jid
operator E&	talk/base/httpcommon.cc	/^  inline operator E&() { return val; }$/;"	f	struct:talk_base::Enum
operator []	talk/base/scoped_ptr.h	/^  T& operator[](std::ptrdiff_t i) const {$/;"	f	class:talk_base::scoped_array
operator []	talk/base/sec_buffer.h	/^  SecBuffer &operator[] (size_t num) {$/;"	f	class:talk_base::CSecBufferBundle
operator []	talk/base/sec_buffer.h	/^  const SecBuffer &operator[] (size_t num) const {$/;"	f	class:talk_base::CSecBufferBundle
operator const CString &	talk/base/convert.h	/^  inline operator const CString & () const {$/;"	f	class:Utf16
operator const std::string &	talk/base/convert.h	/^  inline operator const std::string & () const {$/;"	f	class:Utf8
options	talk/p2p/base/relayport.h	/^  const std::vector<OptionValue>& options() const { return options_; }$/;"	f	class:cricket::RelayPort
options_	talk/p2p/base/p2ptransportchannel.h	/^  OptionMap options_;$/;"	m	class:cricket::P2PTransportChannel
options_	talk/p2p/base/relayport.h	/^  std::vector<OptionValue> options_;$/;"	m	class:cricket::RelayPort
orig	talk/third_party/mediastreamer/mstimer.h	/^	struct timeval orig;$/;"	m	struct:_MSTimer	typeref:struct:_MSTimer::timeval
origin_port	talk/p2p/base/p2ptransportchannel.h	/^  Port* origin_port() { return origin_port_; }$/;"	f	class:cricket::RemoteCandidate
origin_port_	talk/p2p/base/p2ptransportchannel.h	/^  Port* origin_port_;$/;"	m	class:cricket::RemoteCandidate
oss_card_can_read	talk/third_party/mediastreamer/osscard.c	/^gboolean oss_card_can_read(OssCard *obj)$/;"	f
oss_card_close	talk/third_party/mediastreamer/osscard.c	/^void oss_card_close(OssCard *obj)$/;"	f
oss_card_create_read_filter	talk/third_party/mediastreamer/osscard.c	/^MSFilter *oss_card_create_read_filter(OssCard *card)$/;"	f
oss_card_create_write_filter	talk/third_party/mediastreamer/osscard.c	/^MSFilter *oss_card_create_write_filter(OssCard *card)$/;"	f
oss_card_destroy	talk/third_party/mediastreamer/osscard.c	/^void oss_card_destroy(OssCard *obj)$/;"	f
oss_card_get_level	talk/third_party/mediastreamer/osscard.c	/^gint oss_card_get_level(OssCard *obj,gint way)$/;"	f
oss_card_manager_init	talk/third_party/mediastreamer/osscard.c	/^gint oss_card_manager_init(SndCardManager *manager, gint tabindex)$/;"	f
oss_card_new	talk/third_party/mediastreamer/osscard.c	/^SndCard * oss_card_new(char *devname, char *mixdev_name)$/;"	f
oss_card_open	talk/third_party/mediastreamer/osscard.c	/^int oss_card_open(OssCard *obj,int bits,int stereo,int rate)$/;"	f
oss_card_probe	talk/third_party/mediastreamer/osscard.c	/^int oss_card_probe(OssCard *obj,int bits,int stereo,int rate)$/;"	f
oss_card_read	talk/third_party/mediastreamer/osscard.c	/^int oss_card_read(OssCard *obj,char *buf,int size)$/;"	f
oss_card_set_level	talk/third_party/mediastreamer/osscard.c	/^void oss_card_set_level(OssCard *obj,gint way,gint a)$/;"	f
oss_card_set_source	talk/third_party/mediastreamer/osscard.c	/^void oss_card_set_source(OssCard *obj,int source)$/;"	f
oss_card_write	talk/third_party/mediastreamer/osscard.c	/^int oss_card_write(OssCard *obj,char *buf,int size)$/;"	f
oss_open	talk/third_party/mediastreamer/osscard.c	/^int oss_open(OssCard *obj, int bits,int stereo, int rate)$/;"	f
oss_read_info	talk/third_party/mediastreamer/msossread.c	/^MSFilterInfo oss_read_info={$/;"	v
oss_write_info	talk/third_party/mediastreamer/msosswrite.c	/^MSFilterInfo oss_write_info={$/;"	v
outbuf	talk/base/schanneladapter.cc	/^  SChannelBuffer inbuf, outbuf, readable;$/;"	m	struct:talk_base::SChannelAdapter::SSLImpl	file:
outbuf_	talk/base/asynctcpsocket.h	/^  char* inbuf_, * outbuf_;$/;"	m	class:talk_base::AsyncTCPSocket
outer_	talk/xmpp/xmppengineimpl.h	/^    XmppEngineImpl * const outer_;$/;"	m	class:buzz::XmppEngineImpl::StanzaParseHandler
outer_	talk/xmpp/xmppstanzaparser.h	/^    XmppStanzaParser * const outer_;$/;"	m	class:buzz::XmppStanzaParser::ParseHandler
outf	talk/third_party/mediastreamer/msspeexdec.h	/^	MSFifo *outf[1];	$/;"	m	struct:_MSSpeexDec
outfifos	talk/third_party/mediastreamer/msfilter.h	/^	MSFifo **outfifos;  \/*pointer to a table of pointer to output fifos*\/$/;"	m	struct:_MSFilter
outpos_	talk/base/asynctcpsocket.h	/^  size_t insize_, inpos_, outsize_, outpos_;$/;"	m	class:talk_base::AsyncTCPSocket
output	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *output;$/;"	m	struct:_VideoStream
output_	talk/xmpp/xmppengineimpl.h	/^  scoped_ptr<std::stringstream> output_;$/;"	m	class:buzz::XmppEngineImpl
output_handler_	talk/xmpp/xmppengineimpl.h	/^  XmppOutputHandler* output_handler_;$/;"	m	class:buzz::XmppEngineImpl
output_level	talk/session/phone/audiomonitor.h	/^  int output_level;$/;"	m	struct:cricket::AudioInfo
output_pix_fmt	talk/third_party/mediastreamer/msavdecoder.h	/^	int output_pix_fmt;$/;"	m	struct:_MSAVDecoder
outputs	talk/third_party/mediastreamer/msvideosource.h	/^    MSQueue *outputs[MSVIDEOSOURCE_MAX_OUTPUTS];$/;"	m	struct:_MSVideoSource
outq	talk/third_party/mediastreamer/msspeexenc.h	/^	MSQueue *outq[1];	\/* speex has an output q because it can be variable bit rate *\/$/;"	m	struct:_MSSpeexEnc
outqueues	talk/third_party/mediastreamer/msfilter.h	/^	MSQueue **outqueues;  \/*pointer to a table of pointer to output queues*\/$/;"	m	struct:_MSFilter
outsize_	talk/base/asynctcpsocket.h	/^  size_t insize_, inpos_, outsize_, outpos_;$/;"	m	class:talk_base::AsyncTCPSocket
over_pcmdev	talk/third_party/mediastreamer/alsacard.c	/^static gchar *over_pcmdev=NULL;$/;"	v	file:
overlay	talk/third_party/mediastreamer/mssdlout.h	/^	SDL_Overlay *overlay;$/;"	m	struct:_MSSdlOut
p	talk/base/firewallsocketserver.h	/^    FirewallProtocol p;$/;"	m	struct:talk_base::FirewallSocketServer::Rule
pFirstAttr_	talk/xmllite/xmlelement.h	/^  XmlAttr * pFirstAttr_;$/;"	m	class:buzz::XmlElement
pFirstChild_	talk/xmllite/xmlelement.h	/^  XmlChild * pFirstChild_;$/;"	m	class:buzz::XmlElement
pLastAttr_	talk/xmllite/xmlelement.h	/^  XmlAttr * pLastAttr_;$/;"	m	class:buzz::XmlElement
pLastChild_	talk/xmllite/xmlelement.h	/^  XmlChild * pLastChild_;$/;"	m	class:buzz::XmlElement
pNextAttr_	talk/xmllite/xmlelement.h	/^  XmlAttr * pNextAttr_;$/;"	m	class:buzz::XmlAttr
pNextChild_	talk/xmllite/xmlelement.h	/^  XmlChild * pNextChild_;$/;"	m	class:buzz::XmlChild
packet	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::packet(uint32 seq, uint8 flags, const char * data, uint32 len) {$/;"	f	class:cricket::PseudoTcp
packet_size	talk/third_party/mediastreamer/msrtpsend.h	/^	gint packet_size;$/;"	m	struct:_MSRtpSend
packetsReceived	talk/session/phone/mediachannel.h	/^	int packetsReceived;$/;"	m	struct:cricket::MediaInfo
packetsSent	talk/session/phone/mediachannel.h	/^	int packetsSent;$/;"	m	struct:cricket::MediaInfo
packets_	talk/base/testclient.h	/^  std::vector<Packet*>* packets_;$/;"	m	class:talk_base::TestClient
packets_	talk/base/virtualsocketserver.cc	/^  std::vector<Packet*>* packets_;$/;"	m	class:talk_base::VirtualSocket	file:
parent	talk/third_party/mediastreamer/alsacard.h	/^	SndCard parent;$/;"	m	struct:_AlsaCard
parent	talk/third_party/mediastreamer/jackcard.h	/^  SndCard parent;$/;"	m	struct:_JackCard
parent	talk/third_party/mediastreamer/mssdlout.h	/^	MSFilter parent;$/;"	m	struct:_MSSdlOut
parent	talk/third_party/mediastreamer/msspeexdec.h	/^	MSFilter parent;$/;"	m	struct:_MSSpeexDec
parent	talk/third_party/mediastreamer/msspeexdec.h	/^	MSFilterClass parent;$/;"	m	struct:_MSSpeexDecClass
parent	talk/third_party/mediastreamer/msspeexenc.h	/^	MSFilter parent;$/;"	m	struct:_MSSpeexEnc
parent	talk/third_party/mediastreamer/msspeexenc.h	/^	MSFilterClass parent;$/;"	m	struct:_MSSpeexEncClass
parent	talk/third_party/mediastreamer/msv4l.h	/^	MSVideoSource parent;$/;"	m	struct:_MSV4l
parent	talk/third_party/mediastreamer/osscard.h	/^	SndCard parent;$/;"	m	struct:_OssCard
parent_	talk/base/signalthread.h	/^    SignalThread* parent_;$/;"	m	class:talk_base::SignalThread::Worker
parent_	talk/base/task.h	/^  Task *parent_;$/;"	m	class:talk_base::Task
parent_	talk/base/win32socketserver.cc	/^  Win32Socket * parent_;$/;"	m	class:talk_base::Win32Socket::EventSink	file:
parent_	talk/session/tunnel/pseudotcpchannel.cc	/^  PseudoTcpChannel* parent_;$/;"	m	class:cricket::PseudoTcpChannel::InternalStream	file:
parent_class	talk/third_party/mediastreamer/msAlawdec.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSALAWDecoderClass
parent_class	talk/third_party/mediastreamer/msAlawenc.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSALAWEncoderClass
parent_class	talk/third_party/mediastreamer/msGSMdecoder.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSGSMDecoderClass
parent_class	talk/third_party/mediastreamer/msGSMencoder.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSGSMEncoderClass
parent_class	talk/third_party/mediastreamer/msLPC10decoder.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSLPC10DecoderClass
parent_class	talk/third_party/mediastreamer/msLPC10encoder.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSLPC10EncoderClass
parent_class	talk/third_party/mediastreamer/msMUlawdec.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSMULAWDecoderClass
parent_class	talk/third_party/mediastreamer/msMUlawenc.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSMULAWEncoderClass
parent_class	talk/third_party/mediastreamer/msavdecoder.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSAVDecoderClass
parent_class	talk/third_party/mediastreamer/msavencoder.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSAVEncoderClass
parent_class	talk/third_party/mediastreamer/mscopy.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSCopyClass
parent_class	talk/third_party/mediastreamer/msfdispatcher.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSFdispatcherClass
parent_class	talk/third_party/mediastreamer/msilbcdec.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSILBCDecoderClass
parent_class	talk/third_party/mediastreamer/msilbcenc.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSILBCEncoderClass
parent_class	talk/third_party/mediastreamer/msnosync.h	/^	MSSyncClass parent_class;$/;"	m	struct:_MSNoSyncClass
parent_class	talk/third_party/mediastreamer/msossread.h	/^	MSSoundReadClass parent_class;$/;"	m	struct:_MSOssReadClass
parent_class	talk/third_party/mediastreamer/msosswrite.h	/^	MSSoundWriteClass parent_class;$/;"	m	struct:_MSOssWriteClass
parent_class	talk/third_party/mediastreamer/msqdispatcher.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSQdispatcherClass
parent_class	talk/third_party/mediastreamer/msread.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSReadClass
parent_class	talk/third_party/mediastreamer/msringplayer.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSRingPlayerClass
parent_class	talk/third_party/mediastreamer/msrtprecv.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSRtpRecvClass
parent_class	talk/third_party/mediastreamer/msrtpsend.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSRtpSendClass
parent_class	talk/third_party/mediastreamer/mssdlout.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSSdlOutClass
parent_class	talk/third_party/mediastreamer/mssoundread.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSSoundReadClass
parent_class	talk/third_party/mediastreamer/mssoundwrite.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSSoundWriteClass
parent_class	talk/third_party/mediastreamer/mstimer.h	/^	MSSyncClass parent_class;$/;"	m	struct:_MSTimerClass
parent_class	talk/third_party/mediastreamer/mstruespeechdecoder.h	/^  MSFilterClass parent_class;$/;"	m	struct:_MSTrueSpeechDecoderClass
parent_class	talk/third_party/mediastreamer/mstruespeechencoder.h	/^  MSFilterClass parent_class;$/;"	m	struct:_MSTrueSpeechEncoderClass
parent_class	talk/third_party/mediastreamer/msv4l.h	/^	MSVideoSourceClass parent_class;$/;"	m	struct:_MSV4lClass
parent_class	talk/third_party/mediastreamer/msvideosource.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSVideoSourceClass
parent_class	talk/third_party/mediastreamer/mswrite.h	/^	MSFilterClass parent_class;$/;"	m	struct:_MSWriteClass
parent_folder	talk/base/pathutils.cc	/^std::string Pathname::parent_folder() const {$/;"	f	class:talk_base::Pathname
parse	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::parse(const uint8 * buffer, uint32 size) {$/;"	f	class:cricket::PseudoTcp
parseLeader	talk/base/httpcommon.cc	/^HttpRequestData::parseLeader(const char* line, size_t len) {$/;"	f	class:talk_base::HttpRequestData
parseLeader	talk/base/httpcommon.cc	/^HttpResponseData::parseLeader(const char* line, size_t len) {$/;"	f	class:talk_base::HttpResponseData
parser_	talk/xmllite/xmlparser.h	/^    const XmlParser * parser_;$/;"	m	class:buzz::XmlParser::ParseContext
parser_	talk/xmpp/xmppstanzaparser.h	/^  XmlParser parser_;$/;"	m	class:buzz::XmppStanzaParser
pass	talk/xmpp/xmppclientsettings.h	/^  const talk_base::CryptString & pass() const { return pass_; }$/;"	f	class:buzz::XmppClientSettings
pass_	talk/base/socketadapters.h	/^  CryptString pass_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
pass_	talk/base/socketadapters.h	/^  CryptString pass_;$/;"	m	class:talk_base::AsyncSocksProxySocket
pass_	talk/xmpp/xmppclient.cc	/^  talk_base::CryptString pass_;$/;"	m	class:buzz::XmppClient::Private	file:
pass_	talk/xmpp/xmppclientsettings.h	/^  talk_base::CryptString pass_;$/;"	m	class:buzz::XmppClientSettings
passwd_	talk/examples/login/xmppauth.h	/^  talk_base::CryptString passwd_;$/;"	m	class:XmppAuth
password	talk/base/cryptstring.h	/^  const std::string& password() const { return password_; }$/;"	f	class:talk_base::InsecureCryptStringImpl
password	talk/base/cryptstring.h	/^  std::string& password() { return password_; }$/;"	f	class:talk_base::InsecureCryptStringImpl
password	talk/base/proxyinfo.h	/^  CryptString password;$/;"	m	struct:talk_base::ProxyInfo
password	talk/p2p/base/candidate.h	/^  const std::string & password() const { return password_; }$/;"	f	class:cricket::Candidate
password	talk/p2p/base/port.h	/^  const std::string& password() const { return password_; }$/;"	f	class:cricket::Port
password	talk/p2p/base/relayserver.h	/^  const std::string& password() { return password_; }$/;"	f	class:cricket::RelayServerBinding
password	talk/p2p/client/basicportallocator.h	/^  std::string password;$/;"	m	struct:cricket::PortConfiguration
password_	talk/base/cryptstring.h	/^  std::string password_;$/;"	m	class:talk_base::InsecureCryptStringImpl
password_	talk/p2p/base/candidate.h	/^  std::string password_;$/;"	m	class:cricket::Candidate
password_	talk/p2p/base/port.h	/^  std::string password_;$/;"	m	class:cricket::Port
password_	talk/p2p/base/relayserver.h	/^  std::string password_;$/;"	m	class:cricket::RelayServerBinding
password_	talk/xmpp/plainsaslhandler.h	/^  talk_base::CryptString password_;$/;"	m	class:buzz::PlainSaslHandler
password_	talk/xmpp/saslplainmechanism.h	/^  talk_base::CryptString password_;$/;"	m	class:buzz::SaslPlainMechanism
password_	talk/xmpp/xmppengineimpl.h	/^  std::string password_;$/;"	m	class:buzz::XmppEngineImpl
path	talk/base/httpcommon.h	/^  std::string path;$/;"	m	struct:talk_base::HttpRequestData
path_	talk/base/httpcommon.h	/^  const string& path_() const { return m_path; }$/;"	f	class:talk_base::Url
pathname	talk/base/pathutils.cc	/^std::string Pathname::pathname() const {$/;"	f	class:talk_base::Pathname
paused_	talk/session/phone/voicechannel.h	/^  bool paused_;$/;"	m	class:cricket::VoiceChannel
pcmdev	talk/third_party/mediastreamer/alsacard.h	/^	gchar *pcmdev;$/;"	m	struct:_AlsaCard
pcp_CXXFLAGS	talk/examples/pcp/Makefile	/^pcp_CXXFLAGS = $(AM_CXXFLAGS)$/;"	m
pcp_DEPENDENCIES	talk/examples/pcp/Makefile	/^pcp_DEPENDENCIES =  \\$/;"	m
pcp_LDADD	talk/examples/pcp/Makefile	/^pcp_LDADD = $(top_srcdir)\/talk\/examples\/login\/libcricketexampleslogin.la \\$/;"	m
pcp_OBJECTS	talk/examples/pcp/Makefile	/^pcp_OBJECTS = $(am_pcp_OBJECTS)$/;"	m
pcp_SOURCES	talk/examples/pcp/Makefile	/^pcp_SOURCES = pcp_main.cc$/;"	m
pcrit_	talk/base/criticalsection.h	/^  CriticalSection *pcrit_;$/;"	m	class:talk_base::CritScope
pctx_	talk/xmpp/xmpplogintask.h	/^  XmppEngineImpl * pctx_;$/;"	m	class:buzz::XmppLoginTask
pdata	talk/base/messagequeue.h	/^  MessageData *pdata;$/;"	m	struct:talk_base::Message
pelCurrent_	talk/xmllite/xmlbuilder.h	/^  XmlElement * pelCurrent_;$/;"	m	class:buzz::XmlBuilder
pelFeatures_	talk/xmpp/xmpplogintask.h	/^  scoped_ptr<XmlElement> pelFeatures_;$/;"	m	class:buzz::XmppLoginTask
pelRoot_	talk/xmllite/xmlbuilder.h	/^  scoped_ptr<XmlElement> pelRoot_;$/;"	m	class:buzz::XmlBuilder
pelStanza_	talk/xmpp/xmpplogintask.h	/^  const XmlElement * pelStanza_;$/;"	m	class:buzz::XmppLoginTask
pending_options_	talk/p2p/base/transportchannelproxy.h	/^  OptionList pending_options_;$/;"	m	class:cricket::TransportChannelProxy
pending_read_event_	talk/session/tunnel/pseudotcpchannel.h	/^  bool stream_readable_, pending_read_event_;$/;"	m	class:cricket::PseudoTcpChannel
per_x_seconds_	talk/xmpp/ratelimitmanager.h	/^    int per_x_seconds_; \/\/ interval size for rate limit$/;"	m	class:buzz::RateLimitManager::RateLimit
pf_	talk/base/physicalsocketserver.cc	/^  bool *pf_;$/;"	m	class:talk_base::Signaler	file:
pfnInternetGetProxyInfo	talk/base/proxydetect.cc	/^typedef BOOL (STDAPICALLTYPE * pfnInternetGetProxyInfo)$/;"	t	file:
pfnWinHttpCloseHandle	talk/base/proxydetect.cc	/^typedef BOOL (STDAPICALLTYPE * pfnWinHttpCloseHandle)$/;"	t	file:
pfnWinHttpGetIEProxyConfig	talk/base/proxydetect.cc	/^typedef BOOL (STDAPICALLTYPE * pfnWinHttpGetIEProxyConfig)$/;"	t	file:
pfnWinHttpGetProxyForUrl	talk/base/proxydetect.cc	/^typedef BOOL (STDAPICALLTYPE * pfnWinHttpGetProxyForUrl)$/;"	t	file:
pfnWinHttpOpen	talk/base/proxydetect.cc	/^typedef HINTERNET (WINAPI * pfnWinHttpOpen)$/;"	t	file:
phandler	talk/base/messagequeue.h	/^  MessageHandler *phandler;$/;"	m	struct:talk_base::Message
phone_capability	talk/examples/login/status.h	/^  bool phone_capability() const { return phone_capability_; }$/;"	f	class:buzz::Status
phone_capability_	talk/examples/login/status.h	/^  bool phone_capability_;$/;"	m	class:buzz::Status
phone_client	talk/examples/call/callclient.h	/^  cricket::PhoneSessionClient* phone_client() const { return phone_client_; }$/;"	f	class:CallClient
phone_client_	talk/examples/call/callclient.h	/^  cricket::PhoneSessionClient* phone_client_;$/;"	m	class:CallClient
phys_ports	talk/third_party/mediastreamer/jackcard.h	/^  const char **phys_ports;$/;"	m	struct:__anon42
pict	talk/third_party/mediastreamer/msv4l.h	/^	struct video_picture pict;$/;"	m	struct:_MSV4l	typeref:struct:_MSV4l::video_picture
pinging_started_	talk/p2p/base/p2ptransportchannel.h	/^  bool pinging_started_;  \/\/ indicates whether StartGetAllCandidates has been called$/;"	m	class:cricket::P2PTransportChannel
pings_since_last_response_	talk/p2p/base/port.h	/^  std::vector<uint32> pings_since_last_response_;$/;"	m	class:cricket::Connection
pkgdatadir	talk/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/base/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/examples/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/examples/call/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/examples/login/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/examples/pcp/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/p2p/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/p2p/base/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/p2p/client/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/session/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/session/fileshare/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/session/phone/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/session/tunnel/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/third_party/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/third_party/gips/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/third_party/mediastreamer/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/xmllite/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgdatadir	talk/xmpp/Makefile	/^pkgdatadir = $(datadir)\/libjingle$/;"	m
pkgincludedir	talk/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/base/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/examples/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/examples/call/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/examples/login/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/examples/pcp/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/p2p/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/p2p/base/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/p2p/client/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/session/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/session/fileshare/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/session/phone/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/session/tunnel/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/third_party/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/third_party/gips/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/third_party/mediastreamer/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/xmllite/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkgincludedir	talk/xmpp/Makefile	/^pkgincludedir = $(includedir)\/libjingle$/;"	m
pkglibdir	talk/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/base/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/examples/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/examples/call/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/examples/login/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/examples/pcp/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/p2p/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/p2p/base/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/p2p/client/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/session/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/session/fileshare/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/session/phone/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/session/tunnel/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/third_party/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/third_party/gips/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/third_party/mediastreamer/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/xmllite/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
pkglibdir	talk/xmpp/Makefile	/^pkglibdir = $(libdir)\/libjingle$/;"	m
play_	talk/session/phone/linphonemediaengine.h	/^  bool play_;$/;"	m	class:cricket::LinphoneMediaChannel
policy_	talk/base/winfirewall.h	/^  INetFwPolicy * policy_;$/;"	m	class:talk_base::WinFirewall
pool_	talk/base/httpclient.h	/^  StreamPool* pool_;$/;"	m	class:talk_base::HttpClient
pool_	talk/base/socketpool.h	/^  StreamPool* pool_;$/;"	m	class:talk_base::LoggingPoolAdapter
pool_	talk/base/socketpool.h	/^  StreamPool* pool_;$/;"	m	class:talk_base::StreamCache
pool_	talk/session/fileshare/fileshare.h	/^  talk_base::StreamCache pool_;$/;"	m	class:cricket::FileShareSession
port	talk/base/asynchttprequest.h	/^  int port() { return port_; }$/;"	f	class:talk_base::AsyncHttpRequest
port	talk/base/httpcommon.h	/^  uint16 port() const { return m_port; }$/;"	f	class:talk_base::Url
port	talk/base/socketaddress.cc	/^uint16 SocketAddress::port() const {$/;"	f	class:talk_base::SocketAddress
port	talk/base/win32socketserver.cc	/^  uint16 port;$/;"	m	struct:talk_base::Win32Socket::DnsLookup	file:
port	talk/p2p/base/port.h	/^  Port* port() { return port_; }$/;"	f	class:cricket::Connection
port	talk/p2p/base/port.h	/^  const Port* port() const { return port_; }$/;"	f	class:cricket::Connection
port	talk/p2p/base/relayport.cc	/^  RelayPort* port() { return port_; }$/;"	f	class:cricket::RelayEntry
port	talk/p2p/base/stun.h	/^  uint16 port() const { return port_; }$/;"	f	class:cricket::StunAddressAttribute
port	talk/p2p/client/basicportallocator.h	/^    Port * port;$/;"	m	struct:cricket::BasicPortAllocatorSession::PortData
port	talk/third_party/mediastreamer/jackcard.h	/^  jack_port_t *port;$/;"	m	struct:__anon42
port1	talk/p2p/base/port_unittest.cc	/^  Port* port1;$/;"	m	struct:Foo	file:
port2	talk/p2p/base/port_unittest.cc	/^  Port* port2;$/;"	m	struct:Foo	file:
port_	talk/base/asynchttprequest.h	/^  int port_;$/;"	m	class:talk_base::AsyncHttpRequest
port_	talk/base/socketaddress.h	/^  uint16 port_;$/;"	m	class:talk_base::SocketAddress
port_	talk/p2p/base/port.h	/^  Port* port_;$/;"	m	class:cricket::Connection
port_	talk/p2p/base/rawtransportchannel.h	/^  Port* port_;$/;"	m	class:cricket::RawTransportChannel
port_	talk/p2p/base/relayport.cc	/^  RelayPort* port_;$/;"	m	class:cricket::RelayEntry	file:
port_	talk/p2p/base/stun.h	/^  uint16 port_;$/;"	m	class:cricket::StunAddressAttribute
port_	talk/p2p/base/stunport.cc	/^  StunPort* port_;$/;"	m	class:cricket::StunPortBindingRequest	file:
port_allocator	talk/p2p/base/sessionmanager.h	/^  PortAllocator *port_allocator() const { return allocator_; }$/;"	f	class:cricket::SessionManager
port_allocator_	talk/examples/call/callclient.h	/^  cricket::HttpPortAllocator* port_allocator_;$/;"	m	class:CallClient
port_allocator_	talk/examples/pcp/pcp_main.cc	/^  talk_base::scoped_ptr<cricket::HttpPortAllocator> port_allocator_;$/;"	m	class:FileShareClient	file:
port_unittest_DEPENDENCIES	talk/p2p/base/Makefile	/^port_unittest_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
port_unittest_LDADD	talk/p2p/base/Makefile	/^port_unittest_LDADD = $(P2PLIBS) $(TESTLIBS)$/;"	m
port_unittest_OBJECTS	talk/p2p/base/Makefile	/^port_unittest_OBJECTS = $(am_port_unittest_OBJECTS)$/;"	m
port_unittest_SOURCES	talk/p2p/base/Makefile	/^port_unittest_SOURCES = port_unittest.cc stunserver.cc relayserver.cc$/;"	m
ports	talk/p2p/client/basicportallocator.h	/^    PortList ports;$/;"	m	struct:cricket::PortConfiguration::RelayServer
ports_	talk/p2p/base/p2ptransportchannel.h	/^  std::vector<Port *> ports_;$/;"	m	class:cricket::P2PTransportChannel
ports_	talk/p2p/base/session_unittest.cc	/^  std::vector<Port*> ports_;$/;"	m	class:TestPortAllocatorSession	file:
ports_	talk/p2p/client/basicportallocator.h	/^  std::vector<PortData> ports_;$/;"	m	class:cricket::BasicPortAllocatorSession
potential_transports_	talk/p2p/base/session.h	/^  TransportList potential_transports_; \/\/ order implies preference$/;"	m	class:cricket::Session
pout_	talk/xmllite/xmlprinter.cc	/^  std::ostream *pout_;$/;"	m	class:buzz::XmlPrinterImpl	file:
pre_auth_	talk/xmpp/xmppclient.cc	/^  scoped_ptr<PreXmppAuth> pre_auth_;$/;"	m	class:buzz::XmppClient::Private	file:
pre_end	talk/third_party/mediastreamer/msfifo.h	/^	gchar * pre_end;  \/* the end of the buffer that is copied at the begginning when we wrap around*\/$/;"	m	struct:_MSFifo
pre_engine_error_	talk/xmpp/xmppclient.cc	/^  XmppEngine::Error pre_engine_error_;$/;"	m	class:buzz::XmppClient::Private	file:
pre_engine_subcode_	talk/xmpp/xmppclient.cc	/^  int pre_engine_subcode_;$/;"	m	class:buzz::XmppClient::Private	file:
preallocate	talk/p2p/base/stun.h	/^  bool preallocate() const { return preallocate_; }$/;"	f	class:cricket::StunTransportPrefsAttribute
preallocate_	talk/p2p/base/stun.h	/^  bool preallocate_;$/;"	m	class:cricket::StunTransportPrefsAttribute
pref	talk/session/phone/gipslitemediaengine.cc	/^struct CodecPref { const char* name; int clockrate; int pref; };$/;"	m	struct:__anon31::CodecPref	file:
pref_modifier	talk/p2p/client/basicportallocator.h	/^    float pref_modifier; \/\/ added to the protocol modifier to get the$/;"	m	struct:cricket::PortConfiguration::RelayServer
preference	talk/p2p/base/candidate.h	/^  const float preference() const { return preference_; }$/;"	f	class:cricket::Candidate
preference	talk/p2p/base/port.h	/^  float preference() const { return preference_; }$/;"	f	class:cricket::Port
preference	talk/session/phone/codec.h	/^  int preference;$/;"	m	struct:Codec
preference_	talk/p2p/base/candidate.h	/^  float preference_;$/;"	m	class:cricket::Candidate
preference_	talk/p2p/base/port.h	/^  float preference_;$/;"	m	class:cricket::Port
preference_str	talk/p2p/base/candidate.h	/^  const std::string preference_str() const {$/;"	f	class:cricket::Candidate
preference_type	talk/p2p/base/stun.h	/^  uint8 preference_type() const { return prefs_; }$/;"	f	class:cricket::StunTransportPrefsAttribute
prefix	talk/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/base/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/examples/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/examples/call/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/examples/login/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/examples/pcp/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/p2p/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/p2p/base/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/p2p/client/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/session/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/session/fileshare/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/session/phone/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/session/tunnel/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/third_party/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/third_party/gips/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/third_party/mediastreamer/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/xmllite/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	talk/xmpp/Makefile	/^prefix = \/usr\/local$/;"	m
prefs_	talk/p2p/base/stun.h	/^  uint8 prefs_;$/;"	m	class:cricket::StunTransportPrefsAttribute
prepDomain	talk/xmpp/jid.cc	/^Jid::prepDomain(const std::string str, std::string::const_iterator start, $/;"	f	class:buzz::Jid
prepDomainLabel	talk/xmpp/jid.cc	/^Jid::prepDomainLabel(const std::string str, std::string::const_iterator start, $/;"	f	class:buzz::Jid
prepDomainLabelAscii	talk/xmpp/jid.cc	/^Jid::prepDomainLabelAscii(char ch, bool *valid) {$/;"	f	class:buzz::Jid
prepNode	talk/xmpp/jid.cc	/^Jid::prepNode(const std::string str, std::string::const_iterator start, $/;"	f	class:buzz::Jid
prepNodeAscii	talk/xmpp/jid.cc	/^Jid::prepNodeAscii(char ch, bool *valid) {$/;"	f	class:buzz::Jid
prepResource	talk/xmpp/jid.cc	/^Jid::prepResource(const std::string str, std::string::const_iterator start, $/;"	f	class:buzz::Jid
prepResourceAscii	talk/xmpp/jid.cc	/^Jid::prepResourceAscii(char ch, bool *valid) {$/;"	f	class:buzz::Jid
prepare_get	talk/base/httpclient.cc	/^void HttpClient::prepare_get(const std::string& url) {$/;"	f	class:talk_base::HttpClient
prepare_post	talk/base/httpclient.cc	/^void HttpClient::prepare_post(const std::string& url,$/;"	f	class:talk_base::HttpClient
presence_push_	talk/examples/call/callclient.h	/^  buzz::PresencePushTask* presence_push_;$/;"	m	class:CallClient
prev	talk/third_party/mediastreamer/msbuffer.h	/^   struct _MSMessage *prev;  \/* MSMessage are queued into MSQueues *\/$/;"	m	struct:_MSMessage	typeref:struct:_MSMessage::_MSMessage
prev_data	talk/third_party/mediastreamer/msfifo.h	/^	void *prev_data;   \/*user data, usually the writing MSFilter*\/$/;"	m	struct:_MSFifo
prev_data	talk/third_party/mediastreamer/msqueue.h	/^	void *prev_data; \/*user data, usually the writting filter*\/$/;"	m	struct:_MSQueue
prev_ts	talk/third_party/mediastreamer/msrtprecv.h	/^	guint32 prev_ts;$/;"	m	struct:_MSRtpRecv
prev_wr_ptr	talk/third_party/mediastreamer/msfifo.h	/^	gchar * prev_wr_ptr;$/;"	m	struct:_MSFifo
preview_path	talk/session/fileshare/fileshare.h	/^    std::string preview_path;$/;"	m	struct:cricket::FileShareSession::FileShareDescription
preview_path_	talk/session/fileshare/fileshare.h	/^  std::string preview_path_;$/;"	m	class:cricket::FileShareSession
pri_	talk/examples/login/status.h	/^  int pri_;$/;"	m	class:buzz::Status
print_stream_	talk/base/logging.h	/^  std::ostringstream print_stream_;$/;"	m	class:talk_base::LogMessage
priority	talk/examples/login/status.h	/^  int priority() const { return pri_; }$/;"	f	class:buzz::Status
priority_	talk/base/thread.h	/^  ThreadPriority priority_;$/;"	m	class:talk_base::Thread
process	talk/base/httpbase.cc	/^HttpParser::process(const char* buffer, size_t len, size_t& processed,$/;"	f	class:talk_base::HttpParser
process	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::process(Segment& seg) {$/;"	f	class:cricket::PseudoTcp
process	talk/third_party/mediastreamer/jackcard.c	/^process (jack_nframes_t nframes, void *arg)$/;"	f
process	talk/third_party/mediastreamer/msfilter.h	/^	void (*process)(MSFilter *filter);$/;"	m	struct:_MSFilterClass
process_line	talk/base/httpbase.cc	/^HttpParser::process_line(const char* line, size_t len, HttpError& err) {$/;"	f	class:talk_base::HttpParser
profile_	talk/base/winfirewall.h	/^  INetFwProfile * profile_;$/;"	m	class:talk_base::WinFirewall
program_transform_name	talk/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/base/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/examples/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/examples/call/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/examples/login/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/examples/pcp/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/p2p/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/p2p/base/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/p2p/client/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/session/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/session/fileshare/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/session/phone/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/session/tunnel/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/third_party/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/third_party/gips/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/third_party/mediastreamer/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/xmllite/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	talk/xmpp/Makefile	/^program_transform_name = s,x,x,$/;"	m
prompt_	talk/examples/call/console.h	/^  std::string prompt_;$/;"	m	class:Console
prompting	talk/examples/call/console.h	/^  bool prompting() {return prompting_;}$/;"	f	class:Console
prompting_	talk/examples/call/console.h	/^  bool prompting_;$/;"	m	class:Console
proto	talk/p2p/base/port.h	/^  ProtocolType proto;$/;"	m	struct:cricket::ProtocolAddress
protocol	talk/p2p/base/candidate.h	/^  const std::string & protocol() const { return protocol_; }$/;"	f	class:cricket::Candidate
protocol	talk/xmpp/xmppclientsettings.h	/^  cricket::ProtocolType protocol() const { return protocol_; }$/;"	f	class:buzz::XmppClientSettings
protocol_	talk/p2p/base/candidate.h	/^  std::string protocol_;$/;"	m	class:cricket::Candidate
protocol_	talk/xmpp/xmppclientsettings.h	/^  cricket::ProtocolType protocol_;$/;"	m	class:buzz::XmppClientSettings
protocols_	talk/p2p/client/basicportallocator.cc	/^  ProtocolList protocols_;$/;"	m	class:cricket::AllocationSequence	file:
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
proxies_	talk/session/fileshare/fileshare.h	/^  ProxyList proxies_;$/;"	m	class:cricket::FileShareSession
proxy	talk/base/asynchttprequest.h	/^  const talk_base::ProxyInfo& proxy() const { return proxy_; }$/;"	f	class:talk_base::SslSocketFactory
proxy	talk/base/autodetectproxy.h	/^  const talk_base::ProxyInfo& proxy() const { return proxy_; }$/;"	f	class:talk_base::AutoDetectProxy
proxy	talk/base/httpclient.h	/^  const ProxyInfo& proxy() const { return proxy_; }$/;"	f	class:talk_base::HttpClient
proxy	talk/p2p/base/port.h	/^  static const talk_base::ProxyInfo& proxy() { return proxy_; }$/;"	f	class:cricket::Port
proxy	talk/p2p/base/portallocator.h	/^  const talk_base::ProxyInfo& proxy() const { return proxy_; }$/;"	f	class:cricket::PortAllocator
proxy	talk/xmpp/xmppclientsettings.h	/^  talk_base::ProxyType proxy() const { return proxy_; }$/;"	f	class:buzz::XmppClientSettings
proxy_	talk/base/asynchttprequest.h	/^  talk_base::ProxyInfo proxy_;$/;"	m	class:talk_base::AsyncHttpRequest
proxy_	talk/base/asynchttprequest.h	/^  talk_base::ProxyInfo proxy_;$/;"	m	class:talk_base::SslSocketFactory
proxy_	talk/base/autodetectproxy.h	/^  ProxyInfo proxy_;$/;"	m	class:talk_base::AutoDetectProxy
proxy_	talk/base/httpclient.h	/^  ProxyInfo proxy_;$/;"	m	class:talk_base::HttpClient
proxy_	talk/base/socketadapters.h	/^  SocketAddress proxy_, dest_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
proxy_	talk/base/socketadapters.h	/^  SocketAddress proxy_, dest_;$/;"	m	class:talk_base::AsyncSocksProxySocket
proxy_	talk/p2p/base/port.cc	/^talk_base::ProxyInfo Port::proxy_;$/;"	m	class:cricket::Port	file:
proxy_	talk/p2p/base/port.h	/^  static talk_base::ProxyInfo proxy_;$/;"	m	class:cricket::Port
proxy_	talk/p2p/base/portallocator.h	/^  talk_base::ProxyInfo proxy_;$/;"	m	class:cricket::PortAllocator
proxy_	talk/xmpp/xmppclientsettings.h	/^  talk_base::ProxyType proxy_;$/;"	m	class:buzz::XmppClientSettings
proxy_detect_	talk/examples/call/callclient.h	/^  talk_base::AutoDetectProxy *proxy_detect_;$/;"	m	class:CallClient
proxy_host	talk/xmpp/xmppclientsettings.h	/^  const std::string & proxy_host() const { return proxy_host_; }$/;"	f	class:buzz::XmppClientSettings
proxy_host_	talk/xmpp/xmppclient.cc	/^  std::string proxy_host_;$/;"	m	class:buzz::XmppClient::Private	file:
proxy_host_	talk/xmpp/xmppclientsettings.h	/^  std::string proxy_host_;$/;"	m	class:buzz::XmppClientSettings
proxy_pass	talk/xmpp/xmppclientsettings.h	/^  const talk_base::CryptString & proxy_pass() const { return proxy_pass_; }$/;"	f	class:buzz::XmppClientSettings
proxy_pass_	talk/xmpp/xmppclientsettings.h	/^  talk_base::CryptString proxy_pass_;$/;"	m	class:buzz::XmppClientSettings
proxy_port	talk/xmpp/xmppclientsettings.h	/^  int proxy_port() const { return proxy_port_; }$/;"	f	class:buzz::XmppClientSettings
proxy_port_	talk/xmpp/xmppclient.cc	/^  int proxy_port_;$/;"	m	class:buzz::XmppClient::Private	file:
proxy_port_	talk/xmpp/xmppclientsettings.h	/^  int proxy_port_;$/;"	m	class:buzz::XmppClientSettings
proxy_user	talk/xmpp/xmppclientsettings.h	/^  const std::string & proxy_user() const { return proxy_user_; }$/;"	f	class:buzz::XmppClientSettings
proxy_user_	talk/xmpp/xmppclientsettings.h	/^  std::string proxy_user_;$/;"	m	class:buzz::XmppClientSettings
pruned	talk/p2p/base/port.h	/^  bool pruned() { return pruned_; }$/;"	f	class:cricket::Connection
pruned_	talk/p2p/base/port.h	/^  bool pruned_;$/;"	m	class:cricket::Connection
psph_	talk/xmpp/xmppstanzaparser.h	/^  XmppStanzaParseHandler * psph_;$/;"	m	class:buzz::XmppStanzaParser
pt	talk/third_party/mediastreamer/mscodec.h	/^	gint pt;			\/* the payload type number associated with this codec*\/$/;"	m	struct:_MSCodecInfo
pt_	talk/session/phone/linphonemediaengine.h	/^  int pt_;$/;"	m	class:cricket::LinphoneMediaChannel
ptr	talk/base/scoped_ptr.h	/^  T* ptr;$/;"	m	class:talk_base::scoped_array
ptr	talk/base/scoped_ptr.h	/^  T* ptr;$/;"	m	class:talk_base::scoped_ptr
ptr	talk/base/scoped_ptr.h	/^  T* ptr;$/;"	m	class:talk_base::scoped_ptr_malloc
pump_	talk/examples/login/xmppthread.h	/^  XmppPump* pump_;$/;"	m	class:XmppThread
pvParents_	talk/xmllite/xmlbuilder.h	/^    pvParents_;$/;"	m	class:buzz::XmlBuilder
pvecQueuedStanzas_	talk/xmpp/xmpplogintask.h	/^          std::allocator<XmlElement *> > > pvecQueuedStanzas_;$/;"	m	class:buzz::XmppLoginTask
pxmlnsDepthStack_	talk/xmllite/xmlnsstack.h	/^  scoped_ptr<std::vector<size_t, std::allocator<size_t> > > pxmlnsDepthStack_;$/;"	m	class:buzz::XmlnsStack
pxmlnsStack_	talk/xmllite/xmlnsstack.h	/^  scoped_ptr<std::vector<std::string, std::allocator<std::string> > > pxmlnsStack_;$/;"	m	class:buzz::XmlnsStack
pxph_	talk/xmllite/xmlparser.h	/^  XmlParseHandler * pxph_;$/;"	m	class:buzz::XmlParser
q_inputs	talk/third_party/mediastreamer/msavdecoder.h	/^    MSQueue *q_inputs[MSAVDECODER_MAX_INPUTS];$/;"	m	struct:_MSAVDecoder
q_inputs	talk/third_party/mediastreamer/msavencoder.h	/^    MSQueue *q_inputs[MSAVENCODER_MAX_INPUTS];$/;"	m	struct:_MSAVEncoder
q_inputs	talk/third_party/mediastreamer/msilbcdec.h	/^     MSQueue *q_inputs[MSILBCDECODER_MAX_INPUTS];$/;"	m	struct:_MSILBCDecoder
q_inputs	talk/third_party/mediastreamer/msqdispatcher.h	/^	MSQueue *q_inputs[MS_QDISPATCHER_MAX_INPUTS];$/;"	m	struct:_MSQdispatcher
q_inputs	talk/third_party/mediastreamer/msrtpsend.h	/^	MSQueue *q_inputs[MSRTPSEND_MAX_INPUTS];$/;"	m	struct:_MSRtpSend
q_inputs	talk/third_party/mediastreamer/mswrite.h	/^    MSQueue *q_inputs[MSWRITE_MAX_INPUTS];$/;"	m	struct:_MSWrite
q_outputs	talk/third_party/mediastreamer/msavdecoder.h	/^    MSQueue *q_outputs[MSAVDECODER_MAX_INPUTS];$/;"	m	struct:_MSAVDecoder
q_outputs	talk/third_party/mediastreamer/msavencoder.h	/^    MSQueue *q_outputs[MSAVENCODER_MAX_OUTPUTS];$/;"	m	struct:_MSAVEncoder
q_outputs	talk/third_party/mediastreamer/msilbcenc.h	/^     MSQueue *q_outputs[MSILBCENCODER_MAX_INPUTS];$/;"	m	struct:_MSILBCEncoder
q_outputs	talk/third_party/mediastreamer/msqdispatcher.h	/^	MSQueue *q_outputs[MS_QDISPATCHER_MAX_OUTPUTS];$/;"	m	struct:_MSQdispatcher
q_outputs	talk/third_party/mediastreamer/msrtprecv.h	/^	MSQueue *q_outputs[MSRTPRECV_MAX_OUTPUTS];$/;"	m	struct:_MSRtpRecv
qinputs	talk/third_party/mediastreamer/msfilter.h	/^	guchar qinputs;   \/* number of connected queue inputs*\/$/;"	m	struct:_MSFilter
qoutputs	talk/third_party/mediastreamer/msfilter.h	/^	guchar qoutputs;  \/* number of connected queue outputs*\/$/;"	m	struct:_MSFilter
qoutputs	talk/third_party/mediastreamer/msread.h	/^    MSQueue *qoutputs[MSREAD_MAX_OUTPUTS];$/;"	m	struct:_MSRead
qoutputs	talk/third_party/mediastreamer/msringplayer.h	/^	MSQueue *qoutputs[MS_RING_PLAYER_MAX_OUTPUTS];\\$/;"	m	struct:_MSRingPlayer
quality	talk/base/network.h	/^  double quality() { return quality_; }$/;"	f	class:talk_base::Network
quality_	talk/base/network.h	/^  double quality_;$/;"	m	class:talk_base::Network
que	talk/third_party/mediastreamer/waveheader.h	/^	guint16 que ;	\/* Always 0x01 *\/$/;"	m	struct:_format_t
query	talk/base/httpcommon.h	/^  const string& query() const { return m_query; }$/;"	f	class:talk_base::Url
query_frame	talk/third_party/mediastreamer/msv4l.h	/^	guint query_frame;$/;"	m	struct:_MSV4l
queue	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::queue(const char * data, uint32 len, bool bCtrl) {$/;"	f	class:cricket::PseudoTcp
queue_	talk/base/virtualsocketserver.cc	/^  SendQueue queue_;$/;"	m	class:talk_base::VirtualSocket	file:
queue_capacity	talk/base/virtualsocketserver.h	/^  uint32 queue_capacity() { return queue_capacity_; }$/;"	f	class:talk_base::VirtualSocketServer
queue_capacity_	talk/base/virtualsocketserver.h	/^  uint32 queue_capacity_;$/;"	m	class:talk_base::VirtualSocketServer
queue_crit_	talk/base/virtualsocketserver.cc	/^  CriticalSection queue_crit_;$/;"	m	class:talk_base::VirtualSocket	file:
queue_headers	talk/base/httpbase.cc	/^HttpBase::queue_headers() {$/;"	f	class:talk_base::HttpBase
queue_size_	talk/base/virtualsocketserver.cc	/^  uint32 queue_size_;$/;"	m	class:talk_base::VirtualSocket	file:
quote	talk/base/httpcommon.cc	/^static std::string quote(const std::string& str) {$/;"	f	namespace:talk_base	file:
r_end	talk/third_party/mediastreamer/msfifo.h	/^	gchar * r_end;    \/* this is the last position written at the end of the fifo. If a read ptr is expected to$/;"	m	struct:_MSFifo
r_gran	talk/third_party/mediastreamer/msfifo.h	/^	gint r_gran;  					\/*maximum granularity for reading*\/$/;"	m	struct:_MSFifo
r_maxgran	talk/third_party/mediastreamer/msfilter.h	/^	gint r_maxgran;       \/* read maximum granularity (for fifos)*\/$/;"	m	struct:_MSFilterClass
r_mingran	talk/third_party/mediastreamer/msfilter.h	/^	gint r_mingran;				\/* read minimum granularity (for fifos).$/;"	m	struct:_MSFilter
r_offset	talk/third_party/mediastreamer/msfilter.h	/^	gint r_offset;				\/* size of kept samples behind read pointer (for fifos)*\/$/;"	m	struct:_MSFilterClass
raised_	talk/xmllite/xmlparser.h	/^    XML_Error raised_;$/;"	m	class:buzz::XmlParser::ParseContext
raised_reset_	talk/xmpp/xmppengineimpl.h	/^  bool raised_reset_;$/;"	m	class:buzz::XmppEngineImpl
rate	talk/base/virtualsocket_unittest.cc	/^  uint32 rate; \/\/ bytes per second$/;"	m	struct:Sender	file:
rate	talk/third_party/mediastreamer/jackcard.h	/^  gint rate;$/;"	m	struct:_JackCard
rate	talk/third_party/mediastreamer/jackcard.h	/^  gint rate;$/;"	m	struct:__anon42
rate	talk/third_party/mediastreamer/mscodec.h	/^	gint rate;		\/*frequency *\/$/;"	m	struct:_MSCodecInfo
rate	talk/third_party/mediastreamer/msread.h	/^	gint rate;$/;"	m	struct:_MSRead
rate	talk/third_party/mediastreamer/msringplayer.h	/^	gint rate;$/;"	m	struct:_MSRingPlayer
rate	talk/third_party/mediastreamer/sndcard.h	/^	gint rate;$/;"	m	struct:_SndCard
rate	talk/third_party/mediastreamer/waveheader.h	/^	guint32   rate ;	\/* Sample rate (binary, in Hz) *\/$/;"	m	struct:_format_t
rate_	talk/p2p/client/socketmonitor.h	/^  uint32 rate_;$/;"	m	class:cricket::SocketMonitor
rate_	talk/session/phone/audiomonitor.h	/^  uint32 rate_;$/;"	m	class:cricket::AudioMonitor
rate_limits_	talk/xmpp/ratelimitmanager.h	/^  RateLimitMap rate_limits_;$/;"	m	class:buzz::RateLimitManager
raw_transport_	talk/p2p/base/rawtransportchannel.h	/^  RawTransport* raw_transport_;$/;"	m	class:cricket::RawTransportChannel
rd_ptr	talk/third_party/mediastreamer/msfifo.h	/^	gchar * rd_ptr;        \/* read pointer on the position where there is something to read on the MSBuffer *\/$/;"	m	struct:_MSFifo
read	talk/third_party/mediastreamer/jackcard.h	/^  jackcard_mode_t read, write;$/;"	m	struct:_JackCard
read_handle	talk/third_party/mediastreamer/alsacard.h	/^	snd_pcm_t *read_handle;$/;"	m	struct:_AlsaCard
read_only_	talk/base/stream.h	/^  bool read_only_;$/;"	m	class:talk_base::StringStream
read_pos_	talk/base/stream.h	/^  size_t read_pos_;$/;"	m	class:talk_base::StringStream
read_state	talk/p2p/base/port.h	/^  ReadState read_state() const { return read_state_; }$/;"	f	class:cricket::Connection
read_state_	talk/p2p/base/port.h	/^  ReadState read_state_;$/;"	m	class:cricket::Connection
readable	talk/base/physicalsocketserver.cc	/^  virtual bool readable() {$/;"	f	class:talk_base::FileDispatcher
readable	talk/base/schanneladapter.cc	/^  SChannelBuffer inbuf, outbuf, readable;$/;"	m	struct:talk_base::SChannelAdapter::SSLImpl	file:
readable	talk/base/virtualsocketserver.cc	/^  bool readable() { return readable_; }$/;"	f	class:talk_base::VirtualSocket
readable	talk/p2p/base/transport.h	/^  bool readable() const { return readable_; }$/;"	f	class:cricket::Transport
readable	talk/p2p/base/transportchannel.h	/^  bool readable() const { return readable_; }$/;"	f	class:cricket::TransportChannel
readable	talk/p2p/client/socketmonitor.h	/^  bool readable;$/;"	m	struct:cricket::ConnectionInfo
readable_	talk/base/virtualsocketserver.cc	/^  bool readable_;$/;"	m	class:talk_base::VirtualSocket	file:
readable_	talk/p2p/base/transport.h	/^  bool readable_;$/;"	m	class:cricket::Transport
readable_	talk/p2p/base/transportchannel.h	/^  bool readable_;$/;"	m	class:cricket::TransportChannel
readbuf	talk/third_party/mediastreamer/alsacard.h	/^	gchar *readbuf;$/;"	m	struct:_AlsaCard
readbuf	talk/third_party/mediastreamer/osscard.h	/^	gchar *readbuf;$/;"	m	struct:_OssCard
readpos	talk/third_party/mediastreamer/alsacard.h	/^	gint readpos;$/;"	m	struct:_AlsaCard
readpos	talk/third_party/mediastreamer/osscard.h	/^	gint readpos;$/;"	m	struct:_OssCard
readsize	talk/third_party/mediastreamer/msfifo.h	/^	guint32 readsize;$/;"	m	struct:_MSFifo
ready	talk/base/thread.h	/^  bool *ready;$/;"	m	struct:talk_base::_SendMessage
ready	talk/p2p/client/basicportallocator.h	/^    bool ready;$/;"	m	struct:cricket::BasicPortAllocatorSession::PortData
ready_	talk/p2p/base/relayport.h	/^  bool ready_;$/;"	m	class:cricket::RelayPort
ready_to_connect_	talk/session/tunnel/pseudotcpchannel.h	/^  bool ready_to_connect_;$/;"	m	class:cricket::PseudoTcpChannel
reason	talk/p2p/base/stun.h	/^  const std::string& reason() const { return reason_; }$/;"	f	class:cricket::StunErrorCodeAttribute
reason_	talk/p2p/base/stun.h	/^  std::string reason_;$/;"	m	class:cricket::StunErrorCodeAttribute
recv	talk/base/httpbase.cc	/^HttpBase::recv(HttpData* data) {$/;"	f	class:talk_base::HttpBase
recv_bytes_second	talk/p2p/base/port.cc	/^size_t Connection::recv_bytes_second() {$/;"	f	class:cricket::Connection
recv_bytes_second	talk/p2p/client/socketmonitor.h	/^  size_t recv_bytes_second;$/;"	m	struct:cricket::ConnectionInfo
recv_bytes_second_	talk/p2p/base/port.h	/^  size_t recv_bytes_second_;$/;"	m	class:cricket::Connection
recv_session	talk/third_party/mediastreamer/mediastream.h	/^	RtpSession *recv_session;$/;"	m	struct:_AudioStream
recv_session	talk/third_party/mediastreamer/mediastream.h	/^	RtpSession *recv_session;$/;"	m	struct:_VideoStream
recv_total_bytes	talk/p2p/base/port.cc	/^size_t Connection::recv_total_bytes() {$/;"	f	class:cricket::Connection
recv_total_bytes	talk/p2p/client/socketmonitor.h	/^  size_t recv_total_bytes;$/;"	m	struct:cricket::ConnectionInfo
recv_total_bytes_	talk/p2p/base/port.h	/^  size_t recv_total_bytes_;$/;"	m	class:cricket::Connection
recycle_bin_	talk/base/socketpool.h	/^  StreamList recycle_bin_;$/;"	m	class:talk_base::LoggingPoolAdapter
redirect_target_	talk/p2p/base/session.h	/^  std::string redirect_target_;$/;"	m	class:cricket::Session
ref	talk/third_party/mediastreamer/osscard.h	/^	gint ref;$/;"	m	struct:_OssCard
ref_count	talk/third_party/mediastreamer/msbuffer.h	/^    guint16 ref_count;$/;"	m	struct:_MSBuffer
ref_count	talk/third_party/mediastreamer/msfilter.h	/^	guint ref_count; \/*number of object using the class*\/$/;"	m	struct:_MSFilterClass
refcount_	talk/xmllite/qname.h	/^    int refcount_;$/;"	m	class:buzz::QName::Data
refcount_	talk/xmpp/jid.h	/^    int refcount_;$/;"	m	class:buzz::Jid::Data
relay_address_	talk/p2p/client/basicportallocator.h	/^  talk_base::SocketAddress *relay_address_;$/;"	m	class:cricket::BasicPortAllocatorSession
relay_address_	talk/p2p/client/basicportallocator.h	/^  talk_base::SocketAddress* relay_address_;$/;"	m	class:cricket::BasicPortAllocator
relay_ext_addr	talk/p2p/base/port_unittest.cc	/^const talk_base::SocketAddress relay_ext_addr = talk_base::SocketAddress("127.0.0.1", 5001);$/;"	v
relay_hosts_	talk/p2p/client/httpportallocator.h	/^  std::vector<std::string> relay_hosts_;$/;"	m	class:cricket::HttpPortAllocator
relay_hosts_	talk/p2p/client/httpportallocator.h	/^  std::vector<std::string> relay_hosts_;$/;"	m	class:cricket::HttpPortAllocatorSession
relay_int_addr	talk/p2p/base/port_unittest.cc	/^const talk_base::SocketAddress relay_int_addr = talk_base::SocketAddress("127.0.0.1", 5000);$/;"	v
relay_port_	talk/p2p/base/rawtransportchannel.h	/^  RelayPort* relay_port_;$/;"	m	class:cricket::RawTransportChannel
relay_token	talk/p2p/client/httpportallocator.h	/^  std::string relay_token() const { return relay_token_; }$/;"	f	class:cricket::HttpPortAllocator
relay_token_	talk/p2p/client/httpportallocator.h	/^  std::string relay_token_;$/;"	m	class:cricket::HttpPortAllocator
relay_token_	talk/p2p/client/httpportallocator.h	/^  std::string relay_token_;$/;"	m	class:cricket::HttpPortAllocatorSession
relays	talk/p2p/client/basicportallocator.h	/^  RelayList relays;$/;"	m	struct:cricket::PortConfiguration
relayserver_DEPENDENCIES	talk/p2p/base/Makefile	/^relayserver_DEPENDENCIES = $(am__DEPENDENCIES_1)$/;"	m
relayserver_LDADD	talk/p2p/base/Makefile	/^relayserver_LDADD = $(P2PLIBS)$/;"	m
relayserver_OBJECTS	talk/p2p/base/Makefile	/^relayserver_OBJECTS = $(am_relayserver_OBJECTS)$/;"	m
relayserver_SOURCES	talk/p2p/base/Makefile	/^relayserver_SOURCES = relayserver.cc relayserver_main.cc$/;"	m
release	talk/base/httpclient.cc	/^void HttpClient::release() {$/;"	f	class:talk_base::HttpClient
release	talk/base/linked_ptr.h	/^    void release()$/;"	f	class:talk_base::linked_ptr
release	talk/base/scoped_ptr.h	/^  T* release() {$/;"	f	class:talk_base::scoped_array
release	talk/base/scoped_ptr.h	/^  T* release() {$/;"	f	class:talk_base::scoped_ptr
release	talk/base/scoped_ptr.h	/^  T* release() {$/;"	f	class:talk_base::scoped_ptr_malloc
remote_addr_	talk/base/natsocketfactory.cc	/^  SocketAddress remote_addr_;$/;"	m	class:talk_base::NATSocket	file:
remote_addr_	talk/base/virtualsocketserver.cc	/^  SocketAddress remote_addr_;$/;"	m	class:talk_base::VirtualSocket	file:
remote_address_	talk/p2p/base/rawtransportchannel.h	/^  talk_base::SocketAddress remote_address_;$/;"	m	class:cricket::RawTransportChannel
remote_candidate	talk/p2p/base/port.h	/^  const Candidate& remote_candidate() const { return remote_candidate_; }$/;"	f	class:cricket::Connection
remote_candidate	talk/p2p/client/socketmonitor.h	/^  Candidate remote_candidate;$/;"	m	struct:cricket::ConnectionInfo
remote_candidate_	talk/p2p/base/port.h	/^  Candidate remote_candidate_;$/;"	m	class:cricket::Connection
remote_candidates_	talk/p2p/base/p2ptransportchannel.h	/^  std::vector<RemoteCandidate> remote_candidates_;$/;"	m	class:cricket::P2PTransportChannel
remote_description	talk/p2p/base/session.h	/^  const SessionDescription *remote_description() const {$/;"	f	class:cricket::Session
remote_description_	talk/p2p/base/session.h	/^  const SessionDescription *remote_description_;$/;"	m	class:cricket::Session
remote_frag	talk/p2p/base/port_unittest.cc	/^  std::string remote_frag;$/;"	m	struct:Foo	file:
remote_listener_	talk/session/fileshare/fileshare.h	/^  talk_base::AsyncSocket* remote_listener_;$/;"	m	class:cricket::FileShareSession
remote_listener_address_	talk/session/fileshare/fileshare.h	/^  talk_base::SocketAddress remote_listener_address_;$/;"	m	class:cricket::FileShareSession
remote_name	talk/p2p/base/session.h	/^  const std::string &remote_name() const { return remote_name_; }$/;"	f	class:cricket::Session
remote_name_	talk/p2p/base/session.h	/^  std::string remote_name_;$/;"	m	class:cricket::Session
reply_	talk/base/winping.h	/^    char* reply_;$/;"	m	class:talk_base::WinPing
reported	talk/p2p/base/port.h	/^  bool reported() { return reported_; }$/;"	f	class:cricket::Connection
reported_	talk/p2p/base/port.h	/^  bool reported_;$/;"	m	class:cricket::Connection
request	talk/base/asynchttprequest.h	/^  HttpRequestData& request() { return client_.request(); }$/;"	f	class:talk_base::AsyncHttpRequest
request	talk/base/httpclient.h	/^  HttpRequestData& request() { return request_; }$/;"	f	class:talk_base::HttpClient
request	talk/base/httpclient.h	/^  const HttpRequestData& request() const { return request_; }$/;"	f	class:talk_base::HttpClient
request	talk/base/httpserver.h	/^  HttpRequestData* request() { return &request_; }$/;"	f	class:talk_base::HttpTransaction
request	talk/p2p/base/port_unittest.cc	/^  StunMessage* request;$/;"	m	struct:Foo	file:
request_	talk/base/httpclient.h	/^  HttpRequestData request_;$/;"	m	class:talk_base::HttpClient
request_	talk/base/httpserver.h	/^  HttpRequestData request_;$/;"	m	class:talk_base::HttpTransaction
requested_resource_	talk/xmpp/xmppengineimpl.h	/^  std::string requested_resource_;$/;"	m	class:buzz::XmppEngineImpl
requests_	talk/p2p/base/port.h	/^  StunRequestManager requests_;$/;"	m	class:cricket::Connection
requests_	talk/p2p/base/relayport.cc	/^  StunRequestManager requests_;$/;"	m	class:cricket::RelayEntry	file:
requests_	talk/p2p/base/stunport.h	/^  StunRequestManager requests_;$/;"	m	class:cricket::StunPort
requests_	talk/p2p/base/stunrequest.h	/^  RequestMap requests_;$/;"	m	class:cricket::StunRequestManager
reset	talk/base/asynchttprequest.h	/^  void reset() { complete_ = false; }$/;"	f	class:talk_base::HttpMonitor
reset	talk/base/httpbase.cc	/^HttpParser::reset() {$/;"	f	class:talk_base::HttpParser
reset	talk/base/httpclient.cc	/^void HttpClient::reset() {$/;"	f	class:talk_base::HttpClient
reset	talk/base/scoped_ptr.h	/^  void reset(T* p = 0) {$/;"	f	class:talk_base::scoped_array
reset	talk/base/scoped_ptr.h	/^  void reset(T* p = 0) {$/;"	f	class:talk_base::scoped_ptr
reset	talk/base/scoped_ptr.h	/^  void reset(T* p = 0) {$/;"	f	class:talk_base::scoped_ptr_malloc
resource	talk/xmpp/jid.h	/^  const std::string & resource() const { return !data_ ? STR_EMPTY : data_->resource_name_; }$/;"	f	class:buzz::Jid
resource	talk/xmpp/xmppclientsettings.h	/^  const std::string & resource() const { return resource_; }$/;"	f	class:buzz::XmppClientSettings
resource_	talk/xmpp/xmppclientsettings.h	/^  std::string resource_;$/;"	m	class:buzz::XmppClientSettings
resource_name_	talk/xmpp/jid.h	/^    const std::string resource_name_;$/;"	m	class:buzz::Jid::Data
response	talk/base/asynchttprequest.h	/^  HttpResponseData& response() { return client_.response(); }$/;"	f	class:talk_base::AsyncHttpRequest
response	talk/base/httpclient.h	/^  HttpResponseData& response() { return response_; }$/;"	f	class:talk_base::HttpClient
response	talk/base/httpclient.h	/^  const HttpResponseData& response() const { return response_; }$/;"	f	class:talk_base::HttpClient
response	talk/base/httpserver.h	/^  HttpResponseData* response() { return &response_; }$/;"	f	class:talk_base::HttpTransaction
response_	talk/base/httpclient.h	/^  HttpResponseData response_;$/;"	m	class:talk_base::HttpClient
response_	talk/base/httpserver.h	/^  HttpResponseData response_;$/;"	m	class:talk_base::HttpTransaction
response_redirect	talk/base/asynchttprequest.h	/^  const std::string& response_redirect() { return response_redirect_; }$/;"	f	class:talk_base::AsyncHttpRequest
response_redirect_	talk/base/asynchttprequest.h	/^  std::string response_redirect_;$/;"	m	class:talk_base::AsyncHttpRequest
restartable_	talk/base/openssladapter.h	/^  bool restartable_; $/;"	m	class:talk_base::OpenSSLAdapter
restartable_	talk/base/schanneladapter.h	/^  bool restartable_; $/;"	m	class:talk_base::SChannelAdapter
riff	talk/third_party/mediastreamer/waveheader.h	/^	char riff[4] ;	\/* "RIFF" (ASCII characters) *\/$/;"	m	struct:_riff_t
riff_chunk	talk/third_party/mediastreamer/waveheader.h	/^	riff_t riff_chunk;$/;"	m	struct:_wave_header_t
riff_t	talk/third_party/mediastreamer/waveheader.h	/^} riff_t;$/;"	t	typeref:struct:_riff_t
ring_start	talk/third_party/mediastreamer/audiostream.c	/^RingStream * ring_start(gchar *file,gint interval,SndCard *sndcard)$/;"	f
ring_start_with_cb	talk/third_party/mediastreamer/audiostream.c	/^RingStream * ring_start_with_cb(gchar *file,gint interval,SndCard *sndcard, MSFilterNotifyFunc func,gpointer user_data)$/;"	f
ring_stop	talk/third_party/mediastreamer/audiostream.c	/^void ring_stop(RingStream *stream)$/;"	f
rlen_	talk/base/winping.h	/^    uint32 rlen_;$/;"	m	class:talk_base::WinPing
rollback_	talk/base/diskcache.h	/^  bool rollback_, locked_;$/;"	m	class:talk_base::CacheLock
root_dir_	talk/examples/pcp/pcp_main.cc	/^  std::string root_dir_;$/;"	m	class:FileShareClient	file:
root_folder_	talk/base/tarstream.h	/^  std::string root_folder_;$/;"	m	class:talk_base::TarStream
roster_	talk/examples/call/callclient.h	/^  RosterMap* roster_;$/;"	m	class:CallClient
route	talk/base/natserver.h	/^    SocketAddressPair route;$/;"	m	struct:talk_base::NATServer::TransEntry
rtprecv	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *rtprecv;$/;"	m	struct:_AudioStream
rtprecv	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *rtprecv;$/;"	m	struct:_VideoStream
rtpsend	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *rtpsend;$/;"	m	struct:_AudioStream
rtpsend	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *rtpsend;$/;"	m	struct:_VideoStream
rtpsession	talk/third_party/mediastreamer/msrtprecv.h	/^	RtpSession *rtpsession;$/;"	m	struct:_MSRtpRecv
rtpsession	talk/third_party/mediastreamer/msrtpsend.h	/^	RtpSession *rtpsession;$/;"	m	struct:_MSRtpSend
rtt	talk/p2p/base/port.h	/^  uint32 rtt() const { return rtt_; }$/;"	f	class:cricket::Connection
rtt	talk/p2p/client/socketmonitor.h	/^  size_t rtt;$/;"	m	struct:cricket::ConnectionInfo
rtt_	talk/p2p/base/port.h	/^  uint32 rtt_;$/;"	m	class:cricket::Connection
rtt_data_points_	talk/p2p/base/port.h	/^  uint32 rtt_data_points_;$/;"	m	class:cricket::Connection
rules_	talk/base/firewallsocketserver.h	/^  std::vector<Rule> rules_;$/;"	m	class:talk_base::FirewallSocketServer
run	talk/third_party/mediastreamer/mssync.h	/^	gint run;       \/* flag to indicate whether the sync must be run or not *\/$/;"	m	struct:_MSSync
runner_	talk/base/task.h	/^  TaskRunner *runner_;$/;"	m	class:talk_base::Task
running_	talk/p2p/base/session_unittest.cc	/^  bool running_;$/;"	m	class:TestPortAllocatorSession	file:
running_	talk/p2p/client/basicportallocator.cc	/^  bool running_;$/;"	m	class:cricket::AllocationSequence	file:
running_	talk/p2p/client/basicportallocator.h	/^  bool running_; \/\/ set when StartGetAllPorts is called$/;"	m	class:cricket::BasicPortAllocatorSession
s16_to_alaw	talk/third_party/mediastreamer/g711common.h	/^static inline unsigned char s16_to_alaw(int pcm_val)$/;"	f
s16_to_ulaw	talk/third_party/mediastreamer/g711common.h	/^static inline unsigned char s16_to_ulaw(int pcm_val)	\/* 2's complement (16-bit range) *\/$/;"	f
s_	talk/base/physicalsocketserver.cc	/^  SOCKET s_;$/;"	m	class:talk_base::PhysicalSocket	file:
s_initrandom	talk/base/helpers.cc	/^static bool s_initrandom;$/;"	v	file:
s_transform	talk/base/stringencode.cc	/^std::string s_transform(const std::string& source, Transform t) {$/;"	f	namespace:talk_base
s_url_decode	talk/base/stringencode.h	/^inline std::string s_url_decode(const std::string& source) {$/;"	f	namespace:talk_base
s_url_encode	talk/base/stringencode.h	/^inline std::string s_url_encode(const std::string& source) {$/;"	f	namespace:talk_base
s_wm_wakeup_id	talk/base/win32socketserver.cc	/^static UINT s_wm_wakeup_id;$/;"	v	file:
sample_size	talk/third_party/mediastreamer/jackcard.h	/^  gint sample_size;$/;"	m	struct:_JackCard
sample_t	talk/third_party/mediastreamer/jackcard.h	/^typedef jack_default_audio_sample_t sample_t;$/;"	t
samplerate	talk/third_party/mediastreamer/jackcard.c	/^int samplerate(jack_nframes_t rate, void *arg)$/;"	f
samples	talk/base/virtualsocket_unittest.cc	/^  uint32 samples;$/;"	m	struct:Receiver	file:
samples_per_frame	talk/third_party/mediastreamer/msilbcdec.h	/^     int samples_per_frame;$/;"	m	struct:_MSILBCDecoder
samples_per_frame	talk/third_party/mediastreamer/msilbcenc.h	/^     int samples_per_frame;$/;"	m	struct:_MSILBCEncoder
samples_per_tick	talk/third_party/mediastreamer/mssync.h	/^	guint samples_per_tick; \/* number of bytes produced by sources of the processing chains*\/$/;"	m	struct:_MSSync
sasl_handler_	talk/xmpp/xmppengineimpl.h	/^  scoped_ptr<SaslHandler> sasl_handler_;$/;"	m	class:buzz::XmppEngineImpl
sasl_mech_	talk/xmpp/xmpplogintask.h	/^  scoped_ptr<SaslMechanism> sasl_mech_;$/;"	m	class:buzz::XmppLoginTask
saved_offset	talk/third_party/mediastreamer/msfifo.h	/^	guint32 saved_offset;$/;"	m	struct:_MSFifo
sbindir	talk/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/base/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/examples/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/examples/call/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/examples/login/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/examples/pcp/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/p2p/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/p2p/base/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/p2p/client/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/session/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/session/fileshare/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/session/phone/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/session/tunnel/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/third_party/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/third_party/gips/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/third_party/mediastreamer/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/xmllite/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	talk/xmpp/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scode	talk/base/httpcommon.h	/^  uint32 scode;$/;"	m	struct:talk_base::HttpResponseData
scoped_array	talk/base/scoped_ptr.h	/^  explicit scoped_array(T* p = 0) : ptr(p) {}$/;"	f	class:talk_base::scoped_array
scoped_array	talk/base/scoped_ptr.h	/^class scoped_array {$/;"	c	namespace:talk_base
scoped_ptr	talk/base/scoped_ptr.h	/^  explicit scoped_ptr(T* p = 0): ptr(p) {}$/;"	f	class:talk_base::scoped_ptr
scoped_ptr	talk/base/scoped_ptr.h	/^class scoped_ptr {$/;"	c	namespace:talk_base
scoped_ptr_malloc	talk/base/scoped_ptr.h	/^  explicit scoped_ptr_malloc(T* p = 0): ptr(p) {}$/;"	f	class:talk_base::scoped_ptr_malloc
scoped_ptr_malloc	talk/base/scoped_ptr.h	/^template<typename T, void (*FF)(void*) = free> class scoped_ptr_malloc {$/;"	c	namespace:talk_base
screen	talk/third_party/mediastreamer/mssdlout.h	/^	SDL_Surface *screen;$/;"	m	struct:_MSSdlOut
sec_count	talk/base/virtualsocket_unittest.cc	/^  uint32 sec_count;$/;"	m	struct:Receiver	file:
secure	talk/base/asynchttprequest.h	/^  bool secure() { return secure_; }$/;"	f	class:talk_base::AsyncHttpRequest
secure	talk/base/httpcommon.h	/^  bool secure() const { return m_secure; }$/;"	f	class:talk_base::Url
secure_	talk/base/asynchttprequest.h	/^  bool secure_;$/;"	m	class:talk_base::AsyncHttpRequest
seek_position_	talk/base/stream.h	/^  size_t   seek_position_;$/;"	m	class:talk_base::MemoryStream
send	talk/base/httpbase.cc	/^HttpBase::send(HttpData* data) {$/;"	f	class:talk_base::HttpBase
send_	talk/base/winping.h	/^    PIcmpSendEcho send_;$/;"	m	class:talk_base::WinPing
send_session	talk/third_party/mediastreamer/mediastream.h	/^	RtpSession *send_session;$/;"	m	struct:_AudioStream
send_session	talk/third_party/mediastreamer/mediastream.h	/^	RtpSession *send_session;$/;"	m	struct:_VideoStream
send_to_jid_	talk/examples/pcp/pcp_main.cc	/^  buzz::Jid send_to_jid_;$/;"	m	class:FileShareClient	file:
send_to_voicemail	talk/session/phone/call.h	/^  bool send_to_voicemail() { return send_to_voicemail_; }$/;"	f	class:cricket::Call
send_to_voicemail_	talk/session/phone/call.h	/^  bool send_to_voicemail_;$/;"	m	class:cricket::Call
sender_set	talk/base/sigslot.h	/^		typedef typename std::set<_signal_base<mt_policy> *> sender_set;$/;"	t	class:sigslot::has_slots
sendlist_	talk/base/thread.h	/^  std::list<_SendMessage> sendlist_;$/;"	m	class:talk_base::Thread
sentError_	talk/xmllite/xmlparser.h	/^  bool sentError_;$/;"	m	class:buzz::XmlParser
sent_bytes_second	talk/p2p/base/port.cc	/^size_t Connection::sent_bytes_second() {$/;"	f	class:cricket::Connection
sent_bytes_second	talk/p2p/client/socketmonitor.h	/^  size_t sent_bytes_second;$/;"	m	struct:cricket::ConnectionInfo
sent_bytes_second_	talk/p2p/base/port.h	/^  size_t sent_bytes_second_;$/;"	m	class:cricket::Connection
sent_time	talk/examples/login/status.h	/^  const std::string& sent_time() const { return sent_time_; }$/;"	f	class:buzz::Status
sent_time_	talk/examples/login/status.h	/^  std::string sent_time_; \/\/ from the jabber:x:delay element$/;"	m	class:buzz::Status
sent_total_bytes	talk/p2p/base/port.cc	/^size_t Connection::sent_total_bytes() {$/;"	f	class:cricket::Connection
sent_total_bytes	talk/p2p/client/socketmonitor.h	/^  size_t sent_total_bytes;$/;"	m	struct:cricket::ConnectionInfo
sent_total_bytes_	talk/p2p/base/port.h	/^  size_t sent_total_bytes_;$/;"	m	class:cricket::Connection
seq	talk/p2p/base/pseudotcp.h	/^    uint32 conv, seq, ack;$/;"	m	struct:cricket::PseudoTcp::Segment
seq	talk/p2p/base/pseudotcp.h	/^    uint32 seq, len;$/;"	m	struct:cricket::PseudoTcp::RSegment
seq	talk/p2p/base/pseudotcp.h	/^    uint32 seq, len;$/;"	m	struct:cricket::PseudoTcp::SSegment
sequence	talk/p2p/client/basicportallocator.h	/^    AllocationSequence * sequence;$/;"	m	struct:cricket::BasicPortAllocatorSession::PortData
sequences_	talk/p2p/client/basicportallocator.h	/^  std::vector<AllocationSequence*> sequences_;$/;"	m	class:cricket::BasicPortAllocatorSession
server	talk/base/httpclient.h	/^  const SocketAddress& server() const { return server_; }$/;"	f	class:talk_base::HttpClient
server	talk/base/httpcommon.h	/^  const string& server() const { return m_server; }$/;"	f	class:talk_base::Url
server	talk/p2p/base/relayserver.h	/^  RelayServer* server() { return server_; }$/;"	f	class:cricket::RelayServerBinding
server	talk/xmpp/xmppclientsettings.h	/^  const talk_base::SocketAddress & server() const { return server_; }$/;"	f	class:buzz::XmppClientSettings
server_	talk/base/firewallsocketserver.cc	/^  FirewallSocketServer * server_;$/;"	m	class:talk_base::FirewallSocket	file:
server_	talk/base/firewallsocketserver.h	/^  SocketServer * server_;$/;"	m	class:talk_base::FirewallSocketServer
server_	talk/base/httpclient.h	/^  SocketAddress server_;$/;"	m	class:talk_base::HttpClient
server_	talk/base/httpserver.h	/^    HttpServer* server_;$/;"	m	class:talk_base::HttpServer::Connection
server_	talk/base/virtualsocketserver.cc	/^  VirtualSocketServer* server_;$/;"	m	class:talk_base::VirtualSocket	file:
server_	talk/p2p/base/relayserver.h	/^  RelayServer* server_;$/;"	m	class:cricket::RelayServerBinding
server_	talk/xmpp/xmppclient.cc	/^  talk_base::SocketAddress server_;$/;"	m	class:buzz::XmppClient::Private	file:
server_	talk/xmpp/xmppclientsettings.h	/^  talk_base::SocketAddress server_;$/;"	m	class:buzz::XmppClientSettings
server_addr	talk/p2p/base/stunport.cc	/^  const talk_base::SocketAddress& server_addr() const { return server_addr_; }$/;"	f	class:cricket::StunPortBindingRequest
server_addr	talk/p2p/base/stunport.h	/^  const talk_base::SocketAddress& server_addr() const { return server_addr_; }$/;"	f	class:cricket::StunPort
server_addr2	talk/p2p/base/stunport.h	/^  const talk_base::SocketAddress& server_addr2() const { return server_addr2_; }$/;"	f	class:cricket::StunPort
server_addr2_	talk/p2p/base/stunport.h	/^  talk_base::SocketAddress server_addr2_;$/;"	m	class:cricket::StunPort
server_addr_	talk/base/natsocketfactory.cc	/^  SocketAddress server_addr_;   \/\/ address of the NAT server$/;"	m	class:talk_base::NATSocket	file:
server_addr_	talk/p2p/base/relayport.h	/^  std::deque<ProtocolAddress> server_addr_;$/;"	m	class:cricket::RelayPort
server_addr_	talk/p2p/base/stunport.cc	/^  talk_base::SocketAddress server_addr_;$/;"	m	class:cricket::StunPortBindingRequest	file:
server_addr_	talk/p2p/base/stunport.h	/^  talk_base::SocketAddress server_addr_;$/;"	m	class:cricket::StunPort
server_index_	talk/p2p/base/relayport.cc	/^  size_t server_index_;$/;"	m	class:cricket::RelayEntry	file:
server_socket_	talk/base/natserver.h	/^  AsyncUDPSocket* server_socket_;$/;"	m	class:talk_base::NATServer
server_url_	talk/base/autodetectproxy.h	/^  std::string agent_, server_url_;$/;"	m	class:talk_base::AutoDetectProxy
servers_	talk/base/firewallsocketserver.h	/^  std::vector<FirewallSocketServer *> servers_;$/;"	m	class:talk_base::FirewallManager
session	talk/p2p/base/session_unittest.cc	/^  Session* session;$/;"	m	struct:SessionHandler	file:
session	talk/session/fileshare/fileshare.h	/^  cricket::Session* session() { return session_; }$/;"	f	class:cricket::FileShareSession
session	talk/session/phone/channelmanager.cc	/^  Session *session;$/;"	m	struct:cricket::CreateParams	file:
session	talk/session/phone/voicechannel.cc	/^Session *VoiceChannel::session() {$/;"	f	class:cricket::VoiceChannel
session_	talk/examples/call/callclient.h	/^  cricket::Session *session_;$/;"	m	class:CallClient
session_	talk/examples/pcp/pcp_main.cc	/^  cricket::FileShareSession *session_;$/;"	m	class:FileShareClient	file:
session_	talk/p2p/client/basicportallocator.cc	/^  BasicPortAllocatorSession* session_;$/;"	m	class:cricket::AllocationSequence	file:
session_	talk/p2p/client/socketmonitor.h	/^  Session* session_;$/;"	m	class:cricket::SocketMonitor
session_	talk/session/fileshare/fileshare.h	/^  cricket::Session* session_;$/;"	m	class:cricket::FileShareSession
session_	talk/session/phone/voicechannel.h	/^  Session *session_;$/;"	m	class:cricket::VoiceChannel
session_	talk/session/tunnel/pseudotcpchannel.h	/^  Session* session_;$/;"	m	class:cricket::PseudoTcpChannel
session_	talk/session/tunnel/tunnelsessionclient.h	/^  Session* session_;$/;"	m	class:cricket::TunnelSession
session_client_	talk/session/phone/call.h	/^  PhoneSessionClient *session_client_;$/;"	m	class:cricket::Call
session_handler_	talk/xmpp/xmppengineimpl.h	/^  XmppSessionHandler* session_handler_;$/;"	m	class:buzz::XmppEngineImpl
session_manager	talk/p2p/base/session.h	/^  SessionManager* session_manager() const { return session_manager_; }$/;"	f	class:cricket::Session
session_manager	talk/p2p/base/transport.h	/^  SessionManager* session_manager() const { return session_manager_; }$/;"	f	class:cricket::Transport
session_manager	talk/session/phone/phonesessionclient.h	/^  SessionManager* session_manager() const { return session_manager_; }$/;"	f	class:cricket::PhoneSessionClient
session_manager	talk/session/tunnel/tunnelsessionclient.h	/^  SessionManager* session_manager() const { return session_manager_; }$/;"	f	class:cricket::TunnelSessionClient
session_manager_	talk/examples/call/callclient.h	/^  cricket::SessionManager* session_manager_;$/;"	m	class:CallClient
session_manager_	talk/examples/pcp/pcp_main.cc	/^  talk_base::scoped_ptr<cricket::SessionManager> session_manager_;$/;"	m	class:FileShareClient	file:
session_manager_	talk/p2p/base/session.h	/^  SessionManager *session_manager_;$/;"	m	class:cricket::Session
session_manager_	talk/p2p/base/transport.h	/^  SessionManager* session_manager_;$/;"	m	class:cricket::Transport
session_manager_	talk/p2p/client/sessionmanagertask.h	/^  SessionManager* session_manager_;$/;"	m	class:cricket::SessionManagerTask
session_manager_	talk/p2p/client/sessionsendtask.h	/^  SessionManager *session_manager_;$/;"	m	class:cricket::SessionSendTask
session_manager_	talk/session/phone/phonesessionclient.h	/^  SessionManager* session_manager_;$/;"	m	class:cricket::PhoneSessionClient
session_manager_	talk/session/tunnel/tunnelsessionclient.h	/^  SessionManager* session_manager_;$/;"	m	class:cricket::TunnelSessionClient
session_manager_task_	talk/examples/call/callclient.h	/^  cricket::SessionManagerTask* session_manager_task_;$/;"	m	class:CallClient
session_map_	talk/p2p/base/sessionmanager.h	/^  SessionMap session_map_;$/;"	m	class:cricket::SessionManager
session_map_	talk/session/phone/phonesessionclient.h	/^  std::map<SessionID, Call *> session_map_;$/;"	m	class:cricket::PhoneSessionClient
session_timeout	talk/p2p/base/sessionmanager.h	/^  int session_timeout() const { return timeout_; }$/;"	f	class:cricket::SessionManager
session_type	talk/p2p/base/session.h	/^  const std::string& session_type() const { return session_type_; }$/;"	f	class:cricket::Session
session_type	talk/p2p/base/transport.cc	/^  std::string session_type;$/;"	m	struct:__anon3::ChannelParams	file:
session_type	talk/p2p/base/transportchannel.h	/^  const std::string& session_type() const { return session_type_; }$/;"	f	class:cricket::TransportChannel
session_type	talk/p2p/client/basicportallocator.h	/^  const std::string& session_type() const { return session_type_; }$/;"	f	class:cricket::BasicPortAllocatorSession
session_type_	talk/p2p/base/session.h	/^  std::string session_type_;$/;"	m	class:cricket::Session
session_type_	talk/p2p/base/transportchannel.h	/^  std::string session_type_;$/;"	m	class:cricket::TransportChannel
session_type_	talk/p2p/client/basicportallocator.h	/^  std::string session_type_;$/;"	m	class:cricket::BasicPortAllocatorSession
session_unittest_DEPENDENCIES	talk/p2p/base/Makefile	/^session_unittest_DEPENDENCIES = $(am__DEPENDENCIES_2) \\$/;"	m
session_unittest_LDADD	talk/p2p/base/Makefile	/^session_unittest_LDADD = $(TESTLIBS) $(P2PLIBS) $(XMLLIBS)$/;"	m
session_unittest_OBJECTS	talk/p2p/base/Makefile	/^session_unittest_OBJECTS = $(am_session_unittest_OBJECTS)$/;"	m
session_unittest_SOURCES	talk/p2p/base/Makefile	/^session_unittest_SOURCES = session_unittest.cc stunserver.cc relayserver.cc$/;"	m
sessions	talk/session/phone/call.cc	/^const std::vector<Session *> &Call::sessions() {$/;"	f	class:cricket::Call
sessions_	talk/base/network.h	/^  SessionList sessions_;$/;"	m	class:talk_base::Network
sessions_	talk/session/fileshare/fileshare.h	/^  SessionSet sessions_;$/;"	m	class:cricket::FileShareSessionClient
sessions_	talk/session/phone/call.h	/^  std::vector<Session *> sessions_;$/;"	m	class:cricket::Call
sessions_	talk/session/tunnel/tunnelsessionclient.h	/^  std::vector<TunnelSession*> sessions_;$/;"	m	class:cricket::TunnelSessionClient
setContent	talk/base/httpcommon.cc	/^HttpData::setContent(const std::string& content_type,$/;"	f	class:talk_base::HttpData
setHeader	talk/base/httpcommon.h	/^  inline void setHeader(HttpHeader header, const std::string& value,$/;"	f	struct:talk_base::HttpData
setHeader	talk/base/httpcommon.h	/^  inline void setHeader(const std::string& name, const std::string& value,$/;"	f	struct:talk_base::HttpData
setSocket	talk/base/socketpool.cc	/^ReuseSocketPool::setSocket(AsyncSocket* socket) {$/;"	f	class:talk_base::ReuseSocketPool
set_address	talk/p2p/base/candidate.h	/^  void set_address(const talk_base::SocketAddress & address) $/;"	f	class:cricket::Candidate
set_address	talk/p2p/base/relayport.cc	/^  void set_address(const talk_base::SocketAddress& addr) { ext_addr_ = addr; }$/;"	f	class:cricket::RelayEntry
set_allow_local_ips	talk/p2p/base/transport.h	/^  void set_allow_local_ips(bool value) { allow_local_ips_ = value; }$/;"	f	class:cricket::Transport
set_allow_plain	talk/xmpp/xmppclientsettings.h	/^  void set_allow_plain(bool f) { allow_plain_ = f; }$/;"	f	class:buzz::XmppClientSettings
set_auth_cookie	talk/xmpp/xmppclientsettings.h	/^  void set_auth_cookie(const std::string & cookie) { auth_cookie_ = cookie; }$/;"	f	class:buzz::XmppClientSettings
set_auth_info	talk/base/autodetectproxy.h	/^  void set_auth_info(bool use_auth, const std::string& username,$/;"	f	class:talk_base::AutoDetectProxy
set_available	talk/examples/login/status.h	/^  void set_available(bool a) { available_ = a; }$/;"	f	class:buzz::Status
set_bandwidth	talk/base/virtualsocketserver.h	/^  void set_bandwidth(uint32 bandwidth) { bandwidth_ = bandwidth; }$/;"	f	class:talk_base::VirtualSocketServer
set_cache	talk/base/httpclient.h	/^  void set_cache(DiskCache* cache) { ASSERT(!IsCacheActive()); cache_ = cache; }$/;"	f	class:talk_base::HttpClient
set_connected	talk/p2p/base/port.cc	/^void Connection::set_connected(bool value) {$/;"	f	class:cricket::Connection
set_debug_force_timeout	talk/xmpp/xmpptask.h	/^  void set_debug_force_timeout(const bool f) { debug_force_timeout_ = f; }$/;"	f	class:buzz::XmppTask
set_default_destination	talk/p2p/base/relayserver.h	/^  void set_default_destination(const talk_base::SocketAddress& addr) {$/;"	f	class:cricket::RelayServerConnection
set_default_filesystem	talk/base/fileutils.h	/^  static void set_default_filesystem(Filesystem *filesystem) {default_filesystem_ = filesystem; }$/;"	f	class:talk_base::Filesystem
set_delay_mean	talk/base/virtualsocketserver.h	/^  void set_delay_mean(uint32 delay_mean) { delay_mean_ = delay_mean; }$/;"	f	class:talk_base::VirtualSocketServer
set_delay_stddev	talk/base/virtualsocketserver.h	/^  void set_delay_stddev(uint32 delay_stddev) {$/;"	f	class:talk_base::VirtualSocketServer
set_device	talk/third_party/mediastreamer/mssoundread.h	/^	gint (*set_device)(MSSoundRead *, gint devid);$/;"	m	struct:_MSSoundReadClass
set_device	talk/third_party/mediastreamer/mssoundwrite.h	/^	gint (*set_device)(MSSoundWrite *, gint devid);$/;"	m	struct:_MSSoundWriteClass
set_device	talk/third_party/mediastreamer/msvideosource.h	/^	gint (*set_device)(MSVideoSource *s, const gchar *name);$/;"	m	struct:_MSVideoSourceClass
set_drop_probability	talk/base/virtualsocketserver.h	/^  void set_drop_probability(double drop_prob) {$/;"	f	class:talk_base::VirtualSocketServer
set_error	talk/base/httpcommon.cc	/^HttpResponseData::set_error(uint32 scode) {$/;"	f	class:talk_base::HttpResponseData
set_error	talk/examples/login/status.h	/^  void set_error(int e_code, const std::string e_str)$/;"	f	class:buzz::Status
set_fail_redirect	talk/base/asynchttprequest.h	/^  void set_fail_redirect(bool fail_redirect) { fail_redirect_ = fail_redirect; }$/;"	f	class:talk_base::AsyncHttpRequest
set_fail_redirect	talk/base/httpclient.h	/^  void set_fail_redirect(bool fail_redirect) { fail_redirect_ = fail_redirect; }$/;"	f	class:talk_base::HttpClient
set_feedback_probation	talk/examples/login/status.h	/^  void set_feedback_probation(bool f) { feedback_probation_ = f; }$/;"	f	class:buzz::Status
set_fileshare_capability	talk/examples/login/status.h	/^  void set_fileshare_capability(bool f) { fileshare_capability_ = f; }$/;"	f	class:buzz::Status
set_firewall	talk/base/asynchttprequest.h	/^  void set_firewall(talk_base::FirewallManager * firewall) {$/;"	f	class:talk_base::AsyncHttpRequest
set_flags	talk/p2p/base/portallocator.h	/^  void set_flags(uint32 flags) { flags_ = flags; }$/;"	f	class:cricket::PortAllocator
set_flags	talk/p2p/base/portallocator.h	/^  void set_flags(uint32 flags) { flags_ = flags; }$/;"	f	class:cricket::PortAllocatorSession
set_frame_rate	talk/third_party/mediastreamer/msvideosource.h	/^	void (*set_frame_rate)(MSVideoSource *s, gint frame_rate, gint frame_rate_base);$/;"	m	struct:_MSVideoSourceClass
set_generation	talk/p2p/base/candidate.h	/^  void set_generation(uint32 generation) { generation_ = generation; }$/;"	f	class:cricket::Candidate
set_generation	talk/p2p/base/port.h	/^  void set_generation(uint32 generation) { generation_ = generation; }$/;"	f	class:cricket::Port
set_generation	talk/p2p/base/portallocator.h	/^  void set_generation(uint32 generation) { generation_ = generation; }$/;"	f	class:cricket::PortAllocatorSession
set_generation_str	talk/p2p/base/candidate.h	/^  void set_generation_str(const std::string& str) {$/;"	f	class:cricket::Candidate
set_host	talk/base/asynchttprequest.h	/^  void set_host(const std::string& host) { host_ = host; }$/;"	f	class:talk_base::AsyncHttpRequest
set_host	talk/xmpp/xmppclientsettings.h	/^  void set_host(const std::string & host) { host_ = host; }$/;"	f	class:buzz::XmppClientSettings
set_id	talk/p2p/base/sessionid.h	/^  void set_id(uint32 id) {$/;"	f	class:cricket::SessionID
set_id_str	talk/p2p/base/sessionid.h	/^  void set_id_str(const std::string &id_str) {$/;"	f	class:cricket::SessionID
set_ignore_bad_cert	talk/base/ssladapter.h	/^  void set_ignore_bad_cert(bool ignore) { ignore_bad_cert_ = ignore; }$/;"	f	class:talk_base::SSLAdapter
set_ignore_data	talk/base/httpbase.h	/^  void set_ignore_data(bool ignore) { ignore_data_ = ignore; }$/;"	f	class:talk_base::HttpBase
set_initiator	talk/p2p/base/sessionid.h	/^  void set_initiator(const std::string &initiator) {$/;"	f	class:cricket::SessionID
set_ip	talk/base/network.h	/^  void set_ip(uint32 ip) { ip_ = ip; }$/;"	f	class:talk_base::Network
set_is_google_client	talk/examples/login/status.h	/^  void set_is_google_client(bool f) { is_google_client_ = f; }$/;"	f	class:buzz::Status
set_jid	talk/examples/login/status.h	/^  void set_jid(const Jid & jid) { jid_ = jid; }$/;"	f	class:buzz::Status
set_know_capabilities	talk/examples/login/status.h	/^  void set_know_capabilities(bool f) { know_capabilities_ = f; }$/;"	f	class:buzz::Status
set_level	talk/third_party/mediastreamer/mssoundread.h	/^	void (*set_level)(MSSoundRead *, gint a);$/;"	m	struct:_MSSoundReadClass
set_level	talk/third_party/mediastreamer/mssoundwrite.h	/^	void (*set_level)(MSSoundWrite *, gint a);$/;"	m	struct:_MSSoundWriteClass
set_log_bindings	talk/p2p/base/relayserver.h	/^  void set_log_bindings(bool log_bindings) { log_bindings_ = log_bindings; }$/;"	f	class:cricket::RelayServer
set_manager	talk/p2p/base/stunrequest.cc	/^void StunRequest::set_manager(StunRequestManager* manager) {$/;"	f	class:cricket::StunRequest
set_mixer_element	talk/third_party/mediastreamer/alsacard.c	/^static void set_mixer_element(snd_mixer_t *mixer,const char *name, gint level,MixerAction action){$/;"	f	file:
set_name	talk/p2p/base/candidate.h	/^  void set_name(const std::string & name) { name_ = name; }$/;"	f	class:cricket::Candidate
set_name	talk/p2p/base/port.h	/^  void set_name(const std::string& name) { name_ = name; }$/;"	f	class:cricket::Port
set_network_name	talk/p2p/base/candidate.h	/^  void set_network_name(const std::string & network_name) {$/;"	f	class:cricket::Candidate
set_pass	talk/xmpp/xmppclientsettings.h	/^  void set_pass(const talk_base::CryptString & pass) { pass_ = pass; }$/;"	f	class:buzz::XmppClientSettings
set_password	talk/p2p/base/candidate.h	/^  void set_password(const std::string & password) { password_ = password; }$/;"	f	class:cricket::Candidate
set_password	talk/p2p/base/port.h	/^  void set_password(const std::string& password) { password_ = password; }$/;"	f	class:cricket::Port
set_path	talk/base/httpcommon.h	/^  void set_path(const string& val) {$/;"	f	class:talk_base::Url
set_phone_capability	talk/examples/login/status.h	/^  void set_phone_capability(bool f) { phone_capability_ = f; }$/;"	f	class:buzz::Status
set_pool	talk/base/httpclient.h	/^  void set_pool(StreamPool* pool) { pool_ = pool; }$/;"	f	class:talk_base::HttpClient
set_port	talk/base/asynchttprequest.h	/^  void set_port(int port) { port_ = port; }$/;"	f	class:talk_base::AsyncHttpRequest
set_port	talk/base/httpcommon.h	/^  void set_port(uint16 val) { m_port = val; }$/;"	f	class:talk_base::Url
set_preference	talk/p2p/base/candidate.h	/^  void set_preference(const float preference) { preference_ = preference; }$/;"	f	class:cricket::Candidate
set_preference	talk/p2p/base/port.h	/^  void set_preference(float preference) { preference_ = preference; }$/;"	f	class:cricket::Port
set_preference_str	talk/p2p/base/candidate.h	/^  void set_preference_str(const std::string & preference) {$/;"	f	class:cricket::Candidate
set_priority	talk/examples/login/status.h	/^  void set_priority(int pri) { pri_ = pri; }$/;"	f	class:buzz::Status
set_property	talk/third_party/mediastreamer/msfilter.h	/^	MSFilterPropertyFunc set_property;$/;"	m	struct:_MSFilterClass
set_protocol	talk/p2p/base/candidate.h	/^  void set_protocol(const std::string & protocol) { protocol_ = protocol; }$/;"	f	class:cricket::Candidate
set_protocol	talk/xmpp/xmppclientsettings.h	/^  void set_protocol(cricket::ProtocolType protocol) { protocol_ = protocol; }$/;"	f	class:buzz::XmppClientSettings
set_proxy	talk/base/asynchttprequest.h	/^  void set_proxy(const talk_base::ProxyInfo& proxy) {$/;"	f	class:talk_base::AsyncHttpRequest
set_proxy	talk/base/autodetectproxy.h	/^  void set_proxy(const SocketAddress& proxy) {$/;"	f	class:talk_base::AutoDetectProxy
set_proxy	talk/base/httpclient.h	/^  void set_proxy(const ProxyInfo& proxy) { proxy_ = proxy; }$/;"	f	class:talk_base::HttpClient
set_proxy	talk/p2p/base/port.h	/^  static void set_proxy(const std::string& user_agent, $/;"	f	class:cricket::Port
set_proxy	talk/p2p/base/portallocator.h	/^  void set_proxy(const std::string& agent, const talk_base::ProxyInfo& proxy) {$/;"	f	class:cricket::PortAllocator
set_proxy	talk/xmpp/xmppclientsettings.h	/^  void set_proxy(talk_base::ProxyType f) { proxy_ = f; }$/;"	f	class:buzz::XmppClientSettings
set_proxy_host	talk/xmpp/xmppclientsettings.h	/^  void set_proxy_host(const std::string & host) { proxy_host_ = host; }$/;"	f	class:buzz::XmppClientSettings
set_proxy_pass	talk/xmpp/xmppclientsettings.h	/^  void set_proxy_pass(const talk_base::CryptString & pass) { proxy_pass_ = pass; }$/;"	f	class:buzz::XmppClientSettings
set_proxy_port	talk/xmpp/xmppclientsettings.h	/^  void set_proxy_port(int port) { proxy_port_ = port; };$/;"	f	class:buzz::XmppClientSettings
set_proxy_user	talk/xmpp/xmppclientsettings.h	/^  void set_proxy_user(const std::string & user) { proxy_user_ = user; }$/;"	f	class:buzz::XmppClientSettings
set_query	talk/base/httpcommon.h	/^  void set_query(const string& val) {$/;"	f	class:talk_base::Url
set_queue_capacity	talk/base/virtualsocketserver.h	/^  void set_queue_capacity(uint32 queue_capacity) {$/;"	f	class:talk_base::VirtualSocketServer
set_read_state	talk/p2p/base/port.cc	/^void Connection::set_read_state(ReadState value) {$/;"	f	class:cricket::Connection
set_readable	talk/base/physicalsocketserver.cc	/^  virtual void set_readable(bool value) {$/;"	f	class:talk_base::FileDispatcher
set_readable	talk/base/virtualsocketserver.cc	/^  void set_readable(bool value) { readable_ = value; }$/;"	f	class:talk_base::VirtualSocket
set_readable	talk/p2p/base/transportchannel.cc	/^void TransportChannel::set_readable(bool readable) {$/;"	f	class:cricket::TransportChannel
set_redirect	talk/base/httpcommon.cc	/^HttpResponseData::set_redirect(const std::string& location, uint32 scode) {$/;"	f	class:talk_base::HttpResponseData
set_reported	talk/p2p/base/port.h	/^  void set_reported(bool reported) { reported_ = reported;}$/;"	f	class:cricket::Connection
set_resource	talk/xmpp/xmppclientsettings.h	/^  void set_resource(const std::string & resource) { resource_ = resource; }$/;"	f	class:buzz::XmppClientSettings
set_secure	talk/base/asynchttprequest.h	/^  void set_secure(bool secure) { secure_ = secure; }$/;"	f	class:talk_base::AsyncHttpRequest
set_secure	talk/base/httpcommon.h	/^  void set_secure(bool val) { m_secure = val; }$/;"	f	class:talk_base::Url
set_send_to_voicemail	talk/session/phone/call.h	/^  void set_send_to_voicemail(bool send_to_voicemail) {$/;"	f	class:cricket::Call
set_sent_time	talk/examples/login/status.h	/^  void set_sent_time(const std::string& time) { sent_time_ = time; }$/;"	f	class:buzz::Status
set_server	talk/base/httpclient.cc	/^void HttpClient::set_server(const SocketAddress& address) {$/;"	f	class:talk_base::HttpClient
set_server	talk/base/httpcommon.h	/^  void set_server(const string& val) { m_server = val; }$/;"	f	class:talk_base::Url
set_server	talk/xmpp/xmppclientsettings.h	/^  void set_server(const talk_base::SocketAddress & server) { $/;"	f	class:buzz::XmppClientSettings
set_server_addr	talk/p2p/base/stunport.h	/^  void set_server_addr(const talk_base::SocketAddress& addr) $/;"	f	class:cricket::StunPort
set_server_addr2	talk/p2p/base/stunport.h	/^  void set_server_addr2(const talk_base::SocketAddress& addr) $/;"	f	class:cricket::StunPort
set_server_url	talk/base/autodetectproxy.h	/^  void set_server_url(const std::string& url) {$/;"	f	class:talk_base::AutoDetectProxy
set_session_timeout	talk/p2p/base/sessionmanager.h	/^  void set_session_timeout(int timeout) { timeout_ = timeout; }$/;"	f	class:cricket::SessionManager
set_show	talk/examples/login/status.h	/^  void set_show(Show show) { show_ = show; }$/;"	f	class:buzz::Status
set_size	talk/third_party/mediastreamer/msvideosource.h	/^	void (*set_size)(MSVideoSource *s, gint width, gint height);$/;"	m	struct:_MSVideoSourceClass
set_socket_factory	talk/p2p/base/port.h	/^  void set_socket_factory(talk_base::SocketFactory* factory) $/;"	f	class:cricket::Port
set_socketserver	talk/base/messagequeue.cc	/^void MessageQueue::set_socketserver(SocketServer* ss) {$/;"	f	class:talk_base::MessageQueue
set_status	talk/examples/login/status.h	/^  void set_status(const std::string & status) { status_ = status; }$/;"	f	class:buzz::Status
set_success	talk/base/httpcommon.cc	/^HttpResponseData::set_success(const std::string& content_type,$/;"	f	class:talk_base::HttpResponseData
set_success	talk/base/httpcommon.cc	/^HttpResponseData::set_success(uint32 scode) {$/;"	f	class:talk_base::HttpResponseData
set_task_id	talk/xmpp/xmpptask.h	/^  void set_task_id(std::string id) { id_ = id; }$/;"	f	class:buzz::XmppTask
set_timeout	talk/base/asynchttprequest.h	/^  void set_timeout(int timeout) { timeout_ = timeout; }$/;"	f	class:talk_base::AsyncHttpRequest
set_timeout_seconds	talk/base/task.cc	/^void Task::set_timeout_seconds(const int timeout_seconds) {$/;"	f	class:talk_base::Task
set_type	talk/p2p/base/candidate.h	/^  void set_type(const std::string & type) { type_ = type; }$/;"	f	class:cricket::Candidate
set_use_proxy_auth	talk/xmpp/xmppclientsettings.h	/^  void set_use_proxy_auth(bool f) { use_proxy_auth_ = f; }$/;"	f	class:buzz::XmppClientSettings
set_use_tls	talk/xmpp/xmppclientsettings.h	/^  void set_use_tls(bool use_tls) { use_tls_ = use_tls; }$/;"	f	class:buzz::XmppClientSettings
set_user	talk/xmpp/xmppclientsettings.h	/^  void set_user(const std::string & user) { user_ = user; }$/;"	f	class:buzz::XmppClientSettings
set_username	talk/p2p/base/candidate.h	/^  void set_username(const std::string & username) { username_ = username; }$/;"	f	class:cricket::Candidate
set_username_fragment	talk/p2p/base/port.h	/^  void set_username_fragment(const std::string& username_fragment) {$/;"	f	class:cricket::Port
set_version	talk/examples/login/status.h	/^  void set_version(const std::string & v) { version_ = v; }$/;"	f	class:buzz::Status
set_writable	talk/base/physicalsocketserver.cc	/^  virtual void set_writable(bool value) {$/;"	f	class:talk_base::FileDispatcher
set_writable	talk/base/virtualsocketserver.cc	/^  void set_writable(bool value) {$/;"	f	class:talk_base::VirtualSocket
set_writable	talk/p2p/base/transportchannel.cc	/^void TransportChannel::set_writable(bool writable) {$/;"	f	class:cricket::TransportChannel
set_write_state	talk/p2p/base/port.cc	/^void Connection::set_write_state(WriteState value) {$/;"	f	class:cricket::Connection
setup	talk/third_party/mediastreamer/msfilter.h	/^	MSFilterSetupFunc setup;	\/* called when attaching to sync *\/$/;"	m	struct:_MSFilterClass
severity_	talk/base/logging.h	/^  LoggingSeverity severity_;$/;"	m	class:talk_base::LogMessage
sfDelayedAck	talk/p2p/base/pseudotcp.h	/^  enum SendFlags { sfNone, sfDelayedAck, sfImmediateAck };$/;"	e	enum:cricket::PseudoTcp::SendFlags
sfImmediateAck	talk/p2p/base/pseudotcp.h	/^  enum SendFlags { sfNone, sfDelayedAck, sfImmediateAck };$/;"	e	enum:cricket::PseudoTcp::SendFlags
sfNone	talk/p2p/base/pseudotcp.h	/^  enum SendFlags { sfNone, sfDelayedAck, sfImmediateAck };$/;"	e	enum:cricket::PseudoTcp::SendFlags
sharedstatedir	talk/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/base/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/examples/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/examples/call/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/examples/login/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/examples/pcp/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/p2p/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/p2p/base/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/p2p/client/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/session/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/session/fileshare/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/session/phone/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/session/tunnel/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/third_party/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/third_party/gips/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/third_party/mediastreamer/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/xmllite/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	talk/xmpp/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shl_load	configure	/^shl_load ();$/;"	f
short_to_bytes	talk/p2p/base/pseudotcp.cc	/^inline void short_to_bytes(uint16 val, void* buf) {$/;"	f	namespace:cricket
show	talk/examples/call/callclient.h	/^  buzz::Status::Show show;$/;"	m	struct:RosterItem
show	talk/examples/login/status.h	/^  Show show() const { return show_; }$/;"	f	class:buzz::Status
show_	talk/examples/login/status.h	/^  Show show_;$/;"	m	class:buzz::Status
show_local	talk/third_party/mediastreamer/mediastream.h	/^	gboolean show_local;$/;"	m	struct:_VideoStream
shutdown_	talk/session/tunnel/tunnelsessionclient.h	/^  bool shutdown_;$/;"	m	class:cricket::TunnelSessionClient
signal0	talk/base/sigslot.h	/^		signal0()$/;"	f	class:sigslot::signal0
signal0	talk/base/sigslot.h	/^		signal0(const signal0<mt_policy>& s)$/;"	f	class:sigslot::signal0
signal0	talk/base/sigslot.h	/^	class signal0 : public _signal_base0<mt_policy>$/;"	c	namespace:sigslot
signal1	talk/base/sigslot.h	/^		signal1()$/;"	f	class:sigslot::signal1
signal1	talk/base/sigslot.h	/^		signal1(const signal1<arg1_type, mt_policy>& s)$/;"	f	class:sigslot::signal1
signal1	talk/base/sigslot.h	/^	class signal1 : public _signal_base1<arg1_type, mt_policy>$/;"	c	namespace:sigslot
signal2	talk/base/sigslot.h	/^		signal2()$/;"	f	class:sigslot::signal2
signal2	talk/base/sigslot.h	/^		signal2(const signal2<arg1_type, arg2_type, mt_policy>& s)$/;"	f	class:sigslot::signal2
signal2	talk/base/sigslot.h	/^	class signal2 : public _signal_base2<arg1_type, arg2_type, mt_policy>$/;"	c	namespace:sigslot
signal3	talk/base/sigslot.h	/^		signal3()$/;"	f	class:sigslot::signal3
signal3	talk/base/sigslot.h	/^		signal3(const signal3<arg1_type, arg2_type, arg3_type, mt_policy>& s)$/;"	f	class:sigslot::signal3
signal3	talk/base/sigslot.h	/^	class signal3 : public _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy>$/;"	c	namespace:sigslot
signal4	talk/base/sigslot.h	/^		signal4()$/;"	f	class:sigslot::signal4
signal4	talk/base/sigslot.h	/^		signal4(const signal4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)$/;"	f	class:sigslot::signal4
signal4	talk/base/sigslot.h	/^	class signal4 : public _signal_base4<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot
signal5	talk/base/sigslot.h	/^		signal5()$/;"	f	class:sigslot::signal5
signal5	talk/base/sigslot.h	/^		signal5(const signal5<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal5
signal5	talk/base/sigslot.h	/^	class signal5 : public _signal_base5<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot
signal6	talk/base/sigslot.h	/^		signal6()$/;"	f	class:sigslot::signal6
signal6	talk/base/sigslot.h	/^		signal6(const signal6<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal6
signal6	talk/base/sigslot.h	/^	class signal6 : public _signal_base6<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot
signal7	talk/base/sigslot.h	/^		signal7()$/;"	f	class:sigslot::signal7
signal7	talk/base/sigslot.h	/^		signal7(const signal7<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal7
signal7	talk/base/sigslot.h	/^	class signal7 : public _signal_base7<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot
signal8	talk/base/sigslot.h	/^		signal8()$/;"	f	class:sigslot::signal8
signal8	talk/base/sigslot.h	/^		signal8(const signal8<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal8
signal8	talk/base/sigslot.h	/^	class signal8 : public _signal_base8<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot
signal_close_	talk/base/physicalsocketserver.cc	/^  bool signal_close_;$/;"	m	class:talk_base::SocketDispatcher	file:
signal_close_	talk/base/schanneladapter.h	/^  bool signal_close_;$/;"	m	class:talk_base::SChannelAdapter
signal_close_	talk/base/win32socketserver.h	/^  bool signal_close_;$/;"	m	class:talk_base::Win32Socket
signal_closed_	talk/xmpp/xmppclient.cc	/^  bool signal_closed_;$/;"	m	class:buzz::XmppClient::Private	file:
signal_connect	talk/base/sigslot.h	/^		void signal_connect(_signal_base<mt_policy>* sender)$/;"	f	class:sigslot::has_slots
signal_disconnect	talk/base/sigslot.h	/^		void signal_disconnect(_signal_base<mt_policy>* sender)$/;"	f	class:sigslot::has_slots
signal_err_	talk/base/physicalsocketserver.cc	/^  int signal_err_;$/;"	m	class:talk_base::SocketDispatcher	file:
signal_thread_	talk/session/tunnel/pseudotcpchannel.h	/^  talk_base::Thread* signal_thread_, * worker_thread_, * stream_thread_;$/;"	m	class:cricket::PseudoTcpChannel
signal_wakeup_	talk/base/physicalsocketserver.h	/^  Signaler* signal_wakeup_;$/;"	m	class:talk_base::PhysicalSocketServer
signaling_thread	talk/p2p/base/sessionmanager.h	/^  talk_base::Thread *signaling_thread() const { return signaling_thread_; }$/;"	f	class:cricket::SessionManager
signaling_thread_	talk/p2p/base/sessionmanager.h	/^  talk_base::Thread *signaling_thread_;$/;"	m	class:cricket::SessionManager
signalling_	talk/base/httpserver.h	/^    bool signalling_, close_;$/;"	m	class:talk_base::HttpServer::Connection
sigslot	talk/base/sigslot.h	/^namespace sigslot {$/;"	n
silence	talk/third_party/mediastreamer/msringplayer.h	/^	gint silence;	\/* silence time between each ring, in seconds *\/$/;"	m	struct:_MSRingPlayer
silence_bytes	talk/third_party/mediastreamer/msringplayer.h	/^	gint silence_bytes; \/*silence in number of bytes between each ring *\/$/;"	m	struct:_MSRingPlayer
single_threaded	talk/base/sigslot.h	/^		single_threaded()$/;"	f	class:sigslot::single_threaded
single_threaded	talk/base/sigslot.h	/^	class single_threaded$/;"	c	namespace:sigslot
sink_	talk/base/win32socketserver.h	/^  EventSink * sink_;$/;"	m	class:talk_base::Win32Socket
size	talk/base/diskcache.h	/^    size_t size;$/;"	m	struct:talk_base::DiskCache::Entry
size	talk/base/testclient.h	/^    size_t size;$/;"	m	struct:talk_base::TestClient::Packet
size	talk/base/virtualsocketserver.cc	/^    uint32 size;$/;"	m	struct:talk_base::VirtualSocket::QueueEntry	file:
size	talk/base/virtualsocketserver.cc	/^  size_t size() const { return size_; }$/;"	f	class:talk_base::Packet
size	talk/session/fileshare/fileshare.h	/^    size_t size, width, height;$/;"	m	struct:cricket::FileShareManifest::Item
size	talk/session/fileshare/fileshare.h	/^  inline size_t size() const { return items_.size(); }$/;"	f	class:cricket::FileShareManifest
size	talk/third_party/mediastreamer/msbuffer.h	/^    guint32 size;$/;"	m	struct:_MSBuffer
size	talk/third_party/mediastreamer/msbuffer.h	/^   guint32 size;   \/* the size of the buffer to read in data. It may not be the$/;"	m	struct:_MSMessage
size	talk/third_party/mediastreamer/msfifo.h	/^	guint32 size;        \/* the length of the fifo, but this may not be equal to buffer->size*\/$/;"	m	struct:_MSFifo
size	talk/third_party/mediastreamer/msqueue.h	/^	gint size;$/;"	m	struct:_MSQueue
size_	talk/base/asyncudpsocket.h	/^  size_t size_;$/;"	m	class:talk_base::AsyncUDPSocket
size_	talk/base/bytebuffer.h	/^  size_t size_;$/;"	m	class:talk_base::ByteBuffer
size_	talk/base/natsocketfactory.cc	/^  size_t size_;$/;"	m	class:talk_base::NATSocket	file:
size_	talk/base/virtualsocketserver.cc	/^  size_t size_;$/;"	m	class:talk_base::Packet	file:
sizes	talk/base/schanneladapter.cc	/^  SecPkgContext_StreamSizes sizes;$/;"	m	struct:talk_base::SChannelAdapter::SSLImpl	file:
skip_gob	talk/third_party/mediastreamer/msavdecoder.h	/^	int skip_gob;$/;"	m	struct:_MSAVDecoder
slot_disconnect	talk/base/sigslot.h	/^		void slot_disconnect(has_slots<mt_policy>* pslot)$/;"	f	class:sigslot::_signal_base0
slot_disconnect	talk/base/sigslot.h	/^		void slot_disconnect(has_slots<mt_policy>* pslot)$/;"	f	class:sigslot::_signal_base1
slot_disconnect	talk/base/sigslot.h	/^		void slot_disconnect(has_slots<mt_policy>* pslot)$/;"	f	class:sigslot::_signal_base2
slot_disconnect	talk/base/sigslot.h	/^		void slot_disconnect(has_slots<mt_policy>* pslot)$/;"	f	class:sigslot::_signal_base3
slot_disconnect	talk/base/sigslot.h	/^		void slot_disconnect(has_slots<mt_policy>* pslot)$/;"	f	class:sigslot::_signal_base4
slot_disconnect	talk/base/sigslot.h	/^		void slot_disconnect(has_slots<mt_policy>* pslot)$/;"	f	class:sigslot::_signal_base5
slot_disconnect	talk/base/sigslot.h	/^		void slot_disconnect(has_slots<mt_policy>* pslot)$/;"	f	class:sigslot::_signal_base6
slot_disconnect	talk/base/sigslot.h	/^		void slot_disconnect(has_slots<mt_policy>* pslot)$/;"	f	class:sigslot::_signal_base7
slot_disconnect	talk/base/sigslot.h	/^		void slot_disconnect(has_slots<mt_policy>* pslot)$/;"	f	class:sigslot::_signal_base8
slot_duplicate	talk/base/sigslot.h	/^		void slot_duplicate(const has_slots<mt_policy>* oldtarget, has_slots<mt_policy>* newtarget)$/;"	f	class:sigslot::_signal_base0
slot_duplicate	talk/base/sigslot.h	/^		void slot_duplicate(const has_slots<mt_policy>* oldtarget, has_slots<mt_policy>* newtarget)$/;"	f	class:sigslot::_signal_base1
slot_duplicate	talk/base/sigslot.h	/^		void slot_duplicate(const has_slots<mt_policy>* oldtarget, has_slots<mt_policy>* newtarget)$/;"	f	class:sigslot::_signal_base2
slot_duplicate	talk/base/sigslot.h	/^		void slot_duplicate(const has_slots<mt_policy>* oldtarget, has_slots<mt_policy>* newtarget)$/;"	f	class:sigslot::_signal_base3
slot_duplicate	talk/base/sigslot.h	/^		void slot_duplicate(const has_slots<mt_policy>* oldtarget, has_slots<mt_policy>* newtarget)$/;"	f	class:sigslot::_signal_base4
slot_duplicate	talk/base/sigslot.h	/^		void slot_duplicate(const has_slots<mt_policy>* oldtarget, has_slots<mt_policy>* newtarget)$/;"	f	class:sigslot::_signal_base5
slot_duplicate	talk/base/sigslot.h	/^		void slot_duplicate(const has_slots<mt_policy>* oldtarget, has_slots<mt_policy>* newtarget)$/;"	f	class:sigslot::_signal_base6
slot_duplicate	talk/base/sigslot.h	/^		void slot_duplicate(const has_slots<mt_policy>* oldtarget, has_slots<mt_policy>* newtarget)$/;"	f	class:sigslot::_signal_base7
slot_duplicate	talk/base/sigslot.h	/^		void slot_duplicate(const has_slots<mt_policy>* oldtarget, has_slots<mt_policy>* newtarget)$/;"	f	class:sigslot::_signal_base8
sm_	talk/session/fileshare/fileshare.h	/^  SessionManager *sm_;$/;"	m	class:cricket::FileShareSessionClient
snd_card_can_read	talk/third_party/mediastreamer/sndcard.c	/^gboolean snd_card_can_read(SndCard *obj){$/;"	f
snd_card_close_r	talk/third_party/mediastreamer/sndcard.c	/^void snd_card_close_r(SndCard *obj)$/;"	f
snd_card_close_w	talk/third_party/mediastreamer/sndcard.c	/^void snd_card_close_w(SndCard *obj)$/;"	f
snd_card_create_read_filter	talk/third_party/mediastreamer/sndcard.c	/^MSFilter * snd_card_create_read_filter(SndCard *obj)$/;"	f
snd_card_create_write_filter	talk/third_party/mediastreamer/sndcard.c	/^MSFilter * snd_card_create_write_filter(SndCard *obj)$/;"	f
snd_card_get_bsize	talk/third_party/mediastreamer/sndcard.c	/^int snd_card_get_bsize(SndCard *obj)$/;"	f
snd_card_get_identifier	talk/third_party/mediastreamer/sndcard.c	/^const gchar *snd_card_get_identifier(SndCard *obj)$/;"	f
snd_card_get_level	talk/third_party/mediastreamer/sndcard.c	/^gint snd_card_get_level(SndCard *obj,int way)$/;"	f
snd_card_init	talk/third_party/mediastreamer/sndcard.c	/^void snd_card_init(SndCard *obj)$/;"	f
snd_card_manager	talk/third_party/mediastreamer/sndcard.c	/^SndCardManager *snd_card_manager=&_snd_card_manager;$/;"	v
snd_card_manager_get_card	talk/third_party/mediastreamer/sndcard.c	/^SndCard * snd_card_manager_get_card(SndCardManager *manager,int index)$/;"	f
snd_card_manager_get_card_with_string	talk/third_party/mediastreamer/sndcard.c	/^SndCard * snd_card_manager_get_card_with_string(SndCardManager *manager,const char *cardname,int *index)$/;"	f
snd_card_manager_init	talk/third_party/mediastreamer/sndcard.c	/^void snd_card_manager_init(SndCardManager *manager)$/;"	f
snd_card_open_r	talk/third_party/mediastreamer/sndcard.c	/^int snd_card_open_r(SndCard *obj, int bits, int stereo, int rate)$/;"	f
snd_card_open_w	talk/third_party/mediastreamer/sndcard.c	/^int snd_card_open_w(SndCard *obj, int bits, int stereo, int rate)$/;"	f
snd_card_probe	talk/third_party/mediastreamer/sndcard.c	/^gint snd_card_probe(SndCard *obj,int bits, int stereo, int rate)$/;"	f
snd_card_read	talk/third_party/mediastreamer/sndcard.c	/^int snd_card_read(SndCard *obj,char *buffer,int size)$/;"	f
snd_card_set_blocking_mode	talk/third_party/mediastreamer/sndcard.c	/^void snd_card_set_blocking_mode(SndCard *obj,gboolean yesno){$/;"	f
snd_card_set_level	talk/third_party/mediastreamer/sndcard.c	/^void snd_card_set_level(SndCard *obj, int way, int level)$/;"	f
snd_card_set_rec_source	talk/third_party/mediastreamer/sndcard.c	/^void snd_card_set_rec_source(SndCard *obj, int source)$/;"	f
snd_card_uninit	talk/third_party/mediastreamer/sndcard.c	/^void snd_card_uninit(SndCard *obj)$/;"	f
snd_card_write	talk/third_party/mediastreamer/sndcard.c	/^int snd_card_write(SndCard *obj,char *buffer,int size)$/;"	f
snd_pcm_open	configure	/^snd_pcm_open ();$/;"	f
sndcard	talk/third_party/mediastreamer/msossread.h	/^	SndCard *sndcard;$/;"	m	struct:_MSOssRead
sndcard	talk/third_party/mediastreamer/msosswrite.h	/^	SndCard *sndcard;$/;"	m	struct:_MSOssWrite
sndwrite	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *sndwrite;$/;"	m	struct:_RingStream
snprintf	talk/base/logging.cc	30;"	d	file:
socket	talk/base/natserver.h	/^    AsyncUDPSocket* socket;$/;"	m	struct:talk_base::NATServer::TransEntry
socket	talk/base/virtualsocket_unittest.cc	/^  AsyncUDPSocket* socket;$/;"	m	struct:Receiver	file:
socket	talk/base/virtualsocket_unittest.cc	/^  AsyncUDPSocket* socket;$/;"	m	struct:Sender	file:
socket	talk/p2p/base/relayport.cc	/^  talk_base::AsyncPacketSocket* socket() { return socket_; }$/;"	f	class:cricket::RelayEntry
socket	talk/p2p/base/relayserver.h	/^  talk_base::AsyncPacketSocket* socket() { return socket_; }$/;"	f	class:cricket::RelayServerConnection
socket	talk/p2p/base/tcpport.h	/^    talk_base::AsyncTCPSocket * socket;$/;"	m	struct:cricket::TCPPort::Incoming
socket	talk/p2p/base/tcpport.h	/^  talk_base::AsyncSocket* socket() { return socket_; }$/;"	f	class:cricket::TCPPort
socket	talk/p2p/base/tcpport.h	/^  talk_base::AsyncTCPSocket * socket() { return socket_; }$/;"	f	class:cricket::TCPConnection
socket	talk/p2p/base/udpport.h	/^  talk_base::AsyncPacketSocket* socket() { return socket_; }$/;"	f	class:cricket::UDPPort
socket_	talk/base/asyncpacketsocket.h	/^  AsyncSocket* socket_;$/;"	m	class:talk_base::AsyncPacketSocket
socket_	talk/base/asyncsocket.h	/^  Socket * socket_;$/;"	m	class:talk_base::AsyncSocketAdapter
socket_	talk/base/autodetectproxy.h	/^  AsyncSocket * socket_;$/;"	m	class:talk_base::AutoDetectProxy
socket_	talk/base/natsocketfactory.cc	/^  Socket* socket_;$/;"	m	class:talk_base::NATSocket	file:
socket_	talk/base/socketstream.h	/^  AsyncSocket* socket_;$/;"	m	class:talk_base::SocketStream
socket_	talk/base/testclient.h	/^  AsyncPacketSocket* socket_;$/;"	m	class:talk_base::TestClient
socket_	talk/base/win32socketserver.h	/^  SOCKET socket_;$/;"	m	class:talk_base::Win32Socket
socket_	talk/p2p/base/relayport.cc	/^  talk_base::AsyncPacketSocket* socket_;$/;"	m	class:cricket::RelayEntry	file:
socket_	talk/p2p/base/relayserver.h	/^  talk_base::AsyncPacketSocket* socket_;$/;"	m	class:cricket::RelayServerConnection
socket_	talk/p2p/base/stunport.h	/^  talk_base::AsyncPacketSocket* socket_;$/;"	m	class:cricket::StunPort
socket_	talk/p2p/base/stunserver.h	/^  talk_base::AsyncUDPSocket* socket_;$/;"	m	class:cricket::StunServer
socket_	talk/p2p/base/tcpport.h	/^  talk_base::AsyncSocket* socket_;$/;"	m	class:cricket::TCPPort
socket_	talk/p2p/base/tcpport.h	/^  talk_base::AsyncTCPSocket* socket_;$/;"	m	class:cricket::TCPConnection
socket_	talk/p2p/base/udpport.h	/^  talk_base::AsyncPacketSocket* socket_;$/;"	m	class:cricket::UDPPort
socket_	talk/session/phone/linphonemediaengine.h	/^  talk_base::scoped_ptr<talk_base::AsyncSocket> socket_;$/;"	m	class:cricket::LinphoneMediaChannel
socket_	talk/xmpp/xmppclient.cc	/^  scoped_ptr<AsyncSocket> socket_;$/;"	m	class:buzz::XmppClient::Private	file:
socket_ctrl	talk/base/openssladapter.cc	/^static long socket_ctrl(BIO* b, int cmd, long num, void* ptr) {$/;"	f	file:
socket_factory	talk/p2p/base/port.h	/^  talk_base::SocketFactory* socket_factory() const { return factory_; }$/;"	f	class:cricket::Port
socket_free	talk/base/openssladapter.cc	/^static int socket_free(BIO* b) {$/;"	f	file:
socket_monitor_	talk/session/phone/voicechannel.h	/^  SocketMonitor *socket_monitor_;$/;"	m	class:cricket::VoiceChannel
socket_new	talk/base/openssladapter.cc	/^static int socket_new(BIO* b) {$/;"	f	file:
socket_puts	talk/base/openssladapter.cc	/^static int socket_puts(BIO* b, const char* str) {$/;"	f	file:
socket_read	talk/base/openssladapter.cc	/^static int socket_read(BIO* b, char* out, int outl) {$/;"	f	file:
socket_write	talk/base/openssladapter.cc	/^static int socket_write(BIO* b, const char* in, int inl) {$/;"	f	file:
socketserver	talk/base/messagequeue.h	/^  SocketServer* socketserver() { return ss_; }$/;"	f	class:talk_base::MessageQueue
socketserver	talk/base/physicalsocketserver.cc	/^  SocketServer* socketserver() { return ss_; }$/;"	f	class:talk_base::FileDispatcher
socketserver	talk/base/physicalsocketserver.cc	/^  SocketServer* socketserver() { return ss_; }$/;"	f	class:talk_base::PhysicalSocket
socklen_t	talk/base/basictypes.h	/^typedef int socklen_t;$/;"	t
sort_dirty_	talk/p2p/base/p2ptransportchannel.h	/^  bool sort_dirty_; \/\/ indicates whether another sort is needed right now$/;"	m	class:cricket::P2PTransportChannel
soundread	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *soundread;$/;"	m	struct:_AudioStream
soundwrite	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *soundwrite;$/;"	m	struct:_AudioStream
source	talk/base/socketaddresspair.h	/^  const SocketAddress& source() const { return src_; }$/;"	f	class:talk_base::SocketAddressPair
source	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *source;$/;"	m	struct:_RingStream
source	talk/third_party/mediastreamer/mediastream.h	/^	MSFilter *source;$/;"	m	struct:_VideoStream
source_path	talk/session/fileshare/fileshare.h	/^    std::string source_path;$/;"	m	struct:cricket::FileShareSession::FileShareDescription
source_path_	talk/session/fileshare/fileshare.h	/^  std::string source_path_;$/;"	m	class:cricket::FileShareSession
specified_credentials	talk/base/httpcommon.cc	/^  bool specified_credentials;$/;"	m	struct:talk_base::NegotiateAuthContext	file:
speex_encode_int	configure	/^speex_encode_int ();$/;"	f
speex_info	talk/third_party/mediastreamer/msspeexdec.c	/^MSCodecInfo speex_info=$/;"	v
speex_state	talk/third_party/mediastreamer/msspeexdec.h	/^	void *speex_state;$/;"	m	struct:_MSSpeexDec
speex_state	talk/third_party/mediastreamer/msspeexenc.h	/^	void *speex_state;$/;"	m	struct:_MSSpeexEnc
sprintfn	talk/base/stringutils.h	/^size_t sprintfn(CTYPE* buffer, size_t buflen, const CTYPE* format, ...) {$/;"	f	namespace:talk_base
src_	talk/base/socketaddresspair.h	/^  SocketAddress src_;$/;"	m	class:talk_base::SocketAddressPair
src_state	talk/third_party/mediastreamer/jackcard.h	/^  SRC_STATE* src_state;$/;"	m	struct:__anon42
srcdir	talk/Makefile	/^srcdir = .$/;"	m
srcdir	talk/base/Makefile	/^srcdir = .$/;"	m
srcdir	talk/examples/Makefile	/^srcdir = .$/;"	m
srcdir	talk/examples/call/Makefile	/^srcdir = .$/;"	m
srcdir	talk/examples/login/Makefile	/^srcdir = .$/;"	m
srcdir	talk/examples/pcp/Makefile	/^srcdir = .$/;"	m
srcdir	talk/p2p/Makefile	/^srcdir = .$/;"	m
srcdir	talk/p2p/base/Makefile	/^srcdir = .$/;"	m
srcdir	talk/p2p/client/Makefile	/^srcdir = .$/;"	m
srcdir	talk/session/Makefile	/^srcdir = .$/;"	m
srcdir	talk/session/fileshare/Makefile	/^srcdir = .$/;"	m
srcdir	talk/session/phone/Makefile	/^srcdir = .$/;"	m
srcdir	talk/session/tunnel/Makefile	/^srcdir = .$/;"	m
srcdir	talk/third_party/Makefile	/^srcdir = .$/;"	m
srcdir	talk/third_party/gips/Makefile	/^srcdir = .$/;"	m
srcdir	talk/third_party/mediastreamer/Makefile	/^srcdir = .$/;"	m
srcdir	talk/xmllite/Makefile	/^srcdir = .$/;"	m
srcdir	talk/xmpp/Makefile	/^srcdir = .$/;"	m
ss_	talk/base/asynchttprequest.h	/^  SocketServer *ss_;$/;"	m	class:talk_base::HttpMonitor
ss_	talk/base/messagequeue.h	/^  SocketServer* ss_;$/;"	m	class:talk_base::MessageQueue
ss_	talk/base/physicalsocketserver.cc	/^  PhysicalSocketServer *ss_;$/;"	m	class:talk_base::EventDispatcher	file:
ss_	talk/base/physicalsocketserver.cc	/^  PhysicalSocketServer* ss_;$/;"	m	class:talk_base::EventDispatcher	file:
ss_	talk/base/physicalsocketserver.cc	/^  PhysicalSocketServer* ss_;$/;"	m	class:talk_base::FileDispatcher	file:
ss_	talk/base/physicalsocketserver.cc	/^  PhysicalSocketServer* ss_;$/;"	m	class:talk_base::PhysicalSocket	file:
ssl_	talk/base/openssladapter.h	/^  SSL* ssl_;$/;"	m	class:talk_base::OpenSSLAdapter
ssl_ctx_	talk/base/openssladapter.h	/^  SSL_CTX* ssl_ctx_;$/;"	m	class:talk_base::OpenSSLAdapter
ssl_host_name_	talk/base/openssladapter.h	/^  std::string ssl_host_name_;$/;"	m	class:talk_base::OpenSSLAdapter
ssl_host_name_	talk/base/schanneladapter.h	/^  std::string ssl_host_name_;$/;"	m	class:talk_base::SChannelAdapter
ssl_read_needs_write_	talk/base/openssladapter.h	/^  bool ssl_read_needs_write_;$/;"	m	class:talk_base::OpenSSLAdapter
ssl_write_needs_read_	talk/base/openssladapter.h	/^  bool ssl_write_needs_read_;$/;"	m	class:talk_base::OpenSSLAdapter
stanzaParseHandler_	talk/xmpp/xmppengineimpl.h	/^  StanzaParseHandler stanzaParseHandler_;$/;"	m	class:buzz::XmppEngineImpl
stanzaParser_	talk/xmpp/xmppengineimpl.h	/^  XmppStanzaParser stanzaParser_;$/;"	m	class:buzz::XmppEngineImpl
stanza_	talk/examples/login/presenceouttask.h	/^  scoped_ptr<XmlElement> stanza_;$/;"	m	class:buzz::PresenceOutTask
stanza_	talk/p2p/client/sessionsendtask.h	/^  talk_base::scoped_ptr<buzz::XmlElement> stanza_;$/;"	m	class:cricket::SessionSendTask
stanza_handlers_	talk/xmpp/xmppengineimpl.h	/^  scoped_ptr<StanzaHandlerVector> stanza_handlers_[HL_COUNT];$/;"	m	class:buzz::XmppEngineImpl
stanza_queue_	talk/xmpp/xmpptask.h	/^  std::deque<XmlElement*> stanza_queue_;$/;"	m	class:buzz::XmppTask
stanzas_	talk/p2p/base/session_unittest.cc	/^  std::deque<XmlElement*> stanzas_;$/;"	m	struct:SessionManagerHandler	file:
start	talk/base/httpclient.cc	/^void HttpClient::start() {$/;"	f	class:talk_base::HttpClient
start	talk/third_party/mediastreamer/msnosync.h	/^	struct timeval start,current;$/;"	m	struct:_MSNoSync	typeref:struct:_MSNoSync::timeval
start	talk/third_party/mediastreamer/mssoundread.h	/^	void (*start)(MSSoundRead *);$/;"	m	struct:_MSSoundReadClass
start	talk/third_party/mediastreamer/mssoundwrite.h	/^	void (*start)(MSSoundWrite *);$/;"	m	struct:_MSSoundWriteClass
start	talk/third_party/mediastreamer/msvideosource.h	/^	void (*start)(MSVideoSource *s);$/;"	m	struct:_MSVideoSourceClass
start_	talk/base/bytebuffer.h	/^  size_t start_;$/;"	m	class:talk_base::ByteBuffer
start_	talk/base/logging.cc	/^uint32 LogMessage::start_ = StartTime();$/;"	m	class:talk_base::LogMessage	file:
start_	talk/base/logging.h	/^  static uint32 start_;$/;"	m	class:talk_base::LogMessage
start_time_	talk/base/task.h	/^  int64 start_time_;$/;"	m	class:talk_base::Task
start_time_	talk/p2p/base/relayport.cc	/^  uint32 start_time_;$/;"	m	class:cricket::AllocateRequest	file:
start_time_	talk/p2p/base/stunport.cc	/^  uint32 start_time_;$/;"	m	class:cricket::StunPortBindingRequest	file:
started	talk/third_party/mediastreamer/msnosync.h	/^	int started;$/;"	m	struct:_MSNoSync
started_	talk/base/thread.h	/^  bool started_;$/;"	m	class:talk_base::Thread
stat_	talk/base/fileutils.h	/^  struct stat stat_;$/;"	m	class:talk_base::DirectoryIterator	typeref:struct:talk_base::DirectoryIterator::stat
state	talk/examples/login/xmppsocket.cc	/^buzz::AsyncSocket::State XmppSocket::state() {$/;"	f	class:XmppSocket
state	talk/p2p/base/session.h	/^  State state() const { return state_; }$/;"	f	class:cricket::Session
state	talk/session/fileshare/fileshare.cc	/^FileShareSession::state() const {$/;"	f	class:cricket::FileShareSession
state	talk/third_party/mediastreamer/msread.h	/^	gint state;$/;"	m	struct:_MSRead
state	talk/third_party/mediastreamer/msringplayer.h	/^	gint state;$/;"	m	struct:_MSRingPlayer
state	talk/third_party/mediastreamer/mstimer.h	/^	gint state;$/;"	m	struct:_MSTimer
state_	talk/base/httpbase.h	/^  } state_;$/;"	m	class:talk_base::HttpParser	typeref:enum:talk_base::HttpParser::State
state_	talk/base/openssladapter.h	/^  SSLState state_;$/;"	m	class:talk_base::OpenSSLAdapter
state_	talk/base/physicalsocketserver.cc	/^  ConnState state_;$/;"	m	class:talk_base::PhysicalSocket	file:
state_	talk/base/schanneladapter.h	/^  SSLState state_;$/;"	m	class:talk_base::SChannelAdapter
state_	talk/base/signalthread.h	/^  enum State { kInit, kRunning, kComplete, kStopping, kReleasing } state_;$/;"	m	class:talk_base::SignalThread	typeref:enum:talk_base::SignalThread::State
state_	talk/base/socketadapters.h	/^  enum SocksState { SS_HELLO, SS_AUTH, SS_CONNECT, SS_TUNNEL, SS_ERROR } state_;$/;"	m	class:talk_base::AsyncSocksProxySocket	typeref:enum:talk_base::AsyncSocksProxySocket::SocksState
state_	talk/base/socketadapters.h	/^  } state_;$/;"	m	class:talk_base::AsyncHttpsProxySocket	typeref:enum:talk_base::AsyncHttpsProxySocket::ProxyState
state_	talk/base/task.h	/^  int state_;$/;"	m	class:talk_base::Task
state_	talk/base/win32socketserver.h	/^  ConnState state_;$/;"	m	class:talk_base::Win32Socket
state_	talk/examples/login/xmpppump.h	/^  buzz::XmppEngine::State state_;$/;"	m	class:XmppPump
state_	talk/examples/login/xmppsocket.h	/^  buzz::AsyncSocket::State state_;$/;"	m	class:XmppSocket
state_	talk/p2p/base/session.h	/^  State state_;$/;"	m	class:cricket::Session
state_	talk/session/fileshare/fileshare.h	/^  FileShareState state_;$/;"	m	class:cricket::FileShareSession
state_	talk/xmpp/xmppengineimpl.h	/^    State state_;$/;"	m	class:buzz::XmppEngineImpl::EnterExit
state_	talk/xmpp/xmppengineimpl.h	/^  State state_;$/;"	m	class:buzz::XmppEngineImpl
state_	talk/xmpp/xmpplogintask.h	/^  LoginTaskState state_;$/;"	m	class:buzz::XmppLoginTask
status	talk/examples/call/callclient.h	/^  std::string status;$/;"	m	struct:RosterItem
status	talk/examples/login/status.h	/^  const std::string & status() const { return status_; }$/;"	f	class:buzz::Status
status_	talk/examples/login/status.h	/^  std::string status_;$/;"	m	class:buzz::Status
std	talk/base/asynctcpsocket.cc	/^namespace std {$/;"	n	file:
std	talk/base/asyncudpsocket.cc	/^namespace std {$/;"	n	file:
std	talk/base/bytebuffer.cc	/^namespace std {$/;"	n	file:
std	talk/base/host.cc	/^namespace std {$/;"	n	file:
std	talk/base/scoped_ptr.h	/^namespace std { using ::ptrdiff_t; };$/;"	n
std	talk/base/stl_decl.h	/^namespace std {$/;"	n
std	talk/p2p/base/port.cc	/^namespace std {$/;"	n	file:
std	talk/p2p/base/relayport.cc	/^namespace std {$/;"	n	file:
std	talk/p2p/base/stun.cc	/^namespace std {$/;"	n	file:
std	talk/p2p/base/stunport.cc	/^namespace std {$/;"	n	file:
std	talk/p2p/base/udpport.cc	/^namespace std {$/;"	n	file:
stdmax	talk/base/common.h	52;"	d
stdmax	talk/base/common.h	54;"	d
step_	talk/p2p/client/basicportallocator.cc	/^  int step_;$/;"	m	class:cricket::AllocationSequence	file:
step_of_phase_	talk/p2p/client/basicportallocator.cc	/^  int step_of_phase_[kNumPhases];$/;"	m	class:cricket::AllocationSequence	file:
steps	talk/base/httpcommon.cc	/^  size_t steps;$/;"	m	struct:talk_base::NegotiateAuthContext	file:
stereo	talk/third_party/mediastreamer/sndcard.h	/^	gint stereo;$/;"	m	struct:_SndCard
stop	talk/third_party/mediastreamer/mssoundread.h	/^	void (*stop)(MSSoundRead*);$/;"	m	struct:_MSSoundReadClass
stop	talk/third_party/mediastreamer/mssoundwrite.h	/^	void (*stop)(MSSoundWrite*);$/;"	m	struct:_MSSoundWriteClass
stop	talk/third_party/mediastreamer/msvideosource.h	/^	void (*stop)(MSVideoSource *s);$/;"	m	struct:_MSVideoSourceClass
stop_cond	talk/third_party/mediastreamer/mssync.h	/^	GCond *stop_cond;$/;"	m	struct:_MSSync
stopcond	talk/third_party/mediastreamer/msv4l.h	/^	GCond *stopcond;$/;"	m	struct:_MSV4l
storage_	talk/base/cryptstring.h	/^  char * storage_;$/;"	m	class:talk_base::FormatCryptString
stored_location_	talk/session/fileshare/fileshare.h	/^  std::vector<std::string> stored_location_;$/;"	m	class:cricket::FileShareSession
str_	talk/base/convert.h	/^  std::string str_;$/;"	m	class:Utf8
str_	talk/base/convert.h	/^  wchar_t *str_;$/;"	m	class:Utf16
str_	talk/base/stream.h	/^  std::string& str_;$/;"	m	class:talk_base::StringStream
str_client	talk/xmpp/constants.cc	/^const std::string & Constants::str_client() {$/;"	f	class:buzz::Constants
str_empty	talk/xmllite/xmlconstants.cc	/^const std::string & XmlConstants::str_empty() {$/;"	f	class:XmlConstants
str_encoding	talk/xmllite/xmlconstants.cc	/^const std::string & XmlConstants::str_encoding() {$/;"	f	class:XmlConstants
str_server	talk/xmpp/constants.cc	/^const std::string & Constants::str_server() {$/;"	f	class:buzz::Constants
str_stream	talk/xmpp/constants.cc	/^const std::string & Constants::str_stream() {$/;"	f	class:buzz::Constants
str_version	talk/xmllite/xmlconstants.cc	/^const std::string & XmlConstants::str_version() {$/;"	f	class:XmlConstants
str_xml	talk/xmllite/xmlconstants.cc	/^const std::string & XmlConstants::str_xml() {$/;"	f	class:XmlConstants
str_xmlns	talk/xmllite/xmlconstants.cc	/^const std::string & XmlConstants::str_xmlns() {$/;"	f	class:XmlConstants
strcatn	talk/base/stringutils.h	/^size_t strcatn(CTYPE* buffer, size_t buflen,$/;"	f	namespace:talk_base
strchr	talk/base/stringutils.h	/^const CTYPE* strchr(const CTYPE* str, const CTYPE* chs) {$/;"	f	namespace:talk_base
strchr	talk/base/stringutils.h	/^inline const wchar_t* strchr(const wchar_t* s, wchar_t c) {$/;"	f
strchrn	talk/base/stringutils.h	/^const CTYPE* strchrn(const CTYPE* str, size_t slen, CTYPE ch) {$/;"	f	namespace:talk_base
strcmp	talk/base/stringutils.h	/^inline int strcmp(const wchar_t* s1, const wchar_t* s2) {$/;"	f
strcpyn	talk/base/stringutils.h	/^size_t strcpyn(CTYPE* buffer, size_t buflen,$/;"	f	namespace:talk_base
stream	talk/base/httpbase.h	/^  StreamInterface* stream() { return stream_; }$/;"	f	class:talk_base::HttpBase
stream	talk/base/logging.h	/^  std::ostream& stream() { return print_stream_; }$/;"	f	class:talk_base::LogMessage
stream	talk/base/streamutils.h	/^    talk_base::StreamInterface* stream;$/;"	m	struct:StreamRelay::Direction
stream	talk/session/tunnel/tunnelsessionclient.cc	/^  talk_base::StreamInterface* stream;$/;"	m	struct:cricket::CreateTunnelData	file:
streamId_	talk/xmpp/xmpplogintask.h	/^  std::string streamId_;$/;"	m	class:buzz::XmppLoginTask
stream_	talk/base/httpbase.h	/^  StreamInterface* stream_;$/;"	m	class:talk_base::HttpBase
stream_	talk/base/logging.cc	/^StreamInterface* LogMessage::stream_;$/;"	m	class:talk_base::LogMessage	file:
stream_	talk/base/logging.h	/^  static StreamInterface * stream_;$/;"	m	class:talk_base::LogMessage
stream_	talk/base/socketpool.h	/^  SocketStream* stream_;$/;"	m	class:talk_base::ReuseSocketPool
stream_	talk/base/stream.h	/^  scoped_ptr<StreamInterface> stream_;$/;"	m	class:talk_base::StreamAdapterInterface
stream_	talk/session/tunnel/pseudotcpchannel.h	/^  InternalStream* stream_;$/;"	m	class:cricket::PseudoTcpChannel
stream_error_	talk/xmpp/xmppengineimpl.h	/^  scoped_ptr<XmlElement> stream_error_;$/;"	m	class:buzz::XmppEngineImpl
stream_readable_	talk/session/tunnel/pseudotcpchannel.h	/^  bool stream_readable_, pending_read_event_;$/;"	m	class:cricket::PseudoTcpChannel
stream_sev_	talk/base/logging.cc	/^int LogMessage::stream_sev_ = NO_LOGGING;$/;"	m	class:talk_base::LogMessage	file:
stream_sev_	talk/base/logging.h	/^  static int min_sev_, dbg_sev_, stream_sev_, ctx_sev_;$/;"	m	class:talk_base::LogMessage
stream_started	talk/third_party/mediastreamer/msrtprecv.h	/^	gint stream_started;$/;"	m	struct:_MSRtpRecv
stream_thread_	talk/session/tunnel/pseudotcpchannel.h	/^  talk_base::Thread* signal_thread_, * worker_thread_, * stream_thread_;$/;"	m	class:cricket::PseudoTcpChannel
streams	talk/base/diskcache.h	/^    size_t streams;$/;"	m	struct:talk_base::DiskCache::Entry
strerror	talk/examples/call/callclient.cc	/^const std::string CallClient::strerror(buzz::XmppEngine::Error err) {$/;"	f	class:CallClient
stricmp	talk/base/common.h	51;"	d
stricmp	talk/base/stringutils.h	/^inline int stricmp(const wchar_t* s1, const wchar_t* s2) {$/;"	f
string	talk/base/httpcommon.h	/^  typedef typename Traits<CTYPE>::string string;$/;"	t	class:talk_base::Url
string	talk/base/stringutils.h	/^  typedef std::string string;$/;"	t	struct:talk_base::Traits
string	talk/base/stringutils.h	/^  typedef std::wstring string;$/;"	t	struct:talk_base::Traits
strlen	talk/base/stringutils.h	/^inline size_t strlen(const wchar_t* s) {$/;"	f
strlenn	talk/base/stringutils.h	/^size_t strlenn(const CTYPE* buffer, size_t buflen) {$/;"	f	namespace:talk_base
strncmp	talk/base/stringutils.h	/^inline int strncmp(const wchar_t* s1, const wchar_t* s2, size_t n) {$/;"	f
strnicmp	talk/base/common.h	50;"	d
strnicmp	talk/base/stringutils.h	/^inline int strnicmp(const wchar_t* s1, const wchar_t* s2, size_t n) {$/;"	f
strstr	talk/base/stringutils.h	/^inline const wchar_t* strstr(const wchar_t* haystack, const wchar_t* needle) {$/;"	f
strtoul	talk/base/stringutils.h	/^inline unsigned long strtoul(const wchar_t* snum, wchar_t** end, int base) {$/;"	f
stun_addr	talk/p2p/base/port_unittest.cc	/^const talk_base::SocketAddress stun_addr = talk_base::SocketAddress("127.0.0.1", STUN_SERVER_PORT);$/;"	v
stun_address	talk/p2p/client/basicportallocator.h	/^  talk_base::SocketAddress stun_address;$/;"	m	struct:cricket::PortConfiguration
stun_address_	talk/p2p/client/basicportallocator.h	/^  talk_base::SocketAddress *stun_address_;$/;"	m	class:cricket::BasicPortAllocatorSession
stun_address_	talk/p2p/client/basicportallocator.h	/^  talk_base::SocketAddress* stun_address_;$/;"	m	class:cricket::BasicPortAllocator
stun_hosts_	talk/p2p/client/httpportallocator.h	/^  std::vector<talk_base::SocketAddress> stun_hosts_;$/;"	m	class:cricket::HttpPortAllocator
stun_hosts_	talk/p2p/client/httpportallocator.h	/^  std::vector<talk_base::SocketAddress> stun_hosts_;$/;"	m	class:cricket::HttpPortAllocatorSession
stun_port_	talk/p2p/base/rawtransportchannel.h	/^  StunPort* stun_port_;$/;"	m	class:cricket::RawTransportChannel
stunserver_DEPENDENCIES	talk/p2p/base/Makefile	/^stunserver_DEPENDENCIES = $(am__DEPENDENCIES_1)$/;"	m
stunserver_LDADD	talk/p2p/base/Makefile	/^stunserver_LDADD = $(P2PLIBS)$/;"	m
stunserver_OBJECTS	talk/p2p/base/Makefile	/^stunserver_OBJECTS = $(am_stunserver_OBJECTS)$/;"	m
stunserver_SOURCES	talk/p2p/base/Makefile	/^stunserver_SOURCES = stunserver.cc stunserver_main.cc$/;"	m
stunserver_unittest_DEPENDENCIES	talk/p2p/base/Makefile	/^stunserver_unittest_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
stunserver_unittest_LDADD	talk/p2p/base/Makefile	/^stunserver_unittest_LDADD = $(P2PLIBS) $(TESTLIBS)$/;"	m
stunserver_unittest_OBJECTS	talk/p2p/base/Makefile	/^stunserver_unittest_OBJECTS = $(am_stunserver_unittest_OBJECTS)$/;"	m
stunserver_unittest_SOURCES	talk/p2p/base/Makefile	/^stunserver_unittest_SOURCES = stunserver_unittest.cc stunserver.cc$/;"	m
subcode_	talk/xmpp/xmppengineimpl.h	/^  int subcode_;$/;"	m	class:buzz::XmppEngineImpl
subdir	talk/Makefile	/^subdir = talk$/;"	m
subdir	talk/base/Makefile	/^subdir = talk\/base$/;"	m
subdir	talk/examples/Makefile	/^subdir = talk\/examples$/;"	m
subdir	talk/examples/call/Makefile	/^subdir = talk\/examples\/call$/;"	m
subdir	talk/examples/login/Makefile	/^subdir = talk\/examples\/login$/;"	m
subdir	talk/examples/pcp/Makefile	/^subdir = talk\/examples\/pcp$/;"	m
subdir	talk/p2p/Makefile	/^subdir = talk\/p2p$/;"	m
subdir	talk/p2p/base/Makefile	/^subdir = talk\/p2p\/base$/;"	m
subdir	talk/p2p/client/Makefile	/^subdir = talk\/p2p\/client$/;"	m
subdir	talk/session/Makefile	/^subdir = talk\/session$/;"	m
subdir	talk/session/fileshare/Makefile	/^subdir = talk\/session\/fileshare$/;"	m
subdir	talk/session/phone/Makefile	/^subdir = talk\/session\/phone$/;"	m
subdir	talk/session/tunnel/Makefile	/^subdir = talk\/session\/tunnel$/;"	m
subdir	talk/third_party/Makefile	/^subdir = talk\/third_party$/;"	m
subdir	talk/third_party/gips/Makefile	/^subdir = talk\/third_party\/gips$/;"	m
subdir	talk/third_party/mediastreamer/Makefile	/^subdir = talk\/third_party\/mediastreamer$/;"	m
subdir	talk/xmllite/Makefile	/^subdir = talk\/xmllite$/;"	m
subdir	talk/xmpp/Makefile	/^subdir = talk\/xmpp$/;"	m
subfolder_	talk/base/tarstream.h	/^  std::string subfolder_;$/;"	m	class:talk_base::TarStream
sum	talk/base/virtualsocket_unittest.cc	/^  double sum;$/;"	m	struct:Receiver	file:
sum_sq	talk/base/virtualsocket_unittest.cc	/^  double sum_sq;$/;"	m	struct:Receiver	file:
supported_freq	talk/third_party/mediastreamer/msringplayer.c	/^static int supported_freq[6]={8000,11025,16000,22050,32000,44100};$/;"	v	file:
supports_http	talk/session/fileshare/fileshare.h	/^    bool supports_http;$/;"	m	struct:cricket::FileShareSession::FileShareDescription
swap	talk/base/scoped_ptr.h	/^  void swap(scoped_array & b) {$/;"	f	class:talk_base::scoped_array
swap	talk/base/scoped_ptr.h	/^  void swap(scoped_ptr & b) {$/;"	f	class:talk_base::scoped_ptr
swap	talk/base/scoped_ptr.h	/^  void swap(scoped_ptr_malloc & b) {$/;"	f	class:talk_base::scoped_ptr_malloc
swap	talk/base/scoped_ptr.h	/^void swap(scoped_array<T>& a, scoped_array<T>& b) {$/;"	f	namespace:talk_base
swap	talk/base/scoped_ptr.h	/^void swap(scoped_ptr<T>& a, scoped_ptr<T>& b) {$/;"	f	namespace:talk_base
swap	talk/base/scoped_ptr.h	/^void swap(scoped_ptr_malloc<T,FF>& a, scoped_ptr_malloc<T,FF>& b) {$/;"	f	namespace:talk_base
swap_buffer	talk/third_party/mediastreamer/msfilter.c	/^void swap_buffer(gchar *buffer, gint len)$/;"	f
symmetric	talk/base/natserver.h	/^  bool symmetric;$/;"	m	struct:talk_base::RouteCmp
sync	talk/third_party/mediastreamer/msnosync.h	/^	MSSync  sync;$/;"	m	struct:_MSNoSync
sync	talk/third_party/mediastreamer/msossread.h	/^	MSSync *sync;$/;"	m	struct:_MSOssRead
sync	talk/third_party/mediastreamer/msread.h	/^	MSSync *sync;$/;"	m	struct:_MSRead
sync	talk/third_party/mediastreamer/msringplayer.h	/^	MSSync *sync;$/;"	m	struct:_MSRingPlayer
sync	talk/third_party/mediastreamer/msrtprecv.h	/^	MSSync *sync;$/;"	m	struct:_MSRtpRecv
sync	talk/third_party/mediastreamer/msrtpsend.h	/^	MSSync *sync;$/;"	m	struct:_MSRtpSend
sync	talk/third_party/mediastreamer/mstimer.h	/^	MSSync  sync;$/;"	m	struct:_MSTimer
synchronize	talk/third_party/mediastreamer/mssync.h	/^	MSSyncSyncFunc synchronize;$/;"	m	struct:_MSSyncClass
sys_audio_manager_init	talk/third_party/mediastreamer/sndcard.c	/^gint sys_audio_manager_init(SndCardManager *manager, gint index)$/;"	f
sysconfdir	talk/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/base/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/examples/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/examples/call/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/examples/login/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/examples/pcp/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/p2p/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/p2p/base/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/p2p/client/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/session/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/session/fileshare/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/session/phone/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/session/tunnel/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/third_party/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/third_party/gips/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/third_party/mediastreamer/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/xmllite/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	talk/xmpp/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
szName	talk/base/thread.cc	/^  LPCSTR szName;$/;"	m	struct:talk_base::tagTHREADNAME_INFO	file:
tagTHREADNAME_INFO	talk/base/thread.cc	/^typedef struct tagTHREADNAME_INFO$/;"	s	namespace:talk_base	file:
talk_base	talk/base/asyncfile.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/asynchttprequest.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/asyncpacketsocket.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/asyncpacketsocket.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/asyncsocket.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/asynctcpsocket.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/asynctcpsocket.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/asyncudpsocket.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/asyncudpsocket.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/autodetectproxy.h	/^namespace talk_base { $/;"	n
talk_base	talk/base/base64.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/base64.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/basictypes.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/bytebuffer.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/bytebuffer.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/byteorder.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/common.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/common.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/criticalsection.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/cryptstring.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/diskcache.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/diskcache.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/diskcache_win32.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/diskcache_win32.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/diskcachestd.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/diskcachestd.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/event.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/fileutils.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/fileutils.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/firewallsocketserver.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/firewallsocketserver.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/host.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/host.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/httpbase.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/httpbase.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/httpclient.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/httpclient.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/httpcommon-inl.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/httpcommon.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/httpcommon.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/httpserver.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/httpserver.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/linked_ptr.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/logging.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/logging.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/messagequeue.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/messagequeue.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/natserver.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/natserver.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/natsocketfactory.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/natsocketfactory.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/nattypes.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/nattypes.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/network.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/network.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/openssladapter.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/openssladapter.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/pathutils.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/pathutils.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/physicalsocketserver.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/physicalsocketserver.h	/^namespace talk_base { $/;"	n
talk_base	talk/base/proxyinfo.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/proxyinfo.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/schanneladapter.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/schanneladapter.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/scoped_ptr.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/sec_buffer.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/signalthread.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/socket.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/socketadapters.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/socketadapters.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/socketaddress.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/socketaddress.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/socketaddresspair.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/socketaddresspair.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/socketfactory.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/socketpool.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/socketpool.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/socketserver.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/socketstream.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/ssladapter.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/ssladapter.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/stream.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/stream.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/stringdigest.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/stringdigest.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/stringencode.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/stringencode.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/stringutils.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/stringutils.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/tarstream.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/task.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/task.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/taskrunner.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/taskrunner.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/testclient.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/testclient.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/thread.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/thread.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/time.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/time.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/unixfilesystem.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/unixfilesystem.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/virtualsocketserver.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/virtualsocketserver.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/win32.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/win32filesystem.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/win32filesystem.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/win32socketserver.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/win32socketserver.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/win32window.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/winfirewall.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/winfirewall.h	/^namespace talk_base {$/;"	n
talk_base	talk/base/winping.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/base/winping.h	/^namespace talk_base {$/;"	n
talk_base	talk/examples/call/callclient.h	/^namespace talk_base {$/;"	n
talk_base	talk/p2p/base/port.h	/^namespace talk_base {$/;"	n
talk_base	talk/p2p/base/relayport.cc	/^namespace talk_base {$/;"	n	file:
talk_base	talk/p2p/base/udpport.h	/^namespace talk_base {$/;"	n
talk_base	talk/p2p/client/httpportallocator.h	/^namespace talk_base {$/;"	n
talk_base	talk/session/fileshare/fileshare.h	/^namespace talk_base {$/;"	n
talk_base	talk/session/tunnel/pseudotcpchannel.h	/^namespace talk_base {$/;"	n
talk_base	talk/xmpp/asyncsocket.h	/^namespace talk_base {$/;"	n
talk_base	talk/xmpp/prexmppauth.h	/^namespace talk_base {$/;"	n
tap_	talk/base/stream.h	/^  scoped_ptr<StreamInterface> tap_;$/;"	m	class:talk_base::StreamTap
tap_error_	talk/base/stream.h	/^  int tap_error_;$/;"	m	class:talk_base::StreamTap
tap_result_	talk/base/stream.h	/^  StreamResult tap_result_;$/;"	m	class:talk_base::StreamTap
target	talk/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/base/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/examples/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/examples/call/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/examples/login/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/examples/pcp/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/p2p/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/p2p/base/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/p2p/client/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/session/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/session/fileshare/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/session/phone/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/session/tunnel/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/third_party/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/third_party/gips/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/third_party/mediastreamer/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/xmllite/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	talk/xmpp/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target_alias	talk/Makefile	/^target_alias = $/;"	m
target_alias	talk/base/Makefile	/^target_alias = $/;"	m
target_alias	talk/examples/Makefile	/^target_alias = $/;"	m
target_alias	talk/examples/call/Makefile	/^target_alias = $/;"	m
target_alias	talk/examples/login/Makefile	/^target_alias = $/;"	m
target_alias	talk/examples/pcp/Makefile	/^target_alias = $/;"	m
target_alias	talk/p2p/Makefile	/^target_alias = $/;"	m
target_alias	talk/p2p/base/Makefile	/^target_alias = $/;"	m
target_alias	talk/p2p/client/Makefile	/^target_alias = $/;"	m
target_alias	talk/session/Makefile	/^target_alias = $/;"	m
target_alias	talk/session/fileshare/Makefile	/^target_alias = $/;"	m
target_alias	talk/session/phone/Makefile	/^target_alias = $/;"	m
target_alias	talk/session/tunnel/Makefile	/^target_alias = $/;"	m
target_alias	talk/third_party/Makefile	/^target_alias = $/;"	m
target_alias	talk/third_party/gips/Makefile	/^target_alias = $/;"	m
target_alias	talk/third_party/mediastreamer/Makefile	/^target_alias = $/;"	m
target_alias	talk/xmllite/Makefile	/^target_alias = $/;"	m
target_alias	talk/xmpp/Makefile	/^target_alias = $/;"	m
target_cpu	talk/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/base/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/examples/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/examples/call/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/examples/login/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/examples/pcp/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/p2p/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/p2p/base/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/p2p/client/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/session/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/session/fileshare/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/session/phone/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/session/tunnel/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/third_party/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/third_party/gips/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/third_party/mediastreamer/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/xmllite/Makefile	/^target_cpu = i686$/;"	m
target_cpu	talk/xmpp/Makefile	/^target_cpu = i686$/;"	m
target_os	talk/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/base/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/examples/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/examples/call/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/examples/login/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/examples/pcp/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/p2p/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/p2p/base/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/p2p/client/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/session/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/session/fileshare/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/session/phone/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/session/tunnel/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/third_party/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/third_party/gips/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/third_party/mediastreamer/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/xmllite/Makefile	/^target_os = linux-gnu$/;"	m
target_os	talk/xmpp/Makefile	/^target_os = linux-gnu$/;"	m
target_triplet	talk/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/base/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/examples/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/examples/call/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/examples/login/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/examples/pcp/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/p2p/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/p2p/base/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/p2p/client/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/session/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/session/fileshare/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/session/phone/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/session/tunnel/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/third_party/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/third_party/gips/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/third_party/mediastreamer/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/xmllite/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	talk/xmpp/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_vendor	talk/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/base/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/examples/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/examples/call/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/examples/login/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/examples/pcp/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/p2p/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/p2p/base/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/p2p/client/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/session/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/session/fileshare/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/session/phone/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/session/tunnel/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/third_party/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/third_party/gips/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/third_party/mediastreamer/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/xmllite/Makefile	/^target_vendor = pc$/;"	m
target_vendor	talk/xmpp/Makefile	/^target_vendor = pc$/;"	m
task_id	talk/xmpp/xmpptask.h	/^  std::string task_id() const { return id_; }$/;"	f	class:buzz::XmppTask
task_rate_manager	talk/xmpp/xmpptask.cc	/^RateLimitManager task_rate_manager;$/;"	v
tasks_	talk/base/taskrunner.h	/^  std::vector<Task *> tasks_;$/;"	m	class:talk_base::TaskRunner
tasks_running_	talk/base/taskrunner.h	/^  bool tasks_running_;$/;"	m	class:talk_base::TaskRunner
tcp_	talk/session/tunnel/pseudotcpchannel.h	/^  PseudoTcp* tcp_;$/;"	m	class:cricket::PseudoTcpChannel
tcpport	talk/p2p/base/tcpport.cc	/^TCPPort* TCPConnection::tcpport() {$/;"	f	class:cricket::TCPConnection
test	talk/base/stringencode.cc	/^int test = utf8_unittest();$/;"	v
test	talk/p2p/base/port_unittest.cc	/^void test(talk_base::Thread* pthMain, const char* name1, Port* port1,$/;"	f
test_audio_dev	talk/third_party/mediastreamer/audiostream.c	/^gint test_audio_dev(int dev_id)$/;"	f
test_bandwidth	talk/base/virtualsocket_unittest.cc	/^void test_bandwidth(Thread* thread, VirtualSocketServer* ss) {$/;"	f
test_basic	talk/base/virtualsocket_unittest.cc	/^void test_basic(Thread* thread, VirtualSocketServer* ss) {$/;"	f
test_delay	talk/base/virtualsocket_unittest.cc	/^void test_delay(Thread* thread, VirtualSocketServer* ss) {$/;"	f
test_relay	talk/p2p/base/port_unittest.cc	/^void test_relay() {$/;"	f
test_stun	talk/p2p/base/port_unittest.cc	/^void test_stun(talk_base::NATType nat1_type, talk_base::NATType nat2_type) {$/;"	f
test_stun	talk/p2p/base/port_unittest.cc	/^void test_stun(talk_base::NATType nat_type) {$/;"	f
test_udp	talk/p2p/base/port_unittest.cc	/^void test_udp() {$/;"	f
text_	talk/xmllite/xmlelement.h	/^  std::string text_;$/;"	m	class:buzz::XmlText
thread	talk/base/thread.h	/^  Thread *thread;$/;"	m	struct:talk_base::_SendMessage
thread	talk/base/virtualsocket_unittest.cc	/^  Thread* thread;$/;"	m	struct:Receiver	file:
thread	talk/base/virtualsocket_unittest.cc	/^  Thread* thread;$/;"	m	struct:Sender	file:
thread	talk/p2p/base/p2ptransportchannel.h	/^  talk_base::Thread* thread() const { return worker_thread_; }$/;"	f	class:cricket::P2PTransportChannel
thread	talk/p2p/base/port.h	/^  talk_base::Thread* thread() { return thread_; }$/;"	f	class:cricket::Port
thread	talk/p2p/base/port_unittest.cc	/^  talk_base::Thread* thread;$/;"	m	struct:Foo	file:
thread	talk/p2p/base/relayserver.h	/^  talk_base::Thread* thread() { return thread_; }$/;"	f	class:cricket::RelayServer
thread	talk/session/tunnel/tunnelsessionclient.cc	/^  talk_base::Thread* thread;$/;"	m	struct:cricket::CreateTunnelData	file:
thread	talk/third_party/mediastreamer/mssync.h	/^	GThread * thread;   \/* the thread ressource if this sync is run by a thread*\/$/;"	m	struct:_MSSync
thread_	talk/base/logging.cc	/^bool LogMessage::thread_, LogMessage::timestamp_;$/;"	m	class:talk_base::LogMessage	file:
thread_	talk/base/logging.h	/^  static bool thread_, timestamp_;$/;"	m	class:talk_base::LogMessage
thread_	talk/base/testclient.h	/^  Thread* thread_;$/;"	m	class:talk_base::TestClient
thread_	talk/base/thread.h	/^  HANDLE thread_;$/;"	m	class:talk_base::Thread
thread_	talk/base/thread.h	/^  pthread_t thread_;$/;"	m	class:talk_base::Thread
thread_	talk/p2p/base/port.h	/^  talk_base::Thread* thread_;$/;"	m	class:cricket::Port
thread_	talk/p2p/base/relayserver.h	/^  talk_base::Thread* thread_;$/;"	m	class:cricket::RelayServer
thread_	talk/p2p/base/stunrequest.h	/^  talk_base::Thread* thread_;$/;"	m	class:cricket::StunRequestManager
thread_cond	talk/third_party/mediastreamer/mssync.h	/^	GCond *thread_cond;$/;"	m	struct:_MSSync
thread_exited	talk/third_party/mediastreamer/msv4l.h	/^	gboolean thread_exited;$/;"	m	struct:_MSV4l
thread_run	talk/third_party/mediastreamer/msv4l.h	/^	gboolean thread_run;$/;"	m	struct:_MSV4l
threads_	talk/base/thread.h	/^  std::vector<Thread *> threads_;$/;"	m	class:talk_base::ThreadManager
ticks	talk/third_party/mediastreamer/mssync.h	/^	guint32 ticks;$/;"	m	struct:_MSSync
time	talk/third_party/mediastreamer/mssync.h	/^	guint32 time;	\/* a time since the start of the sync expressed in milisec*\/$/;"	m	struct:_MSSync
timed_out_	talk/p2p/client/sessionsendtask.h	/^  bool timed_out_;$/;"	m	class:cricket::SessionSendTask
timeout	talk/base/asynchttprequest.h	/^  int timeout() { return timeout_; }$/;"	f	class:talk_base::AsyncHttpRequest
timeout	talk/p2p/client/socketmonitor.h	/^  bool timeout;$/;"	m	struct:cricket::ConnectionInfo
timeout_	talk/base/asynchttprequest.h	/^  int timeout_;$/;"	m	class:talk_base::AsyncHttpRequest
timeout_	talk/p2p/base/sessionmanager.h	/^  int timeout_;$/;"	m	class:cricket::SessionManager
timeout_	talk/p2p/base/stunrequest.h	/^  bool timeout_;$/;"	m	class:cricket::StunRequest
timeout_seconds_	talk/base/task.h	/^  int timeout_seconds_;$/;"	m	class:talk_base::Task
timeout_suspended_	talk/base/task.h	/^  bool timeout_suspended_;$/;"	m	class:talk_base::Task
timeout_time_	talk/base/task.h	/^  int64 timeout_time_;$/;"	m	class:talk_base::Task
timer	talk/third_party/mediastreamer/mediastream.h	/^	MSSync *timer;$/;"	m	struct:_AudioStream
timer	talk/third_party/mediastreamer/mediastream.h	/^	MSSync *timer;$/;"	m	struct:_RingStream
timer	talk/third_party/mediastreamer/mediastream.h	/^	MSSync *timer;$/;"	m	struct:_VideoStream
timestamp_	talk/base/logging.cc	/^bool LogMessage::thread_, LogMessage::timestamp_;$/;"	m	class:talk_base::LogMessage	file:
timestamp_	talk/base/logging.h	/^  static bool thread_, timestamp_;$/;"	m	class:talk_base::LogMessage
tls_	talk/examples/login/xmppsocket.h	/^  bool tls_;$/;"	m	class:XmppSocket
tls_needed_	talk/xmpp/xmppengineimpl.h	/^  bool tls_needed_;$/;"	m	class:buzz::XmppEngineImpl
tls_server_domain_	talk/xmpp/xmppengineimpl.h	/^  std::string tls_server_domain_;$/;"	m	class:buzz::XmppEngineImpl
tls_server_hostname_	talk/xmpp/xmppengineimpl.h	/^  std::string tls_server_hostname_;$/;"	m	class:buzz::XmppEngineImpl
to_	talk/xmpp/xmppengineimpl_iq.cc	/^  const std::string to_;$/;"	m	class:buzz::XmppIqEntry	file:
tolowercase	talk/base/stringutils.h	/^inline char tolowercase(char c) {$/;"	f
tolowercase	talk/base/stringutils.h	/^inline wchar_t tolowercase(wchar_t c) {$/;"	f
top_builddir	talk/Makefile	/^top_builddir = ..$/;"	m
top_builddir	talk/base/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	talk/examples/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	talk/examples/call/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/examples/login/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/examples/pcp/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/p2p/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	talk/p2p/base/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/p2p/client/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/session/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	talk/session/fileshare/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/session/phone/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/session/tunnel/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/third_party/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	talk/third_party/gips/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/third_party/mediastreamer/Makefile	/^top_builddir = ..\/..\/..$/;"	m
top_builddir	talk/xmllite/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	talk/xmpp/Makefile	/^top_builddir = ..\/..$/;"	m
top_srcdir	talk/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	talk/base/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	talk/examples/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	talk/examples/call/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/examples/login/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/examples/pcp/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/p2p/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	talk/p2p/base/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/p2p/client/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/session/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	talk/session/fileshare/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/session/phone/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/session/tunnel/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/third_party/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	talk/third_party/gips/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/third_party/mediastreamer/Makefile	/^top_srcdir = ..\/..\/..$/;"	m
top_srcdir	talk/xmllite/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	talk/xmpp/Makefile	/^top_srcdir = ..\/..$/;"	m
total_accessors_	talk/base/diskcache.h	/^  mutable size_t total_accessors_;$/;"	m	class:talk_base::DiskCache
total_size_	talk/base/diskcache.h	/^  size_t max_cache_, total_size_;$/;"	m	class:talk_base::DiskCache
transaction_id	talk/p2p/base/stun.h	/^  const std::string& transaction_id() const { return transaction_id_; }$/;"	f	class:cricket::StunMessage
transaction_id_	talk/p2p/base/stun.h	/^  std::string transaction_id_;$/;"	m	class:cricket::StunMessage
transactions_	talk/session/fileshare/fileshare.h	/^  TransactionList transactions_;$/;"	m	class:cricket::FileShareSession
transfer_connection_id_	talk/session/fileshare/fileshare.h	/^  int transfer_connection_id_;$/;"	m	class:cricket::FileShareSession
transfer_name_	talk/session/fileshare/fileshare.h	/^  std::string transfer_name_;$/;"	m	class:cricket::FileShareSession
transfer_path_	talk/session/fileshare/fileshare.h	/^  std::string transfer_path_;$/;"	m	class:cricket::FileShareSession
transform	talk/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/base/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/base/stringencode.cc	/^void transform(std::string& value, size_t maxlen, const std::string& source,$/;"	f	namespace:talk_base
transform	talk/examples/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/examples/call/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/examples/login/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/examples/pcp/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/p2p/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/p2p/base/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/p2p/client/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/session/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/session/fileshare/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/session/phone/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/session/tunnel/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/third_party/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/third_party/gips/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/third_party/mediastreamer/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/xmllite/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	talk/xmpp/Makefile	/^transform = $(program_transform_name)$/;"	m
transmit	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::transmit(const SList::iterator& seg, uint32 now) {$/;"	f	class:cricket::PseudoTcp
transport	talk/p2p/base/session.h	/^  Transport* transport() const { return transport_; }$/;"	f	class:cricket::Session
transport_	talk/p2p/base/p2ptransportchannel.h	/^  P2PTransport* transport_;$/;"	m	class:cricket::P2PTransportChannel
transport_	talk/p2p/base/session.h	/^  Transport* transport_;  \/\/ negotiated transport$/;"	m	class:cricket::Session
transport_channel_	talk/session/phone/voicechannel.h	/^  TransportChannel *transport_channel_;$/;"	m	class:cricket::VoiceChannel
transport_name	talk/p2p/base/session_unittest.cc	/^  std::string transport_name;$/;"	m	struct:MySessionClient	file:
ts	talk/third_party/mediastreamer/msrtpsend.h	/^	guint32 ts;$/;"	m	struct:_MSRtpSend
ts_inc	talk/third_party/mediastreamer/msrtpsend.h	/^	guint32 ts_inc;	\/* the timestamp increment *\/$/;"	m	struct:_MSRtpSend
ts_sensitive	talk/base/messagequeue.h	/^  uint32 ts_sensitive;$/;"	m	struct:talk_base::Message
tsecr	talk/p2p/base/pseudotcp.h	/^    uint32 tsval, tsecr;$/;"	m	struct:cricket::PseudoTcp::Segment
tstamp_	talk/p2p/base/stunrequest.h	/^  uint32 tstamp_;$/;"	m	class:cricket::StunRequest
tstring	talk/base/proxydetect.cc	/^typedef std::wstring tstring;$/;"	t	file:
tsval	talk/p2p/base/pseudotcp.h	/^    uint32 tsval, tsecr;$/;"	m	struct:cricket::PseudoTcp::Segment
type	talk/base/proxyinfo.h	/^  ProxyType type;$/;"	m	struct:talk_base::ProxyInfo
type	talk/p2p/base/candidate.h	/^  const std::string & type() const { return type_; }$/;"	f	class:cricket::Candidate
type	talk/p2p/base/port.h	/^  const std::string& type() const { return type_; }$/;"	f	class:cricket::Port
type	talk/p2p/base/stun.h	/^  StunAttributeType type() const {$/;"	f	class:cricket::StunAttribute
type	talk/p2p/base/stun.h	/^  StunMessageType type() const { return static_cast<StunMessageType>(type_); }$/;"	f	class:cricket::StunMessage
type	talk/p2p/base/stunrequest.cc	/^const StunMessageType StunRequest::type() {$/;"	f	class:cricket::StunRequest
type	talk/session/fileshare/fileshare.h	/^    Type type;$/;"	m	struct:cricket::FileShareManifest::Item
type	talk/third_party/mediastreamer/msfilter.h	/^	MSFilterType type;$/;"	m	struct:_MSFilterInfo
type_	talk/base/firewallsocketserver.cc	/^  int type_;$/;"	m	class:talk_base::FirewallSocket	file:
type_	talk/base/virtualsocketserver.cc	/^  int type_;$/;"	m	class:talk_base::VirtualSocket	file:
type_	talk/p2p/base/candidate.h	/^  std::string type_;$/;"	m	class:cricket::Candidate
type_	talk/p2p/base/port.h	/^  std::string type_;$/;"	m	class:cricket::Port
type_	talk/p2p/base/stun.h	/^  uint16 type_;$/;"	m	class:cricket::StunAttribute
type_	talk/p2p/base/stun.h	/^  uint16 type_;$/;"	m	class:cricket::StunMessage
uint16	talk/base/basictypes.h	/^typedef unsigned short uint16;$/;"	t
uint16scheme	talk/third_party/mediastreamer/waveheader.h	/^typedef struct uint16scheme$/;"	s
uint16scheme_t	talk/third_party/mediastreamer/waveheader.h	/^} uint16scheme_t;$/;"	t	typeref:struct:uint16scheme
uint32	talk/base/basictypes.h	/^typedef unsigned long uint32;$/;"	t
uint32	talk/base/md5.h	/^typedef long unsigned int uint32;$/;"	t
uint32scheme	talk/third_party/mediastreamer/waveheader.h	/^typedef struct uint32scheme$/;"	s
uint32scheme_t	talk/third_party/mediastreamer/waveheader.h	/^} uint32scheme_t;$/;"	t	typeref:struct:uint32scheme
uint64	talk/base/basictypes.h	/^typedef unsigned __int64 uint64;$/;"	t
uint64	talk/base/basictypes.h	/^typedef unsigned long long uint64;$/;"	t
uint8	talk/base/basictypes.h	/^typedef unsigned char uint8;$/;"	t
ulaw_to_s16	talk/third_party/mediastreamer/g711common.h	/^static inline int ulaw_to_s16(unsigned char u_val)$/;"	f
unescape	talk/base/stringencode.cc	/^size_t unescape(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
uniform_denominator_	talk/base/network.h	/^  double uniform_denominator_;$/;"	m	class:talk_base::Network
uniform_numerator_	talk/base/network.h	/^  double uniform_numerator_;$/;"	m	class:talk_base::Network
unique	talk/base/linked_ptr.h	/^    bool unique()   const throw()   {return itsPrev ? itsPrev==this : true;}$/;"	f	class:talk_base::linked_ptr
unique_id_	talk/base/task.h	/^  int32 unique_id_;$/;"	m	class:talk_base::Task
unique_id_seed_	talk/base/task.cc	/^int32 Task::unique_id_seed_ = 0;$/;"	m	class:talk_base::Task	file:
unique_id_seed_	talk/base/task.h	/^  static int32 unique_id_seed_;$/;"	m	class:talk_base::Task
unknown_mechanisms_	talk/base/socketadapters.h	/^  std::string unknown_mechanisms_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
unlock	talk/base/sigslot.h	/^		virtual void unlock()$/;"	f	class:sigslot::multi_threaded_global
unlock	talk/base/sigslot.h	/^		virtual void unlock()$/;"	f	class:sigslot::multi_threaded_local
unlock	talk/base/sigslot.h	/^		virtual void unlock()$/;"	f	class:sigslot::single_threaded
unprintable_count_	talk/base/logging.h	/^  size_t unprintable_count_;$/;"	m	class:talk_base::LogMultilineState
unsafe_filename_characters	talk/base/stringencode.cc	/^const char* unsafe_filename_characters() {$/;"	f	namespace:talk_base
unsetup	talk/third_party/mediastreamer/msfilter.h	/^	MSFilterSetupFunc unsetup;	\/* called when detaching from sync *\/$/;"	m	struct:_MSFilterClass
url	talk/base/httpcommon-inl.h	/^typename Traits<CTYPE>::string Url<CTYPE>::url() {$/;"	f	class:talk_base::Url
url	talk/base/pathutils.cc	/^std::string Pathname::url() const {$/;"	f	class:talk_base::Pathname
url_decode	talk/base/stringencode.cc	/^size_t url_decode(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
url_encode	talk/base/stringencode.cc	/^size_t url_encode(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
use	talk/base/scoped_ptr.h	/^  T** use() {$/;"	f	class:talk_base::scoped_ptr
use_absolute_uri	talk/base/httpclient.h	/^  void use_absolute_uri(bool absolute_uri) { absolute_uri_ = absolute_uri; }$/;"	f	class:talk_base::HttpClient
use_cookie_auth_	talk/xmpp/xmppclientsettings.h	/^  bool use_cookie_auth_;$/;"	m	class:buzz::XmppClientSettings
use_ip	talk/base/natserver.h	/^  bool use_ip;$/;"	m	struct:talk_base::AddrCmp
use_mmap	talk/third_party/mediastreamer/msv4l.h	/^	gint use_mmap;$/;"	m	struct:_MSV4l
use_port	talk/base/natserver.h	/^  bool use_port;$/;"	m	struct:talk_base::AddrCmp
use_proxy_auth	talk/xmpp/xmppclientsettings.h	/^  bool use_proxy_auth() const { return use_proxy_auth_; }$/;"	f	class:buzz::XmppClientSettings
use_proxy_auth_	talk/xmpp/xmppclientsettings.h	/^  bool use_proxy_auth_;$/;"	m	class:buzz::XmppClientSettings
use_relay_	talk/p2p/base/rawtransportchannel.h	/^  bool use_relay_;$/;"	m	class:cricket::RawTransportChannel
use_tls	talk/xmpp/xmppclientsettings.h	/^  bool use_tls() const { return use_tls_; }$/;"	f	class:buzz::XmppClientSettings
use_tls_	talk/xmpp/xmppclientsettings.h	/^  bool use_tls_;$/;"	m	class:buzz::XmppClientSettings
use_yuv	talk/third_party/mediastreamer/mssdlout.h	/^	gboolean use_yuv;$/;"	m	struct:_MSSdlOut
used_	talk/base/socketpool.h	/^  std::vector<StreamInterface*> used_;$/;"	m	class:talk_base::NewSocketPool
user	talk/xmpp/xmppclientsettings.h	/^  const std::string & user() const { return user_; }$/;"	f	class:buzz::XmppClientSettings
user_	talk/base/socketadapters.h	/^  std::string agent_, user_, headers_;$/;"	m	class:talk_base::AsyncHttpsProxySocket
user_	talk/base/socketadapters.h	/^  std::string user_;$/;"	m	class:talk_base::AsyncSocksProxySocket
user_	talk/xmpp/xmppclientsettings.h	/^  std::string user_;$/;"	m	class:buzz::XmppClientSettings
user_agent	talk/p2p/base/port.h	/^  static const std::string& user_agent() { return agent_; }$/;"	f	class:cricket::Port
user_agent	talk/p2p/base/portallocator.h	/^  const std::string& user_agent() const { return agent_; }$/;"	f	class:cricket::PortAllocator
user_agent_	talk/session/fileshare/fileshare.h	/^  std::string user_agent_;$/;"	m	class:cricket::FileShareSession
user_agent_	talk/session/fileshare/fileshare.h	/^  std::string user_agent_;$/;"	m	class:cricket::FileShareSessionClient
user_jid_	talk/xmpp/saslplainmechanism.h	/^  Jid user_jid_;$/;"	m	class:buzz::SaslPlainMechanism
user_jid_	talk/xmpp/xmppengineimpl.h	/^  Jid user_jid_;$/;"	m	class:buzz::XmppEngineImpl
userdata	talk/third_party/mediastreamer/msfilter.h	/^	gpointer userdata;$/;"	m	struct:_MSFilter
username	talk/base/proxyinfo.h	/^  std::string username;$/;"	m	struct:talk_base::ProxyInfo
username	talk/p2p/base/candidate.h	/^  const std::string & username() const { return username_; }$/;"	f	class:cricket::Candidate
username	talk/p2p/base/relayserver.h	/^  const std::string& username() { return username_; }$/;"	f	class:cricket::RelayServerBinding
username	talk/p2p/base/session_unittest.cc	/^  std::string username;$/;"	m	struct:SessionManagerHandler	file:
username	talk/p2p/client/basicportallocator.h	/^  std::string username;$/;"	m	struct:cricket::PortConfiguration
username_	talk/p2p/base/candidate.h	/^  std::string username_;$/;"	m	class:cricket::Candidate
username_	talk/p2p/base/relayserver.h	/^  std::string username_;$/;"	m	class:cricket::RelayServerBinding
username_	talk/xmpp/saslcookiemechanism.h	/^  std::string username_;$/;"	m	class:buzz::SaslCookieMechanism
username_frag_	talk/p2p/base/port.h	/^  std::string username_frag_;$/;"	m	class:cricket::Port
username_fragment	talk/p2p/base/port.h	/^  const std::string& username_fragment() const { return username_frag_; }$/;"	f	class:cricket::Port
utf8_decode	talk/base/stringencode.cc	/^size_t utf8_decode(const char* source, size_t srclen, unsigned long* value) {$/;"	f	namespace:talk_base
utf8_encode	talk/base/stringencode.cc	/^size_t utf8_encode(char* buffer, size_t buflen, unsigned long value) {$/;"	f	namespace:talk_base
utf8_unittest	talk/base/stringencode.cc	/^static int utf8_unittest() {$/;"	f	namespace:talk_base	file:
v4lthread	talk/third_party/mediastreamer/msv4l.h	/^	GThread *v4lthread;$/;"	m	struct:_MSV4l
val	talk/base/httpcommon.cc	/^  E val;$/;"	m	struct:talk_base::Enum	file:
val_seg	talk/third_party/mediastreamer/g711common.h	/^static inline int val_seg(int val)$/;"	f
valid	talk/base/httpcommon.h	/^  bool valid() const { return !m_server.empty(); }$/;"	f	class:talk_base::Url
valid_	talk/base/winping.h	/^    bool valid_;$/;"	m	class:talk_base::WinPing
valid_	talk/xmpp/xmppclient.h	/^  bool valid_;$/;"	m	class:buzz::XmppClient
value	talk/base/logging.h	/^struct ConstantLabel { int value; const char * label; };$/;"	m	struct:talk_base::ConstantLabel
value	talk/p2p/base/stun.h	/^  uint32 value() const { return bits_; }$/;"	f	class:cricket::StunUInt32Attribute
value_	talk/xmllite/xmlelement.h	/^  std::string value_;$/;"	m	class:buzz::XmlAttr
vcap	talk/third_party/mediastreamer/msv4l.h	/^	struct video_capture vcap;$/;"	m	struct:_MSV4l	typeref:struct:_MSV4l::video_capture
verb	talk/base/httpcommon.h	/^  HttpVerb verb;$/;"	m	struct:talk_base::HttpRequestData
version	talk/base/httpcommon.h	/^  HttpVersion version;$/;"	m	struct:talk_base::HttpData
version	talk/examples/login/status.h	/^  const std::string & version() const { return version_; }$/;"	f	class:buzz::Status
version	talk/third_party/mediastreamer/msfilter.h	/^	gint version;$/;"	m	struct:_MSFilterInfo
version_	talk/examples/login/status.h	/^  std::string version_;$/;"	m	class:buzz::Status
virtualsocket_unittest_DEPENDENCIES	talk/base/Makefile	/^virtualsocket_unittest_DEPENDENCIES = libcrickettest.la \\$/;"	m
virtualsocket_unittest_LDADD	talk/base/Makefile	/^virtualsocket_unittest_LDADD = libcrickettest.la libcricketbase.la -lpthread$/;"	m
virtualsocket_unittest_OBJECTS	talk/base/Makefile	/^virtualsocket_unittest_OBJECTS = $(am_virtualsocket_unittest_OBJECTS)$/;"	m
virtualsocket_unittest_SOURCES	talk/base/Makefile	/^virtualsocket_unittest_SOURCES = virtualsocket_unittest.cc$/;"	m
vmap	talk/third_party/mediastreamer/msv4l.h	/^	struct video_mmap vmap;$/;"	m	struct:_MSV4l	typeref:struct:_MSV4l::video_mmap
vmbuf	talk/third_party/mediastreamer/msv4l.h	/^	struct video_mbuf vmbuf;$/;"	m	struct:_MSV4l	typeref:struct:_MSV4l::video_mbuf
voice_channel	talk/session/phone/audiomonitor.cc	/^VoiceChannel *AudioMonitor::voice_channel() {$/;"	f	class:cricket::AudioMonitor
voice_channel_	talk/session/phone/audiomonitor.h	/^  VoiceChannel* voice_channel_;$/;"	m	class:cricket::AudioMonitor
vsnprintf	talk/base/stringutils.h	/^inline int vsnprintf(char* buf, size_t n, const char* fmt, va_list args) {$/;"	f
vsnprintf	talk/base/stringutils.h	/^inline int vsnprintf(wchar_t* buf, size_t n, const wchar_t* fmt, va_list args) {$/;"	f
vsprintfn	talk/base/stringutils.h	/^size_t vsprintfn(CTYPE* buffer, size_t buflen, const CTYPE* format,$/;"	f	namespace:talk_base
w_end	talk/third_party/mediastreamer/msfifo.h	/^	gchar * w_end;    \/* when a wr ptr is expected to exceed end_offset,$/;"	m	struct:_MSFifo
w_gran	talk/third_party/mediastreamer/msfifo.h	/^	gint w_gran;						\/*maximum granularity for writing*\/$/;"	m	struct:_MSFifo
w_maxgran	talk/third_party/mediastreamer/msfilter.h	/^	gint w_maxgran;				\/* write maximum granularity (for fifos)*\/$/;"	m	struct:_MSFilterClass
w_offset	talk/third_party/mediastreamer/msfilter.h	/^	gint w_offset;				\/* size of kept samples behind write pointer (for fifos)*\/$/;"	m	struct:_MSFilterClass
wait_version	talk/base/virtualsocketserver.cc	/^  uint32 wait_version;$/;"	m	struct:talk_base::WakeUpMessage	file:
wait_version_	talk/base/virtualsocketserver.h	/^  uint32 wait_version_;$/;"	m	class:talk_base::VirtualSocketServer
waiting_for_file_	talk/examples/pcp/pcp_main.cc	/^  bool waiting_for_file_;$/;"	m	class:FileShareClient	file:
waiting_for_signaling_	talk/p2p/base/p2ptransportchannel.h	/^  bool waiting_for_signaling_;$/;"	m	class:cricket::P2PTransportChannel
was_timed_out_	talk/p2p/base/p2ptransportchannel.h	/^  bool was_timed_out_;$/;"	m	class:cricket::P2PTransportChannel
was_writable_	talk/p2p/base/p2ptransportchannel.h	/^  bool was_writable_;$/;"	m	class:cricket::P2PTransportChannel
wave	talk/third_party/mediastreamer/waveheader.h	/^	char wave[4] ;	\/* "WAVE" (ASCII characters) *\/$/;"	m	struct:_riff_t
wave_header_get_channel	talk/third_party/mediastreamer/waveheader.h	109;"	d
wave_header_get_rate	talk/third_party/mediastreamer/waveheader.h	108;"	d
wave_header_t	talk/third_party/mediastreamer/waveheader.h	/^} wave_header_t;$/;"	t	typeref:struct:_wave_header_t
wave_in_device	talk/session/phone/channelmanager.h	/^    int wave_in_device;$/;"	m	struct:cricket::ChannelManager::AudioOptions
wave_out_device	talk/session/phone/channelmanager.h	/^    int wave_out_device;$/;"	m	struct:cricket::ChannelManager::AudioOptions
waveheader_h	talk/third_party/mediastreamer/waveheader.h	27;"	d
whitelist	talk/base/natserver.h	/^    AddressSet* whitelist;$/;"	m	struct:talk_base::NATServer::TransEntry
width	talk/session/fileshare/fileshare.h	/^    size_t size, width, height;$/;"	m	struct:cricket::FileShareManifest::Item
width	talk/third_party/mediastreamer/msavdecoder.h	/^	int width;$/;"	m	struct:_MSAVDecoder
width	talk/third_party/mediastreamer/mssdlout.h	/^	gint width,height;$/;"	m	struct:_MSSdlOut
width	talk/third_party/mediastreamer/msv4l.h	/^	gint width; \/* the capture image size - can be cropped to output size *\/$/;"	m	struct:_MSV4l
width	talk/third_party/mediastreamer/msvideosource.h	/^	gint width, height;$/;"	m	struct:_MSVideoSource
win	talk/third_party/mediastreamer/msv4l.h	/^	struct video_window win;$/;"	m	struct:_MSV4l	typeref:struct:_MSV4l::video_window
win_firewall	talk/p2p/base/tcpport.cc	/^static talk_base::WinFirewall win_firewall;$/;"	v	file:
wnd	talk/p2p/base/pseudotcp.h	/^    uint16 wnd;$/;"	m	struct:cricket::PseudoTcp::Segment
wnd_	talk/base/win32window.h	/^  HWND wnd_;$/;"	m	class:talk_base::Win32Window
worker_	talk/base/signalthread.h	/^  Worker worker_;$/;"	m	class:talk_base::SignalThread
worker_thread	talk/p2p/base/sessionmanager.h	/^  talk_base::Thread *worker_thread() const { return worker_thread_; }$/;"	f	class:cricket::SessionManager
worker_thread	talk/session/phone/channelmanager.cc	/^talk_base::Thread *ChannelManager::worker_thread() {$/;"	f	class:cricket::ChannelManager
worker_thread	talk/session/phone/voicechannel.cc	/^talk_base::Thread* VoiceChannel::worker_thread() {$/;"	f	class:cricket::VoiceChannel
worker_thread_	talk/examples/call/callclient.h	/^  talk_base::Thread* worker_thread_;$/;"	m	class:CallClient
worker_thread_	talk/p2p/base/p2ptransportchannel.h	/^  talk_base::Thread *worker_thread_;$/;"	m	class:cricket::P2PTransportChannel
worker_thread_	talk/p2p/base/session_unittest.cc	/^  talk_base::Thread* worker_thread_;$/;"	m	class:TestPortAllocator	file:
worker_thread_	talk/p2p/base/session_unittest.cc	/^  talk_base::Thread* worker_thread_;$/;"	m	class:TestPortAllocatorSession	file:
worker_thread_	talk/p2p/base/sessionmanager.h	/^  talk_base::Thread *worker_thread_;$/;"	m	class:cricket::SessionManager
worker_thread_	talk/session/phone/channelmanager.h	/^  talk_base::Thread *worker_thread_;$/;"	m	class:cricket::ChannelManager
worker_thread_	talk/session/tunnel/pseudotcpchannel.h	/^  talk_base::Thread* signal_thread_, * worker_thread_, * stream_thread_;$/;"	m	class:cricket::PseudoTcpChannel
wr_ptr	talk/third_party/mediastreamer/msfifo.h	/^	gchar * wr_ptr;$/;"	m	struct:_MSFifo
writable	talk/base/physicalsocketserver.cc	/^  virtual bool writable() {$/;"	f	class:talk_base::FileDispatcher
writable	talk/base/virtualsocketserver.cc	/^  bool writable() { return false; }$/;"	f	class:talk_base::VirtualSocket
writable	talk/p2p/base/transport.h	/^  bool writable() const { return writable_; }$/;"	f	class:cricket::Transport
writable	talk/p2p/base/transportchannel.h	/^  bool writable() const { return writable_; }$/;"	f	class:cricket::TransportChannel
writable	talk/p2p/client/socketmonitor.h	/^  bool writable;$/;"	m	struct:cricket::ConnectionInfo
writable_	talk/p2p/base/transport.h	/^  bool writable_;$/;"	m	class:cricket::Transport
writable_	talk/p2p/base/transportchannel.h	/^  bool writable_;$/;"	m	class:cricket::TransportChannel
writable_	talk/session/phone/voicechannel.h	/^  bool writable_;$/;"	m	class:cricket::VoiceChannel
write	talk/third_party/mediastreamer/jackcard.h	/^  jackcard_mode_t read, write;$/;"	m	struct:_JackCard
write_handle	talk/third_party/mediastreamer/alsacard.h	/^	snd_pcm_t *write_handle;$/;"	m	struct:_AlsaCard
write_state	talk/p2p/base/port.h	/^  WriteState write_state() const { return write_state_; }$/;"	f	class:cricket::Connection
write_state_	talk/p2p/base/port.h	/^  WriteState write_state_;$/;"	m	class:cricket::Connection
writebuf	talk/third_party/mediastreamer/alsacard.h	/^	gchar *writebuf;$/;"	m	struct:_AlsaCard
writebuf	talk/third_party/mediastreamer/osscard.h	/^	gchar *writebuf;$/;"	m	struct:_OssCard
writepos	talk/third_party/mediastreamer/alsacard.h	/^	gint writepos; $/;"	m	struct:_AlsaCard
writepos	talk/third_party/mediastreamer/osscard.h	/^	gint writepos; $/;"	m	struct:_OssCard
writesize	talk/third_party/mediastreamer/msfifo.h	/^	guint32 writesize;      \/* write pointer on the position where it is possible to write on the MSBuffer *\/$/;"	m	struct:_MSFifo
xcs	talk/examples/login/xmppthread.cc	/^  buzz::XmppClientSettings xcs;$/;"	m	struct:__anon39::LoginData	file:
xmit	talk/p2p/base/pseudotcp.h	/^    uint8 xmit;$/;"	m	struct:cricket::PseudoTcp::SSegment
xml_decode	talk/base/stringencode.cc	/^size_t xml_decode(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
xml_encode	talk/base/stringencode.cc	/^size_t xml_encode(char * buffer, size_t buflen,$/;"	f	namespace:talk_base
xmlnsStack_	talk/xmllite/xmlprinter.cc	/^  XmlnsStack xmlnsStack_;$/;"	m	class:buzz::XmlPrinterImpl	file:
xmlnsstack_	talk/xmllite/xmlparser.h	/^    XmlnsStack xmlnsstack_;$/;"	m	class:buzz::XmlParser::ParseContext
xmpp_client_	talk/examples/call/callclient.h	/^  buzz::XmppClient* xmpp_client_;$/;"	m	class:CallClient
xmpp_client_	talk/examples/pcp/pcp_main.cc	/^  buzz::XmppClient *xmpp_client_;$/;"	m	class:FileShareClient	file:
yuv_buf	talk/third_party/mediastreamer/msavencoder.h	/^	MSBuffer *yuv_buf;$/;"	m	struct:_MSAVEncoder
~AllocateRequest	talk/p2p/base/relayport.cc	/^  virtual ~AllocateRequest() {}$/;"	f	class:cricket::AllocateRequest
~AllocationSequence	talk/p2p/client/basicportallocator.cc	/^AllocationSequence::~AllocationSequence() {$/;"	f	class:cricket::AllocationSequence
~AsyncFile	talk/base/asyncfile.h	/^  virtual ~AsyncFile() {}$/;"	f	class:talk_base::AsyncFile
~AsyncHttpsProxySocket	talk/base/socketadapters.cc	/^AsyncHttpsProxySocket::~AsyncHttpsProxySocket() {$/;"	f	class:talk_base::AsyncHttpsProxySocket
~AsyncPacketSocket	talk/base/asyncpacketsocket.cc	/^AsyncPacketSocket::~AsyncPacketSocket() {$/;"	f	class:talk_base::AsyncPacketSocket
~AsyncSocket	talk/base/asyncsocket.h	/^  virtual ~AsyncSocket() {}$/;"	f	class:talk_base::AsyncSocket
~AsyncSocket	talk/xmpp/asyncsocket.h	/^  virtual ~AsyncSocket() {}$/;"	f	class:buzz::AsyncSocket
~AsyncSocketAdapter	talk/base/asyncsocket.h	/^  virtual ~AsyncSocketAdapter() { delete socket_; }$/;"	f	class:talk_base::AsyncSocketAdapter
~AsyncTCPSocket	talk/base/asynctcpsocket.cc	/^AsyncTCPSocket::~AsyncTCPSocket() {$/;"	f	class:talk_base::AsyncTCPSocket
~AsyncUDPSocket	talk/base/asyncudpsocket.cc	/^AsyncUDPSocket::~AsyncUDPSocket() {$/;"	f	class:talk_base::AsyncUDPSocket
~AudioMonitor	talk/session/phone/audiomonitor.cc	/^AudioMonitor::~AudioMonitor() {$/;"	f	class:cricket::AudioMonitor
~AutoDetectProxy	talk/base/autodetectproxy.cc	/^AutoDetectProxy::~AutoDetectProxy() {$/;"	f	class:AutoDetectProxy
~AutoThread	talk/base/thread.cc	/^AutoThread::~AutoThread() {$/;"	f	class:talk_base::AutoThread
~BasicPortAllocator	talk/p2p/client/basicportallocator.cc	/^BasicPortAllocator::~BasicPortAllocator() {$/;"	f	class:cricket::BasicPortAllocator
~BasicPortAllocatorSession	talk/p2p/client/basicportallocator.cc	/^BasicPortAllocatorSession::~BasicPortAllocatorSession() {$/;"	f	class:cricket::BasicPortAllocatorSession
~BufferedReadAdapter	talk/base/socketadapters.cc	/^BufferedReadAdapter::~BufferedReadAdapter() {$/;"	f	class:talk_base::BufferedReadAdapter
~ByteBuffer	talk/base/bytebuffer.cc	/^ByteBuffer::~ByteBuffer() {$/;"	f	class:talk_base::ByteBuffer
~CSecBuffer	talk/base/sec_buffer.h	/^  ~CSecBuffer() {$/;"	f	class:talk_base::CSecBuffer
~CSecBufferBundle	talk/base/sec_buffer.h	/^  ~CSecBufferBundle() {$/;"	f	class:talk_base::CSecBufferBundle
~CacheLock	talk/base/diskcache.h	/^  ~CacheLock() {$/;"	f	class:talk_base::CacheLock
~Call	talk/session/phone/call.cc	/^Call::~Call() {$/;"	f	class:cricket::Call
~CallClient	talk/examples/call/callclient.cc	/^CallClient::~CallClient() {$/;"	f	class:CallClient
~ChannelManager	talk/session/phone/channelmanager.cc	/^ChannelManager::~ChannelManager() {$/;"	f	class:cricket::ChannelManager
~Connection	talk/base/httpserver.cc	/^HttpServer::Connection::~Connection() {$/;"	f	class:talk_base::HttpServer::Connection
~Connection	talk/p2p/base/port.cc	/^Connection::~Connection() {$/;"	f	class:cricket::Connection
~ConnectionRequest	talk/p2p/base/port.cc	/^  virtual ~ConnectionRequest() {$/;"	f	class:cricket::ConnectionRequest
~CritScope	talk/base/criticalsection.h	/^  ~CritScope() {$/;"	f	class:talk_base::CritScope
~CriticalSection	talk/base/criticalsection.h	/^  ~CriticalSection() {$/;"	f	class:talk_base::CriticalSection
~CryptStringImpl	talk/base/cryptstring.h	/^  virtual ~CryptStringImpl() {}$/;"	f	class:talk_base::CryptStringImpl
~DirectoryIterator	talk/base/fileutils.cc	/^DirectoryIterator::~DirectoryIterator() {$/;"	f	class:talk_base::DirectoryIterator
~DiskCache	talk/base/diskcache.cc	/^DiskCache::~DiskCache() {$/;"	f	class:talk_base::DiskCache
~DiskCacheAdapter	talk/base/diskcache.cc	/^  virtual ~DiskCacheAdapter() {$/;"	f	class:talk_base::DiskCacheAdapter
~DisposeData	talk/base/messagequeue.h	/^  virtual ~DisposeData() { delete data_; }$/;"	f	class:talk_base::DisposeData
~EmptyCryptStringImpl	talk/base/cryptstring.h	/^  virtual ~EmptyCryptStringImpl() {}$/;"	f	class:talk_base::EmptyCryptStringImpl
~EnterExit	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::EnterExit::~EnterExit()  {$/;"	f	class:buzz::XmppEngineImpl::EnterExit
~Event	talk/base/event.h	/^  ~Event() {$/;"	f	class:talk_base::Event
~EventDispatcher	talk/base/physicalsocketserver.cc	/^  virtual ~EventDispatcher() {$/;"	f	class:talk_base::EventDispatcher
~EventDispatcher	talk/base/physicalsocketserver.cc	/^  ~EventDispatcher() {$/;"	f	class:talk_base::EventDispatcher
~FileDispatcher	talk/base/physicalsocketserver.cc	/^  virtual ~FileDispatcher() {$/;"	f	class:talk_base::FileDispatcher
~FileShareSession	talk/session/fileshare/fileshare.cc	/^FileShareSession::~FileShareSession() {$/;"	f	class:cricket::FileShareSession
~FileStream	talk/base/stream.cc	/^FileStream::~FileStream() {$/;"	f	class:talk_base::FileStream
~FirewallManager	talk/base/firewallsocketserver.cc	/^FirewallManager::~FirewallManager() {$/;"	f	class:talk_base::FirewallManager
~FirewallSocketServer	talk/base/firewallsocketserver.cc	/^FirewallSocketServer::~FirewallSocketServer() {$/;"	f	class:talk_base::FirewallSocketServer
~FormatCryptString	talk/base/cryptstring.h	/^  ~FormatCryptString() {$/;"	f	class:talk_base::FormatCryptString
~GipsLiteMediaChannel	talk/session/phone/gipslitemediaengine.h	/^  virtual ~GipsLiteMediaChannel() {$/;"	f	class:cricket::GipsLiteMediaChannel
~GipsLiteMediaEngine	talk/session/phone/gipslitemediaengine.h	/^  ~GipsLiteMediaEngine() {}$/;"	f	class:cricket::GipsLiteMediaEngine
~HttpAuthContext	talk/base/httpcommon.h	/^  virtual ~HttpAuthContext() { }$/;"	f	struct:talk_base::HttpAuthContext
~HttpBase	talk/base/httpbase.cc	/^HttpBase::~HttpBase() {$/;"	f	class:talk_base::HttpBase
~HttpClient	talk/base/httpclient.cc	/^HttpClient::~HttpClient() {$/;"	f	class:talk_base::HttpClient
~HttpData	talk/base/httpcommon.h	/^  virtual ~HttpData() { }$/;"	f	struct:talk_base::HttpData
~HttpListenServer	talk/base/httpserver.cc	/^HttpListenServer::~HttpListenServer() {$/;"	f	class:talk_base::HttpListenServer
~HttpParser	talk/base/httpbase.cc	/^HttpParser::~HttpParser() {$/;"	f	class:talk_base::HttpParser
~HttpPortAllocator	talk/p2p/client/httpportallocator.cc	/^HttpPortAllocator::~HttpPortAllocator() {$/;"	f	class:cricket::HttpPortAllocator
~HttpPortAllocatorSession	talk/p2p/client/httpportallocator.h	/^  ~HttpPortAllocatorSession() {};$/;"	f	class:cricket::HttpPortAllocatorSession
~HttpServer	talk/base/httpserver.cc	/^HttpServer::~HttpServer() {$/;"	f	class:talk_base::HttpServer
~HttpTransaction	talk/base/httpserver.h	/^  ~HttpTransaction() { }$/;"	f	class:talk_base::HttpTransaction
~InsecureCryptStringImpl	talk/base/cryptstring.h	/^  virtual ~InsecureCryptStringImpl() {}$/;"	f	class:talk_base::InsecureCryptStringImpl
~InternalStream	talk/session/tunnel/pseudotcpchannel.cc	/^PseudoTcpChannel::InternalStream::~InternalStream() {$/;"	f	class:cricket::PseudoTcpChannel::InternalStream
~Jid	talk/xmpp/jid.h	/^  ~Jid() {$/;"	f	class:buzz::Jid
~LinphoneMediaChannel	talk/session/phone/linphonemediaengine.cc	/^LinphoneMediaChannel::~LinphoneMediaChannel() {$/;"	f	class:LinphoneMediaChannel
~LinphoneMediaEngine	talk/session/phone/linphonemediaengine.cc	/^LinphoneMediaEngine::~LinphoneMediaEngine() {}$/;"	f	class:LinphoneMediaEngine
~LogMessage	talk/base/logging.cc	/^LogMessage::~LogMessage() {$/;"	f	class:talk_base::LogMessage
~LoggingPoolAdapter	talk/base/socketpool.cc	/^LoggingPoolAdapter::~LoggingPoolAdapter() {$/;"	f	class:talk_base::LoggingPoolAdapter
~LoginData	talk/examples/login/xmppthread.cc	/^  virtual ~LoginData() {}$/;"	f	struct:__anon39::LoginData
~MediaChannel	talk/session/phone/mediachannel.h	/^  virtual ~MediaChannel() {};$/;"	f	class:cricket::MediaChannel
~MemoryStream	talk/base/stream.cc	/^MemoryStream::~MemoryStream() {$/;"	f	class:talk_base::MemoryStream
~MessageData	talk/base/messagequeue.h	/^  virtual ~MessageData() {}$/;"	f	class:talk_base::MessageData
~MessageHandler	talk/base/messagequeue.h	/^  virtual ~MessageHandler() {$/;"	f	class:talk_base::MessageHandler
~MessageQueue	talk/base/messagequeue.cc	/^MessageQueue::~MessageQueue() {$/;"	f	class:talk_base::MessageQueue
~MessageQueueManager	talk/base/messagequeue.cc	/^MessageQueueManager::~MessageQueueManager() {$/;"	f	class:talk_base::MessageQueueManager
~NATServer	talk/base/natserver.cc	/^NATServer::~NATServer() {$/;"	f	class:talk_base::NATServer
~NATSocket	talk/base/natsocketfactory.cc	/^  virtual ~NATSocket() {$/;"	f	class:talk_base::NATSocket
~NegotiateAuthContext	talk/base/httpcommon.cc	/^  virtual ~NegotiateAuthContext() {$/;"	f	struct:talk_base::NegotiateAuthContext
~NewSocketPool	talk/base/socketpool.cc	/^NewSocketPool::~NewSocketPool() {$/;"	f	class:talk_base::NewSocketPool
~NullStream	talk/base/stream.cc	/^NullStream::~NullStream() {$/;"	f	class:talk_base::NullStream
~OpenSSLAdapter	talk/base/openssladapter.cc	/^OpenSSLAdapter::~OpenSSLAdapter() {$/;"	f	class:talk_base::OpenSSLAdapter
~P2PTransport	talk/p2p/base/p2ptransport.cc	/^P2PTransport::~P2PTransport() {$/;"	f	class:cricket::P2PTransport
~P2PTransportChannel	talk/p2p/base/p2ptransportchannel.cc	/^P2PTransportChannel::~P2PTransportChannel() {$/;"	f	class:cricket::P2PTransportChannel
~Packet	talk/base/testclient.cc	/^TestClient::Packet::~Packet() {$/;"	f	class:talk_base::TestClient::Packet
~Packet	talk/base/virtualsocketserver.cc	/^  virtual ~Packet() {$/;"	f	class:talk_base::Packet
~ParseContext	talk/xmllite/xmlparser.cc	/^XmlParser::ParseContext::~ParseContext() {$/;"	f	class:buzz::XmlParser::ParseContext
~PhoneSessionClient	talk/session/phone/phonesessionclient.cc	/^PhoneSessionClient::~PhoneSessionClient() {$/;"	f	class:cricket::PhoneSessionClient
~PhysicalSocket	talk/base/physicalsocketserver.cc	/^  virtual ~PhysicalSocket() {$/;"	f	class:talk_base::PhysicalSocket
~PhysicalSocketServer	talk/base/physicalsocketserver.cc	/^PhysicalSocketServer::~PhysicalSocketServer() {$/;"	f	class:talk_base::PhysicalSocketServer
~PlainSaslHandler	talk/xmpp/plainsaslhandler.h	/^  virtual ~PlainSaslHandler() {}$/;"	f	class:buzz::PlainSaslHandler
~Port	talk/p2p/base/port.cc	/^Port::~Port() {$/;"	f	class:cricket::Port
~PortAllocatorSession	talk/p2p/base/portallocator.h	/^  virtual ~PortAllocatorSession() {}$/;"	f	class:cricket::PortAllocatorSession
~PreXmppAuth	talk/xmpp/prexmppauth.h	/^  virtual ~PreXmppAuth() {}$/;"	f	class:buzz::PreXmppAuth
~PresenceOutTask	talk/examples/login/presenceouttask.h	/^  virtual ~PresenceOutTask() {}$/;"	f	class:buzz::PresenceOutTask
~PseudoTcp	talk/p2p/base/pseudotcp.cc	/^PseudoTcp::~PseudoTcp() {$/;"	f	class:cricket::PseudoTcp
~PseudoTcpChannel	talk/session/tunnel/pseudotcpchannel.cc	/^PseudoTcpChannel::~PseudoTcpChannel() {$/;"	f	class:cricket::PseudoTcpChannel
~QName	talk/xmllite/qname.cc	/^QName::~QName() {$/;"	f	class:buzz::QName
~RateLimit	talk/xmpp/ratelimitmanager.h	/^    ~RateLimit() {$/;"	f	class:buzz::RateLimitManager::RateLimit
~RateLimitManager	talk/xmpp/ratelimitmanager.h	/^  ~RateLimitManager() { $/;"	f	class:buzz::RateLimitManager
~RawTransport	talk/p2p/base/rawtransport.cc	/^RawTransport::~RawTransport() {$/;"	f	class:cricket::RawTransport
~RawTransportChannel	talk/p2p/base/rawtransportchannel.cc	/^RawTransportChannel::~RawTransportChannel() {$/;"	f	class:cricket::RawTransportChannel
~Receiver	talk/base/virtualsocket_unittest.cc	/^  ~Receiver() {$/;"	f	struct:Receiver
~RelayEntry	talk/p2p/base/relayport.cc	/^RelayEntry::~RelayEntry() {$/;"	f	class:cricket::RelayEntry
~RelayPort	talk/p2p/base/relayport.cc	/^RelayPort::~RelayPort() {$/;"	f	class:cricket::RelayPort
~RelayServer	talk/p2p/base/relayserver.cc	/^RelayServer::~RelayServer() {$/;"	f	class:cricket::RelayServer
~RelayServerBinding	talk/p2p/base/relayserver.cc	/^RelayServerBinding::~RelayServerBinding() {$/;"	f	class:cricket::RelayServerBinding
~RelayServerConnection	talk/p2p/base/relayserver.cc	/^RelayServerConnection::~RelayServerConnection() {$/;"	f	class:cricket::RelayServerConnection
~ReuseSocketPool	talk/base/socketpool.cc	/^ReuseSocketPool::~ReuseSocketPool() {$/;"	f	class:talk_base::ReuseSocketPool
~SChannelAdapter	talk/base/schanneladapter.cc	/^SChannelAdapter::~SChannelAdapter() {$/;"	f	class:talk_base::SChannelAdapter
~SaslHandler	talk/xmpp/saslhandler.h	/^  virtual ~SaslHandler() {}$/;"	f	class:buzz::SaslHandler
~SaslMechanism	talk/xmpp/saslmechanism.h	/^  virtual ~SaslMechanism() {}$/;"	f	class:buzz::SaslMechanism
~Session	talk/p2p/base/session.cc	/^Session::~Session() {$/;"	f	class:cricket::Session
~SessionClient	talk/p2p/base/sessionclient.h	/^  virtual ~SessionClient() { }$/;"	f	class:cricket::SessionClient
~SessionDescription	talk/p2p/base/sessiondescription.h	/^  virtual ~SessionDescription() {}$/;"	f	class:cricket::SessionDescription
~SessionManager	talk/p2p/base/sessionmanager.cc	/^SessionManager::~SessionManager() {$/;"	f	class:cricket::SessionManager
~SessionManagerTask	talk/p2p/client/sessionmanagertask.h	/^  ~SessionManagerTask() {$/;"	f	class:cricket::SessionManagerTask
~SessionSendTask	talk/p2p/client/sessionsendtask.h	/^  virtual ~SessionSendTask() {$/;"	f	class:cricket::SessionSendTask
~SignalThread	talk/base/signalthread.cc	/^SignalThread::~SignalThread() {$/;"	f	class:SignalThread
~Signaler	talk/base/physicalsocketserver.cc	/^  virtual ~Signaler() { }$/;"	f	class:talk_base::Signaler
~Socket	talk/base/socket.h	/^  virtual ~Socket() {}$/;"	f	class:talk_base::Socket
~SocketDispatcher	talk/base/physicalsocketserver.cc	/^  virtual ~SocketDispatcher() {$/;"	f	class:talk_base::SocketDispatcher
~SocketFactory	talk/base/socketfactory.h	/^  virtual ~SocketFactory() {}$/;"	f	class:talk_base::SocketFactory
~SocketMonitor	talk/p2p/client/socketmonitor.cc	/^SocketMonitor::~SocketMonitor() {$/;"	f	class:cricket::SocketMonitor
~SocketStream	talk/base/socketstream.h	/^  virtual ~SocketStream() { delete socket_; }$/;"	f	class:talk_base::SocketStream
~Status	talk/examples/login/status.h	/^  ~Status() {}$/;"	f	class:buzz::Status
~StreamCache	talk/base/socketpool.cc	/^StreamCache::~StreamCache() {$/;"	f	class:talk_base::StreamCache
~StreamInterface	talk/base/stream.h	/^  virtual ~StreamInterface() { }$/;"	f	class:talk_base::StreamInterface
~StreamPool	talk/base/socketpool.h	/^  virtual ~StreamPool() { }$/;"	f	class:talk_base::StreamPool
~StreamRelay	talk/base/streamutils.cc	/^StreamRelay::~StreamRelay() {$/;"	f	class:StreamRelay
~StunAttribute	talk/p2p/base/stun.h	/^  virtual ~StunAttribute() {}$/;"	f	class:cricket::StunAttribute
~StunByteStringAttribute	talk/p2p/base/stun.cc	/^StunByteStringAttribute::~StunByteStringAttribute() {$/;"	f	class:cricket::StunByteStringAttribute
~StunErrorCodeAttribute	talk/p2p/base/stun.cc	/^StunErrorCodeAttribute::~StunErrorCodeAttribute() {$/;"	f	class:cricket::StunErrorCodeAttribute
~StunMessage	talk/p2p/base/stun.cc	/^StunMessage::~StunMessage() {$/;"	f	class:cricket::StunMessage
~StunPort	talk/p2p/base/stunport.cc	/^StunPort::~StunPort() {$/;"	f	class:cricket::StunPort
~StunPortBindingRequest	talk/p2p/base/stunport.cc	/^  virtual ~StunPortBindingRequest() {$/;"	f	class:cricket::StunPortBindingRequest
~StunRequest	talk/p2p/base/stunrequest.cc	/^StunRequest::~StunRequest() {$/;"	f	class:cricket::StunRequest
~StunRequestManager	talk/p2p/base/stunrequest.cc	/^StunRequestManager::~StunRequestManager() {$/;"	f	class:cricket::StunRequestManager
~StunServer	talk/p2p/base/stunserver.cc	/^StunServer::~StunServer() {$/;"	f	class:cricket::StunServer
~StunTransportPrefsAttribute	talk/p2p/base/stun.cc	/^StunTransportPrefsAttribute::~StunTransportPrefsAttribute() {$/;"	f	class:cricket::StunTransportPrefsAttribute
~StunUInt16ListAttribute	talk/p2p/base/stun.cc	/^StunUInt16ListAttribute::~StunUInt16ListAttribute() {$/;"	f	class:cricket::StunUInt16ListAttribute
~TCPConnection	talk/p2p/base/tcpport.cc	/^TCPConnection::~TCPConnection() {$/;"	f	class:cricket::TCPConnection
~TCPPort	talk/p2p/base/tcpport.cc	/^TCPPort::~TCPPort() {$/;"	f	class:cricket::TCPPort
~TarStream	talk/base/tarstream.cc	/^TarStream::~TarStream() {$/;"	f	class:TarStream
~Task	talk/base/task.h	/^  virtual ~Task() {}$/;"	f	class:talk_base::Task
~TaskRunner	talk/base/taskrunner.cc	/^TaskRunner::~TaskRunner() {$/;"	f	class:talk_base::TaskRunner
~TestClient	talk/base/testclient.cc	/^TestClient::~TestClient() {$/;"	f	class:talk_base::TestClient
~TestPortAllocatorSession	talk/p2p/base/session_unittest.cc	/^  ~TestPortAllocatorSession() {$/;"	f	class:TestPortAllocatorSession
~Thread	talk/base/thread.cc	/^Thread::~Thread() {$/;"	f	class:talk_base::Thread
~ThreadManager	talk/base/thread.cc	/^ThreadManager::~ThreadManager() {$/;"	f	class:talk_base::ThreadManager
~TransEntry	talk/base/natserver.cc	/^NATServer::TransEntry::~TransEntry() {$/;"	f	class:talk_base::NATServer::TransEntry
~Transport	talk/p2p/base/transport.cc	/^Transport::~Transport() {$/;"	f	class:cricket::Transport
~TransportChannel	talk/p2p/base/transportchannel.h	/^  virtual ~TransportChannel() {}$/;"	f	class:cricket::TransportChannel
~TransportChannelProxy	talk/p2p/base/transportchannelproxy.cc	/^TransportChannelProxy::~TransportChannelProxy() {$/;"	f	class:cricket::TransportChannelProxy
~TunnelSession	talk/session/tunnel/tunnelsessionclient.cc	/^TunnelSession::~TunnelSession() {$/;"	f	class:cricket::TunnelSession
~TunnelSessionClient	talk/session/tunnel/tunnelsessionclient.cc	/^TunnelSessionClient::~TunnelSessionClient() {$/;"	f	class:cricket::TunnelSessionClient
~UDPPort	talk/p2p/base/udpport.cc	/^UDPPort::~UDPPort() {$/;"	f	class:cricket::UDPPort
~Utf16	talk/base/convert.h	/^  ~Utf16() {$/;"	f	class:Utf16
~VirtualSocket	talk/base/virtualsocketserver.cc	/^  ~VirtualSocket() {$/;"	f	class:talk_base::VirtualSocket
~VirtualSocketServer	talk/base/virtualsocketserver.cc	/^VirtualSocketServer::~VirtualSocketServer() {$/;"	f	class:talk_base::VirtualSocketServer
~VoiceChannel	talk/session/phone/voicechannel.cc	/^VoiceChannel::~VoiceChannel() {$/;"	f	class:cricket::VoiceChannel
~WakeUpMessage	talk/base/virtualsocketserver.cc	/^  virtual ~WakeUpMessage() {}$/;"	f	struct:talk_base::WakeUpMessage
~Win32Socket	talk/base/win32socketserver.cc	/^Win32Socket::~Win32Socket() {$/;"	f	class:talk_base::Win32Socket
~Win32SocketServer	talk/base/win32socketserver.cc	/^Win32SocketServer::~Win32SocketServer() {$/;"	f	class:talk_base::Win32SocketServer
~WinFirewall	talk/base/winfirewall.cc	/^WinFirewall::~WinFirewall() {$/;"	f	class:talk_base::WinFirewall
~WinPing	talk/base/winping.cc	/^WinPing::~WinPing() {$/;"	f	class:talk_base::WinPing
~WinsockInitializer	talk/base/physicalsocketserver.cc	/^  ~WinsockInitializer() {$/;"	f	class:WinsockInitializer
~XmlBuilder	talk/xmllite/xmlbuilder.cc	/^XmlBuilder::~XmlBuilder() {$/;"	f	class:buzz::XmlBuilder
~XmlChild	talk/xmllite/xmlelement.cc	/^XmlChild::~XmlChild() {$/;"	f	class:buzz::XmlChild
~XmlElement	talk/xmllite/xmlelement.cc	/^XmlElement::~XmlElement() {$/;"	f	class:buzz::XmlElement
~XmlParser	talk/xmllite/xmlparser.cc	/^XmlParser::~XmlParser() {$/;"	f	class:buzz::XmlParser
~XmlText	talk/xmllite/xmlelement.cc	/^XmlText::~XmlText() {$/;"	f	class:buzz::XmlText
~XmlnsStack	talk/xmllite/xmlnsstack.cc	/^XmlnsStack::~XmlnsStack() {}$/;"	f	class:buzz::XmlnsStack
~XmppAuth	talk/examples/login/xmppauth.cc	/^XmppAuth::~XmppAuth() {$/;"	f	class:XmppAuth
~XmppClient	talk/xmpp/xmppclient.cc	/^XmppClient::~XmppClient() {$/;"	f	class:buzz::XmppClient
~XmppEngine	talk/xmpp/xmppengine.h	/^  virtual ~XmppEngine() {}$/;"	f	class:buzz::XmppEngine
~XmppEngineImpl	talk/xmpp/xmppengineimpl.cc	/^XmppEngineImpl::~XmppEngineImpl() {$/;"	f	class:buzz::XmppEngineImpl
~XmppLoginTask	talk/xmpp/xmpplogintask.cc	/^XmppLoginTask::~XmppLoginTask() {$/;"	f	class:buzz::XmppLoginTask
~XmppSocket	talk/examples/login/xmppsocket.cc	/^XmppSocket::~XmppSocket() {$/;"	f	class:XmppSocket
~XmppTask	talk/xmpp/xmpptask.cc	/^XmppTask::~XmppTask() {$/;"	f	class:buzz::XmppTask
~XmppThread	talk/examples/login/xmppthread.cc	/^XmppThread::~XmppThread() {$/;"	f	class:XmppThread
~_signal_base0	talk/base/sigslot.h	/^		~_signal_base0()$/;"	f	class:sigslot::_signal_base0
~_signal_base1	talk/base/sigslot.h	/^		~_signal_base1()$/;"	f	class:sigslot::_signal_base1
~_signal_base2	talk/base/sigslot.h	/^		~_signal_base2()$/;"	f	class:sigslot::_signal_base2
~_signal_base3	talk/base/sigslot.h	/^		~_signal_base3()$/;"	f	class:sigslot::_signal_base3
~_signal_base4	talk/base/sigslot.h	/^		~_signal_base4()$/;"	f	class:sigslot::_signal_base4
~_signal_base5	talk/base/sigslot.h	/^		~_signal_base5()$/;"	f	class:sigslot::_signal_base5
~_signal_base6	talk/base/sigslot.h	/^		~_signal_base6()$/;"	f	class:sigslot::_signal_base6
~_signal_base7	talk/base/sigslot.h	/^		~_signal_base7()$/;"	f	class:sigslot::_signal_base7
~_signal_base8	talk/base/sigslot.h	/^		~_signal_base8()$/;"	f	class:sigslot::_signal_base8
~has_slots	talk/base/sigslot.h	/^		virtual ~has_slots()$/;"	f	class:sigslot::has_slots
~linked_ptr	talk/base/linked_ptr.h	/^    ~linked_ptr()$/;"	f	class:talk_base::linked_ptr
~lock_block	talk/base/sigslot.h	/^		~lock_block()$/;"	f	class:sigslot::lock_block
~multi_threaded_global	talk/base/sigslot.h	/^		virtual ~multi_threaded_global()$/;"	f	class:sigslot::multi_threaded_global
~multi_threaded_local	talk/base/sigslot.h	/^		virtual ~multi_threaded_local()$/;"	f	class:sigslot::multi_threaded_local
~scoped_array	talk/base/scoped_ptr.h	/^  ~scoped_array() {$/;"	f	class:talk_base::scoped_array
~scoped_ptr	talk/base/scoped_ptr.h	/^  ~scoped_ptr() {$/;"	f	class:talk_base::scoped_ptr
~scoped_ptr_malloc	talk/base/scoped_ptr.h	/^  ~scoped_ptr_malloc() {$/;"	f	class:talk_base::scoped_ptr_malloc
~single_threaded	talk/base/sigslot.h	/^		virtual ~single_threaded()$/;"	f	class:sigslot::single_threaded
