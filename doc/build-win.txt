Requirements
------------

* You need Qt 4.4 or higher to build Jabbin.

* You need QCA 2.0 and the QCA OpenSSL plugin, which you can get at
		http://delta.affinix.com/qca/2.0/beta2

* You need Speex library 1.2rc1 sources which you can get at
		http://www.speex.org/downloads/ 

* You need libexpat-2.0.1 which you can get at
		http://sourceforge.net/projects/expat/ 

* You need Microsoft DirectX SDK, which you can get at :
		for Visual Studio 2005
		http://www.microsoft.com/downloads/details.aspx?FamilyId=0BAF2B35-C656-4969-ACE8-E4C0C0716ADB&displaylang=en
		for Visual Studio 2008
		http://www.microsoft.com/downloads/details.aspx?FamilyID=e6e1c3df-a74f-4207-8586-711ebe331cdc&DisplayLang=en

* You need to download and install the OpenSSL package (full package, about 7mb for 32 or 64bit) from
		http://www.openssl.org/related/binaries.html

* You need to download and build Portaudio from
		svn co https://www.portaudio.com/repos/portaudio/trunk in c:\portaudio

		optionally you can install ASIO SDK :
		download ASIO SDK from http://www.steinberg.net/en/company/3rd_party_developer.html

		copy ASIO SDK contents to portaudio/src/hostapi/asio folder (you could have to rename ASIOSDK2 to ASIOSDK to make the build works)

		be sure that the Microsoft DirectX SDK include directory is included in  Tools > Options > Projects and Solutions > VC++ Directories > Include Files

		be sure that the Microsoft DirectX SDK lib directory is included in  Tools > Options > Projects and Solutions > VC++ Directories > Lib Files

		build portaudio using the portaudio VS project inside build\msvc directory

		based on VS version and configuration copy build\msvc\win32\release\portaudio_x86.lib to c:\portaudio\lib


Building Jabbin
---------------

for Visual Studio 2005
run "C:\Program Files\Microsoft SDKs\Windows\v6.1\Bin\setenv.cmd"

for Visual Studio 2008
run "c:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\SetEnv.Cmd"
run "c:\Program Files\Microsoft DirectX SDK (March 2009)\Utilities\bin\dx_setenv.cmd"

Download and install qt-sdk-win-opensource-xxxxx.exe.  

Install into the default c:\qt\xxxxx.  It contains MingGW (the gcc toolset for Windows) and Qt Creator, and pre-built binaries built by GCC.  You can use this installation as-is if you want to experiment with Qt Creator.

Copy the entire folder of c:\qt\xxxxx\ to c:\qt\4.x.x (where the x.x is QT version.revision number. In our tests we will use 2).  We will be modifying c:\qt\4.5.2 to build the libraries with VC++.  Both directories can co-exist.  Use the c:\qt\2009.01 with Qt Creator, and use c:\qt\4.5.2 with Visual Studio.  

Open a command prompt and run Configure to target platform win32-msvc2005 (substitute win32-msvc2008 for VC2008): 
                c:\> cd c:\qt\4.5.2\qt
                c:\qt\4.5.2\qt> configure -platform win32-msvc2005
 
In the above command-line, change the Configure command-line parameters as desired, but be sure to specify -platform to target the desired Visual Studio toolset.  Run Configure with no parameters to see a help screen.  Configure generates nmake compatible makefiles to build all the libraries.

Run "nmake" to build.  NOTE:  You may need to execute Visual Studio's VCVARS32.BAT (located in e.g. "C:\Program Files\VS2005\VC\bin") to setup the environment (such as path) to find the VC++ tools like nmake, etc.

It will take a while

in case you get an error on the webkit compilation, delete :
rm src/3rdparty/webkit/WebCore/tmp/moc/{debug,release}_shared/mocinclude.tmp

Install expat 2.0.1 sources and compile using win32 Visual Studio project file

Install speex1.2rc1 sources and compile using win32 Visual Studio project files suitable for your IDE

Install OpenSSL sources and compile

download jabbin sources using SVN

cd to jabbin sources directory

qmake

nmake release

in case you get an error on missing ui_test.h in src\tools\yastuff\yawidgets\newselfavatar\main.cpp

cd src\tools\yastuff\yawidgets\newselfavatar
c:\qt\4.5.2\qt\bin\uic.exe -o ui_test.h test.ui

to create Visual Studio project file after successfuly having built Jabbin :
qmake -t vcapp
